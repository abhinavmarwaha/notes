{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":"python","separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Abhinav's Notes \u00b6 Collection of my notes.","title":"Home"},{"location":"#abhinavs-notes","text":"Collection of my notes.","title":"Abhinav's Notes"},{"location":"Search%20%26%20Sort/Search/exponential/","text":"Exponential Search \u00b6 Time : O(Log n) Space : O(Log n) / O(1) useful : for unbounded searches, where size of array is infinite. search is closer to the first element Idea : Find range where element is present Do Binary Search in above found range. How to find the range where element may be present? The idea is to start with subarray size 1, compare its last element with x, then try size 2, then 4 and so on until last element of a subarray is not greater. Once we find an index i (after repeated doubling of i), we know that the element must be present between i/2 and i (Why i/2? because we could not find a greater value in previous iteration) int exponentialSearch(int arr[], int n, int x) { if (arr[0] == x) return 0; int i = 1; while (i < n && arr[i] <= x) i = i*2; return binarySearch(arr, i/2, min(i, n-1), x); } Ternery Search \u00b6 The following is recursive formula for counting comparisons in worst case of Binary Search. T(n) = T(n/2) + 2, T(1) = 1 The following is recursive formula for counting comparisons in worst case of Ternary Search. T(n) = T(n/3) + 4, T(1) = 1 In binary search, there are 2Log2n + 1 comparisons in worst case. In ternary search, there are 4Log3n + 1 comparisons in worst case. Time Complexity for Binary search = 2clog2n + O(1) Time Complexity for Ternary search = 4clog3n + O(1) Therefore, the comparison of Ternary and Binary Searches boils down the comparison of expressions 2Log3n and Log2n . The value of 2Log3n can be written as (2 / Log23) * Log2n . Since the value of (2 / Log23) is more than one, Ternary Search does more comparisons than Binary Search in worst case. Exercise: Why Merge Sort divides input array in two halves, why not in three or more parts? int ternarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid1 = l + (r - l)/3; int mid2 = mid1 + (r - l)/3; if (arr[mid1] == x) return mid1; if (arr[mid2] == x) return mid2; if (arr[mid1] > x) return ternarySearch(arr, l, mid1-1, x); if (arr[mid2] < x) return ternarySearch(arr, mid2+1, r, x); return ternarySearch(arr, mid1+1, mid2-1, x); } return -1; }","title":"Exponential"},{"location":"Search%20%26%20Sort/Search/exponential/#exponential-search","text":"Time : O(Log n) Space : O(Log n) / O(1) useful : for unbounded searches, where size of array is infinite. search is closer to the first element Idea : Find range where element is present Do Binary Search in above found range. How to find the range where element may be present? The idea is to start with subarray size 1, compare its last element with x, then try size 2, then 4 and so on until last element of a subarray is not greater. Once we find an index i (after repeated doubling of i), we know that the element must be present between i/2 and i (Why i/2? because we could not find a greater value in previous iteration) int exponentialSearch(int arr[], int n, int x) { if (arr[0] == x) return 0; int i = 1; while (i < n && arr[i] <= x) i = i*2; return binarySearch(arr, i/2, min(i, n-1), x); }","title":"Exponential Search"},{"location":"Search%20%26%20Sort/Search/exponential/#ternery-search","text":"The following is recursive formula for counting comparisons in worst case of Binary Search. T(n) = T(n/2) + 2, T(1) = 1 The following is recursive formula for counting comparisons in worst case of Ternary Search. T(n) = T(n/3) + 4, T(1) = 1 In binary search, there are 2Log2n + 1 comparisons in worst case. In ternary search, there are 4Log3n + 1 comparisons in worst case. Time Complexity for Binary search = 2clog2n + O(1) Time Complexity for Ternary search = 4clog3n + O(1) Therefore, the comparison of Ternary and Binary Searches boils down the comparison of expressions 2Log3n and Log2n . The value of 2Log3n can be written as (2 / Log23) * Log2n . Since the value of (2 / Log23) is more than one, Ternary Search does more comparisons than Binary Search in worst case. Exercise: Why Merge Sort divides input array in two halves, why not in three or more parts? int ternarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid1 = l + (r - l)/3; int mid2 = mid1 + (r - l)/3; if (arr[mid1] == x) return mid1; if (arr[mid2] == x) return mid2; if (arr[mid1] > x) return ternarySearch(arr, l, mid1-1, x); if (arr[mid2] < x) return ternarySearch(arr, mid2+1, r, x); return ternarySearch(arr, mid1+1, mid2-1, x); } return -1; }","title":"Ternery Search"},{"location":"Search%20%26%20Sort/Search/interpolation/","text":"interpolation Search \u00b6 requirements : sorted array time : uniformly distributed -> O (log log n). worst case -> O(n). space : O(1) Improved over binary when the data is uniformaly distributed pos = lo + [ (x-arr[lo])*(hi-lo) / (arr[hi]-arr[Lo]) ] Iterative \u00b6 int interpolationSearch(int arr[], int n, int x) { int lo = 0, hi = (n - 1); while (lo <= hi && x >= arr[lo] && x <= arr[hi]) { if (lo == hi) { if (arr[lo] == x) return lo; return -1; } int pos = lo + (((double)(hi - lo) / (arr[hi] - arr[lo])) * (x - arr[lo])); if (arr[pos] == x) return pos; if (arr[pos] < x) lo = pos + 1; else hi = pos - 1; } return -1; } Reursive \u00b6 int interpolationSearch(int arr[], int lo, int hi, int x) { int pos; if ( lo <= hi && x >= arr[lo] && x <= arr[hi]) { pos = lo + (((double)( hi - lo ) / (arr[hi] - arr[lo])) * (x - arr[lo])); if( arr[pos] == x ) return pos; if( arr[pos] < x ) return interpolationSearch(arr, pos + 1, hi, x); if( arr[pos] > x ) return interpolationSearch(arr, lo, pos - 1, x); } return -1; } Interpolation vs Binary \u00b6 log(log(n)) comparisons -> uniformly distributed In the worst case: (for instance where the numerical values of the keys increase exponentially) It can make up to O(n) comparisons.","title":"Interpolation"},{"location":"Search%20%26%20Sort/Search/interpolation/#interpolation-search","text":"requirements : sorted array time : uniformly distributed -> O (log log n). worst case -> O(n). space : O(1) Improved over binary when the data is uniformaly distributed pos = lo + [ (x-arr[lo])*(hi-lo) / (arr[hi]-arr[Lo]) ]","title":"interpolation Search"},{"location":"Search%20%26%20Sort/Search/interpolation/#iterative","text":"int interpolationSearch(int arr[], int n, int x) { int lo = 0, hi = (n - 1); while (lo <= hi && x >= arr[lo] && x <= arr[hi]) { if (lo == hi) { if (arr[lo] == x) return lo; return -1; } int pos = lo + (((double)(hi - lo) / (arr[hi] - arr[lo])) * (x - arr[lo])); if (arr[pos] == x) return pos; if (arr[pos] < x) lo = pos + 1; else hi = pos - 1; } return -1; }","title":"Iterative"},{"location":"Search%20%26%20Sort/Search/interpolation/#reursive","text":"int interpolationSearch(int arr[], int lo, int hi, int x) { int pos; if ( lo <= hi && x >= arr[lo] && x <= arr[hi]) { pos = lo + (((double)( hi - lo ) / (arr[hi] - arr[lo])) * (x - arr[lo])); if( arr[pos] == x ) return pos; if( arr[pos] < x ) return interpolationSearch(arr, pos + 1, hi, x); if( arr[pos] > x ) return interpolationSearch(arr, lo, pos - 1, x); } return -1; }","title":"Reursive"},{"location":"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary","text":"log(log(n)) comparisons -> uniformly distributed In the worst case: (for instance where the numerical values of the keys increase exponentially) It can make up to O(n) comparisons.","title":"Interpolation vs Binary"},{"location":"Search%20%26%20Sort/Search/intro/","text":"Searching \u00b6 best -> binary and hash tables Linear Search \u00b6 O(n) -> time int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) if (arr[i] == x) return i; return -1; } Improve Linear Search Worst-Case Complexity if element Found at last O(n) to O(1) if element Not found O(n) to O(n/2) by running right and left pointers public static void search(int arr[], int search_Element) { int left = 0; int length = arr.length; int right = length - 1; int position = -1; for (left = 0; left <= right;) { if (arr[left] == search_Element) { position = left; System.out.println( \"Element found in Array at \" + (position + 1) + \" Position with \" + (left + 1) + \" Attempt\"); break; } if (arr[right] == search_Element) { position = right; System.out.println( \"Element found in Array at \" + (position + 1) + \" Position with \" + (length - right) + \" Attempt\"); break; } left++; right--; } if (position == -1) System.out.println(\"Not found in Array with \" + left + \" Attempt\"); } Binary Search \u00b6 requirements : sorted array time : theta(logn) Auxiliary Space : O(1) -> iterative, O(Logn) -> recursion Problem -> m = (l+r)/2 might overflow \u00b6 use -> mid = low + ((high - low) / 2); in java .. faster -> mid = (low + high) >>> 1; in c++ ... -> mid = ((unsigned int)low + (unsigned int)high)) >> 1 http://locklessinc.com/articles/binary_search/ ----> above solutions may not always work. The above problem occurs when array length is 230 or greater and the search repeatedly moves to second half of the array. This much size of array is not likely to appear most of the time. For example, when we try the below program with 32 bit Code Blocks compiler, we get compiler error. int main() { int arr[1<<30]; return 0; } error: size of array 'arr' is too large Even when we try boolean array, the program compiles fine, but crashes when run in Windows 7.0 and Code Blocks 32 bit compiler #include <stdbool.h> int main() { bool arr[1<<30]; return 0; } Output: No compiler error, but crashes at run time. Recursive \u00b6 int binarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; } Iterative \u00b6 int binarySearch(int arr[], int l, int r, int x) { while (l <= r) { int m = l + (r - l) / 2; if (arr[m] == x) return m; if (arr[m] < x) l = m + 1; else r = m - 1; } return -1; }","title":"Searching"},{"location":"Search%20%26%20Sort/Search/intro/#searching","text":"best -> binary and hash tables","title":"Searching"},{"location":"Search%20%26%20Sort/Search/intro/#linear-search","text":"O(n) -> time int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) if (arr[i] == x) return i; return -1; } Improve Linear Search Worst-Case Complexity if element Found at last O(n) to O(1) if element Not found O(n) to O(n/2) by running right and left pointers public static void search(int arr[], int search_Element) { int left = 0; int length = arr.length; int right = length - 1; int position = -1; for (left = 0; left <= right;) { if (arr[left] == search_Element) { position = left; System.out.println( \"Element found in Array at \" + (position + 1) + \" Position with \" + (left + 1) + \" Attempt\"); break; } if (arr[right] == search_Element) { position = right; System.out.println( \"Element found in Array at \" + (position + 1) + \" Position with \" + (length - right) + \" Attempt\"); break; } left++; right--; } if (position == -1) System.out.println(\"Not found in Array with \" + left + \" Attempt\"); }","title":"Linear Search"},{"location":"Search%20%26%20Sort/Search/intro/#binary-search","text":"requirements : sorted array time : theta(logn) Auxiliary Space : O(1) -> iterative, O(Logn) -> recursion","title":"Binary Search"},{"location":"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow","text":"use -> mid = low + ((high - low) / 2); in java .. faster -> mid = (low + high) >>> 1; in c++ ... -> mid = ((unsigned int)low + (unsigned int)high)) >> 1 http://locklessinc.com/articles/binary_search/ ----> above solutions may not always work. The above problem occurs when array length is 230 or greater and the search repeatedly moves to second half of the array. This much size of array is not likely to appear most of the time. For example, when we try the below program with 32 bit Code Blocks compiler, we get compiler error. int main() { int arr[1<<30]; return 0; } error: size of array 'arr' is too large Even when we try boolean array, the program compiles fine, but crashes when run in Windows 7.0 and Code Blocks 32 bit compiler #include <stdbool.h> int main() { bool arr[1<<30]; return 0; } Output: No compiler error, but crashes at run time.","title":"Problem -&gt; m = (l+r)/2 might overflow"},{"location":"Search%20%26%20Sort/Search/intro/#recursive","text":"int binarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; }","title":"Recursive"},{"location":"Search%20%26%20Sort/Search/intro/#iterative","text":"int binarySearch(int arr[], int l, int r, int x) { while (l <= r) { int m = l + (r - l) / 2; if (arr[m] == x) return m; if (arr[m] < x) l = m + 1; else r = m - 1; } return -1; }","title":"Iterative"},{"location":"Search%20%26%20Sort/Search/jump/","text":"Jump Search \u00b6 requirements : sorted array time : O(\u221an) space : O(1) Find arr[km] < x < arr[(k+1)m] then perform linear search Optimal Jump Size -> m = root(n) -> min<(n/m) + m-1)> O(n) > jump > O (Log n) Binary Search > Jump Search element smallest or largest -> jump better we traverse once. int jumpSearch(int arr[], int x, int n) { int step = sqrt(n); int prev = 0; while (arr[min(step, n)-1] < x) { prev = step; step += sqrt(n); if (prev >= n) return -1; } while (arr[prev] < x) { prev++; if (prev == min(step, n)) return -1; } if (arr[prev] == x) return prev; return -1; }","title":"Jump"},{"location":"Search%20%26%20Sort/Search/jump/#jump-search","text":"requirements : sorted array time : O(\u221an) space : O(1) Find arr[km] < x < arr[(k+1)m] then perform linear search Optimal Jump Size -> m = root(n) -> min<(n/m) + m-1)> O(n) > jump > O (Log n) Binary Search > Jump Search element smallest or largest -> jump better we traverse once. int jumpSearch(int arr[], int x, int n) { int step = sqrt(n); int prev = 0; while (arr[min(step, n)-1] < x) { prev = step; step += sqrt(n); if (prev >= n) return -1; } while (arr[prev] < x) { prev++; if (prev == min(step, n)) return -1; } if (arr[prev] == x) return prev; return -1; }","title":"Jump Search"},{"location":"Search%20%26%20Sort/Sort/intro/","text":"Selection Sort \u00b6 Time : O(n2) Space : O(1) it never makes more than O(n) swap useful when memory write is a costly operation. not stable, in place Input : 4A 5 3 2 4B 1 Output : 1 2 3 4B 4A 5 Swapping might impact in pushing a key(let\u2019s say A) to a position greater than the key(let\u2019s say B) which are equal keys. which makes them out of desired order. if want stable -> Selection sort can be made Stable if instead of swapping, the minimum element is placed in its position without swapping i.e. by placing the number in its position by pushing every element one step forward. void swap(int *xp, int *yp) { int temp = *xp; *xp = *yp; *yp = temp; } void selectionSort(int arr[], int n) { int i, j, min_idx; for (i = 0; i < n-1; i++) { min_idx = i; for (j = i+1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j; swap(&arr[min_idx], &arr[i]); } } Stable \u00b6 void stableSelectionSort(int a[], int n) { for (int i = 0; i < n - 1; i++) { int min = i; for (int j = i + 1; j < n; j++) if (a[min] > a[j]) min = j; int key = a[min]; while (min > i) { a[min] = a[min - 1]; min--; } a[i] = key; } } Bubble sort \u00b6 optimisation : O(n^2) time even if the array is sorted. It can be optimized by stopping the algorithm if inner loop didn\u2019t cause any swap. void bubbleSort(int arr[], int n) { int i, j; for (i = 0; i < n-1; i++) for (j = 0; j < n-i-1; j++) if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); } Worst and Average Case Time Complexity: O(n*n). Worst case occurs when array is reverse sorted. Best Case Time Complexity: O(n). Best case occurs when array is already sorted. Auxiliary Space: O(1) Boundary Cases: Bubble sort takes minimum time (Order of n) when elements are already sorted. Sorting In Place: Yes Stable: Yes In computer graphics it is popular for its capability to detect a very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific scan line (a line parallel to x axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines. Insertion Sort \u00b6 void insertionSort(int arr[], int n) { int i, key, j; for (i = 1; i < n; i++) { key = arr[i]; j = i - 1; while (j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } Time Complexity: O(n*2) Auxiliary Space: O(1) Boundary Cases: Insertion sort takes maximum time to sort if elements are sorted in reverse order. And it takes minimum time (Order of n) when elements are already sorted. Algorithmic Paradigm: Incremental Approach Sorting In Place: Yes Stable: Yes Online: Yes Uses: Insertion sort is used when number of elements is small. It can also be useful when input array is almost sorted, only few elements are misplaced in complete big array. What is Binary Insertion Sort? We can use binary search to reduce the number of comparisons in normal insertion sort. Binary Insertion Sort uses binary search to find the proper location to insert the selected item at each iteration. In normal insertion, sorting takes O(i) (at ith iteration) in worst case. We can reduce it to O(logi) by using binary search. The algorithm, as a whole, still has a running worst case running time of O(n2) because of the series of swaps required for each insertion. Refer this for implementation. How to implement Insertion Sort for Linked List? Below is simple insertion sort algorithm for linked list. 1) Create an empty sorted (or result) list 2) Traverse the given list, do following for every node. ......a) Insert current node in sorted way in sorted or result list. 3) Change head of given linked list to head of sorted (or result) list. Lower bound for comparison based sorting \u00b6 Input: . Output: permutation / reordering -> when a\u20181 <= a\u20182 \u2026.. <= a\u2018n. uses comparison operators decision trees. A decision tree -> full binary tree that represents the comparisons between elements that are performed by a particular sorting algorithm operating on an input of a given size. tracing a path from the root of the decision tree to a leaf. At each internal node, a comparison ai <= aj is made. left subtree -> ai <= aj. right subtree -> ai > aj. When reach leaf, ordering is done. 1) n! permutations on n -> leaves for the sorting algorithm to sort properly. 2) x -> maximum number 3) maximum height of the decison tree_ -> x. 4) A tree with maximum height x has at most 2^x leaves. n! <= 2^x Taking Log on both sides. log2(n!) <= x As log2(n!) = \u0398(nLogn) => x = \u03a9(nLog2n) Hence Heapsort, merge sort -> asymptotically optimal comparison sorts. minimum number of memory writes? \u00b6 Some huge data set is very expensive -> EEPROMs or Flash memory -> each write reduces the lifespan of the memory. Selection Sort makes least number of writes (it makes O(n) swaps). Cycle Sort -> zero times -> correct position or written one time to its correct position. Hence Cycle Sort","title":"Selection Sort"},{"location":"Search%20%26%20Sort/Sort/intro/#selection-sort","text":"Time : O(n2) Space : O(1) it never makes more than O(n) swap useful when memory write is a costly operation. not stable, in place Input : 4A 5 3 2 4B 1 Output : 1 2 3 4B 4A 5 Swapping might impact in pushing a key(let\u2019s say A) to a position greater than the key(let\u2019s say B) which are equal keys. which makes them out of desired order. if want stable -> Selection sort can be made Stable if instead of swapping, the minimum element is placed in its position without swapping i.e. by placing the number in its position by pushing every element one step forward. void swap(int *xp, int *yp) { int temp = *xp; *xp = *yp; *yp = temp; } void selectionSort(int arr[], int n) { int i, j, min_idx; for (i = 0; i < n-1; i++) { min_idx = i; for (j = i+1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j; swap(&arr[min_idx], &arr[i]); } }","title":"Selection Sort"},{"location":"Search%20%26%20Sort/Sort/intro/#stable","text":"void stableSelectionSort(int a[], int n) { for (int i = 0; i < n - 1; i++) { int min = i; for (int j = i + 1; j < n; j++) if (a[min] > a[j]) min = j; int key = a[min]; while (min > i) { a[min] = a[min - 1]; min--; } a[i] = key; } }","title":"Stable"},{"location":"Search%20%26%20Sort/Sort/intro/#bubble-sort","text":"optimisation : O(n^2) time even if the array is sorted. It can be optimized by stopping the algorithm if inner loop didn\u2019t cause any swap. void bubbleSort(int arr[], int n) { int i, j; for (i = 0; i < n-1; i++) for (j = 0; j < n-i-1; j++) if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); } Worst and Average Case Time Complexity: O(n*n). Worst case occurs when array is reverse sorted. Best Case Time Complexity: O(n). Best case occurs when array is already sorted. Auxiliary Space: O(1) Boundary Cases: Bubble sort takes minimum time (Order of n) when elements are already sorted. Sorting In Place: Yes Stable: Yes In computer graphics it is popular for its capability to detect a very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific scan line (a line parallel to x axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines.","title":"Bubble sort"},{"location":"Search%20%26%20Sort/Sort/intro/#insertion-sort","text":"void insertionSort(int arr[], int n) { int i, key, j; for (i = 1; i < n; i++) { key = arr[i]; j = i - 1; while (j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } Time Complexity: O(n*2) Auxiliary Space: O(1) Boundary Cases: Insertion sort takes maximum time to sort if elements are sorted in reverse order. And it takes minimum time (Order of n) when elements are already sorted. Algorithmic Paradigm: Incremental Approach Sorting In Place: Yes Stable: Yes Online: Yes Uses: Insertion sort is used when number of elements is small. It can also be useful when input array is almost sorted, only few elements are misplaced in complete big array. What is Binary Insertion Sort? We can use binary search to reduce the number of comparisons in normal insertion sort. Binary Insertion Sort uses binary search to find the proper location to insert the selected item at each iteration. In normal insertion, sorting takes O(i) (at ith iteration) in worst case. We can reduce it to O(logi) by using binary search. The algorithm, as a whole, still has a running worst case running time of O(n2) because of the series of swaps required for each insertion. Refer this for implementation. How to implement Insertion Sort for Linked List? Below is simple insertion sort algorithm for linked list. 1) Create an empty sorted (or result) list 2) Traverse the given list, do following for every node. ......a) Insert current node in sorted way in sorted or result list. 3) Change head of given linked list to head of sorted (or result) list.","title":"Insertion Sort"},{"location":"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting","text":"Input: . Output: permutation / reordering -> when a\u20181 <= a\u20182 \u2026.. <= a\u2018n. uses comparison operators decision trees. A decision tree -> full binary tree that represents the comparisons between elements that are performed by a particular sorting algorithm operating on an input of a given size. tracing a path from the root of the decision tree to a leaf. At each internal node, a comparison ai <= aj is made. left subtree -> ai <= aj. right subtree -> ai > aj. When reach leaf, ordering is done. 1) n! permutations on n -> leaves for the sorting algorithm to sort properly. 2) x -> maximum number 3) maximum height of the decison tree_ -> x. 4) A tree with maximum height x has at most 2^x leaves. n! <= 2^x Taking Log on both sides. log2(n!) <= x As log2(n!) = \u0398(nLogn) => x = \u03a9(nLog2n) Hence Heapsort, merge sort -> asymptotically optimal comparison sorts.","title":"Lower bound for comparison based sorting"},{"location":"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes","text":"Some huge data set is very expensive -> EEPROMs or Flash memory -> each write reduces the lifespan of the memory. Selection Sort makes least number of writes (it makes O(n) swaps). Cycle Sort -> zero times -> correct position or written one time to its correct position. Hence Cycle Sort","title":"minimum number of memory writes?"},{"location":"Search%20%26%20Sort/Sort/merge/","text":"Merge Sort \u00b6 Dummy nodes \u00b6 The strategy here uses a temporary dummy node as the start of the result list. The pointer Tail always points to the last node in the result list, so appending new nodes is easy. The dummy node gives the tail something to point to initially when the result list is empty. This dummy node is efficient, since it is only temporary, and it is allocated in the stack. The loop proceeds, removing one node from either \u2018a\u2019 or \u2018b\u2019, and adding it to the tail. When We are done, the result is in dummy.next. void MergeSort(Node** headRef) { Node* head = *headRef; Node* a; Node* b; if ((head == NULL) || (head->next == NULL)) { return; } FrontBackSplit(head, &a, &b); MergeSort(&a); MergeSort(&b); *headRef = SortedMerge(a, b); } Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; if (a == NULL) return (b); else if (b == NULL) return (a); if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return (result); } void FrontBackSplit(Node* source, Node** frontRef, Node** backRef) { Node* fast; Node* slow; slow = source; fast = source->next; /* Advance 'fast' two nodes, and advance 'slow' one node */ while (fast != NULL) { fast = fast->next; if (fast != NULL) { slow = slow->next; fast = fast->next; } } /* 'slow' is before the midpoint in the list, so split it in two at that point. */ *frontRef = source; *backRef = slow->next; slow->next = NULL; } Local Reference \u00b6 lastPtrRef is same as dummy node (this is tail before was head) Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; Node** lastPtrRef = &result; while(1) { if (a == NULL) { *lastPtrRef = b; break; } else if (b==NULL) { *lastPtrRef = a; break; } if(a->data <= b->data) { MoveNode(lastPtrRef, &a); } else { MoveNode(lastPtrRef, &b); } lastPtrRef = &((*lastPtrRef)->next); } return(result); } Recursive (Space is more... Prodution XXX) \u00b6 Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; if (a == NULL) return(b); else if (b == NULL) return(a); if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return(result); } // O(n Log n) // Merge sort is often preferred for sorting a linked list. The slow random-access performance of a linked list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible. // sorting image // Let head be the first node of the linked list to be sorted and headRef be the pointer to head. Note that we need a reference to head in MergeSort() as the below implementation changes next links to sort the linked lists (not data at the nodes), so head node has to be changed if the data at the original head is not the smallest value in the linked list. #include <bits/stdc++.h> using namespace std; /* Link list node */ class Node { public: int data; Node* next; }; /* function prototypes */ Node* SortedMerge(Node* a, Node* b); void FrontBackSplit(Node* source, Node** frontRef, Node** backRef); /* sorts the linked list by changing next pointers (not data) */ void MergeSort(Node** headRef) { Node* head = *headRef; Node* a; Node* b; /* Base case -- length 0 or 1 */ if ((head == NULL) || (head->next == NULL)) { return; } /* Split head into 'a' and 'b' sublists */ FrontBackSplit(head, &a, &b); /* Recursively sort the sublists */ MergeSort(&a); MergeSort(&b); /* answer = merge the two sorted lists together */ *headRef = SortedMerge(a, b); } /* See https:// www.geeksforgeeks.org/?p=3622 for details of this function */ Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; /* Base cases */ if (a == NULL) return (b); else if (b == NULL) return (a); /* Pick either a or b, and recur */ if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return (result); } /* UTILITY FUNCTIONS */ /* Split the nodes of the given list into front and back halves, and return the two lists using the reference parameters. If the length is odd, the extra node should go in the front list. Uses the fast/slow pointer strategy. */ void FrontBackSplit(Node* source, Node** frontRef, Node** backRef) { Node* fast; Node* slow; slow = source; fast = source->next; /* Advance 'fast' two nodes, and advance 'slow' one node */ while (fast != NULL) { fast = fast->next; if (fast != NULL) { slow = slow->next; fast = fast->next; } } /* 'slow' is before the midpoint in the list, so split it in two at that point. */ *frontRef = source; *backRef = slow->next; slow->next = NULL; } /* Function to print nodes in a given linked list */ void printList(Node* node) { while (node != NULL) { cout << node->data << \" \"; node = node->next; } } /* Function to insert a node at the beginging of the linked list */ void push(Node** head_ref, int new_data) { /* allocate node */ Node* new_node = new Node(); /* put in the data */ new_node->data = new_data; /* link the old list off the new node */ new_node->next = (*head_ref); /* move the head to point to the new node */ (*head_ref) = new_node; } /* Driver program to test above functions*/ int main() { /* Start with the empty list */ Node* res = NULL; Node* a = NULL; /* Let us create a unsorted linked lists to test the functions Created lists shall be a: 2->3->20->5->10->15 */ push(&a, 15); push(&a, 10); push(&a, 5); push(&a, 20); push(&a, 3); push(&a, 2); /* Sort the above created Linked List */ MergeSort(&a); cout << \"Sorted Linked List is: \\n\"; printList(a); return 0; } // This is code is contributed by rathbhupendra","title":"Merge Sort"},{"location":"Search%20%26%20Sort/Sort/merge/#merge-sort","text":"","title":"Merge Sort"},{"location":"Search%20%26%20Sort/Sort/merge/#dummy-nodes","text":"The strategy here uses a temporary dummy node as the start of the result list. The pointer Tail always points to the last node in the result list, so appending new nodes is easy. The dummy node gives the tail something to point to initially when the result list is empty. This dummy node is efficient, since it is only temporary, and it is allocated in the stack. The loop proceeds, removing one node from either \u2018a\u2019 or \u2018b\u2019, and adding it to the tail. When We are done, the result is in dummy.next. void MergeSort(Node** headRef) { Node* head = *headRef; Node* a; Node* b; if ((head == NULL) || (head->next == NULL)) { return; } FrontBackSplit(head, &a, &b); MergeSort(&a); MergeSort(&b); *headRef = SortedMerge(a, b); } Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; if (a == NULL) return (b); else if (b == NULL) return (a); if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return (result); } void FrontBackSplit(Node* source, Node** frontRef, Node** backRef) { Node* fast; Node* slow; slow = source; fast = source->next; /* Advance 'fast' two nodes, and advance 'slow' one node */ while (fast != NULL) { fast = fast->next; if (fast != NULL) { slow = slow->next; fast = fast->next; } } /* 'slow' is before the midpoint in the list, so split it in two at that point. */ *frontRef = source; *backRef = slow->next; slow->next = NULL; }","title":"Dummy nodes"},{"location":"Search%20%26%20Sort/Sort/merge/#local-reference","text":"lastPtrRef is same as dummy node (this is tail before was head) Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; Node** lastPtrRef = &result; while(1) { if (a == NULL) { *lastPtrRef = b; break; } else if (b==NULL) { *lastPtrRef = a; break; } if(a->data <= b->data) { MoveNode(lastPtrRef, &a); } else { MoveNode(lastPtrRef, &b); } lastPtrRef = &((*lastPtrRef)->next); } return(result); }","title":"Local Reference"},{"location":"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx","text":"Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; if (a == NULL) return(b); else if (b == NULL) return(a); if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return(result); } // O(n Log n) // Merge sort is often preferred for sorting a linked list. The slow random-access performance of a linked list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible. // sorting image // Let head be the first node of the linked list to be sorted and headRef be the pointer to head. Note that we need a reference to head in MergeSort() as the below implementation changes next links to sort the linked lists (not data at the nodes), so head node has to be changed if the data at the original head is not the smallest value in the linked list. #include <bits/stdc++.h> using namespace std; /* Link list node */ class Node { public: int data; Node* next; }; /* function prototypes */ Node* SortedMerge(Node* a, Node* b); void FrontBackSplit(Node* source, Node** frontRef, Node** backRef); /* sorts the linked list by changing next pointers (not data) */ void MergeSort(Node** headRef) { Node* head = *headRef; Node* a; Node* b; /* Base case -- length 0 or 1 */ if ((head == NULL) || (head->next == NULL)) { return; } /* Split head into 'a' and 'b' sublists */ FrontBackSplit(head, &a, &b); /* Recursively sort the sublists */ MergeSort(&a); MergeSort(&b); /* answer = merge the two sorted lists together */ *headRef = SortedMerge(a, b); } /* See https:// www.geeksforgeeks.org/?p=3622 for details of this function */ Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; /* Base cases */ if (a == NULL) return (b); else if (b == NULL) return (a); /* Pick either a or b, and recur */ if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return (result); } /* UTILITY FUNCTIONS */ /* Split the nodes of the given list into front and back halves, and return the two lists using the reference parameters. If the length is odd, the extra node should go in the front list. Uses the fast/slow pointer strategy. */ void FrontBackSplit(Node* source, Node** frontRef, Node** backRef) { Node* fast; Node* slow; slow = source; fast = source->next; /* Advance 'fast' two nodes, and advance 'slow' one node */ while (fast != NULL) { fast = fast->next; if (fast != NULL) { slow = slow->next; fast = fast->next; } } /* 'slow' is before the midpoint in the list, so split it in two at that point. */ *frontRef = source; *backRef = slow->next; slow->next = NULL; } /* Function to print nodes in a given linked list */ void printList(Node* node) { while (node != NULL) { cout << node->data << \" \"; node = node->next; } } /* Function to insert a node at the beginging of the linked list */ void push(Node** head_ref, int new_data) { /* allocate node */ Node* new_node = new Node(); /* put in the data */ new_node->data = new_data; /* link the old list off the new node */ new_node->next = (*head_ref); /* move the head to point to the new node */ (*head_ref) = new_node; } /* Driver program to test above functions*/ int main() { /* Start with the empty list */ Node* res = NULL; Node* a = NULL; /* Let us create a unsorted linked lists to test the functions Created lists shall be a: 2->3->20->5->10->15 */ push(&a, 15); push(&a, 10); push(&a, 5); push(&a, 20); push(&a, 3); push(&a, 2); /* Sort the above created Linked List */ MergeSort(&a); cout << \"Sorted Linked List is: \\n\"; printList(a); return 0; } // This is code is contributed by rathbhupendra","title":"Recursive (Space is more... Prodution XXX)"},{"location":"ds/array/decay/","text":"Array Decay \u00b6 Loss of type and dimensions. When we pass the array into function by value or pointer. It sends first address to the array which is a pointer, hence the size of array is not the original one, but the one occupied by the pointer in the memory.","title":"Array Decay"},{"location":"ds/array/decay/#array-decay","text":"Loss of type and dimensions. When we pass the array into function by value or pointer. It sends first address to the array which is a pointer, hence the size of array is not the original one, but the one occupied by the pointer in the memory.","title":"Array Decay"},{"location":"ds/array/frequency/","text":"Frequency of a Number \u00b6 simple \u00b6 void countFreq(int arr[], int n) { vector<bool> visited(n, false); for (int i = 0; i < n; i++) { if (visited[i] == true) continue; int count = 1; for (int j = i + 1; j < n; j++) { if (arr[i] == arr[j]) { visited[j] = true; count++; } } cout << arr[i] << \" \" << count << endl; } } Sort then Binary search \u00b6 Hashing \u00b6 void countFreq(int arr[], int n) { unordered_map<int, int> mp; for (int i = 0; i < n; i++) mp[arr[i]]++; for (auto x : mp) cout << x.first << \" \" << x.second << endl; }","title":"Frequency of a Number"},{"location":"ds/array/frequency/#frequency-of-a-number","text":"","title":"Frequency of a Number"},{"location":"ds/array/frequency/#simple","text":"void countFreq(int arr[], int n) { vector<bool> visited(n, false); for (int i = 0; i < n; i++) { if (visited[i] == true) continue; int count = 1; for (int j = i + 1; j < n; j++) { if (arr[i] == arr[j]) { visited[j] = true; count++; } } cout << arr[i] << \" \" << count << endl; } }","title":"simple"},{"location":"ds/array/frequency/#sort-then-binary-search","text":"","title":"Sort then Binary search"},{"location":"ds/array/frequency/#hashing","text":"void countFreq(int arr[], int n) { unordered_map<int, int> mp; for (int i = 0; i < n; i++) mp[arr[i]]++; for (auto x : mp) cout << x.first << \" \" << x.second << endl; }","title":"Hashing"},{"location":"ds/array/functions/","text":"Passing Arrays to Functions \u00b6 void myFunction(int *param) {} void myFunction(int param[10]) {} void myFunction(int param[]) {} Return Array from Functions \u00b6 int * myFunction() {} Second point to remember is that C++ does not advocate to return the address of a local variable to outside of the function so you would have to define the local variable as static variable. #include <iostream> #include <ctime> using namespace std; // function to generate and retrun random numbers. int * getRandom( ) { static int r[10]; // set the seed srand( (unsigned)time( NULL ) ); for (int i = 0; i < 10; ++i) { r[i] = rand(); cout << r[i] << endl; } return r; } // main function to call above defined function. int main () { // a pointer to an int. int *p; p = getRandom(); for ( int i = 0; i < 10; i++ ) { cout << \"*(p + \" << i << \") : \"; cout << *(p + i) << endl; } return 0; }","title":"Passing Arrays to Functions"},{"location":"ds/array/functions/#passing-arrays-to-functions","text":"void myFunction(int *param) {} void myFunction(int param[10]) {} void myFunction(int param[]) {}","title":"Passing Arrays to Functions"},{"location":"ds/array/functions/#return-array-from-functions","text":"int * myFunction() {} Second point to remember is that C++ does not advocate to return the address of a local variable to outside of the function so you would have to define the local variable as static variable. #include <iostream> #include <ctime> using namespace std; // function to generate and retrun random numbers. int * getRandom( ) { static int r[10]; // set the seed srand( (unsigned)time( NULL ) ); for (int i = 0; i < 10; ++i) { r[i] = rand(); cout << r[i] << endl; } return r; } // main function to call above defined function. int main () { // a pointer to an int. int *p; p = getRandom(); for ( int i = 0; i < 10; i++ ) { cout << \"*(p + \" << i << \") : \"; cout << *(p + i) << endl; } return 0; }","title":"Return Array from Functions"},{"location":"ds/array/intro/","text":"Introduction \u00b6 collection of similar data items stored at contiguous memory locations random access int, float, double, char, objects, structs, etc Why \u00b6 The idea of an array is to represent many instances in one variable. Declaration \u00b6 int arr1[10]; int n = 10; int arr2[n]; int arr[] = { 10, 20, 30, 40 } int arr[6] = { 10, 20, 30, 40 } // same as int arr[] = {10, 20, 30, 40, 0, 0} Advantages \u00b6 Random access less lines of code Easy access easy Traversal easy Sorting Disadvantages \u00b6 fixed number of elements Insertion and deletion of elements costly Accessing \u00b6 int arr[5]; arr[0] = 5; arr[2] = -10; arr[3 / 2] = 2; // this is same as arr[1] = 2 arr[3] = arr[0]; printf(\"%d %d %d %d\", arr[0], arr[1], arr[2], arr[3]); In C, no index out of bound checking \u00b6 int arr[2]; printf(\"%d \", arr[3]); printf(\"%d \", arr[-2]); int arr[2] = { 10, 20, 30, 40, 50 }; // The program won\u2019t compile in C++. If we save the above program as a .cpp, the program generates compiler error \u201cerror: too many initializers for \u2018int [2]'\u201d. Traversal \u00b6 #include<bits/stdc++.h> using namespace std; int main() { int arr[6]={11,12,13,14,15,16}; // Way -1 for(int i=0;i<6;i++) cout<<arr[i]<<\" \"; cout<<endl; // Way 2 cout<<\"By Other Method:\"<<endl; for(int i=0;i<6;i++) cout<<i[arr]<<\" \"; cout<<endl; return 0; }","title":"Introduction"},{"location":"ds/array/intro/#introduction","text":"collection of similar data items stored at contiguous memory locations random access int, float, double, char, objects, structs, etc","title":"Introduction"},{"location":"ds/array/intro/#why","text":"The idea of an array is to represent many instances in one variable.","title":"Why"},{"location":"ds/array/intro/#declaration","text":"int arr1[10]; int n = 10; int arr2[n]; int arr[] = { 10, 20, 30, 40 } int arr[6] = { 10, 20, 30, 40 } // same as int arr[] = {10, 20, 30, 40, 0, 0}","title":"Declaration"},{"location":"ds/array/intro/#advantages","text":"Random access less lines of code Easy access easy Traversal easy Sorting","title":"Advantages"},{"location":"ds/array/intro/#disadvantages","text":"fixed number of elements Insertion and deletion of elements costly","title":"Disadvantages"},{"location":"ds/array/intro/#accessing","text":"int arr[5]; arr[0] = 5; arr[2] = -10; arr[3 / 2] = 2; // this is same as arr[1] = 2 arr[3] = arr[0]; printf(\"%d %d %d %d\", arr[0], arr[1], arr[2], arr[3]);","title":"Accessing"},{"location":"ds/array/intro/#in-c-no-index-out-of-bound-checking","text":"int arr[2]; printf(\"%d \", arr[3]); printf(\"%d \", arr[-2]); int arr[2] = { 10, 20, 30, 40, 50 }; // The program won\u2019t compile in C++. If we save the above program as a .cpp, the program generates compiler error \u201cerror: too many initializers for \u2018int [2]'\u201d.","title":"In C, no index out of bound checking"},{"location":"ds/array/intro/#traversal","text":"#include<bits/stdc++.h> using namespace std; int main() { int arr[6]={11,12,13,14,15,16}; // Way -1 for(int i=0;i<6;i++) cout<<arr[i]<<\" \"; cout<<endl; // Way 2 cout<<\"By Other Method:\"<<endl; for(int i=0;i<6;i++) cout<<i[arr]<<\" \"; cout<<endl; return 0; }","title":"Traversal"},{"location":"ds/array/min-max/","text":"Min Max \u00b6 Recursive \u00b6 int getMin(int arr[], int n) { return (n == 1) ? arr[0] : min(arr[0], getMin(arr + 1, n - 1)); } int getMax(int arr[], int n) { return (n == 1) ? arr[0] : max(arr[0], getMax(arr + 1, n - 1)); } Library Functions \u00b6 int getMin(int arr[], int n) { return *min_element(arr, arr + n); } int getMax(int arr[], int n) { return *max_element(arr, arr + n); }","title":"Min Max"},{"location":"ds/array/min-max/#min-max","text":"","title":"Min Max"},{"location":"ds/array/min-max/#recursive","text":"int getMin(int arr[], int n) { return (n == 1) ? arr[0] : min(arr[0], getMin(arr + 1, n - 1)); } int getMax(int arr[], int n) { return (n == 1) ? arr[0] : max(arr[0], getMax(arr + 1, n - 1)); }","title":"Recursive"},{"location":"ds/array/min-max/#library-functions","text":"int getMin(int arr[], int n) { return *min_element(arr, arr + n); } int getMax(int arr[], int n) { return *max_element(arr, arr + n); }","title":"Library Functions"},{"location":"ds/array/multi-dimensional/","text":"Multidimensional Arrays \u00b6 row major (in c++) \u00b6 data_type array_name[size1][size2]....[sizeN]; x[i][j] where i is the row number and \u2018j\u2019 is the column number. 0 to (x-1), 0 to (y-1) int x[3][4] = {0, 1 ,2 ,3 ,4 , 5 , 6 , 7 , 8 , 9 , 10 , 11} int x[3][4] = {{0,1,2,3}, {4,5,6,7}, {8,9,10,11}}; Three-Dimensional Array \u00b6 int x[2][3][4] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}; int x[2][3][4] = { { {0,1,2,3}, {4,5,6,7}, {8,9,10,11} }, { {12,13,14,15}, {16,17,18,19}, {20,21,22,23} } };","title":"Multidimensional Arrays"},{"location":"ds/array/multi-dimensional/#multidimensional-arrays","text":"","title":"Multidimensional Arrays"},{"location":"ds/array/multi-dimensional/#row-major-in-c","text":"data_type array_name[size1][size2]....[sizeN]; x[i][j] where i is the row number and \u2018j\u2019 is the column number. 0 to (x-1), 0 to (y-1) int x[3][4] = {0, 1 ,2 ,3 ,4 , 5 , 6 , 7 , 8 , 9 , 10 , 11} int x[3][4] = {{0,1,2,3}, {4,5,6,7}, {8,9,10,11}};","title":"row major (in c++)"},{"location":"ds/array/multi-dimensional/#three-dimensional-array","text":"int x[2][3][4] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}; int x[2][3][4] = { { {0,1,2,3}, {4,5,6,7}, {8,9,10,11} }, { {12,13,14,15}, {16,17,18,19}, {20,21,22,23} } };","title":"Three-Dimensional Array"},{"location":"ds/array/reverse/","text":"Reverse Array \u00b6 Iterative \u00b6 void rvereseArray(int arr[], int start, int end) { while (start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } } Recursive \u00b6 void rvereseArray(int arr[], int start, int end) { if (start >= end) return; int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; // Recursive Function calling rvereseArray(arr, start + 1, end - 1); }","title":"Reverse Array"},{"location":"ds/array/reverse/#reverse-array","text":"","title":"Reverse Array"},{"location":"ds/array/reverse/#iterative","text":"void rvereseArray(int arr[], int start, int end) { while (start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } }","title":"Iterative"},{"location":"ds/array/reverse/#recursive","text":"void rvereseArray(int arr[], int start, int end) { if (start >= end) return; int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; // Recursive Function calling rvereseArray(arr, start + 1, end - 1); }","title":"Recursive"},{"location":"ds/array/vectors/","text":"Vectors in cpp \u00b6 Iterators \u00b6 begin -> 1st element end -> last element r -> reverse c -> constant begin() end() rbegin() rend() cbegin() \u2013 constant iterator pointing to 1st element cend() crbegin() crend() \u2013 constant reverse iterator, pointing to theoretical element i.e. preceding the 1st element Capacity \u00b6 size() \u2013 number of elements max_size() \u2013 maximum number of elements capacity() \u2013 space currently allocated expressed as number of elements. resize(n) \u2013 Resizes the container to n elements. empty() \u2013 whether is empty. shrink_to_fit() \u2013 Reduces the capacity to fit its size and destroys all elements beyond the capacity. reserve() \u2013 Requests that the vector capacity be at least enough to contain n elements. Element access: \u00b6 reference operator [g] \u2013 reference to the element at position \u2018g\u2019 in the vector at(g) \u2013 reference to the element at position \u2018g\u2019 in the vector front() \u2013 reference to the first element in the vector back() \u2013 reference to the last element in the vector data() \u2013 direct pointer to the memory array used internally by the vector to store its owned elements. Modifiers: \u00b6 assign() \u2013 assigns new value to the elements by replacing old ones push_back() \u2013 push the elements from the back pop_back() \u2013 pop elements from the back. insert() \u2013 inserts new elements before specified position erase() \u2013 remove element at position or range. swap() \u2013 swap one vector with another (size may differ). clear() \u2013 remove all elements. emplace() \u2013 extends the container by inserting new element at position. emplace_back() \u2013 insert new element to the end.","title":"Vectors in cpp"},{"location":"ds/array/vectors/#vectors-in-cpp","text":"","title":"Vectors in cpp"},{"location":"ds/array/vectors/#iterators","text":"begin -> 1st element end -> last element r -> reverse c -> constant begin() end() rbegin() rend() cbegin() \u2013 constant iterator pointing to 1st element cend() crbegin() crend() \u2013 constant reverse iterator, pointing to theoretical element i.e. preceding the 1st element","title":"Iterators"},{"location":"ds/array/vectors/#capacity","text":"size() \u2013 number of elements max_size() \u2013 maximum number of elements capacity() \u2013 space currently allocated expressed as number of elements. resize(n) \u2013 Resizes the container to n elements. empty() \u2013 whether is empty. shrink_to_fit() \u2013 Reduces the capacity to fit its size and destroys all elements beyond the capacity. reserve() \u2013 Requests that the vector capacity be at least enough to contain n elements.","title":"Capacity"},{"location":"ds/array/vectors/#element-access","text":"reference operator [g] \u2013 reference to the element at position \u2018g\u2019 in the vector at(g) \u2013 reference to the element at position \u2018g\u2019 in the vector front() \u2013 reference to the first element in the vector back() \u2013 reference to the last element in the vector data() \u2013 direct pointer to the memory array used internally by the vector to store its owned elements.","title":"Element access:"},{"location":"ds/array/vectors/#modifiers","text":"assign() \u2013 assigns new value to the elements by replacing old ones push_back() \u2013 push the elements from the back pop_back() \u2013 pop elements from the back. insert() \u2013 inserts new elements before specified position erase() \u2013 remove element at position or range. swap() \u2013 swap one vector with another (size may differ). clear() \u2013 remove all elements. emplace() \u2013 extends the container by inserting new element at position. emplace_back() \u2013 insert new element to the end.","title":"Modifiers:"},{"location":"ds/array/vs-pointers/","text":"Array vs Pointers \u00b6 Difference \u00b6 #include <iostream> using namespace std; int main() { int arr[] = { 10, 20, 30, 40, 50, 60 }; int* ptr = arr; // sizof(int) * (number of element in arr[]) is printed cout << \"Size of arr[] \" << sizeof(arr) << \"\\n\"; // sizeof a pointer is printed which is same for all // type of pointers (char *, void *, etc) cout << \"Size of ptr \" << sizeof(ptr); return 0; } Output Size of arr[] 24 Size of ptr 8 Assignment \u00b6 #include <stdio.h> int main() { int arr[] = {10, 20}, x = 10; int *ptr = &x; // This is fine arr = &x; // Compiler Error return 0; } Similarities \u00b6 Array name -> address of 1st element. Members are accessed using pointer arithmetic. ( \u201carr[i]\u201d <=> *(arr + i)) Array parameters are always passed as pointers, even when we use square brackets.","title":"Array vs Pointers"},{"location":"ds/array/vs-pointers/#array-vs-pointers","text":"","title":"Array vs Pointers"},{"location":"ds/array/vs-pointers/#difference","text":"#include <iostream> using namespace std; int main() { int arr[] = { 10, 20, 30, 40, 50, 60 }; int* ptr = arr; // sizof(int) * (number of element in arr[]) is printed cout << \"Size of arr[] \" << sizeof(arr) << \"\\n\"; // sizeof a pointer is printed which is same for all // type of pointers (char *, void *, etc) cout << \"Size of ptr \" << sizeof(ptr); return 0; } Output Size of arr[] 24 Size of ptr 8","title":"Difference"},{"location":"ds/array/vs-pointers/#assignment","text":"#include <stdio.h> int main() { int arr[] = {10, 20}, x = 10; int *ptr = &x; // This is fine arr = &x; // Compiler Error return 0; }","title":"Assignment"},{"location":"ds/array/vs-pointers/#similarities","text":"Array name -> address of 1st element. Members are accessed using pointer arithmetic. ( \u201carr[i]\u201d <=> *(arr + i)) Array parameters are always passed as pointers, even when we use square brackets.","title":"Similarities"},{"location":"ds/linked-list/bin-tree-cdll/","text":"Binary Tree to Circular DLL \u00b6 (In Place) CDLL \u00b6 struct Node { struct Node *left, *right; int data; }; Concatenate two CDLL's \u00b6 Node *concatenate(Node *leftList, Node *rightList) { if (leftList == NULL) return rightList; if (rightList == NULL) return leftList; Node *leftLast = leftList->left; Node *rightLast = rightList->left; leftLast->right = rightList; rightList->left = leftLast; leftList->left = rightLast; rightLast->right = leftList; return leftList; } Main Function \u00b6 Node *bTreeToCList(Node *root) { if (root == NULL) return NULL; Node *left = bTreeToCList(root->left); Node *right = bTreeToCList(root->right); root->left = root->right = root; return concatenate(concatenate(left, root), right); } Output: Circular Linked List is : 25 12 30 10 36 15","title":"Binary Tree to Circular DLL"},{"location":"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll","text":"(In Place)","title":"Binary Tree to Circular DLL"},{"location":"ds/linked-list/bin-tree-cdll/#cdll","text":"struct Node { struct Node *left, *right; int data; };","title":"CDLL"},{"location":"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls","text":"Node *concatenate(Node *leftList, Node *rightList) { if (leftList == NULL) return rightList; if (rightList == NULL) return leftList; Node *leftLast = leftList->left; Node *rightLast = rightList->left; leftLast->right = rightList; rightList->left = leftLast; leftList->left = rightLast; rightLast->right = leftList; return leftList; }","title":"Concatenate two CDLL's"},{"location":"ds/linked-list/bin-tree-cdll/#main-function","text":"Node *bTreeToCList(Node *root) { if (root == NULL) return NULL; Node *left = bTreeToCList(root->left); Node *right = bTreeToCList(root->right); root->left = root->right = root; return concatenate(concatenate(left, root), right); } Output: Circular Linked List is : 25 12 30 10 36 15","title":"Main Function"},{"location":"ds/linked-list/cll/","text":"Circular LL \u00b6 end node points to start single or doubly you can traverse from anywhere, take note of starting node good for queues. usefl for cyclation. eg cpu shceduling fibonici heap Representation \u00b6 class Node { public: int data; Node *next; }; Traversal \u00b6 void printList(struct Node *first) { struct Node *temp = first; if (first != NULL) { do { printf(\"%d \", temp->data); temp = temp->next; } while (temp != first); } } Insertion \u00b6 have ext pointer pointing at end empty list beginning end in between struct Node *addToEmpty(struct Node *last, int data) { if (last != NULL) return last; struct Node *temp = (struct Node*)malloc(sizeof(struct Node)); temp -> data = data; last = temp; last -> next = last; return last; } struct Node *addBegin(struct Node *last, int data) { if (last == NULL) return addToEmpty(last, data); struct Node *temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = last -> next; last -> next = temp; return last; } struct Node *addEnd(struct Node *last, int data) { if (last == NULL) return addToEmpty(last, data); struct Node *temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = last -> next; last -> next = temp; last = temp; return last; } struct Node *addAfter(struct Node *last, int data, int item) { if (last == NULL) return NULL; struct Node *temp, *p; p = last -> next; do { if (p ->data == item) { temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = p -> next; p -> next = temp; if (p == last) last = temp; return last; } p = p -> next; } while(p != last -> next); cout << item << \" not present in the list.\" << endl; return last; } Problems: \u00b6 split in halve -> tortoise and haire cll sorted insert -> find and insert cases Case 2 of the above algorithm/code can be optimized. To implement the suggested change we need to modify the case 2 to following. // Case 2 of the above algo else if (current->data >= new_node->data) { // swap the data part of head node and new node // assuming that we have a function swap(int *, int *) swap(&(current->data), &(new_node->data)); new_node->next = (*head_ref)->next; (*head_ref)->next = new_node; } CLL Sorted Insert \u00b6 void sortedInsert(Node** head_ref, Node* new_node) { Node* current = *head_ref; if (current == NULL) { new_node->next = new_node; *head_ref = new_node; } else if (current->data >= new_node->data) { while(current->next != *head_ref) current = current->next; current->next = new_node; new_node->next = *head_ref; *head_ref = new_node; } else { while (current->next!= *head_ref && current->next->data < new_node->data) current = current->next; new_node->next = current->next; current->next = new_node; } }","title":"Circular LL"},{"location":"ds/linked-list/cll/#circular-ll","text":"end node points to start single or doubly you can traverse from anywhere, take note of starting node good for queues. usefl for cyclation. eg cpu shceduling fibonici heap","title":"Circular LL"},{"location":"ds/linked-list/cll/#representation","text":"class Node { public: int data; Node *next; };","title":"Representation"},{"location":"ds/linked-list/cll/#traversal","text":"void printList(struct Node *first) { struct Node *temp = first; if (first != NULL) { do { printf(\"%d \", temp->data); temp = temp->next; } while (temp != first); } }","title":"Traversal"},{"location":"ds/linked-list/cll/#insertion","text":"have ext pointer pointing at end empty list beginning end in between struct Node *addToEmpty(struct Node *last, int data) { if (last != NULL) return last; struct Node *temp = (struct Node*)malloc(sizeof(struct Node)); temp -> data = data; last = temp; last -> next = last; return last; } struct Node *addBegin(struct Node *last, int data) { if (last == NULL) return addToEmpty(last, data); struct Node *temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = last -> next; last -> next = temp; return last; } struct Node *addEnd(struct Node *last, int data) { if (last == NULL) return addToEmpty(last, data); struct Node *temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = last -> next; last -> next = temp; last = temp; return last; } struct Node *addAfter(struct Node *last, int data, int item) { if (last == NULL) return NULL; struct Node *temp, *p; p = last -> next; do { if (p ->data == item) { temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = p -> next; p -> next = temp; if (p == last) last = temp; return last; } p = p -> next; } while(p != last -> next); cout << item << \" not present in the list.\" << endl; return last; }","title":"Insertion"},{"location":"ds/linked-list/cll/#problems","text":"split in halve -> tortoise and haire cll sorted insert -> find and insert cases Case 2 of the above algorithm/code can be optimized. To implement the suggested change we need to modify the case 2 to following. // Case 2 of the above algo else if (current->data >= new_node->data) { // swap the data part of head node and new node // assuming that we have a function swap(int *, int *) swap(&(current->data), &(new_node->data)); new_node->next = (*head_ref)->next; (*head_ref)->next = new_node; }","title":"Problems:"},{"location":"ds/linked-list/cll/#cll-sorted-insert","text":"void sortedInsert(Node** head_ref, Node* new_node) { Node* current = *head_ref; if (current == NULL) { new_node->next = new_node; *head_ref = new_node; } else if (current->data >= new_node->data) { while(current->next != *head_ref) current = current->next; current->next = new_node; new_node->next = *head_ref; *head_ref = new_node; } else { while (current->next!= *head_ref && current->next->data < new_node->data) current = current->next; new_node->next = current->next; current->next = new_node; } }","title":"CLL Sorted Insert"},{"location":"ds/linked-list/count/","text":"Counting \u00b6 O(n) Iterative \u00b6 int getCount(Node* head) { int count = 0; Node* current = head; while (current != NULL) { count++; current = current->next; } return count; } Recursive \u00b6 int getCount(struct Node* head) { if (head == NULL) return 0; return 1 + getCount(head->next); }","title":"Counting"},{"location":"ds/linked-list/count/#counting","text":"O(n)","title":"Counting"},{"location":"ds/linked-list/count/#iterative","text":"int getCount(Node* head) { int count = 0; Node* current = head; while (current != NULL) { count++; current = current->next; } return count; }","title":"Iterative"},{"location":"ds/linked-list/count/#recursive","text":"int getCount(struct Node* head) { if (head == NULL) return 0; return 1 + getCount(head->next); }","title":"Recursive"},{"location":"ds/linked-list/deletion/","text":"Deletion \u00b6 First \u00b6 void deleteFirst(struct Node **head_ref) { if(*head_ref != NULL) { struct Node *temp = *head_ref; *head_ref = (*head_ref)->next; free(temp); } } Any \u00b6 void deleteNode(struct Node **head_ref, int key) { struct Node* temp = *head_ref, *prev; if (temp != NULL && temp->data == key) { *head_ref = temp->next; free(temp); return; } while (temp != NULL && temp->data != key) { prev = temp; temp = temp->next; } if (temp == NULL) return; prev->next = temp->next; free(temp); }","title":"Deletion"},{"location":"ds/linked-list/deletion/#deletion","text":"","title":"Deletion"},{"location":"ds/linked-list/deletion/#first","text":"void deleteFirst(struct Node **head_ref) { if(*head_ref != NULL) { struct Node *temp = *head_ref; *head_ref = (*head_ref)->next; free(temp); } }","title":"First"},{"location":"ds/linked-list/deletion/#any","text":"void deleteNode(struct Node **head_ref, int key) { struct Node* temp = *head_ref, *prev; if (temp != NULL && temp->data == key) { *head_ref = temp->next; free(temp); return; } while (temp != NULL && temp->data != key) { prev = temp; temp = temp->next; } if (temp == NULL) return; prev->next = temp->next; free(temp); }","title":"Any"},{"location":"ds/linked-list/dll/","text":"Doubly LL \u00b6 struct Node { int data; struct Node* next; struct Node* prev; }; Advantages \u00b6 traversal -> both directions deletion is easy as prev pointer is easily available quickly insert Disadvantages \u00b6 more mem -> mem efficient is XOR XOR linked list: data npx = addr(next) ^ addr(prev) to trverse we need prev addr then prev XOR npx == next addr every manipulation -> more steps Insertion \u00b6 At the front of the DLL After a given node. At the end of the DLL Before a given node. void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); new_node->prev = NULL; if ((*head_ref) != NULL) (*head_ref)->prev = new_node; (*head_ref) = new_node; } void insertAfter(Node* prev_node, int new_data) { if (prev_node == NULL) { cout<<\"the given previous node cannot be NULL\"; return; } Node* new_node = new Node(); new_node->data = new_data; new_node->next = prev_node->next; prev_node->next = new_node; new_node->prev = prev_node; if (new_node->next != NULL) new_node->next->prev = new_node; } void append(Node** head_ref, int new_data) { Node* new_node = new Node(); Node* last = *head_ref; new_node->data = new_data; new_node->next = NULL; if (*head_ref == NULL) { new_node->prev = NULL; *head_ref = new_node; return; } while (last->next != NULL) last = last->next; last->next = new_node; new_node->prev = last; return; } Deletion \u00b6 Time Complexity: O(1). Space Complexity: O(1). void deleteNode(Node** head_ref, Node* del) { if (*head_ref == NULL || del == NULL) return; if (*head_ref == del) *head_ref = del->next; if (del->next != NULL) del->next->prev = del->prev; if (del->prev != NULL) del->prev->next = del->next; free(del); return; } reverse \u00b6 void reverse(Node **head_ref) { Node *temp = NULL; Node *current = *head_ref; while (current != NULL) { temp = current->prev; current->prev = current->next; current->next = temp; current = current->prev; } if(temp != NULL ) *head_ref = temp->prev; } TODO Swapping","title":"Doubly LL"},{"location":"ds/linked-list/dll/#doubly-ll","text":"struct Node { int data; struct Node* next; struct Node* prev; };","title":"Doubly LL"},{"location":"ds/linked-list/dll/#advantages","text":"traversal -> both directions deletion is easy as prev pointer is easily available quickly insert","title":"Advantages"},{"location":"ds/linked-list/dll/#disadvantages","text":"more mem -> mem efficient is XOR XOR linked list: data npx = addr(next) ^ addr(prev) to trverse we need prev addr then prev XOR npx == next addr every manipulation -> more steps","title":"Disadvantages"},{"location":"ds/linked-list/dll/#insertion","text":"At the front of the DLL After a given node. At the end of the DLL Before a given node. void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); new_node->prev = NULL; if ((*head_ref) != NULL) (*head_ref)->prev = new_node; (*head_ref) = new_node; } void insertAfter(Node* prev_node, int new_data) { if (prev_node == NULL) { cout<<\"the given previous node cannot be NULL\"; return; } Node* new_node = new Node(); new_node->data = new_data; new_node->next = prev_node->next; prev_node->next = new_node; new_node->prev = prev_node; if (new_node->next != NULL) new_node->next->prev = new_node; } void append(Node** head_ref, int new_data) { Node* new_node = new Node(); Node* last = *head_ref; new_node->data = new_data; new_node->next = NULL; if (*head_ref == NULL) { new_node->prev = NULL; *head_ref = new_node; return; } while (last->next != NULL) last = last->next; last->next = new_node; new_node->prev = last; return; }","title":"Insertion"},{"location":"ds/linked-list/dll/#deletion","text":"Time Complexity: O(1). Space Complexity: O(1). void deleteNode(Node** head_ref, Node* del) { if (*head_ref == NULL || del == NULL) return; if (*head_ref == del) *head_ref = del->next; if (del->next != NULL) del->next->prev = del->prev; if (del->prev != NULL) del->prev->next = del->next; free(del); return; }","title":"Deletion"},{"location":"ds/linked-list/dll/#reverse","text":"void reverse(Node **head_ref) { Node *temp = NULL; Node *current = *head_ref; while (current != NULL) { temp = current->prev; current->prev = current->next; current->next = temp; current = current->prev; } if(temp != NULL ) *head_ref = temp->prev; } TODO Swapping","title":"reverse"},{"location":"ds/linked-list/functions/","text":"Functional Passing \u00b6 modify head global head multiple linked lists? unpredictable behaviour http://wiki.c2.com/?GlobalVariablesAreBad return head forgets about assigning it to head? double pointer","title":"Functional Passing"},{"location":"ds/linked-list/functions/#functional-passing","text":"modify head global head multiple linked lists? unpredictable behaviour http://wiki.c2.com/?GlobalVariablesAreBad return head forgets about assigning it to head? double pointer","title":"Functional Passing"},{"location":"ds/linked-list/generic/","text":"Generic Implementation in c \u00b6 Unlike C++ and Java, C doesn\u2019t support generics. Hence we use void pointer. struct Node { void *data; struct Node *next; }; void push(struct Node** head_ref, void *new_data, size_t data_size) { struct Node* new_node = (struct Node*)malloc(sizeof(struct Node)); new_node->data = malloc(data_size); new_node->next = (*head_ref); int i; for (i=0; i<data_size; i++) *(char *)(new_node->data + i) = *(char *)(new_data + i); (*head_ref) = new_node; } void printList(struct Node *node, void (*fptr)(void *)) { while (node != NULL) { (*fptr)(node->data); node = node->next; } }","title":"Generic Implementation in c"},{"location":"ds/linked-list/generic/#generic-implementation-in-c","text":"Unlike C++ and Java, C doesn\u2019t support generics. Hence we use void pointer. struct Node { void *data; struct Node *next; }; void push(struct Node** head_ref, void *new_data, size_t data_size) { struct Node* new_node = (struct Node*)malloc(sizeof(struct Node)); new_node->data = malloc(data_size); new_node->next = (*head_ref); int i; for (i=0; i<data_size; i++) *(char *)(new_node->data + i) = *(char *)(new_data + i); (*head_ref) = new_node; } void printList(struct Node *node, void (*fptr)(void *)) { while (node != NULL) { (*fptr)(node->data); node = node->next; } }","title":"Generic Implementation in c"},{"location":"ds/linked-list/insertion/","text":"Insertion \u00b6 does not modify head Front (O(1)) \u00b6 void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); (*head_ref) = new_node; } After Node (O(1)) \u00b6 void insertAfter(Node* prev_node, int new_data) { if (prev_node == NULL) { cout << \"the given previous node cannot be NULL\"; return; } Node* new_node = new Node(); new_node->data = new_data; new_node->next = prev_node->next; prev_node->next = new_node; } Last (O(n)) \u00b6 void append(Node** head_ref, int new_data) { Node* new_node = new Node(); Node *last = *head_ref; new_node->data = new_data; new_node->next = NULL; if (*head_ref == NULL) { *head_ref = new_node; return; } while (last->next != NULL) last = last->next; last->next = new_node; return; }","title":"Insertion"},{"location":"ds/linked-list/insertion/#insertion","text":"does not modify head","title":"Insertion"},{"location":"ds/linked-list/insertion/#front-o1","text":"void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); (*head_ref) = new_node; }","title":"Front (O(1))"},{"location":"ds/linked-list/insertion/#after-node-o1","text":"void insertAfter(Node* prev_node, int new_data) { if (prev_node == NULL) { cout << \"the given previous node cannot be NULL\"; return; } Node* new_node = new Node(); new_node->data = new_data; new_node->next = prev_node->next; prev_node->next = new_node; }","title":"After Node (O(1))"},{"location":"ds/linked-list/insertion/#last-on","text":"void append(Node** head_ref, int new_data) { Node* new_node = new Node(); Node *last = *head_ref; new_node->data = new_data; new_node->next = NULL; if (*head_ref == NULL) { *head_ref = new_node; return; } while (last->next != NULL) last = last->next; last->next = new_node; return; }","title":"Last (O(n))"},{"location":"ds/linked-list/intro/","text":"Linked List \u00b6 Linear DS Non-contagious Pointers Why ? \u00b6 dynamic size inserting / deleting -> less expensive Drawbacks \u00b6 Random Access not allowed extra memory for pointer not cache friendly -> no locallity of refernce -> non contagious Representation \u00b6 Data + next pointer -> node Linked List -> Meta data + Start class Node { public: int data; Node* next; }; Traversal \u00b6 void printList(Node* n) { while (n != NULL) { cout << n->data << \" \"; n = n->next; } }","title":"Linked List"},{"location":"ds/linked-list/intro/#linked-list","text":"Linear DS Non-contagious Pointers","title":"Linked List"},{"location":"ds/linked-list/intro/#why","text":"dynamic size inserting / deleting -> less expensive","title":"Why ?"},{"location":"ds/linked-list/intro/#drawbacks","text":"Random Access not allowed extra memory for pointer not cache friendly -> no locallity of refernce -> non contagious","title":"Drawbacks"},{"location":"ds/linked-list/intro/#representation","text":"Data + next pointer -> node Linked List -> Meta data + Start class Node { public: int data; Node* next; };","title":"Representation"},{"location":"ds/linked-list/intro/#traversal","text":"void printList(Node* n) { while (n != NULL) { cout << n->data << \" \"; n = n->next; } }","title":"Traversal"},{"location":"ds/linked-list/reverse/","text":"Reverse LL \u00b6 Iterative \u00b6 Time O(n) Space O(1) void reverse() { Node* current = head; Node *prev = NULL, *next = NULL; while (current != NULL) { next = current->next; current->next = prev; prev = current; current = next; } head = prev; } Recursive \u00b6 Time O(n) Space O(1) Node* reverse(Node* head) { if (head == NULL || head->next == NULL) return head; Node* rest = reverse(head->next); head->next->next = head; head->next = NULL; return rest; } Tail Recursive method \u00b6 void reverse(Node** head) { if (!head) return; reverseUtil(*head, NULL, head); } void reverseUtil(Node* curr, Node* prev, Node** head) { if (!curr->next) { *head = curr; curr->next = prev; return; } Node* next = curr->next; curr->next = prev; reverseUtil(next, curr, head); } Stack \u00b6 void reverseLL(Node** head) { stack<Node*> s; Node* temp = *head; while (temp->next != NULL) { s.push(temp); temp = temp->next; } *head = temp; while (!s.empty()) { temp->next = s.top(); s.pop(); temp = temp->next; } temp->next = NULL; }","title":"Reverse LL"},{"location":"ds/linked-list/reverse/#reverse-ll","text":"","title":"Reverse LL"},{"location":"ds/linked-list/reverse/#iterative","text":"Time O(n) Space O(1) void reverse() { Node* current = head; Node *prev = NULL, *next = NULL; while (current != NULL) { next = current->next; current->next = prev; prev = current; current = next; } head = prev; }","title":"Iterative"},{"location":"ds/linked-list/reverse/#recursive","text":"Time O(n) Space O(1) Node* reverse(Node* head) { if (head == NULL || head->next == NULL) return head; Node* rest = reverse(head->next); head->next->next = head; head->next = NULL; return rest; }","title":"Recursive"},{"location":"ds/linked-list/reverse/#tail-recursive-method","text":"void reverse(Node** head) { if (!head) return; reverseUtil(*head, NULL, head); } void reverseUtil(Node* curr, Node* prev, Node** head) { if (!curr->next) { *head = curr; curr->next = prev; return; } Node* next = curr->next; curr->next = prev; reverseUtil(next, curr, head); }","title":"Tail Recursive method"},{"location":"ds/linked-list/reverse/#stack","text":"void reverseLL(Node** head) { stack<Node*> s; Node* temp = *head; while (temp->next != NULL) { s.push(temp); temp = temp->next; } *head = temp; while (!s.empty()) { temp->next = s.top(); s.pop(); temp = temp->next; } temp->next = NULL; }","title":"Stack"},{"location":"ds/linked-list/search/","text":"Search \u00b6 LinkedListNode* search(LinkedListNode* head, int val){ LinkedListNode* temp = head; while(temp!=NULL){ if(temp->value==val){ cout << \"Found it\"; return temp; } temp = temp->next; } cout << \"Not Found\"; return NULL; }","title":"Search"},{"location":"ds/linked-list/search/#search","text":"LinkedListNode* search(LinkedListNode* head, int val){ LinkedListNode* temp = head; while(temp!=NULL){ if(temp->value==val){ cout << \"Found it\"; return temp; } temp = temp->next; } cout << \"Not Found\"; return NULL; }","title":"Search"},{"location":"ds/linked-list/swap/","text":"Swapping \u00b6 Possibilities x and y may or may not be adjacent. Either x or y may be a head node. Either x or y may be the last node. x and/or y may not be present in the linked list. void swap(Node*& a, Node*& b) { Node* temp = a; a = b; b = temp; } void swapNodes(Node** head_ref, int x, int y) { if (x == y) return; Node **a = NULL, **b = NULL; while (*head_ref) { if ((*head_ref)->data == x) { a = head_ref; } else if ((*head_ref)->data == y) { b = head_ref; } head_ref = &((*head_ref)->next); } if (a && b) { swap(*a, *b); swap(((*a)->next), ((*b)->next)); } }","title":"Swapping"},{"location":"ds/linked-list/swap/#swapping","text":"Possibilities x and y may or may not be adjacent. Either x or y may be a head node. Either x or y may be the last node. x and/or y may not be present in the linked list. void swap(Node*& a, Node*& b) { Node* temp = a; a = b; b = temp; } void swapNodes(Node** head_ref, int x, int y) { if (x == y) return; Node **a = NULL, **b = NULL; while (*head_ref) { if ((*head_ref)->data == x) { a = head_ref; } else if ((*head_ref)->data == y) { b = head_ref; } head_ref = &((*head_ref)->next); } if (a && b) { swap(*a, *b); swap(((*a)->next), ((*b)->next)); } }","title":"Swapping"},{"location":"ds/linked-list/vs-array/","text":"Linked list vs Arrays \u00b6 Array \u00b6 contagious linear colection of similar datatype indexes -> direct retrival (O(1)) mem aloc -> compile time FROM Data section (e.g. global array) or Stack section (e.g. local array). static wastage of memory For dynamic alloc(FROM heap) random access of array + runtime alloc of linked list int * dynArr = (int *)malloc(sizeof(int)*arrSize); __advantage__ -> reduce code-size!! (but other factors e.g. program format etc.) Assuming we aren't allowed to get mem. from heap (eg. embedded systems) due to performance, malloc is costly we have to do module specific memory management. (not system provided API's) How to do it? struct sllNode { int dataInt; int nextIndex; }; struct sllNode arrayLL[5]; //__this__ 0x500 -> 0x508 -> 0x510 -> 0x518. [(1),1] [(2),2] [(3),3] [(4),-2] [(0),-1] 0x500 0x508 0x510 0x518 0x520 -2 -> end of linked list delete 2nd node 0x500 -> 0x510 -> 0x518 [(1),2] [(0),-1] [(3),3] [(4),-2] [(0),-1] 0x500 0x508 0x510 0x518 0x520 2nd node's mem still there inserting \u00b6 0x500 -> 0x508 -> 0x518 -> 0x520 [(1),1] [(2),3] [(0),-1] [(4),4] [(5),-2] 0x500 0x508 0x510 0x518 0x520 insert a new node with data 8 [(1),1] [(2),3] [(8),0] [(4),4] [(5),-2] 0x500 0x508 0x510 0x518 0x520 0x510 -> 0x500 -> 0x508 -> 0x518 -> 0x520 How to optimise \u00b6 Maintain to linked lists (with data and other that is empty) Linked List \u00b6 non-primitive , unordered linked elements (Nodes) traversal from head (O(n)) mem aloc -> runtime FROM Heap section (e.g. using malloc() etc.) dynamic","title":"Linked list vs Arrays"},{"location":"ds/linked-list/vs-array/#linked-list-vs-arrays","text":"","title":"Linked list vs Arrays"},{"location":"ds/linked-list/vs-array/#array","text":"contagious linear colection of similar datatype indexes -> direct retrival (O(1)) mem aloc -> compile time FROM Data section (e.g. global array) or Stack section (e.g. local array). static wastage of memory For dynamic alloc(FROM heap) random access of array + runtime alloc of linked list int * dynArr = (int *)malloc(sizeof(int)*arrSize); __advantage__ -> reduce code-size!! (but other factors e.g. program format etc.) Assuming we aren't allowed to get mem. from heap (eg. embedded systems) due to performance, malloc is costly we have to do module specific memory management. (not system provided API's) How to do it? struct sllNode { int dataInt; int nextIndex; }; struct sllNode arrayLL[5]; //__this__ 0x500 -> 0x508 -> 0x510 -> 0x518. [(1),1] [(2),2] [(3),3] [(4),-2] [(0),-1] 0x500 0x508 0x510 0x518 0x520 -2 -> end of linked list delete 2nd node 0x500 -> 0x510 -> 0x518 [(1),2] [(0),-1] [(3),3] [(4),-2] [(0),-1] 0x500 0x508 0x510 0x518 0x520 2nd node's mem still there","title":"Array"},{"location":"ds/linked-list/vs-array/#inserting","text":"0x500 -> 0x508 -> 0x518 -> 0x520 [(1),1] [(2),3] [(0),-1] [(4),4] [(5),-2] 0x500 0x508 0x510 0x518 0x520 insert a new node with data 8 [(1),1] [(2),3] [(8),0] [(4),4] [(5),-2] 0x500 0x508 0x510 0x518 0x520 0x510 -> 0x500 -> 0x508 -> 0x518 -> 0x520","title":"inserting"},{"location":"ds/linked-list/vs-array/#how-to-optimise","text":"Maintain to linked lists (with data and other that is empty)","title":"How to optimise"},{"location":"ds/linked-list/vs-array/#linked-list","text":"non-primitive , unordered linked elements (Nodes) traversal from head (O(n)) mem aloc -> runtime FROM Heap section (e.g. using malloc() etc.) dynamic","title":"Linked List"},{"location":"ds/linked-list/xor-dll/","text":"XOR DLL \u00b6 Representation \u00b6 class Node { public: int data; Node* npx; /* XOR of next and previous node */ }; XOR Utility \u00b6 Node* XOR (Node *a, Node *b) { return reinterpret_cast<Node *>( reinterpret_cast<uintptr_t>(a) ^ reinterpret_cast<uintptr_t>(b)); } Insert \u00b6 void insert(Node **head_ref, int data) { Node *new_node = new Node(); new_node->data = data; new_node->npx = *head_ref; if (*head_ref != NULL) { (*head_ref)->npx = XOR(new_node, (*head_ref)->npx); } *head_ref = new_node; } Print \u00b6 void printList (Node *head) { Node *curr = head; Node *prev = NULL; Node *next; cout << \"Following are the nodes of Linked List: \\n\"; while (curr != NULL) { cout<<curr->data<<\" \"; next = XOR (prev, curr->npx); prev = curr; curr = next; } }","title":"XOR DLL"},{"location":"ds/linked-list/xor-dll/#xor-dll","text":"","title":"XOR DLL"},{"location":"ds/linked-list/xor-dll/#representation","text":"class Node { public: int data; Node* npx; /* XOR of next and previous node */ };","title":"Representation"},{"location":"ds/linked-list/xor-dll/#xor-utility","text":"Node* XOR (Node *a, Node *b) { return reinterpret_cast<Node *>( reinterpret_cast<uintptr_t>(a) ^ reinterpret_cast<uintptr_t>(b)); }","title":"XOR Utility"},{"location":"ds/linked-list/xor-dll/#insert","text":"void insert(Node **head_ref, int data) { Node *new_node = new Node(); new_node->data = data; new_node->npx = *head_ref; if (*head_ref != NULL) { (*head_ref)->npx = XOR(new_node, (*head_ref)->npx); } *head_ref = new_node; }","title":"Insert"},{"location":"ds/linked-list/xor-dll/#print","text":"void printList (Node *head) { Node *curr = head; Node *prev = NULL; Node *next; cout << \"Following are the nodes of Linked List: \\n\"; while (curr != NULL) { cout<<curr->data<<\" \"; next = XOR (prev, curr->npx); prev = curr; curr = next; } }","title":"Print"},{"location":"ds/queue/dequeue/","text":"Dequeue \u00b6 generalised version of queue -> insert and delete at both ends Operations \u00b6 insertFront deleteFront insertRear deleteRear isFull isEmpty getFront getRear Application \u00b6 used as stack and queues. clockwise and anticlockwise rotations in O(1) time Also, the problems where elements need to be removed and or added both ends can be efficiently solved using Deque. For example see Maximum of all subarrays of size k problem., 0-1 BFS and Find the first circular tour that visits all petrol pumps. A-Steal job scheduling algorithm where Deque is used as deletions operation is required at both ends. Implementation \u00b6 all ops -> O(1) doubly linked list \u00b6 TODO circular array. \u00b6 #define MAX 100 class Deque { int arr[MAX]; int front; int rear; int size; public : Deque(int size) { front = -1; rear = 0; this->size = size; } void insertfront(int key); void insertrear(int key); void deletefront(); void deleterear(); bool isFull(); bool isEmpty(); int getFront(); int getRear(); }; bool Deque::isFull() { return ((front == 0 && rear == size-1)|| front == rear+1); } bool Deque::isEmpty () { return (front == -1); } void Deque::insertfront(int key) { if (isFull()) { cout << \"Overflow\\n\" << endl; return; } if (front == -1) { front = 0; rear = 0; } else if (front == 0) front = size - 1 ; else front = front-1; arr[front] = key ; } void Deque ::insertrear(int key) { if (isFull()) { cout << \" Overflow\\n \" << endl; return; } if (front == -1) { front = 0; rear = 0; } else if (rear == size-1) rear = 0; else rear = rear+1; arr[rear] = key ; } void Deque ::deletefront() { if (isEmpty()) { cout << \"Queue Underflow\\n\" << endl; return ; } if (front == rear) { front = -1; rear = -1; } else if (front == size -1) front = 0; else front = front+1; } void Deque::deleterear() { if (isEmpty()) { cout << \" Underflow\\n\" << endl ; return ; } if (front == rear) { front = -1; rear = -1; } else if (rear == 0) rear = size-1; else rear = rear-1; } int Deque::getFront() { if (isEmpty()) { cout << \" Underflow\\n\" << endl; return -1 ; } return arr[front]; } int Deque::getRear() { if(isEmpty() || rear < 0) { cout << \" Underflow\\n\" << endl; return -1 ; } return arr[rear]; }","title":"Dequeue"},{"location":"ds/queue/dequeue/#dequeue","text":"generalised version of queue -> insert and delete at both ends","title":"Dequeue"},{"location":"ds/queue/dequeue/#operations","text":"insertFront deleteFront insertRear deleteRear isFull isEmpty getFront getRear","title":"Operations"},{"location":"ds/queue/dequeue/#application","text":"used as stack and queues. clockwise and anticlockwise rotations in O(1) time Also, the problems where elements need to be removed and or added both ends can be efficiently solved using Deque. For example see Maximum of all subarrays of size k problem., 0-1 BFS and Find the first circular tour that visits all petrol pumps. A-Steal job scheduling algorithm where Deque is used as deletions operation is required at both ends.","title":"Application"},{"location":"ds/queue/dequeue/#implementation","text":"all ops -> O(1)","title":"Implementation"},{"location":"ds/queue/dequeue/#doubly-linked-list","text":"TODO","title":"doubly linked list"},{"location":"ds/queue/dequeue/#circular-array","text":"#define MAX 100 class Deque { int arr[MAX]; int front; int rear; int size; public : Deque(int size) { front = -1; rear = 0; this->size = size; } void insertfront(int key); void insertrear(int key); void deletefront(); void deleterear(); bool isFull(); bool isEmpty(); int getFront(); int getRear(); }; bool Deque::isFull() { return ((front == 0 && rear == size-1)|| front == rear+1); } bool Deque::isEmpty () { return (front == -1); } void Deque::insertfront(int key) { if (isFull()) { cout << \"Overflow\\n\" << endl; return; } if (front == -1) { front = 0; rear = 0; } else if (front == 0) front = size - 1 ; else front = front-1; arr[front] = key ; } void Deque ::insertrear(int key) { if (isFull()) { cout << \" Overflow\\n \" << endl; return; } if (front == -1) { front = 0; rear = 0; } else if (rear == size-1) rear = 0; else rear = rear+1; arr[rear] = key ; } void Deque ::deletefront() { if (isEmpty()) { cout << \"Queue Underflow\\n\" << endl; return ; } if (front == rear) { front = -1; rear = -1; } else if (front == size -1) front = 0; else front = front+1; } void Deque::deleterear() { if (isEmpty()) { cout << \" Underflow\\n\" << endl ; return ; } if (front == rear) { front = -1; rear = -1; } else if (rear == 0) rear = size-1; else rear = rear-1; } int Deque::getFront() { if (isEmpty()) { cout << \" Underflow\\n\" << endl; return -1 ; } return arr[front]; } int Deque::getRear() { if(isEmpty() || rear < 0) { cout << \" Underflow\\n\" << endl; return -1 ; } return arr[rear]; }","title":"circular array."},{"location":"ds/queue/intro/","text":"Queue \u00b6 FIFO Operations \u00b6 Enqueue: Adds or overflow. Dequeue: Removes or underflow. Front Rear Application \u00b6 Used when elements does not have to be processed immediately When a resource is shared among multiple consumers. Examples include CPU scheduling, Disk Scheduling. When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc. Implementation \u00b6 Array \u00b6 Complexity Analysis: Time Complexity: Operations Complexity Enque(insertion) O(1) Deque(deletion) O(1) Front(Get front) O(1) Rear(Get Rear) O(1) Auxiliary Space: O(N). N is the size of array for storing elements. Pros of Array Implementation: Easy to implement. Cons of Array Implementation: Static Data Structure, fixed size. If the queue has a large number of enqueue and dequeue operations, at some point we may not we able to insert elements in the queue even if the queue is empty (this problem is avoided by using circular queue). class Queue { public: int front, rear, size; unsigned capacity; int* array; }; Queue* createQueue(unsigned capacity) { Queue* queue = new Queue(); queue->capacity = capacity; queue->front = queue->size = 0; queue->rear = capacity - 1; queue->array = new int[( queue->capacity * sizeof(int))]; return queue; } int isFull(Queue* queue) { return (queue->size == queue->capacity); } int isEmpty(Queue* queue) { return (queue->size == 0); } void enqueue(Queue* queue, int item) { if (isFull(queue)) return; queue->rear = (queue->rear + 1) % queue->capacity; queue->array[queue->rear] = item; queue->size = queue->size + 1; cout << item << \" enqueued to queue\\n\"; } int dequeue(Queue* queue) { if (isEmpty(queue)) return INT_MIN; int item = queue->array[queue->front]; queue->front = (queue->front + 1) % queue->capacity; queue->size = queue->size - 1; return item; } int front(Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->front]; } int rear(Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->rear]; } Linked List \u00b6 Time Complexity: Time complexity of both operations enqueue() and dequeue() is O(1) as we only change few pointers in both operations. There is no loop in any of the operations. struct QNode { int data; QNode* next; QNode(int d) { data = d; next = NULL; } }; struct Queue { QNode *front, *rear; Queue() { front = rear = NULL; } void enQueue(int x) { QNode* temp = new QNode(x); if (rear == NULL) { front = rear = temp; return; } rear->next = temp; rear = temp; } void deQueue() { if (front == NULL) return; QNode* temp = front; front = front->next; if (front == NULL) rear = NULL; delete (temp); } };","title":"Queue"},{"location":"ds/queue/intro/#queue","text":"FIFO","title":"Queue"},{"location":"ds/queue/intro/#operations","text":"Enqueue: Adds or overflow. Dequeue: Removes or underflow. Front Rear","title":"Operations"},{"location":"ds/queue/intro/#application","text":"Used when elements does not have to be processed immediately When a resource is shared among multiple consumers. Examples include CPU scheduling, Disk Scheduling. When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc.","title":"Application"},{"location":"ds/queue/intro/#implementation","text":"","title":"Implementation"},{"location":"ds/queue/intro/#array","text":"Complexity Analysis: Time Complexity: Operations Complexity Enque(insertion) O(1) Deque(deletion) O(1) Front(Get front) O(1) Rear(Get Rear) O(1) Auxiliary Space: O(N). N is the size of array for storing elements. Pros of Array Implementation: Easy to implement. Cons of Array Implementation: Static Data Structure, fixed size. If the queue has a large number of enqueue and dequeue operations, at some point we may not we able to insert elements in the queue even if the queue is empty (this problem is avoided by using circular queue). class Queue { public: int front, rear, size; unsigned capacity; int* array; }; Queue* createQueue(unsigned capacity) { Queue* queue = new Queue(); queue->capacity = capacity; queue->front = queue->size = 0; queue->rear = capacity - 1; queue->array = new int[( queue->capacity * sizeof(int))]; return queue; } int isFull(Queue* queue) { return (queue->size == queue->capacity); } int isEmpty(Queue* queue) { return (queue->size == 0); } void enqueue(Queue* queue, int item) { if (isFull(queue)) return; queue->rear = (queue->rear + 1) % queue->capacity; queue->array[queue->rear] = item; queue->size = queue->size + 1; cout << item << \" enqueued to queue\\n\"; } int dequeue(Queue* queue) { if (isEmpty(queue)) return INT_MIN; int item = queue->array[queue->front]; queue->front = (queue->front + 1) % queue->capacity; queue->size = queue->size - 1; return item; } int front(Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->front]; } int rear(Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->rear]; }","title":"Array"},{"location":"ds/queue/intro/#linked-list","text":"Time Complexity: Time complexity of both operations enqueue() and dequeue() is O(1) as we only change few pointers in both operations. There is no loop in any of the operations. struct QNode { int data; QNode* next; QNode(int d) { data = d; next = NULL; } }; struct Queue { QNode *front, *rear; Queue() { front = rear = NULL; } void enQueue(int x) { QNode* temp = new QNode(x); if (rear == NULL) { front = rear = temp; return; } rear->next = temp; rear = temp; } void deQueue() { if (front == NULL) return; QNode* temp = front; front = front->next; if (front == NULL) rear = NULL; delete (temp); } };","title":"Linked List"},{"location":"ds/queue/print-binary/","text":"Print Binary \u00b6 simple \u00b6 loop from 1 to n.. then call toBin() Using Queues \u00b6 O(n * logn) void generatePrintBinary(int n) { queue<string> q; q.push(\"1\"); // BFS while (n--) { string s1 = q.front(); q.pop(); cout << s1 << \"\\n\"; string s2 = s1; q.push(s1.append(\"0\")); q.push(s2.append(\"1\")); } }","title":"Print Binary"},{"location":"ds/queue/print-binary/#print-binary","text":"","title":"Print Binary"},{"location":"ds/queue/print-binary/#simple","text":"loop from 1 to n.. then call toBin()","title":"simple"},{"location":"ds/queue/print-binary/#using-queues","text":"O(n * logn) void generatePrintBinary(int n) { queue<string> q; q.push(\"1\"); // BFS while (n--) { string s1 = q.front(); q.pop(); cout << s1 << \"\\n\"; string s2 = s1; q.push(s1.append(\"0\")); q.push(s2.append(\"1\")); } }","title":"Using Queues"},{"location":"ds/queue/priority-queue/","text":"Priority Queue \u00b6 Queue with properties: \u00b6 every element has apriority dequeue removes element with highest priority 2 elements with same priority... deletes in the order of queueing Operations \u00b6 insert(item, priority) getHighestPriority(): deleteHighestPriority() Implementation \u00b6 struct item { int item; int priority; } Arrays \u00b6 insert -> O(1) getHighest -> linear traversal (O(n)) deleteHighestPriority -> need to move elements O(n) Linked List \u00b6 delete is efficient as no need to move Heap \u00b6 best insert, delete -> O(logn) highest -> O(1) Applications \u00b6 CPU Scheduling Graph algorithms like Dijkstra\u2019s shortest path algorithm, Prim\u2019s Minimum Spanning Tree, etc All queue applications where priority is involved.","title":"Priority Queue"},{"location":"ds/queue/priority-queue/#priority-queue","text":"","title":"Priority Queue"},{"location":"ds/queue/priority-queue/#queue-with-properties","text":"every element has apriority dequeue removes element with highest priority 2 elements with same priority... deletes in the order of queueing","title":"Queue with properties:"},{"location":"ds/queue/priority-queue/#operations","text":"insert(item, priority) getHighestPriority(): deleteHighestPriority()","title":"Operations"},{"location":"ds/queue/priority-queue/#implementation","text":"struct item { int item; int priority; }","title":"Implementation"},{"location":"ds/queue/priority-queue/#arrays","text":"insert -> O(1) getHighest -> linear traversal (O(n)) deleteHighestPriority -> need to move elements O(n)","title":"Arrays"},{"location":"ds/queue/priority-queue/#linked-list","text":"delete is efficient as no need to move","title":"Linked List"},{"location":"ds/queue/priority-queue/#heap","text":"best insert, delete -> O(logn) highest -> O(1)","title":"Heap"},{"location":"ds/queue/priority-queue/#applications","text":"CPU Scheduling Graph algorithms like Dijkstra\u2019s shortest path algorithm, Prim\u2019s Minimum Spanning Tree, etc All queue applications where priority is involved.","title":"Applications"},{"location":"ds/queue/using-stack/","text":"Queue using Stack \u00b6 Costly Enqueue \u00b6 Push O(N): In the worst case we have empty whole of stack 1 into stack 2. Pop operation: O(1). Auxiliary Space: O(N). struct Queue { stack<int> s1, s2; void enQueue(int x) { while (!s1.empty()) { s2.push(s1.top()); s1.pop(); } s1.push(x); while (!s2.empty()) { s1.push(s2.top()); s2.pop(); } } int deQueue() { if (s1.empty()) { cout << \"Q is Empty\"; exit(0); } int x = s1.top(); s1.pop(); return x; } }; Costly Dequeue \u00b6 Push operation: O(1). Pop operation: O(N): In the worst case we have empty whole of stack 1 into stack 2 Auxiliary Space: O(N). Method 2 is definitely better than method 1. Method 1 moves all the elements twice in enQueue operation, while method 2 (in deQueue operation) moves the elements once and moves elements only if stack2 empty. So, the amortized complexity of the dequeue operation becomes \\Theta (1) . struct Queue { stack<int> s1, s2; void enQueue(int x) { s1.push(x); } int deQueue() { if (s1.empty() && s2.empty()) { cout << \"Q is empty\"; exit(0); } if (s2.empty()) { while (!s1.empty()) { s2.push(s1.top()); s1.pop(); } } int x = s2.top(); s2.pop(); return x; } }; Using one user stack and function call stack (recurion) \u00b6 Push operation : O(1). Pop operation : O(N). The difference from above method is that in this method element is returned and all elements are restored back in a single call. Auxiliary Space: O(N). struct Queue { stack<int> s; void enQueue(int x) { s.push(x); } int deQueue() { if (s.empty()) { cout << \"Q is empty\"; exit(0); } int x = s.top(); s.pop(); if (s.empty()) return x; int item = deQueue(); s.push(x); return item; } };","title":"Queue using Stack"},{"location":"ds/queue/using-stack/#queue-using-stack","text":"","title":"Queue using Stack"},{"location":"ds/queue/using-stack/#costly-enqueue","text":"Push O(N): In the worst case we have empty whole of stack 1 into stack 2. Pop operation: O(1). Auxiliary Space: O(N). struct Queue { stack<int> s1, s2; void enQueue(int x) { while (!s1.empty()) { s2.push(s1.top()); s1.pop(); } s1.push(x); while (!s2.empty()) { s1.push(s2.top()); s2.pop(); } } int deQueue() { if (s1.empty()) { cout << \"Q is Empty\"; exit(0); } int x = s1.top(); s1.pop(); return x; } };","title":"Costly Enqueue"},{"location":"ds/queue/using-stack/#costly-dequeue","text":"Push operation: O(1). Pop operation: O(N): In the worst case we have empty whole of stack 1 into stack 2 Auxiliary Space: O(N). Method 2 is definitely better than method 1. Method 1 moves all the elements twice in enQueue operation, while method 2 (in deQueue operation) moves the elements once and moves elements only if stack2 empty. So, the amortized complexity of the dequeue operation becomes \\Theta (1) . struct Queue { stack<int> s1, s2; void enQueue(int x) { s1.push(x); } int deQueue() { if (s1.empty() && s2.empty()) { cout << \"Q is empty\"; exit(0); } if (s2.empty()) { while (!s1.empty()) { s2.push(s1.top()); s1.pop(); } } int x = s2.top(); s2.pop(); return x; } };","title":"Costly Dequeue"},{"location":"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion","text":"Push operation : O(1). Pop operation : O(N). The difference from above method is that in this method element is returned and all elements are restored back in a single call. Auxiliary Space: O(N). struct Queue { stack<int> s; void enQueue(int x) { s.push(x); } int deQueue() { if (s.empty()) { cout << \"Q is empty\"; exit(0); } int x = s.top(); s.pop(); if (s.empty()) return x; int item = deQueue(); s.push(x); return item; } };","title":"Using one user stack and function call stack (recurion)"},{"location":"ds/stack/intro/","text":"Stack \u00b6 push(), pop(), isEmpty() and peek() all take O(1) follow LIFO/FILO order. real life -> stack of plates Applications of stack: \u00b6 Balancing of symbols Infix to Postfix / Prefix conversion Redo-undo Forward and backward feature in web browsers Used in many algorithms like Tower of Hanoi, tree traversals, stock span problem, histogram problem. Other applications can be Backtracking, Knight tour problem, rat in a maze, N queen problem and sudoku solver In Graph Algorithms like Topological Sorting and Strongly Connected Components Implementation \u00b6 Array \u00b6 Pros: Easy to implement. Memory is saved as pointers are not involved. Cons: It is not dynamic. It doesn\u2019t grow and shrink depending on needs at runtime. #define MAX 1000 class Stack { int top; public: int a[MAX]; // Maximum size of Stack Stack() { top = -1; } bool push(int x); int pop(); int peek(); bool isEmpty(); }; bool Stack::push(int x) { if (top >= (MAX - 1)) { cout << \"Stack Overflow\"; return false; } else { a[++top] = x; cout << x << \" pushed into stack\\n\"; return true; } } int Stack::pop() { if (top < 0) { cout << \"Stack Underflow\"; return 0; } else { int x = a[top--]; return x; } } int Stack::peek() { if (top < 0) { cout << \"Stack is Empty\"; return 0; } else { int x = a[top]; return x; } } bool Stack::isEmpty() { return (top < 0); } int main() { class Stack s; s.push(10); s.push(20); s.push(30); cout << s.pop() << \" Popped from stack\\n\"; return 0; } Linked List \u00b6 Pros: The linked list implementation of stack can grow and shrink according to the needs at runtime. Cons: Requires extra memory due to involvement of pointers. class StackNode { public: int data; StackNode* next; }; StackNode* newNode(int data) { StackNode* stackNode = new StackNode(); stackNode->data = data; stackNode->next = NULL; return stackNode; } int isEmpty(StackNode* root) { return !root; } void push(StackNode** root, int data) { StackNode* stackNode = newNode(data); stackNode->next = *root; *root = stackNode; cout << data << \" pushed to stack\\n\"; } int pop(StackNode** root) { if (isEmpty(*root)) return INT_MIN; StackNode* temp = *root; *root = (*root)->next; int popped = temp->data; free(temp); return popped; } int peek(StackNode* root) { if (isEmpty(root)) return INT_MIN; return root->data; } int main() { StackNode* root = NULL; push(&root, 10); push(&root, 20); push(&root, 30); cout << pop(&root) << \" popped from stack\\n\"; cout << \"Top element is \" << peek(root) << endl; return 0; } Problems \u00b6 reverse a string -> push push... pop pop (better -> just swap the pointers) 2 stacks in an array: divide space into two (space inefficient) start from extremes check for balanced parenthesis -> push if open the pop if closed and check the equality next grater element two loops (o(n^2)) using stacks (O(n)) Push the first element to stack. Pick rest of the elements one by one and follow the following steps in loop. Mark the current element as next. If stack is not empty, compare top element of stack with next. If next is greater than the top element,Pop element from stack. next is the next greater element for the popped element. Keep popping from the stack while the popped element is smaller than next. next becomes the next greater element for all such popped elements Finally, push the next in the stack. After the loop in step 2 is over, pop all the elements from stack and print -1 as next element for them. Time Complexity: O(n). The worst case occurs when all elements are sorted in decreasing order. If elements are sorted in decreasing order, then every element is processed at most 4 times. Initially pushed to the stack. Popped from the stack when next element is being processed. Pushed back to the stack because the next element is smaller. Popped from the stack in step 3 of algorithm. in the same order : void printNGE(int arr[], int n) { stack<int> s; int arr1[n]; for (int i = n - 1; i >= 0; i--) { while (!s.empty() && s.top() <= arr[i]) s.pop(); if (s.empty()) arr1[i] = -1; else arr1[i] = s.top(); s.push(arr[i]); } for (int i = 0; i < n; i++) cout << arr[i] << \" ---> \" << arr1[i] << endl; }","title":"Stack"},{"location":"ds/stack/intro/#stack","text":"push(), pop(), isEmpty() and peek() all take O(1) follow LIFO/FILO order. real life -> stack of plates","title":"Stack"},{"location":"ds/stack/intro/#applications-of-stack","text":"Balancing of symbols Infix to Postfix / Prefix conversion Redo-undo Forward and backward feature in web browsers Used in many algorithms like Tower of Hanoi, tree traversals, stock span problem, histogram problem. Other applications can be Backtracking, Knight tour problem, rat in a maze, N queen problem and sudoku solver In Graph Algorithms like Topological Sorting and Strongly Connected Components","title":"Applications of stack:"},{"location":"ds/stack/intro/#implementation","text":"","title":"Implementation"},{"location":"ds/stack/intro/#array","text":"Pros: Easy to implement. Memory is saved as pointers are not involved. Cons: It is not dynamic. It doesn\u2019t grow and shrink depending on needs at runtime. #define MAX 1000 class Stack { int top; public: int a[MAX]; // Maximum size of Stack Stack() { top = -1; } bool push(int x); int pop(); int peek(); bool isEmpty(); }; bool Stack::push(int x) { if (top >= (MAX - 1)) { cout << \"Stack Overflow\"; return false; } else { a[++top] = x; cout << x << \" pushed into stack\\n\"; return true; } } int Stack::pop() { if (top < 0) { cout << \"Stack Underflow\"; return 0; } else { int x = a[top--]; return x; } } int Stack::peek() { if (top < 0) { cout << \"Stack is Empty\"; return 0; } else { int x = a[top]; return x; } } bool Stack::isEmpty() { return (top < 0); } int main() { class Stack s; s.push(10); s.push(20); s.push(30); cout << s.pop() << \" Popped from stack\\n\"; return 0; }","title":"Array"},{"location":"ds/stack/intro/#linked-list","text":"Pros: The linked list implementation of stack can grow and shrink according to the needs at runtime. Cons: Requires extra memory due to involvement of pointers. class StackNode { public: int data; StackNode* next; }; StackNode* newNode(int data) { StackNode* stackNode = new StackNode(); stackNode->data = data; stackNode->next = NULL; return stackNode; } int isEmpty(StackNode* root) { return !root; } void push(StackNode** root, int data) { StackNode* stackNode = newNode(data); stackNode->next = *root; *root = stackNode; cout << data << \" pushed to stack\\n\"; } int pop(StackNode** root) { if (isEmpty(*root)) return INT_MIN; StackNode* temp = *root; *root = (*root)->next; int popped = temp->data; free(temp); return popped; } int peek(StackNode* root) { if (isEmpty(root)) return INT_MIN; return root->data; } int main() { StackNode* root = NULL; push(&root, 10); push(&root, 20); push(&root, 30); cout << pop(&root) << \" popped from stack\\n\"; cout << \"Top element is \" << peek(root) << endl; return 0; }","title":"Linked List"},{"location":"ds/stack/intro/#problems","text":"reverse a string -> push push... pop pop (better -> just swap the pointers) 2 stacks in an array: divide space into two (space inefficient) start from extremes check for balanced parenthesis -> push if open the pop if closed and check the equality next grater element two loops (o(n^2)) using stacks (O(n)) Push the first element to stack. Pick rest of the elements one by one and follow the following steps in loop. Mark the current element as next. If stack is not empty, compare top element of stack with next. If next is greater than the top element,Pop element from stack. next is the next greater element for the popped element. Keep popping from the stack while the popped element is smaller than next. next becomes the next greater element for all such popped elements Finally, push the next in the stack. After the loop in step 2 is over, pop all the elements from stack and print -1 as next element for them. Time Complexity: O(n). The worst case occurs when all elements are sorted in decreasing order. If elements are sorted in decreasing order, then every element is processed at most 4 times. Initially pushed to the stack. Popped from the stack when next element is being processed. Pushed back to the stack because the next element is smaller. Popped from the stack in step 3 of algorithm. in the same order : void printNGE(int arr[], int n) { stack<int> s; int arr1[n]; for (int i = n - 1; i >= 0; i--) { while (!s.empty() && s.top() <= arr[i]) s.pop(); if (s.empty()) arr1[i] = -1; else arr1[i] = s.top(); s.push(arr[i]); } for (int i = 0; i < n; i++) cout << arr[i] << \" ---> \" << arr1[i] << endl; }","title":"Problems"},{"location":"ds/stack/k-stacks/","text":"K Stacks \u00b6 simple \u00b6 divide array into n/k stack overflow even if space is available extra 2 integer arrays \u00b6 1) top[k] -> top elements of stacks 2) next[] -> class kStacks { int *arr; int *top; int *next; int n, k; int free; public: kStacks(int k, int n); bool isFull() { return (free == -1); } void push(int item, int sn); int pop(int sn); bool isEmpty(int sn) { return (top[sn] == -1); } }; kStacks::kStacks(int k1, int n1) { k = k1, n = n1; arr = new int[n]; top = new int[k]; next = new int[n]; for (int i = 0; i < k; i++) top[i] = -1; free = 0; for (int i=0; i<n-1; i++) next[i] = i+1; next[n-1] = -1; } void kStacks::push(int item, int sn) { if (isFull()) { cout << \"\\nStack Overflow\\n\"; return; } int i = free; free = next[i]; next[i] = top[sn]; top[sn] = i; arr[i] = item; } int kStacks::pop(int sn) { if (isEmpty(sn)) { cout << \"\\nStack Underflow\\n\"; return INT_MAX; } int i = top[sn]; top[sn] = next[i]; next[i] = free; free = i; return arr[i]; }","title":"K Stacks"},{"location":"ds/stack/k-stacks/#k-stacks","text":"","title":"K Stacks"},{"location":"ds/stack/k-stacks/#simple","text":"divide array into n/k stack overflow even if space is available","title":"simple"},{"location":"ds/stack/k-stacks/#extra-2-integer-arrays","text":"1) top[k] -> top elements of stacks 2) next[] -> class kStacks { int *arr; int *top; int *next; int n, k; int free; public: kStacks(int k, int n); bool isFull() { return (free == -1); } void push(int item, int sn); int pop(int sn); bool isEmpty(int sn) { return (top[sn] == -1); } }; kStacks::kStacks(int k1, int n1) { k = k1, n = n1; arr = new int[n]; top = new int[k]; next = new int[n]; for (int i = 0; i < k; i++) top[i] = -1; free = 0; for (int i=0; i<n-1; i++) next[i] = i+1; next[n-1] = -1; } void kStacks::push(int item, int sn) { if (isFull()) { cout << \"\\nStack Overflow\\n\"; return; } int i = free; free = next[i]; next[i] = top[sn]; top[sn] = i; arr[i] = item; } int kStacks::pop(int sn) { if (isEmpty(sn)) { cout << \"\\nStack Underflow\\n\"; return INT_MAX; } int i = top[sn]; top[sn] = next[i]; next[i] = free; free = i; return arr[i]; }","title":"extra 2 integer arrays"},{"location":"ds/stack/medium-special/","text":"Medium Special \u00b6 findMiddle() which will return middle element of the stack. deleteMiddle() which will delete the middle element. void push(myStack *ms, int new_data) { DLLNode* new_DLLNode = new DLLNode(); new_DLLNode->data = new_data; new_DLLNode->prev = NULL; new_DLLNode->next = ms->head; ms->count += 1; if (ms->count == 1) { ms->mid = new_DLLNode; } else { ms->head->prev = new_DLLNode; if(!(ms->count & 1)) // Update mid if ms->count is even ms->mid = ms->mid->prev; } ms->head = new_DLLNode; } int pop(myStack *ms) { if (ms->count == 0) { cout<<\"Stack is empty\\n\"; return -1; } DLLNode *head = ms->head; int item = head->data; ms->head = head->next; if (ms->head != NULL) ms->head->prev = NULL; ms->count -= 1; if ((ms->count) & 1 ) ms->mid = ms->mid->next; free(head); return item; }","title":"Medium Special"},{"location":"ds/stack/medium-special/#medium-special","text":"findMiddle() which will return middle element of the stack. deleteMiddle() which will delete the middle element. void push(myStack *ms, int new_data) { DLLNode* new_DLLNode = new DLLNode(); new_DLLNode->data = new_data; new_DLLNode->prev = NULL; new_DLLNode->next = ms->head; ms->count += 1; if (ms->count == 1) { ms->mid = new_DLLNode; } else { ms->head->prev = new_DLLNode; if(!(ms->count & 1)) // Update mid if ms->count is even ms->mid = ms->mid->prev; } ms->head = new_DLLNode; } int pop(myStack *ms) { if (ms->count == 0) { cout<<\"Stack is empty\\n\"; return -1; } DLLNode *head = ms->head; int item = head->data; ms->head = head->next; if (ms->head != NULL) ms->head->prev = NULL; ms->count -= 1; if ((ms->count) & 1 ) ms->mid = ms->mid->next; free(head); return item; }","title":"Medium Special"},{"location":"ds/stack/min-special/","text":"Min Special \u00b6 void SpecialStack::push(int x) { if (isEmpty() == true) { Stack::push(x); min.push(x); } else { Stack::push(x); int y = min.pop(); min.push(y); if (x < y) min.push(x); else min.push(y); } } /* SpecialStack's member method to remove an element from it. This method removes top element from min stack also. */ int SpecialStack::pop() { int x = Stack::pop(); min.pop(); return x; } operations -> push, pop, isempty, getMin -> O(1) aux. space -> O(n) Optimised space for 2 stacks: \u00b6 void SpecialStack::push(int x) { if (isEmpty() == true) { Stack::push(x); min.push(x); } else { Stack::push(x); int y = min.pop(); min.push(y); if (x <= y) min.push(x); } } int SpecialStack::pop() { int x = Stack::pop(); int y = min.pop(); if (y != x) min.push(y); return x; } operations -> push, pop, isempty, getMin -> O(1) aux. space -> O(n) (Worst case -> decreasing order)","title":"Min Special"},{"location":"ds/stack/min-special/#min-special","text":"void SpecialStack::push(int x) { if (isEmpty() == true) { Stack::push(x); min.push(x); } else { Stack::push(x); int y = min.pop(); min.push(y); if (x < y) min.push(x); else min.push(y); } } /* SpecialStack's member method to remove an element from it. This method removes top element from min stack also. */ int SpecialStack::pop() { int x = Stack::pop(); min.pop(); return x; } operations -> push, pop, isempty, getMin -> O(1) aux. space -> O(n)","title":"Min Special"},{"location":"ds/stack/min-special/#optimised-space-for-2-stacks","text":"void SpecialStack::push(int x) { if (isEmpty() == true) { Stack::push(x); min.push(x); } else { Stack::push(x); int y = min.pop(); min.push(y); if (x <= y) min.push(x); } } int SpecialStack::pop() { int x = Stack::pop(); int y = min.pop(); if (y != x) min.push(y); return x; } operations -> push, pop, isempty, getMin -> O(1) aux. space -> O(n) (Worst case -> decreasing order)","title":"Optimised space for 2 stacks:"},{"location":"ds/stack/reverse/","text":"Reverse \u00b6 Recursion char insert_at_bottom(char x) { if(st.size() == 0) st.push(x); else { char a = st.top(); st.pop(); insert_at_bottom(x); st.push(a); } } char reverse() { if(st.size()>0) { char x = st.top(); st.pop(); reverse(); insert_at_bottom(x); } }","title":"Reverse"},{"location":"ds/stack/reverse/#reverse","text":"Recursion char insert_at_bottom(char x) { if(st.size() == 0) st.push(x); else { char a = st.top(); st.pop(); insert_at_bottom(x); st.push(a); } } char reverse() { if(st.size()>0) { char x = st.top(); st.pop(); reverse(); insert_at_bottom(x); } }","title":"Reverse"},{"location":"ds/stack/sort/","text":"Sort \u00b6 Recursion Time Complexity: O(n2). In the worst case for every sortstack(), sortedinsert() is called for \u2018N\u2019 times recursively for putting element to the right place Auxiliary Space: O(N) void sortedInsert(struct stack** s, int x) { if (isEmpty(*s) or x > top(*s)) { push(s, x); return; } int temp = pop(s); sortedInsert(s, x); push(s, temp); } void sortStack(struct stack** s) { if (!isEmpty(*s)) { int x = pop(s); sortStack(s); sortedInsert(s, x); } }","title":"Sort"},{"location":"ds/stack/sort/#sort","text":"Recursion Time Complexity: O(n2). In the worst case for every sortstack(), sortedinsert() is called for \u2018N\u2019 times recursively for putting element to the right place Auxiliary Space: O(N) void sortedInsert(struct stack** s, int x) { if (isEmpty(*s) or x > top(*s)) { push(s, x); return; } int temp = pop(s); sortedInsert(s, x); push(s, temp); } void sortStack(struct stack** s) { if (!isEmpty(*s)) { int x = pop(s); sortStack(s); sortedInsert(s, x); } }","title":"Sort"},{"location":"ds/stack/stock-span/","text":"Stock Span \u00b6 Naive \u00b6 void calculateSpan(int price[], int n, int S[]) { S[0] = 1; for (int i = 1; i < n; i++) { S[i] = 1; for (int j = i - 1; (j >= 0) && (price[i] >= price[j]); j--) S[i]++; } } O(n^2), O(n) using Stack \u00b6 void calculateSpan(int price[], int n, int S[]) { stack<int> st; st.push(0); S[0] = 1; for (int i = 1; i < n; i++) { while (!st.empty() && price[st.top()] <= price[i]) st.pop(); S[i] = (st.empty()) ? (i + 1) : (i - st.top()); st.push(i); } } O(2n), O(n) Without stack \u00b6 void calculateSpan(int A[], int n, int ans[]) { ans[0] = 1; for (int i = 1; i < n; i++) { int counter = 1; while ((i - counter) >= 0 && A[i] >= A[i - counter]) { counter += ans[i - counter]; } ans[i] = counter; } }","title":"Stock Span"},{"location":"ds/stack/stock-span/#stock-span","text":"","title":"Stock Span"},{"location":"ds/stack/stock-span/#naive","text":"void calculateSpan(int price[], int n, int S[]) { S[0] = 1; for (int i = 1; i < n; i++) { S[i] = 1; for (int j = i - 1; (j >= 0) && (price[i] >= price[j]); j--) S[i]++; } } O(n^2), O(n)","title":"Naive"},{"location":"ds/stack/stock-span/#using-stack","text":"void calculateSpan(int price[], int n, int S[]) { stack<int> st; st.push(0); S[0] = 1; for (int i = 1; i < n; i++) { while (!st.empty() && price[st.top()] <= price[i]) st.pop(); S[i] = (st.empty()) ? (i + 1) : (i - st.top()); st.push(i); } } O(2n), O(n)","title":"using Stack"},{"location":"ds/stack/stock-span/#without-stack","text":"void calculateSpan(int A[], int n, int ans[]) { ans[0] = 1; for (int i = 1; i < n; i++) { int counter = 1; while ((i - counter) >= 0 && A[i] >= A[i - counter]) { counter += ans[i - counter]; } ans[i] = counter; } }","title":"Without stack"},{"location":"ds/stack/using-queue/","text":"Stack using Queue \u00b6 Costly Push \u00b6 void push(int x) { curr_size++; q2.push(x); while (!q1.empty()) { q2.push(q1.front()); q1.pop(); } queue<int> q = q1; q1 = q2; q2 = q; } void pop() { if (q1.empty()) return; q1.pop(); curr_size--; } Costly Pop \u00b6 void pop() { if (q1.empty()) return; while (q1.size() != 1) { q2.push(q1.front()); q1.pop(); } q1.pop(); curr_size--; queue<int> q = q1; q1 = q2; q2 = q; } void push(int x) { q1.push(x); curr_size++; }","title":"Stack using Queue"},{"location":"ds/stack/using-queue/#stack-using-queue","text":"","title":"Stack using Queue"},{"location":"ds/stack/using-queue/#costly-push","text":"void push(int x) { curr_size++; q2.push(x); while (!q1.empty()) { q2.push(q1.front()); q1.pop(); } queue<int> q = q1; q1 = q2; q2 = q; } void pop() { if (q1.empty()) return; q1.pop(); curr_size--; }","title":"Costly Push"},{"location":"ds/stack/using-queue/#costly-pop","text":"void pop() { if (q1.empty()) return; while (q1.size() != 1) { q2.push(q1.front()); q1.pop(); } q1.pop(); curr_size--; queue<int> q = q1; q1 = q2; q2 = q; } void push(int x) { q1.push(x); curr_size++; }","title":"Costly Pop"},{"location":"java/IO/","text":"","title":"IO"},{"location":"java/annotations/","text":"A form of metadata, provide data about a program that is not part of the program itself. Information for the compiler \u2014 Annotations can be used by the compiler to detect errors or suppress warnings. Compile-time and deployment-time processing \u2014 Software tools can process annotation information to generate code, XML files, and so forth. Runtime processing \u2014 Some annotations are available to be examined at runtime. stronger type checking extend java.lang.annotation to form your own annotations repeated are allowed Annotations can be applied to declarations: declarations of classes, fields, methods, and other program elements. @Entity @Override void mySuperMethod() { ... } @Author( name = \"Benjamin Franklin\", date = \"3/27/2003\" ) class MyClass { ... } @SuppressWarnings(value = \"unchecked\") void myMethod() { ... } @Author(name = \"Jane Doe\") @EBook class MyClass { ... } @Author(name = \"Jane Doe\") @Author(name = \"John Smith\") class MyClass { ... } Class instance creation expression: new @Interned MyObject(); Type cast: myString = (@NonNull String) str; implements clause: class UnmodifiableList<T> implements @Readonly List<@Readonly T> { ... } Thrown exception declaration: void monitorTemperature() throws @Critical TemperatureException { ... } Annotation Type \u00b6 Many annotations replace comments in code. @Documented @interface ClassPreamble { String author(); String date(); int currentRevision() default 1; String lastModified() default \"N/A\"; String lastModifiedBy() default \"N/A\"; // Note use of array String[] reviewers(); } @ClassPreamble ( author = \"John Doe\", date = \"3/17/2002\", currentRevision = 6, lastModified = \"4/12/2004\", lastModifiedBy = \"Jane Doe\", // Note array notation reviewers = {\"Alice\", \"Bob\", \"Cindy\"} ) public class Generation3List extends Generation2List { // class code goes here } java inbuilt \u00b6 @Deprecated @Override @SuppressWarnings({\"unchecked\", \"deprecation\"}) @SafeVarargs - avoid unsafe operations // TODO @FunctionalInterface Meta annotations \u00b6 @Retention: specifies how the marked annotation is stored: RetentionPolicy.SOURCE \u2013 The marked annotation is retained only in the source level and is ignored by the compiler. RetentionPolicy.CLASS \u2013 The marked annotation is retained by the compiler at compile time, but is ignored by the Java Virtual Machine (JVM). RetentionPolicy.RUNTIME \u2013 The marked annotation is retained by the JVM so it can be used by the runtime environment. @Documented - included in javadoc @Target - on which it is allowed @Inherited - sub class inherets super class's annotion. @Repeatable - more than once Type Annotations and Pluggable Type Systems \u00b6 expressions (new), casts, implements clauses, and throws clauses. @NonNull String str; Checker Framework Repeating Annotations \u00b6 @Schedule(dayOfMonth=\"last\") @Schedule(dayOfWeek=\"Fri\", hour=\"23\") public void doPeriodicCleanup() { ... } @Alert(role=\"Manager\") @Alert(role=\"Administrator\") public class UnauthorizedAccessException extends SecurityException { ... } For compatibility reasons, repeating annotations are stored in a container annotation that is automatically generated by the Java compiler. In order for the compiler to do this, two declarations are required in your code: Declare a Repeatable Annotation Type import java.lang.annotation.Repeatable; @Repeatable(Schedules.class) public @interface Schedule { String dayOfMonth() default \"first\"; String dayOfWeek() default \"Mon\"; int hour() default 12; } Declare the Containing Annotation Type public @interface Schedules { Schedule[] value(); } Retrieving Annotations \u00b6 AnnotatedElement.getAnnotation(Class<T>) AnnotatedElement.getAnnotationsByType(Class<T>) Design Considerations \u00b6 you must consider the cardinality of annotations of that type. to be as flexible and powerful as possible.","title":"Annotations"},{"location":"java/annotations/#annotation-type","text":"Many annotations replace comments in code. @Documented @interface ClassPreamble { String author(); String date(); int currentRevision() default 1; String lastModified() default \"N/A\"; String lastModifiedBy() default \"N/A\"; // Note use of array String[] reviewers(); } @ClassPreamble ( author = \"John Doe\", date = \"3/17/2002\", currentRevision = 6, lastModified = \"4/12/2004\", lastModifiedBy = \"Jane Doe\", // Note array notation reviewers = {\"Alice\", \"Bob\", \"Cindy\"} ) public class Generation3List extends Generation2List { // class code goes here }","title":"Annotation Type"},{"location":"java/annotations/#java-inbuilt","text":"@Deprecated @Override @SuppressWarnings({\"unchecked\", \"deprecation\"}) @SafeVarargs - avoid unsafe operations // TODO @FunctionalInterface","title":"java inbuilt"},{"location":"java/annotations/#meta-annotations","text":"@Retention: specifies how the marked annotation is stored: RetentionPolicy.SOURCE \u2013 The marked annotation is retained only in the source level and is ignored by the compiler. RetentionPolicy.CLASS \u2013 The marked annotation is retained by the compiler at compile time, but is ignored by the Java Virtual Machine (JVM). RetentionPolicy.RUNTIME \u2013 The marked annotation is retained by the JVM so it can be used by the runtime environment. @Documented - included in javadoc @Target - on which it is allowed @Inherited - sub class inherets super class's annotion. @Repeatable - more than once","title":"Meta annotations"},{"location":"java/annotations/#type-annotations-and-pluggable-type-systems","text":"expressions (new), casts, implements clauses, and throws clauses. @NonNull String str; Checker Framework","title":"Type Annotations and Pluggable Type Systems"},{"location":"java/annotations/#repeating-annotations","text":"@Schedule(dayOfMonth=\"last\") @Schedule(dayOfWeek=\"Fri\", hour=\"23\") public void doPeriodicCleanup() { ... } @Alert(role=\"Manager\") @Alert(role=\"Administrator\") public class UnauthorizedAccessException extends SecurityException { ... } For compatibility reasons, repeating annotations are stored in a container annotation that is automatically generated by the Java compiler. In order for the compiler to do this, two declarations are required in your code: Declare a Repeatable Annotation Type import java.lang.annotation.Repeatable; @Repeatable(Schedules.class) public @interface Schedule { String dayOfMonth() default \"first\"; String dayOfWeek() default \"Mon\"; int hour() default 12; } Declare the Containing Annotation Type public @interface Schedules { Schedule[] value(); }","title":"Repeating Annotations"},{"location":"java/annotations/#retrieving-annotations","text":"AnnotatedElement.getAnnotation(Class<T>) AnnotatedElement.getAnnotationsByType(Class<T>)","title":"Retrieving Annotations"},{"location":"java/annotations/#design-considerations","text":"you must consider the cardinality of annotations of that type. to be as flexible and powerful as possible.","title":"Design Considerations"},{"location":"java/basics/","text":"Variables \u00b6 Instance Variables (Non-Static Fields) Class Variables (Static Fields) Local Variables: bw {}. Parameters: always classified as \"variables\" not \"fields\" long creditCardNumber = 1234_5678_9012_3456L; primitive data types are: byte, short, int, long, float, double, boolean, and char. java.lang.String class Naming \u00b6 case sensitive unlimited-length sequence of Unicode letters and digits (avoid _ and $ in start) not keyword or reserved word gearRatio NUM_GEARS = 6 Arrays \u00b6 its length is fixed. int[] anArray = new int[10]; String[][] names = { {\"Mr. \", \"Mrs. \", \"Ms. \"}, {\"Smith\", \"Jones\"} }; System.arraycopy(copyFrom, 2, copyTo, 0, 7); java.util.Arrays.copyOfRange(copyFrom, 2, 9); java.util.Arrays \u00b6 binarySearch equals fill parallelSort java.util.Arrays.stream(copyTo).map(coffee -> coffee + \" \").forEach(System.out::print) System.out.println(java.util.Arrays.toString(copyTo)) Operators \u00b6 specific operations on one, two, or three operands, and then return a result. Simple Assignment Operator = Arithmetic Operators Additive operator (also used for String concatenation) Subtraction operator Multiplication operator / Division operator % Remainder operator Unary Operators Unary plus operator; indicates positive value (numbers are positive without this, however) Unary minus operator; negates an expression ++ Increment operator; increments a value by 1 -- Decrement operator; decrements a value by 1 ! Logical complement operator; inverts the value of a boolean Equality and Relational Operators == Equal to != Not equal to Greater than = Greater than or equal to < Less than <= Less than or equal to Conditional Operators && Conditional-AND || Conditional-OR ?: Ternary (shorthand for if-then-else statement) Type Comparison Operator instanceof Compares an object to a specified type Bitwise and Bit Shift Operators ~ Unary bitwise complement << Signed left shift Signed right shift Unsigned right shift & Bitwise AND ^ Bitwise exclusive OR | Bitwise inclusive OR Expressions (result=9), blocks({}), statements ;->; \u00b6 Control flow \u00b6 program runs in top-down decision-making statements if-then-else if (testscore >= 90) { grade = 'A'; } else if (testscore >= 60) { grade = 'D'; } else { grade = 'F'; } switch switch (month) { case 1: monthString = \"January\"; break; default: monthString = \"Invalid month\"; break; } the looping statements (for, while, do-while) while (expression) { statement(s) } do { statement(s) } while (expression); for (initialization; termination; increment) { statement(s) } branching statements (break, continue, return) search: for (i = 0; i < arrayOfInts.length; i++) { for (j = 0; j < arrayOfInts[i].length; j++) { if (arrayOfInts[i][j] == searchfor) { foundIt = true; break search; } } } if (foundIt) { System.out.println(\"Found \" + searchfor + \" at \" + i + \", \" + j); } else { System.out.println(searchfor + \" not in the array\"); } access modifiers \u00b6 public field is accessible from all classes. private field is accessible only within its own class.","title":"Variables"},{"location":"java/basics/#variables","text":"Instance Variables (Non-Static Fields) Class Variables (Static Fields) Local Variables: bw {}. Parameters: always classified as \"variables\" not \"fields\" long creditCardNumber = 1234_5678_9012_3456L; primitive data types are: byte, short, int, long, float, double, boolean, and char. java.lang.String class","title":"Variables"},{"location":"java/basics/#naming","text":"case sensitive unlimited-length sequence of Unicode letters and digits (avoid _ and $ in start) not keyword or reserved word gearRatio NUM_GEARS = 6","title":"Naming"},{"location":"java/basics/#arrays","text":"its length is fixed. int[] anArray = new int[10]; String[][] names = { {\"Mr. \", \"Mrs. \", \"Ms. \"}, {\"Smith\", \"Jones\"} }; System.arraycopy(copyFrom, 2, copyTo, 0, 7); java.util.Arrays.copyOfRange(copyFrom, 2, 9);","title":"Arrays"},{"location":"java/basics/#javautilarrays","text":"binarySearch equals fill parallelSort java.util.Arrays.stream(copyTo).map(coffee -> coffee + \" \").forEach(System.out::print) System.out.println(java.util.Arrays.toString(copyTo))","title":"java.util.Arrays"},{"location":"java/basics/#operators","text":"specific operations on one, two, or three operands, and then return a result. Simple Assignment Operator = Arithmetic Operators Additive operator (also used for String concatenation) Subtraction operator Multiplication operator / Division operator % Remainder operator Unary Operators Unary plus operator; indicates positive value (numbers are positive without this, however) Unary minus operator; negates an expression ++ Increment operator; increments a value by 1 -- Decrement operator; decrements a value by 1 ! Logical complement operator; inverts the value of a boolean Equality and Relational Operators == Equal to != Not equal to Greater than = Greater than or equal to < Less than <= Less than or equal to Conditional Operators && Conditional-AND || Conditional-OR ?: Ternary (shorthand for if-then-else statement) Type Comparison Operator instanceof Compares an object to a specified type Bitwise and Bit Shift Operators ~ Unary bitwise complement << Signed left shift Signed right shift Unsigned right shift & Bitwise AND ^ Bitwise exclusive OR | Bitwise inclusive OR","title":"Operators"},{"location":"java/basics/#expressions-result9-blocks-statements-","text":"","title":"Expressions (result=9), blocks({}), statements ;-&gt;;"},{"location":"java/basics/#control-flow","text":"program runs in top-down decision-making statements if-then-else if (testscore >= 90) { grade = 'A'; } else if (testscore >= 60) { grade = 'D'; } else { grade = 'F'; } switch switch (month) { case 1: monthString = \"January\"; break; default: monthString = \"Invalid month\"; break; } the looping statements (for, while, do-while) while (expression) { statement(s) } do { statement(s) } while (expression); for (initialization; termination; increment) { statement(s) } branching statements (break, continue, return) search: for (i = 0; i < arrayOfInts.length; i++) { for (j = 0; j < arrayOfInts[i].length; j++) { if (arrayOfInts[i][j] == searchfor) { foundIt = true; break search; } } } if (foundIt) { System.out.println(\"Found \" + searchfor + \" at \" + i + \", \" + j); } else { System.out.println(searchfor + \" not in the array\"); }","title":"Control flow"},{"location":"java/basics/#access-modifiers","text":"public field is accessible from all classes. private field is accessible only within its own class.","title":"access modifiers"},{"location":"java/classes/","text":"varargs","title":"Classes"},{"location":"java/collections/","text":"A collection \u2014 sometimes called a container \u2014 is simply an object that groups multiple elements into a single unit. Collections are used to store, retrieve, manipulate, and communicate aggregate data. collections framework is a unified architecture for representing and manipulating collections. eg c++ STL Interfaces: These are abstract data types that represent collections. form a hierarchy. Implementations: These are the concrete implementations of the collection interfaces. reusable DS. Algorithms: These are the methods that perform useful computations, polymorphic, reusable functionality. Why? \u00b6 Reduces programming effort Increases program speed and quality Allows interoperability among unrelated APIs Reduces effort to learn and to use new APIs Reduces effort to design new APIs Fosters software reuse interoperability among unrelated APIs Collections: * Set * SortedSet * List * Queue * Dequeue Map * SortedMap Interfaces \u00b6 These interfaces allow collections to be manipulated independently of the details of their representation. public interface Collection<E> Collection \u2014 the root of the collection hierarchy. A collection represents a group of objects known as its elements. Set \u2014 a collection that cannot contain duplicate elements. List \u2014 an ordered collection (sometimes called a sequence). Lists can contain duplicate elements. eg Vector Queue \u2014 a collection used to hold multiple elements prior to processing. Queues typically, but do not necessarily, order elements in a FIFO (first-in, first-out) manner. priority queues. ordering properties. Deque \u2014 a collection used to hold multiple elements prior to processing. both ends-> insertion, deletion, removed. Map \u2014 an object that maps keys to values. SortedSet \u2014 a Set that maintains its elements in ascending order. SortedMap \u2014 a Map that maintains its mappings in ascending key order. Traversing Collections \u00b6 1) using aggregate operations 2) with the for-each construct 3) by using Iterators. myShapesCollection.stream() .filter(e -> e.getColor() == Color.RED) .forEach(e -> System.out.println(e.getName())); String joined = elements.stream() .map(Object::toString) .collect(Collectors.joining(\", \")); int total = employees.stream() .collect(Collectors.summingInt(Employee::getSalary))); The key difference between the new aggregate operations and the existing bulk operations (containsAll, addAll, etc.) is that the old versions are all mutative, meaning that they all modify the underlying collection. for (Object o : collection) System.out.println(o); public interface Iterator<E> { boolean hasNext(); E next(); void remove(); //optional } polymorphic: static void filter(Collection<?> c) { for (Iterator<?> it = c.iterator(); it.hasNext(); ) if (!cond(it.next())) it.remove(); } c.removeAll(Collections.singleton(e)); import java.util.*; import java.io.*; public class Anagrams { public static void main(String[] args) { int minGroupSize = Integer.parseInt(args[1]); // Read words from file and put into a simulated multimap Map<String, List<String>> m = new HashMap<String, List<String>>(); try { Scanner s = new Scanner(new File(args[0])); while (s.hasNext()) { String word = s.next(); String alpha = alphabetize(word); List<String> l = m.get(alpha); if (l == null) m.put(alpha, l=new ArrayList<String>()); l.add(word); } } catch (IOException e) { System.err.println(e); System.exit(1); } // Print all permutation groups above size threshold for (List<String> l : m.values()) if (l.size() >= minGroupSize) System.out.println(l.size() + \": \" + l); } private static String alphabetize(String s) { char[] a = s.toCharArray(); Arrays.sort(a); return new String(a); } } Aggregate Operations \u00b6 double average = roster .stream() .filter(p -> p.getGender() == Person.Sex.MALE) .mapToInt(Person::getAge) .average() .getAsDouble(); Aggregate Operations vs Iterators \u00b6 They use internal iteration: It can more easily take advantage of parallel computing, which involves dividing a problem into subproblems, solving those problems simultaneously, and then combining the results of the solutions to the subproblems. Parallelism They process elements from a stream. They support behavior as parameters: lambda expressions Reduction \u00b6 Integer totalAgeReduce = roster .stream() .map(Person::getAge) .reduce( 0, // identity (a, b) -> a + b // accumulator ); Stream.collect Method \u00b6 Unlike the reduce method, which always creates a new value when it processes an element, the collect method modifies, or mutates, an existing value. Averager averageCollect = roster.stream() .filter(p -> p.getGender() == Person.Sex.MALE) .map(Person::getAge) .collect(Averager::new, // supplier Averager::accept, // accumulator Averager::combine // combiner ); System.out.println(\"Average age of male members: \" + averageCollect.average()); Map<Person.Sex, Integer> totalAgeByGender = roster .stream() .collect( Collectors.groupingBy( Person::getGender, Collectors.reducing( 0, // identity Person::getAge, // mapper Integer::sum))); // operation Algorithms \u00b6 Custom implementation \u00b6 Interoperability \u00b6","title":"Collections"},{"location":"java/collections/#why","text":"Reduces programming effort Increases program speed and quality Allows interoperability among unrelated APIs Reduces effort to learn and to use new APIs Reduces effort to design new APIs Fosters software reuse interoperability among unrelated APIs Collections: * Set * SortedSet * List * Queue * Dequeue Map * SortedMap","title":"Why?"},{"location":"java/collections/#interfaces","text":"These interfaces allow collections to be manipulated independently of the details of their representation. public interface Collection<E> Collection \u2014 the root of the collection hierarchy. A collection represents a group of objects known as its elements. Set \u2014 a collection that cannot contain duplicate elements. List \u2014 an ordered collection (sometimes called a sequence). Lists can contain duplicate elements. eg Vector Queue \u2014 a collection used to hold multiple elements prior to processing. Queues typically, but do not necessarily, order elements in a FIFO (first-in, first-out) manner. priority queues. ordering properties. Deque \u2014 a collection used to hold multiple elements prior to processing. both ends-> insertion, deletion, removed. Map \u2014 an object that maps keys to values. SortedSet \u2014 a Set that maintains its elements in ascending order. SortedMap \u2014 a Map that maintains its mappings in ascending key order.","title":"Interfaces"},{"location":"java/collections/#traversing-collections","text":"1) using aggregate operations 2) with the for-each construct 3) by using Iterators. myShapesCollection.stream() .filter(e -> e.getColor() == Color.RED) .forEach(e -> System.out.println(e.getName())); String joined = elements.stream() .map(Object::toString) .collect(Collectors.joining(\", \")); int total = employees.stream() .collect(Collectors.summingInt(Employee::getSalary))); The key difference between the new aggregate operations and the existing bulk operations (containsAll, addAll, etc.) is that the old versions are all mutative, meaning that they all modify the underlying collection. for (Object o : collection) System.out.println(o); public interface Iterator<E> { boolean hasNext(); E next(); void remove(); //optional } polymorphic: static void filter(Collection<?> c) { for (Iterator<?> it = c.iterator(); it.hasNext(); ) if (!cond(it.next())) it.remove(); } c.removeAll(Collections.singleton(e)); import java.util.*; import java.io.*; public class Anagrams { public static void main(String[] args) { int minGroupSize = Integer.parseInt(args[1]); // Read words from file and put into a simulated multimap Map<String, List<String>> m = new HashMap<String, List<String>>(); try { Scanner s = new Scanner(new File(args[0])); while (s.hasNext()) { String word = s.next(); String alpha = alphabetize(word); List<String> l = m.get(alpha); if (l == null) m.put(alpha, l=new ArrayList<String>()); l.add(word); } } catch (IOException e) { System.err.println(e); System.exit(1); } // Print all permutation groups above size threshold for (List<String> l : m.values()) if (l.size() >= minGroupSize) System.out.println(l.size() + \": \" + l); } private static String alphabetize(String s) { char[] a = s.toCharArray(); Arrays.sort(a); return new String(a); } }","title":"Traversing Collections"},{"location":"java/collections/#aggregate-operations","text":"double average = roster .stream() .filter(p -> p.getGender() == Person.Sex.MALE) .mapToInt(Person::getAge) .average() .getAsDouble();","title":"Aggregate Operations"},{"location":"java/collections/#aggregate-operations-vs-iterators","text":"They use internal iteration: It can more easily take advantage of parallel computing, which involves dividing a problem into subproblems, solving those problems simultaneously, and then combining the results of the solutions to the subproblems. Parallelism They process elements from a stream. They support behavior as parameters: lambda expressions","title":"Aggregate Operations vs Iterators"},{"location":"java/collections/#reduction","text":"Integer totalAgeReduce = roster .stream() .map(Person::getAge) .reduce( 0, // identity (a, b) -> a + b // accumulator );","title":"Reduction"},{"location":"java/collections/#streamcollect-method","text":"Unlike the reduce method, which always creates a new value when it processes an element, the collect method modifies, or mutates, an existing value. Averager averageCollect = roster.stream() .filter(p -> p.getGender() == Person.Sex.MALE) .map(Person::getAge) .collect(Averager::new, // supplier Averager::accept, // accumulator Averager::combine // combiner ); System.out.println(\"Average age of male members: \" + averageCollect.average()); Map<Person.Sex, Integer> totalAgeByGender = roster .stream() .collect( Collectors.groupingBy( Person::getGender, Collectors.reducing( 0, // identity Person::getAge, // mapper Integer::sum))); // operation","title":"Stream.collect Method"},{"location":"java/collections/#algorithms","text":"","title":"Algorithms"},{"location":"java/collections/#custom-implementation","text":"","title":"Custom implementation"},{"location":"java/collections/#interoperability","text":"","title":"Interoperability"},{"location":"java/concurrency/","text":"","title":"Concurrency"},{"location":"java/debugging/","text":"","title":"Debugging"},{"location":"java/deployment/","text":"","title":"Deployment"},{"location":"java/exceptions/","text":"exceptional event disrupts the normal flow of the program's instructions. exception object throwing an exception call stack exception handler catch the exception","title":"Exceptions"},{"location":"java/generics/","text":"bugs are difficult to find. with generics you can detect some runtime bugs at compile time. generics enable types to be parameters when defining classes, interfaces and methods. Why? \u00b6 Stronger type checks at compile time. Elimination of casts Enabling programmers to implement generic algorithms.","title":"Generics"},{"location":"java/generics/#why","text":"Stronger type checks at compile time. Elimination of casts Enabling programmers to implement generic algorithms.","title":"Why?"},{"location":"java/helloworld/","text":"class HelloWorldApp { public static void main(String[] args) { System.out.println(\"Hello World!\"); // Display the string. } } multiline - / / javadoc - /* / single line - //","title":"Helloworld"},{"location":"java/inheritance/","text":"subclass (also a derived class, extended class, or child class). superclass (also a base class or a parent class). the topmost class, Object. Such a class is said to be descended from all the classes in the inheritance chain stretching back to Object. Constructors are not members, so they are not inherited by subclasses A subclass inherits all of the public and protected members of its parent, no matter what package the subclass is in. If the subclass is in the same package as its parent, it also inherits the package-private members of the parent. You can use the inherited members as is, replace them, hide them, or supplement them with new members: You can declare a field in the subclass with the same name as the one in the superclass, thus hiding it (not recommended). You can write a new instance method in the subclass that has the same signature as the one in the superclass, thus overriding it. You can write a new static method in the subclass that has the same signature as the one in the superclass, thus hiding it. You can write a subclass constructor that invokes the constructor of the superclass, either implicitly or by using the keyword super. A nested class has access to all the private members of its enclosing class\u2014both fields and methods. Therefore, a public or protected nested class inherited by a subclass has indirect access to all of the private members of the superclass. Casting Objects \u00b6 // implicit casting Object obj = new MountainBike(); // explicit casting MountainBike myBike = (MountainBike)obj; instanceof Multiple Inheritance of State, Implementation, and Type \u00b6 multiple inheritance of state problem: name conflicts and ambiguity. Because interfaces do not contain fields, you do not have to worry about problems that result from multiple inheritance of state. As with multiple inheritance of implementation, a class can inherit different implementations of a method defined (as default or static) in the interfaces that it extends. In this case, the compiler or the user must decide which one to use. Polymorphism \u00b6 principle in biology in which an organism or species can have many different forms or stages. Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class. virtual method invocation \u00b6 It does not call the method that is defined by the variable's type super keyword \u00b6 Note: If a constructor does not explicitly invoke a superclass constructor, the Java compiler automatically inserts a call to the no-argument constructor of the superclass. If the super class does not have a no-argument constructor, you will get a compile-time error. Object does have such a constructor, so if Object is the only superclass, there is no problem. super(parameter list) -> constructor of super class. constructor chaining \u00b6 a whole chain of constructors called, all the way back to the constructor of Object. Object as superclass \u00b6 protected Object clone() throws CloneNotSupportedException Creates and returns a copy of this object. public boolean equals(Object obj) Indicates whether some other object is \"equal to\" this one. check only refernece / symbol not values protected void finalize() throws Throwable Called by the garbage collector on an object when garbage collection determines that there are no more references to the object public final Class getClass() Returns the runtime class of an object. public int hashCode() Returns a hash code value for the object. public String toString() Returns a string representation of the object. public final void notify() public final void notifyAll() public final void wait() public final void wait(long timeout) public final void wait(long timeout, int nanos) If you override equals(), you must override hashCode() as well. The Class class, in the java.lang package, has a large number of methods (more than 50). For example, you can test to see if the class is an annotation (isAnnotation()), an interface (isInterface()), or an enumeration (isEnum()). You can see what the object's fields are (getFields()) or what its methods are (getMethods()), and so on. You can declare some or all of a class's methods final Methods called from constructors should generally be declared finaal. A class that is declared final cannot be subclassed. Abstract Methods and Classes \u00b6 Abstract classes cannot be instantiated, but they can be subclassed. Abstract classes vs interface \u00b6 Abstract classes are similar to interfaces. You cannot instantiate them, and they may contain a mix of methods declared with or without an implementation. However, with abstract classes, you can declare fields that are not static and final, and define public, protected, and private concrete methods. With interfaces, all fields are automatically public, static, and final, and all methods that you declare or define (as default methods) are public. In addition, you can extend only one class, whether or not it is abstract, whereas you can implement any number of interfaces. Which should you use, abstract classes or interfaces? Consider using abstract classes if any of these statements apply to your situation: You want to share code among several closely related classes. You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private). You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong. Consider using interfaces if any of these statements apply to your situation: You expect that unrelated classes would implement your interface. For example, the interfaces Comparable and Cloneable are implemented by many unrelated classes. You want to specify the behavior of a particular data type, but not concerned about who implements its behavior. You want to take advantage of multiple inheritance of type. overriding and hiding methods \u00b6 same signature (name, plus the number and the type of its parameters) and return type @Override If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass. The version of the overridden instance method that gets invoked is the one in the subclass. The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass. public class Animal { public static void testClassMethod() { System.out.println(\"The static method in Animal\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Animal\"); } } public class Cat extends Animal { public static void testClassMethod() { System.out.println(\"The static method in Cat\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Cat\"); } public static void main(String[] args) { Cat myCat = new Cat(); Animal myAnimal = myCat; Animal.testClassMethod(); myAnimal.testInstanceMethod(); } } The static method in Animal The instance method in Cat","title":"Inheritance"},{"location":"java/inheritance/#casting-objects","text":"// implicit casting Object obj = new MountainBike(); // explicit casting MountainBike myBike = (MountainBike)obj; instanceof","title":"Casting Objects"},{"location":"java/inheritance/#multiple-inheritance-of-state-implementation-and-type","text":"multiple inheritance of state problem: name conflicts and ambiguity. Because interfaces do not contain fields, you do not have to worry about problems that result from multiple inheritance of state. As with multiple inheritance of implementation, a class can inherit different implementations of a method defined (as default or static) in the interfaces that it extends. In this case, the compiler or the user must decide which one to use.","title":"Multiple Inheritance of State, Implementation, and Type"},{"location":"java/inheritance/#polymorphism","text":"principle in biology in which an organism or species can have many different forms or stages. Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class.","title":"Polymorphism"},{"location":"java/inheritance/#virtual-method-invocation","text":"It does not call the method that is defined by the variable's type","title":"virtual method invocation"},{"location":"java/inheritance/#super-keyword","text":"Note: If a constructor does not explicitly invoke a superclass constructor, the Java compiler automatically inserts a call to the no-argument constructor of the superclass. If the super class does not have a no-argument constructor, you will get a compile-time error. Object does have such a constructor, so if Object is the only superclass, there is no problem. super(parameter list) -> constructor of super class.","title":"super keyword"},{"location":"java/inheritance/#constructor-chaining","text":"a whole chain of constructors called, all the way back to the constructor of Object.","title":"constructor chaining"},{"location":"java/inheritance/#object-as-superclass","text":"protected Object clone() throws CloneNotSupportedException Creates and returns a copy of this object. public boolean equals(Object obj) Indicates whether some other object is \"equal to\" this one. check only refernece / symbol not values protected void finalize() throws Throwable Called by the garbage collector on an object when garbage collection determines that there are no more references to the object public final Class getClass() Returns the runtime class of an object. public int hashCode() Returns a hash code value for the object. public String toString() Returns a string representation of the object. public final void notify() public final void notifyAll() public final void wait() public final void wait(long timeout) public final void wait(long timeout, int nanos) If you override equals(), you must override hashCode() as well. The Class class, in the java.lang package, has a large number of methods (more than 50). For example, you can test to see if the class is an annotation (isAnnotation()), an interface (isInterface()), or an enumeration (isEnum()). You can see what the object's fields are (getFields()) or what its methods are (getMethods()), and so on. You can declare some or all of a class's methods final Methods called from constructors should generally be declared finaal. A class that is declared final cannot be subclassed.","title":"Object as superclass"},{"location":"java/inheritance/#abstract-methods-and-classes","text":"Abstract classes cannot be instantiated, but they can be subclassed.","title":"Abstract Methods and Classes"},{"location":"java/inheritance/#abstract-classes-vs-interface","text":"Abstract classes are similar to interfaces. You cannot instantiate them, and they may contain a mix of methods declared with or without an implementation. However, with abstract classes, you can declare fields that are not static and final, and define public, protected, and private concrete methods. With interfaces, all fields are automatically public, static, and final, and all methods that you declare or define (as default methods) are public. In addition, you can extend only one class, whether or not it is abstract, whereas you can implement any number of interfaces. Which should you use, abstract classes or interfaces? Consider using abstract classes if any of these statements apply to your situation: You want to share code among several closely related classes. You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private). You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong. Consider using interfaces if any of these statements apply to your situation: You expect that unrelated classes would implement your interface. For example, the interfaces Comparable and Cloneable are implemented by many unrelated classes. You want to specify the behavior of a particular data type, but not concerned about who implements its behavior. You want to take advantage of multiple inheritance of type.","title":"Abstract classes vs interface"},{"location":"java/inheritance/#overriding-and-hiding-methods","text":"same signature (name, plus the number and the type of its parameters) and return type @Override If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass. The version of the overridden instance method that gets invoked is the one in the subclass. The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass. public class Animal { public static void testClassMethod() { System.out.println(\"The static method in Animal\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Animal\"); } } public class Cat extends Animal { public static void testClassMethod() { System.out.println(\"The static method in Cat\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Cat\"); } public static void main(String[] args) { Cat myCat = new Cat(); Animal myAnimal = myCat; Animal.testClassMethod(); myAnimal.testInstanceMethod(); } } The static method in Animal The instance method in Cat","title":"overriding and hiding methods"},{"location":"java/interfaces/","text":"A contract that other people adhere to and people know the API but not the implementation public interface OperateCar { // constant declarations, if any // method signatures // An enum with values RIGHT, LEFT int turn(Direction direction, double radius, double startSpeed, double endSpeed); int changeLanes(Direction direction, double startSpeed, double endSpeed); int signalTurn(Direction direction, boolean signalOn); int getRadarFront(double distanceToCar, double speedOfCar); int getRadarRear(double distanceToCar, double speedOfCar); ...... // more method signatures } public interface GroupedInterface extends Interface1, Interface2, Interface3 { // constant declarations // base of natural logarithms double E = 2.718282; // method signatures void doSomething (int i, double x); int doSomethingElse(String s); } abstract methods, default methods, and static methods -> default public , can omit. All constant values defined in an interface are implicitly public, static, and final. public interface Relatable { // this (object calling isLargerThan) // and other must be instances of // the same class returns 1, 0, -1 // if this is greater than, // equal to, or less than other public int isLargerThan(Relatable other); } public class RectanglePlus implements Relatable { public int isLargerThan(Relatable other) { RectanglePlus otherRect = (RectanglePlus)other; if (this.getArea() < otherRect.getArea()) return -1; else if (this.getArea() > otherRect.getArea()) return 1; else return 0; } } Evolving Interfaces \u00b6 making changes in historic interfaces make devs angry. either extend it, or define static and default methods. default boolean didItWork(int i, double x, String s) { // Method body } Extending Interfaces That Contain Default Methods \u00b6 Not mention the default method at all, which lets your extended interface inherit the default method. Redeclare the default method, which makes it abstract. Redefine the default method, which overrides it. Static Methods \u00b6 A static method is a method that is associated with the class in which it is defined rather than with any object. Every instance of the class shares its static methods myDeck.sort( Comparator.comparing(Card::getRank) .reversed() .thenComparing(Comparator.comparing(Card::getSuit)));","title":"Interfaces"},{"location":"java/interfaces/#evolving-interfaces","text":"making changes in historic interfaces make devs angry. either extend it, or define static and default methods. default boolean didItWork(int i, double x, String s) { // Method body }","title":"Evolving Interfaces"},{"location":"java/interfaces/#extending-interfaces-that-contain-default-methods","text":"Not mention the default method at all, which lets your extended interface inherit the default method. Redeclare the default method, which makes it abstract. Redefine the default method, which overrides it.","title":"Extending Interfaces That Contain Default Methods"},{"location":"java/interfaces/#static-methods","text":"A static method is a method that is associated with the class in which it is defined rather than with any object. Every instance of the class shares its static methods myDeck.sort( Comparator.comparing(Card::getRank) .reversed() .thenComparing(Comparator.comparing(Card::getSuit)));","title":"Static Methods"},{"location":"java/intro/","text":"what is java? \u00b6 javase/tutorial programming language \u00b6 general-purpose high-level .java -> compiler -> .class (byte code) -> JVM -> machine code perform additional steps at runtime to give your application a performance boost. finding performance bottlenecks and recompiling (to native code) frequently used sections of code. Simple Object oriented Distributed Multithreaded Dynamic Architecture neutral Portable High performance Robust Secure learn more at whitepaper Platform \u00b6 A platform is the hardware or software environment in which a program runs. Java platform a software-only platform that runs on top of other hardware-based platforms. JVM Java API Development Tools - javac, java, javadoc etc API - basic objects, networking, security, XML generation, database access etc Deployment Technologies - Java Web Start and Java Plug-In for deploying your applications to end users. User Interface Toolkits - JavaFX, Swing, and Java 2D (GUI) Integration Libraries - database access and manipulation of remote objects. (IDL, JDBC, JNDI, RMI, RMI-IIOP) docs platform-independent environment Why? \u00b6 Get started quickly : powerful object-oriented language, it's easy to learn. less code : 4 times smaller than the same program written in C++. (based on methods, classes count etc) better code : good coding practices, automatic garbage collection, object orientation, JavaBeans\u2122 component architecture, API Develop more quickly : 2x c++ portable Write once, run anywhere Distribute software easily : With Java Web Start software.","title":"what is java?"},{"location":"java/intro/#what-is-java","text":"javase/tutorial","title":"what is java?"},{"location":"java/intro/#programming-language","text":"general-purpose high-level .java -> compiler -> .class (byte code) -> JVM -> machine code perform additional steps at runtime to give your application a performance boost. finding performance bottlenecks and recompiling (to native code) frequently used sections of code. Simple Object oriented Distributed Multithreaded Dynamic Architecture neutral Portable High performance Robust Secure learn more at whitepaper","title":"programming language"},{"location":"java/intro/#platform","text":"A platform is the hardware or software environment in which a program runs. Java platform a software-only platform that runs on top of other hardware-based platforms. JVM Java API Development Tools - javac, java, javadoc etc API - basic objects, networking, security, XML generation, database access etc Deployment Technologies - Java Web Start and Java Plug-In for deploying your applications to end users. User Interface Toolkits - JavaFX, Swing, and Java 2D (GUI) Integration Libraries - database access and manipulation of remote objects. (IDL, JDBC, JNDI, RMI, RMI-IIOP) docs platform-independent environment","title":"Platform"},{"location":"java/intro/#why","text":"Get started quickly : powerful object-oriented language, it's easy to learn. less code : 4 times smaller than the same program written in C++. (based on methods, classes count etc) better code : good coding practices, automatic garbage collection, object orientation, JavaBeans\u2122 component architecture, API Develop more quickly : 2x c++ portable Write once, run anywhere Distribute software easily : With Java Web Start software.","title":"Why?"},{"location":"java/java9%26beyond/","text":"TODO https://dev.to/awwsmm/20-reasons-to-move-on-from-java-8-1dio https://4comprehension.com/keeping-up-with-java-9-10-11-and-beyond/ https://codete.com/blog/java-8-java-11-quick-guide https://www.javatpoint.com/java-8-vs-java-11 https://www.infoworld.com/article/3606833/jdk-17-the-new-features-in-java-17.html https://www.marcobehler.com/guides/a-guide-to-java-versions-and-features","title":"Java9&beyond"},{"location":"java/jdbc/","text":"","title":"Jdbc"},{"location":"java/jsp/","text":"","title":"Jsp"},{"location":"java/networking/","text":"","title":"Networking"},{"location":"java/numbers/","text":"reasons to use objects in place of primitives, and the Java platform provides wrapper classes for each of the primitive data types. These classes \"wrap\" the primitive in an object. Often, the wrapping is done by the compiler As an argument of a method that expects an object (often used when manipulating collections of numbers). To use constants defined by the class, such as MIN_VALUE and MAX_VALUE, that provide the upper and lower bounds of the data type. To use class methods for converting values to and from other primitive types, for converting to and from strings, and for converting between number systems (decimal, octal, hexadecimal, binary). BigDecimal and BigInteger are used for high-precision calculations. AtomicInteger and AtomicLong are used for multi-threaded applications. Byte Short Integer Long Float Double System.out.printf(...) System.out.format(\"The value of \" + \"the float variable is \" + \"%f%n, while the value of the \" + \"integer variable is %d, \" + \"and the string is %s\", floatVar, intVar, stringVar); public PrintStream format(Locale l, String format, Object... args) the java.text.DecimalFormat(...) DecimalFormat myFormatter = new DecimalFormat(pattern); String output = myFormatter.format(value); System.out.println(value + \" \" + pattern + \" \" + output); number pattern output 123456.789 ###,###.### 123,456.789 123456.789 ###.## 123456.79 123.78 000000.000 000123.780 12345.67 $###,###.### $12,345.67 Advanced math \u00b6 import static java.lang.Math.*; E PI abs ceil floor rint round min max exp log pow sqrt sin random() java.util.Random","title":"Numbers"},{"location":"java/numbers/#advanced-math","text":"import static java.lang.Math.*; E PI abs ceil floor rint round min max exp log pow sqrt sin random() java.util.Random","title":"Advanced math"},{"location":"java/oops/","text":"Objects \u00b6 real world mapping of obbjects state / fields / variables behaviour / methods / functions - primary mechanism for object-to-object communication Why? \u00b6 Modularity : an object can be easily passed around inside the system. Information- hiding Code re-use Pluggability and debugging ease : If a bolt breaks, you replace it, not the entire machine. data encapsulation \u00b6 Hiding internal state and requiring all interaction to be performed through an object's methods. Class \u00b6 bicycle is an instance of the class of objects known as bicycles A class is the blueprint from which individual objects are created. (instances) Inheritance \u00b6 organizing and structuring your software subclass has superclass's fields and methods. class MountainBike extends Bicycle { // new fields and methods defining // a mountain bike would go here } Interface \u00b6 form a contract between the class and the outside world. interface Bicycle { // wheel revolutions per minute void changeCadence(int newValue); void changeGear(int newValue); void speedUp(int increment); void applyBrakes(int decrement); } class ACMEBicycle implements Bicycle { int cadence = 0; int speed = 0; int gear = 1; void changeCadence(int newValue) { cadence = newValue; } void changeGear(int newValue) { gear = newValue; } void speedUp(int increment) { speed = speed + increment; } void applyBrakes(int decrement) { speed = speed - decrement; } void printStates() { System.out.println(\"cadence:\" + cadence + \" speed:\" + speed + \" gear:\" + gear); } } Package \u00b6 namespace that organizes a set of related classes and interfaces. Library \u00b6 a set of packages","title":"Objects"},{"location":"java/oops/#objects","text":"real world mapping of obbjects state / fields / variables behaviour / methods / functions - primary mechanism for object-to-object communication","title":"Objects"},{"location":"java/oops/#why","text":"Modularity : an object can be easily passed around inside the system. Information- hiding Code re-use Pluggability and debugging ease : If a bolt breaks, you replace it, not the entire machine.","title":"Why?"},{"location":"java/oops/#data-encapsulation","text":"Hiding internal state and requiring all interaction to be performed through an object's methods.","title":"data encapsulation"},{"location":"java/oops/#class","text":"bicycle is an instance of the class of objects known as bicycles A class is the blueprint from which individual objects are created. (instances)","title":"Class"},{"location":"java/oops/#inheritance","text":"organizing and structuring your software subclass has superclass's fields and methods. class MountainBike extends Bicycle { // new fields and methods defining // a mountain bike would go here }","title":"Inheritance"},{"location":"java/oops/#interface","text":"form a contract between the class and the outside world. interface Bicycle { // wheel revolutions per minute void changeCadence(int newValue); void changeGear(int newValue); void speedUp(int increment); void applyBrakes(int decrement); } class ACMEBicycle implements Bicycle { int cadence = 0; int speed = 0; int gear = 1; void changeCadence(int newValue) { cadence = newValue; } void changeGear(int newValue) { gear = newValue; } void speedUp(int increment) { speed = speed + increment; } void applyBrakes(int decrement) { speed = speed - decrement; } void printStates() { System.out.println(\"cadence:\" + cadence + \" speed:\" + speed + \" gear:\" + gear); } }","title":"Interface"},{"location":"java/oops/#package","text":"namespace that organizes a set of related classes and interfaces.","title":"Package"},{"location":"java/oops/#library","text":"a set of packages","title":"Library"},{"location":"java/packages/","text":"A package is a grouping of related types (classes, interfaces, enumerations (classes), and annotation types (interfaces)) providing access protection and name space management. Why? \u00b6 types are related. easy to find types that can provide particular functions. The names won't conflict with the type names in other packages because the package creates a new namespace. unrestricted access to one another yet still restrict access for types outside the package. At top: package <name>; only one public type in one source file. You can include non-public types in the same file as a public type (this is strongly discouraged, unless the non-public types are small and closely related to the public type). All the top-level, non-public types will be package private. Naming \u00b6 The fully qualified name -> library.package.class lower case reversed Internet domain name region specific -> com.example.region.mypackage Packages in the Java language itself begin with java. or javax. add an underscore for reserved keywords and hyphens adn starting with numbers Usage \u00b6 by Its Qualified Name \u00b6 all right for infrequent use You can use a package member's simple name if the code you are writing is in the same package as that member or if that member has been imported. Importing a Package Member \u00b6 import graphics.Rectangle; Importing an Entire Package \u00b6 if you use many types from a package, you should import the entire package. It cannot be used to match a subset of the classes in a package. import graphics.*; import the public nested classes of an enclosing class. \u00b6 import graphics.Rectangle; import graphics.Rectangle.*; Be aware that the second import statement will not import Rectangle. static import \u00b6 when you need frequent access to static final fields (constants) and static methods from one or two classes. import static java.lang.Math.*; Java compiler automatically imports: 1) the java.lang package 2) the package for the current file Apparent Hierarchies of Packages \u00b6 java.awt.xxxx packages are not included in the java.awt package. java.awt is used for a number of related packages to make the relationship evident, but not to show inclusion. Name Ambiguities \u00b6 if a type in 2 packages have same name and both packagesare included -> use member's fully qualified name. Managing Source and Class Files \u00b6 hierarchical file systems to manage source and class files, although The Java Language Specification does not require this. <path_one>\\sources\\com\\example\\graphics\\Rectangle.java <path_two>\\classes\\com\\example\\graphics\\Rectangle.class The full path to the classes directory, \\classes, is called the class path, and is set with the CLASSPATH system variable. Both the compiler and the JVM construct the path to your .class files by adding the package name to the class path. For example, if <path_two>\\classes is your class path, and the package name is com.example.graphics, then the compiler and JVM look for .class files in <path_two>\\classes\\com\\example\\graphics. By default, the compiler and the JVM search the current directory and the JAR file containing the Java platform classes so that these directories are automatically in your class path.","title":"Packages"},{"location":"java/packages/#why","text":"types are related. easy to find types that can provide particular functions. The names won't conflict with the type names in other packages because the package creates a new namespace. unrestricted access to one another yet still restrict access for types outside the package. At top: package <name>; only one public type in one source file. You can include non-public types in the same file as a public type (this is strongly discouraged, unless the non-public types are small and closely related to the public type). All the top-level, non-public types will be package private.","title":"Why?"},{"location":"java/packages/#naming","text":"The fully qualified name -> library.package.class lower case reversed Internet domain name region specific -> com.example.region.mypackage Packages in the Java language itself begin with java. or javax. add an underscore for reserved keywords and hyphens adn starting with numbers","title":"Naming"},{"location":"java/packages/#usage","text":"","title":"Usage"},{"location":"java/packages/#by-its-qualified-name","text":"all right for infrequent use You can use a package member's simple name if the code you are writing is in the same package as that member or if that member has been imported.","title":"by Its Qualified Name"},{"location":"java/packages/#importing-a-package-member","text":"import graphics.Rectangle;","title":"Importing a Package Member"},{"location":"java/packages/#importing-an-entire-package","text":"if you use many types from a package, you should import the entire package. It cannot be used to match a subset of the classes in a package. import graphics.*;","title":"Importing an Entire Package"},{"location":"java/packages/#import-the-public-nested-classes-of-an-enclosing-class","text":"import graphics.Rectangle; import graphics.Rectangle.*; Be aware that the second import statement will not import Rectangle.","title":"import the public nested classes of an enclosing class."},{"location":"java/packages/#static-import","text":"when you need frequent access to static final fields (constants) and static methods from one or two classes. import static java.lang.Math.*; Java compiler automatically imports: 1) the java.lang package 2) the package for the current file","title":"static import"},{"location":"java/packages/#apparent-hierarchies-of-packages","text":"java.awt.xxxx packages are not included in the java.awt package. java.awt is used for a number of related packages to make the relationship evident, but not to show inclusion.","title":"Apparent Hierarchies of Packages"},{"location":"java/packages/#name-ambiguities","text":"if a type in 2 packages have same name and both packagesare included -> use member's fully qualified name.","title":"Name Ambiguities"},{"location":"java/packages/#managing-source-and-class-files","text":"hierarchical file systems to manage source and class files, although The Java Language Specification does not require this. <path_one>\\sources\\com\\example\\graphics\\Rectangle.java <path_two>\\classes\\com\\example\\graphics\\Rectangle.class The full path to the classes directory, \\classes, is called the class path, and is set with the CLASSPATH system variable. Both the compiler and the JVM construct the path to your .class files by adding the package name to the class path. For example, if <path_two>\\classes is your class path, and the package name is com.example.graphics, then the compiler and JVM look for .class files in <path_two>\\classes\\com\\example\\graphics. By default, the compiler and the JVM search the current directory and the JAR file containing the Java platform classes so that these directories are automatically in your class path.","title":"Managing Source and Class Files"},{"location":"java/re/","text":"","title":"Re"},{"location":"java/security/","text":"","title":"Security"},{"location":"java/strings/","text":"Character class is immutable String class is immutable The Java programming language does not permit literal strings to span lines in source files Breaking strings between lines using the + concatenation operator is, once again, very common in print statements. int i; String s1 = \"\" + i; public class Filename { private String fullPath; private char pathSeparator, extensionSeparator; public Filename(String str, char sep, char ext) { fullPath = str; pathSeparator = sep; extensionSeparator = ext; } public String extension() { int dot = fullPath.lastIndexOf(extensionSeparator); return fullPath.substring(dot + 1); } // gets filename without extension public String filename() { int dot = fullPath.lastIndexOf(extensionSeparator); int sep = fullPath.lastIndexOf(pathSeparator); return fullPath.substring(sep + 1, dot); } public String path() { int sep = fullPath.lastIndexOf(pathSeparator); return fullPath.substring(0, sep); } } public class RegionMatchesDemo { public static void main(String[] args) { String searchMe = \"Green Eggs and Ham\"; String findMe = \"Eggs\"; int searchMeLength = searchMe.length(); int findMeLength = findMe.length(); boolean foundIt = false; for (int i = 0; i <= (searchMeLength - findMeLength); i++) { if (searchMe.regionMatches(i, findMe, 0, findMeLength)) { foundIt = true; System.out.println(searchMe.substring(i, i + findMeLength)); break; } } if (!foundIt) System.out.println(\"No match found.\"); } } public class StringDemo { public static void main(String[] args) { String palindrome = \"Dot saw I was Tod\"; int len = palindrome.length(); char[] tempCharArray = new char[len]; char[] charArray = new char[len]; // put original string in an // array of chars for (int i = 0; i < len; i++) { tempCharArray[i] = palindrome.charAt(i); } // reverse array of chars for (int j = 0; j < len; j++) { charArray[j] = tempCharArray[len - 1 - j]; } String reversePalindrome = new String(charArray); System.out.println(reversePalindrome); } } Why? \u00b6 String is immutable while stringbuilder ain't Note also that there is StringBuffer in addition to StringBuilder. The difference is that the former has synchronized methods. If you use it as a local variable, use StringBuilder. If it happens that it's possible for it to be accessed by multiple threads, use StringBuffer (that's rarer) autoboxing and unboxing \u00b6 autoboxing -> primitive to object unboxing -> object to primitive","title":"Strings"},{"location":"java/strings/#why","text":"String is immutable while stringbuilder ain't Note also that there is StringBuffer in addition to StringBuilder. The difference is that the former has synchronized methods. If you use it as a local variable, use StringBuilder. If it happens that it's possible for it to be accessed by multiple threads, use StringBuffer (that's rarer)","title":"Why?"},{"location":"java/strings/#autoboxing-and-unboxing","text":"autoboxing -> primitive to object unboxing -> object to primitive","title":"autoboxing and unboxing"},{"location":"php/atttributes/","text":"<?php interface ActionHandler { public function execute(); } #[Attribute] class SetUp {} class CopyFile implements ActionHandler { public string $fileName; public string $targetDirectory; #[SetUp] public function fileExists() { if (!file_exists($this->fileName)) { throw new RuntimeException(\"File does not exist\"); } } #[SetUp] public function targetDirectoryExists() { if (!file_exists($this->targetDirectory)) { mkdir($this->targetDirectory); } elseif (!is_dir($this->targetDirectory)) { throw new RuntimeException(\"Target directory $this->targetDirectory is not a directory\"); } } public function execute() { copy($this->fileName, $this->targetDirectory . '/' . basename($this->fileName)); } } function executeAction(ActionHandler $actionHandler) { $reflection = new ReflectionObject($actionHandler); foreach ($reflection->getMethods() as $method) { $attributes = $method->getAttributes(SetUp::class); if (count($attributes) > 0) { $methodName = $method->getName(); $actionHandler->$methodName(); } } $actionHandler->execute(); } $copyAction = new CopyFile(); $copyAction->fileName = \"/tmp/foo.jpg\"; $copyAction->targetDirectory = \"/home/user\"; executeAction($copyAction);","title":"Atttributes"},{"location":"php/basics/","text":"<?= which is a short-hand to the more verbose <?php echo. If a file contains only PHP code, it is preferable to omit the PHP closing tag at the end of the file. which may cause unwanted effects because PHP will start output buffering Html Escaping \u00b6 <?php if ($expression == true): ?> This will show if the expression is true. <?php else: ?> Otherwise this will show. <?php endif; ?> Comments \u00b6 Notes can come in all sorts of shapes and sizes. They vary, and their uses are completely up to the person writing the code. However, I try to keep things consistent in my code that way it's easy for the next person to read. So something like this might help <?php //====================================================================== // CATEGORY LARGE FONT //====================================================================== //----------------------------------------------------- // Sub-Category Smaller Font //----------------------------------------------------- /* Title Here Notice the First Letters are Capitalized */ # Option 1 # Option 2 # Option 3 /* * This is a detailed explanation * of something that should require * several paragraphs of information. */ // This is a single line quote. ?> HTML comments have no meaning in PHP parser (php-doc)[http://www.phpdoc.org/] types \u00b6 PHP supports 10 primitive types. scalar types: bool int float (floating-point number, aka double) string compound types: array object callable iterable special types: resource NULL double doesn't exist now. php compiler decides type not programmer var_dump() -> type and value gettype() -> human readable is_type functions -> to check type <?php $a_bool = TRUE; // a boolean $a_str = \"foo\"; // a string $a_str2 = 'foo'; // a string $an_int = 12; // an integer echo gettype($a_bool); // prints out: boolean echo gettype($a_str); // prints out: string // If this is an integer, increment it by four if (is_int($an_int)) { $an_int += 4; } // If $a_bool is a string, print it out // (does not print out anything) if (is_string($a_bool)) { echo \"String: $a_bool\"; } ?> boolean \u00b6 <?php var_dump((bool) \"\"); // bool(false) var_dump((bool) \"0\"); // bool(false) var_dump((bool) 1); // bool(true) var_dump((bool) -2); // bool(true) var_dump((bool) \"foo\"); // bool(true) var_dump((bool) 2.3e5); // bool(true) var_dump((bool) array(12)); // bool(true) var_dump((bool) array()); // bool(false) var_dump((bool) \"false\"); // bool(true) ?> $z=TRUE OR FALSE; // FALSE $z=TRUE || FALSE; // TRUE // precedence of operators <?php $var1 = TRUE; $var2 = FALSE; echo $var1; // Will display the number 1 echo $var2; //Will display nothing /* To get it to display the number 0 for a false value you have to typecast it: */ echo (int)$var2; //This will display the number 0 for false. ?> Integers \u00b6 <?php $a = 1234; // decimal number $a = 0123; // octal number (equivalent to 83 decimal) $a = 0x1A; // hexadecimal number (equivalent to 26 decimal) $a = 0b11111111; // binary number (equivalent to 255 decimal) $a = 1_234_567; // decimal number (as of PHP 7.4.0) ?> Float \u00b6 <?php $a = 1.234; $b = 1.2e3; $c = 7E-10; $d = 1_234.567; // as of PHP 7.4.0 ?> Warning Floating point precision Floating point numbers have limited precision. Although it depends on the system, PHP typically uses the IEEE 754 double precision format, which will give a maximum relative error due to rounding in the order of 1.11e-16. Non elementary arithmetic operations may give larger errors, and, of course, error propagation must be considered when several operations are compounded. Additionally, rational numbers that are exactly representable as floating point numbers in base 10, like 0.1 or 0.7, do not have an exact representation as floating point numbers in base 2, which is used internally, no matter the size of the mantissa. Hence, they cannot be converted into their internal binary counterparts without a small loss of precision. This can lead to confusing results: for example, floor((0.1+0.7)*10) will usually return 7 instead of the expected 8, since the internal representation will be something like 7.9999999999999991118.... So never trust floating number results to the last digit, and do not compare floating point numbers directly for equality. If higher precision is necessary, the arbitrary precision math functions and gmp functions are available. For a \"simple\" explanation, see the \u00bb floating point guide that's also titled \"Why don\u2019t my numbers add up?\" String \u00b6 <?php $foo = 1 + \"10.5\"; // $foo is float (11.5) $foo = 1 + \"-1.3e3\"; // $foo is float (-1299) $foo = 1 + \"bob-1.3e3\"; // TypeError as of PHP 8.0.0, $foo is integer (1) previously $foo = 1 + \"bob3\"; // TypeError as of PHP 8.0.0, $foo is integer (1) previously $foo = 1 + \"10 Small Pigs\"; // $foo is integer (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = 4 + \"10.2 Little Piggies\"; // $foo is float (14.2) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = \"10.0 pigs \" + 1; // $foo is float (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = \"10.0 pigs \" + 1.0; // $foo is float (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously ?> Arrays \u00b6 <?php $array = array( \"foo\" => \"bar\", \"bar\" => \"foo\", ); // Using the short array syntax $array = [ \"foo\" => \"bar\", \"bar\" => \"foo\", ]; ?> Iterable \u00b6 <?php function foo(iterable $iterable) { foreach ($iterable as $value) { // ... } } ?> Object \u00b6 <?php class foo { function do_foo() { echo \"Doing foo.\"; } } $bar = new foo; $bar->do_foo(); ?> Reources \u00b6 get_resource_type() Callable \u00b6 // An example callback function function my_callback_function() { echo 'hello world!'; } // An example callback method class MyClass { static function myCallbackMethod() { echo 'Hello World!'; } } // Type 1: Simple callback call_user_func('my_callback_function'); // Type 2: Static class method call call_user_func(array('MyClass', 'myCallbackMethod')); // Type 3: Object method call $obj = new MyClass(); call_user_func(array($obj, 'myCallbackMethod')); // Type 4: Static class method call call_user_func('MyClass::myCallbackMethod'); // Type 5: Relative static class method call class A { public static function who() { echo \"A\\n\"; } } class B extends A { public static function who() { echo \"B\\n\"; } } call_user_func(array('B', 'parent::who')); // A // Type 6: Objects implementing __invoke can be used as callables class C { public function __invoke($name) { echo 'Hello ', $name, \"\\n\"; } } $c = new C(); call_user_func($c, 'PHP!'); ?> Type Juggling and declartion \u00b6 TODO","title":"Basics"},{"location":"php/basics/#html-escaping","text":"<?php if ($expression == true): ?> This will show if the expression is true. <?php else: ?> Otherwise this will show. <?php endif; ?>","title":"Html Escaping"},{"location":"php/basics/#comments","text":"Notes can come in all sorts of shapes and sizes. They vary, and their uses are completely up to the person writing the code. However, I try to keep things consistent in my code that way it's easy for the next person to read. So something like this might help <?php //====================================================================== // CATEGORY LARGE FONT //====================================================================== //----------------------------------------------------- // Sub-Category Smaller Font //----------------------------------------------------- /* Title Here Notice the First Letters are Capitalized */ # Option 1 # Option 2 # Option 3 /* * This is a detailed explanation * of something that should require * several paragraphs of information. */ // This is a single line quote. ?> HTML comments have no meaning in PHP parser (php-doc)[http://www.phpdoc.org/]","title":"Comments"},{"location":"php/basics/#types","text":"PHP supports 10 primitive types. scalar types: bool int float (floating-point number, aka double) string compound types: array object callable iterable special types: resource NULL double doesn't exist now. php compiler decides type not programmer var_dump() -> type and value gettype() -> human readable is_type functions -> to check type <?php $a_bool = TRUE; // a boolean $a_str = \"foo\"; // a string $a_str2 = 'foo'; // a string $an_int = 12; // an integer echo gettype($a_bool); // prints out: boolean echo gettype($a_str); // prints out: string // If this is an integer, increment it by four if (is_int($an_int)) { $an_int += 4; } // If $a_bool is a string, print it out // (does not print out anything) if (is_string($a_bool)) { echo \"String: $a_bool\"; } ?>","title":"types"},{"location":"php/basics/#boolean","text":"<?php var_dump((bool) \"\"); // bool(false) var_dump((bool) \"0\"); // bool(false) var_dump((bool) 1); // bool(true) var_dump((bool) -2); // bool(true) var_dump((bool) \"foo\"); // bool(true) var_dump((bool) 2.3e5); // bool(true) var_dump((bool) array(12)); // bool(true) var_dump((bool) array()); // bool(false) var_dump((bool) \"false\"); // bool(true) ?> $z=TRUE OR FALSE; // FALSE $z=TRUE || FALSE; // TRUE // precedence of operators <?php $var1 = TRUE; $var2 = FALSE; echo $var1; // Will display the number 1 echo $var2; //Will display nothing /* To get it to display the number 0 for a false value you have to typecast it: */ echo (int)$var2; //This will display the number 0 for false. ?>","title":"boolean"},{"location":"php/basics/#integers","text":"<?php $a = 1234; // decimal number $a = 0123; // octal number (equivalent to 83 decimal) $a = 0x1A; // hexadecimal number (equivalent to 26 decimal) $a = 0b11111111; // binary number (equivalent to 255 decimal) $a = 1_234_567; // decimal number (as of PHP 7.4.0) ?>","title":"Integers"},{"location":"php/basics/#float","text":"<?php $a = 1.234; $b = 1.2e3; $c = 7E-10; $d = 1_234.567; // as of PHP 7.4.0 ?> Warning Floating point precision Floating point numbers have limited precision. Although it depends on the system, PHP typically uses the IEEE 754 double precision format, which will give a maximum relative error due to rounding in the order of 1.11e-16. Non elementary arithmetic operations may give larger errors, and, of course, error propagation must be considered when several operations are compounded. Additionally, rational numbers that are exactly representable as floating point numbers in base 10, like 0.1 or 0.7, do not have an exact representation as floating point numbers in base 2, which is used internally, no matter the size of the mantissa. Hence, they cannot be converted into their internal binary counterparts without a small loss of precision. This can lead to confusing results: for example, floor((0.1+0.7)*10) will usually return 7 instead of the expected 8, since the internal representation will be something like 7.9999999999999991118.... So never trust floating number results to the last digit, and do not compare floating point numbers directly for equality. If higher precision is necessary, the arbitrary precision math functions and gmp functions are available. For a \"simple\" explanation, see the \u00bb floating point guide that's also titled \"Why don\u2019t my numbers add up?\"","title":"Float"},{"location":"php/basics/#string","text":"<?php $foo = 1 + \"10.5\"; // $foo is float (11.5) $foo = 1 + \"-1.3e3\"; // $foo is float (-1299) $foo = 1 + \"bob-1.3e3\"; // TypeError as of PHP 8.0.0, $foo is integer (1) previously $foo = 1 + \"bob3\"; // TypeError as of PHP 8.0.0, $foo is integer (1) previously $foo = 1 + \"10 Small Pigs\"; // $foo is integer (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = 4 + \"10.2 Little Piggies\"; // $foo is float (14.2) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = \"10.0 pigs \" + 1; // $foo is float (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = \"10.0 pigs \" + 1.0; // $foo is float (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously ?>","title":"String"},{"location":"php/basics/#arrays","text":"<?php $array = array( \"foo\" => \"bar\", \"bar\" => \"foo\", ); // Using the short array syntax $array = [ \"foo\" => \"bar\", \"bar\" => \"foo\", ]; ?>","title":"Arrays"},{"location":"php/basics/#iterable","text":"<?php function foo(iterable $iterable) { foreach ($iterable as $value) { // ... } } ?>","title":"Iterable"},{"location":"php/basics/#object","text":"<?php class foo { function do_foo() { echo \"Doing foo.\"; } } $bar = new foo; $bar->do_foo(); ?>","title":"Object"},{"location":"php/basics/#reources","text":"get_resource_type()","title":"Reources"},{"location":"php/basics/#callable","text":"// An example callback function function my_callback_function() { echo 'hello world!'; } // An example callback method class MyClass { static function myCallbackMethod() { echo 'Hello World!'; } } // Type 1: Simple callback call_user_func('my_callback_function'); // Type 2: Static class method call call_user_func(array('MyClass', 'myCallbackMethod')); // Type 3: Object method call $obj = new MyClass(); call_user_func(array($obj, 'myCallbackMethod')); // Type 4: Static class method call call_user_func('MyClass::myCallbackMethod'); // Type 5: Relative static class method call class A { public static function who() { echo \"A\\n\"; } } class B extends A { public static function who() { echo \"B\\n\"; } } call_user_func(array('B', 'parent::who')); // A // Type 6: Objects implementing __invoke can be used as callables class C { public function __invoke($name) { echo 'Hello ', $name, \"\\n\"; } } $c = new C(); call_user_func($c, 'PHP!'); ?>","title":"Callable"},{"location":"php/basics/#type-juggling-and-declartion","text":"TODO","title":"Type Juggling and declartion"},{"location":"php/intro/","text":"In computing, Common Gateway Interface (CGI) is an interface specification that enables web servers to execute an external program, typically to process user requests. PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. <!DOCTYPE html> <html> <head> <title>Example</title> </head> <body> <?php echo \"Hi, I'm a PHP script!\"; ?> </body> </html> What it can do? \u00b6 server-side scripting Command line scripting Writing desktop applications","title":"Intro"},{"location":"php/intro/#what-it-can-do","text":"server-side scripting Command line scripting Writing desktop applications","title":"What it can do?"},{"location":"php/security/","text":"A system is only as good as the weakest link in a chain.","title":"Security"}],"index":{"fieldVectors":[["title/",[0,6.408]],["text/",[1,7.773,2,5.56,3,2.731,4,4.722]],["title/#abhinavs-notes",[1,4.497,2,2.79]],["text/#abhinavs-notes",[2,4.955,4,4.851]],["title/Search%20%26%20Sort/Search/exponential/",[5,4.842]],["text/Search%20%26%20Sort/Search/exponential/",[3,1.291,5,1.859,6,4.117,7,1.975,8,2.509,9,3.674,10,2.238,11,0.959,12,2.39,13,2.221,14,0.647,15,2.223,16,2.221,17,1.167,18,2.223,19,2.223,20,1.207,21,2.411,22,3.225,23,3.384,24,4.121,25,3.762,26,3.31,27,1.351,28,1.715,29,1.207,30,3.225,31,2.176,32,1.56,33,2.066,34,3.291,35,1.657,36,2.067,37,2.144,38,2.223,39,2.508,40,1.517,41,1.781,42,1.781,43,1.298,44,2.068,45,1.41,46,2.223,47,2.223,48,2.39,49,1.657,50,1.131,51,1.517,52,2.223,53,1.604,54,0.733,55,2.223,56,1.521,57,1.791,58,0.699,59,1.167,60,1.491,61,1.149,62,1.657,63,1.187,64,2.223,65,1.951,66,2.223,67,2.223,68,0.781,69,2.223,70,2.508,71,1.962,72,3.674,73,2.444,74,4.828,75,3.458,76,2.896,77,3.674,78,2.223,79,2.639,80,3.674,81,5.3,82,2.223,83,2.223,84,2.223,85,2.144,86,2.223,87,2.223,88,2.068,89,2.223,90,1.951,91,1.41,92,3.674,93,3.674,94,2.834,95,1.781,96,3.674,97,1.273,98,2.689,99,1.098,100,2.223,101,1.657,102,0.959,103,1.657,104,1.781,105,1.273,106,1.781,107,1.781,108,1.859,109,2.223,110,4.065,111,4.362,112,1.131,113,5.454,114,3.674,115,4.696,116,3.674,117,3.674,118,0.641,119,4.696,120,2.223,121,2.223]],["title/Search%20%26%20Sort/Search/exponential/#exponential-search",[5,3.76,6,2.221]],["text/Search%20%26%20Sort/Search/exponential/#exponential-search",[6,3.453,7,1.753,8,3.515,9,5.98,10,2.999,11,1.797,12,2.121,13,1.971,14,1.213,15,4.168,16,3.307,17,1.323,18,4.168,19,4.168,20,2.263,21,3.121,22,5.249,23,4.74,24,6.138,25,5.603,26,2.121,27,2.532,28,3.216,29,2.263,30,5.249,31,1.979,32,2.924,33,3.362,34,3.244,35,3.107,36,1.579,37,2.433,38,4.168,39,4.082,40,2.845,41,3.34,42,3.34,43,2.433,44,3.877,45,2.644,46,4.168,47,4.168,48,2.121,49,3.107,50,2.121,51,1.508,52,4.168,53,1.82,54,0.651,55,4.168,56,1.35,57,1.488,58,1.311,59,0.908,60,1.692,61,2.155,62,3.107,63,2.225,64,4.168,65,3.659,66,4.168,67,4.168,68,0.694]],["title/Search%20%26%20Sort/Search/exponential/#ternery-search",[6,2.221,69,4.497]],["text/Search%20%26%20Sort/Search/exponential/#ternery-search",[6,4.106,7,2.001,12,2.421,13,2.25,17,0.974,26,3.614,31,2.218,34,3.248,36,2.207,37,1.791,48,2.421,51,1.482,53,1.34,54,0.742,56,1.54,57,1.87,59,1.229,60,1.245,68,0.792,70,3.247,71,2.539,72,4.756,73,3.164,74,5.497,75,4.067,76,3.406,77,4.756,78,3.068,79,2.97,80,4.756,81,6.233,82,3.068,83,3.068,84,3.068,85,2.776,86,3.068,87,3.068,88,2.853,89,3.068,90,2.693,91,1.946,92,4.756,93,4.756,94,3.669,95,2.458,96,4.756,97,1.757,98,3.336,99,1.515,100,3.068,101,2.287,102,1.323,103,2.287,104,2.458,105,1.757,106,2.458,107,2.458,108,2.565,109,3.068,110,4.891,111,5.129,112,1.561,113,6.562,114,4.756,115,5.825,116,4.756,117,4.756,118,0.885,119,5.825,120,3.068,121,3.068]],["title/Search%20%26%20Sort/Search/interpolation/",[122,5.084]],["text/Search%20%26%20Sort/Search/interpolation/",[3,2.171,5,2.298,6,1.357,7,1.156,8,2.497,10,2.011,11,1.185,12,2.761,13,1.3,17,0.873,26,2.221,31,2.207,34,3.633,43,1.604,48,1.399,50,1.399,51,1.625,53,1.906,54,1.052,56,2.001,57,1.941,58,0.864,59,1.141,60,1.771,61,3.194,63,3.299,68,1.121,74,3.061,75,2.499,76,2.093,79,2.471,97,2.499,102,1.185,112,2.221,118,1.782,122,3.83,123,1.493,124,4.058,125,4.348,126,2.203,127,3.061,128,1.829,129,2.413,130,2.413,131,0.908,132,2.749,133,7.226,134,7.714,135,2.413,136,2.749,137,4.763,138,2.749,139,2.749,140,4.058,141,6.846,142,4.058,143,4.058,144,2.749,145,2.749,146,4.058,147,4.058,148,4.364,149,2.749,150,1.928,151,3.606,152,5.426,153,4.364,154,1.785,155,2.749,156,1.785,157,2.749,158,1.785,159,2.413,160,1.744,161,2.203,162,1.444]],["title/Search%20%26%20Sort/Search/interpolation/#interpolation-search",[6,2.221,122,3.947]],["text/Search%20%26%20Sort/Search/interpolation/#interpolation-search",[7,2.527,8,3.882,10,2.226,11,2.59,12,3.056,13,2.84,17,1.907,26,3.056,34,2.409,59,0.912,75,3.44,76,2.881,79,2.202,102,2.59,118,2.209,123,3.261,124,5.586,125,6.138,126,4.812,127,5.374,128,3.995,129,5.272,130,5.272,131,1.984,132,6.006,133,5.272,134,6.724,135,5.272,136,6.006,137,5.272,138,6.006,139,6.006]],["title/Search%20%26%20Sort/Search/interpolation/#iterative",[50,2.948]],["text/Search%20%26%20Sort/Search/interpolation/#iterative",[10,2.452,12,2.449,31,2.415,34,3.622,51,1.684,53,2.102,54,1.18,56,2.448,57,2.026,58,1.513,59,1.295,60,1.953,61,3.419,63,3.532,68,1.258,79,2.426,97,2.756,112,2.449,133,7.144,134,7.927,137,4.224,140,4.476,141,7.144,142,4.476,143,4.476,144,4.813,145,4.813,146,4.476,147,4.476,148,6.615]],["title/Search%20%26%20Sort/Search/interpolation/#reursive",[149,5.792]],["text/Search%20%26%20Sort/Search/interpolation/#reursive",[12,2.504,31,2.164,34,3.762,43,2.872,51,1.697,53,2.149,54,1.048,56,1.594,57,2.045,59,0.747,60,1.997,61,3.472,63,3.586,68,1.118,79,2.463,97,2.818,112,2.504,118,1.419,133,7.548,134,7.548,137,4.319,140,4.577,141,7.211,142,4.577,143,4.577,146,4.577,147,4.577,150,3.452,151,4.795,152,7.647,153,6.717]],["title/Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary",[26,1.87,122,3.226,154,2.386]],["text/Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary",[5,5.87,48,3.573,74,5.92,75,4.021,76,3.368,118,2.025,124,6.53,125,5.626,155,7.022,156,4.558,157,7.022,158,4.558,159,6.163,160,4.454,161,5.626,162,3.688]],["title/Search%20%26%20Sort/Search/intro/",[6,2.86]],["text/Search%20%26%20Sort/Search/intro/",[3,2.015,6,2.594,7,1.963,8,1.81,10,1.109,11,0.752,12,2.002,13,1.416,14,0.507,16,1.416,17,2.148,21,1.73,26,1.523,27,1.818,28,4.052,31,2.237,33,0.98,34,2.815,35,2.231,36,1.49,39,1.19,50,1.523,51,1.696,53,2.294,54,1.13,56,1.857,57,1.747,58,1.652,59,1.219,60,1.215,63,1.598,65,2.627,68,1.205,71,1.598,75,0.998,76,0.836,79,3.094,85,1.017,102,0.752,110,5.232,111,4.677,112,0.887,118,2.024,123,0.946,129,1.53,162,2.066,163,1.397,164,1.397,165,1.743,166,1.943,167,2.993,168,1.53,169,1.743,170,2.759,171,3.558,172,4.419,173,0.791,174,0.724,175,0.848,176,0.446,177,3.933,178,3.478,179,1.743,180,4.542,181,1.743,182,2.993,183,3.187,184,3.933,185,2.162,186,1.743,187,1.132,188,1.743,189,1.743,190,1.132,191,1.53,192,1.782,193,4.052,194,1.743,195,1.299,196,5.129,197,3.933,198,2.502,199,0.931,200,1.743,201,1.743,202,1.743,203,0.946,204,1.397,205,2.398,206,1.743,207,1.743,208,1.743,209,1.743,210,1.53,211,1.223,212,1.743,213,1.397,214,1.743,215,1.743,216,1.223,217,1.397,218,1.743,219,1.743,220,1.743,221,1.059,222,1.397,223,1.714,224,2.993,225,2.627,226,1.598,227,2.627,228,2.759,229,2.553,230,1.818,231,2.993,232,1.299,233,1.16,234,1.082,235,1.53,236,2.993,237,1.743,238,1.743,239,1.038,240,1.743,241,1.223,242,1.19,243,2.784,244,2.993,245,2.993]],["title/Search%20%26%20Sort/Search/intro/#searching",[6,2.86]],["text/Search%20%26%20Sort/Search/intro/#searching",[26,3.956,118,2.241,163,6.228,164,6.228,165,7.773]],["title/Search%20%26%20Sort/Search/intro/#linear-search",[6,2.221,166,2.92]],["text/Search%20%26%20Sort/Search/intro/#linear-search",[6,1.687,7,1.437,10,1.915,13,1.616,17,1.977,21,2.573,28,5.75,31,2.304,33,1.921,34,2.072,51,1.693,53,2.255,54,1.163,56,2.248,57,1.285,58,1.958,59,1.272,60,1.387,63,1.824,68,1.24,75,1.957,76,1.639,79,3.34,85,1.994,118,0.985,129,2.999,162,3.271,166,2.218,167,5.165,168,2.999,169,3.417,170,2.397,171,4.864,172,5.721,173,1.551,174,1.42,175,1.663,176,0.874,177,6.227,178,4.642,179,3.417,180,5.879,181,3.417,182,5.165,183,3.97,184,6.227,185,3.731,186,3.417,187,2.218,188,3.417]],["title/Search%20%26%20Sort/Search/intro/#binary-search",[6,2.221,26,2.289]],["text/Search%20%26%20Sort/Search/intro/#binary-search",[7,2.978,8,4.178,11,3.052,13,3.348,17,2.248,50,3.602,71,3.779,102,3.052,118,2.446,123,3.843,189,7.079,190,4.595,191,6.213]],["title/Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow",[59,0.36,192,1.413,193,1.831,194,2.374,195,1.77,246,2.374]],["text/Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow",[6,1.955,7,2.424,12,2.015,14,1.153,16,2.725,17,2.517,27,3.5,31,1.631,35,4.296,36,1.501,39,2.703,51,1.341,53,1.729,54,0.899,57,1.434,58,1.812,59,1.031,68,0.959,79,2.491,118,2.151,170,4.042,178,2.952,192,2.357,196,5.679,197,6.793,198,4.817,199,2.114,200,3.96,201,3.96,202,3.96,203,2.15,204,3.173,205,4.617,206,3.96,207,3.96,208,3.96,209,3.96,210,3.476,211,2.778,212,3.96,213,3.173,214,3.96,215,3.96,216,2.778,217,3.173,218,3.96,219,3.96,220,3.96,221,2.406,222,3.173,223,3.3,224,5.762,225,5.058,226,3.077,227,5.058,228,4.164,229,4.41,230,3.5,231,5.762,232,2.952,233,2.634,234,2.457,235,3.476,236,5.762,237,3.96,238,3.96,239,2.357,240,3.96,241,2.778,242,2.703]],["title/Search%20%26%20Sort/Search/intro/#recursive",[71,3.093]],["text/Search%20%26%20Sort/Search/intro/#recursive",[12,2.859,31,2.313,34,3.606,36,2.129,51,1.774,53,2.454,54,1.145,56,1.82,57,2.156,59,0.853,65,6.441,68,1.221,79,2.691,110,6.701,111,6.259,112,2.859,118,1.62,196,7.244,243,5.226,244,7.339]],["title/Search%20%26%20Sort/Search/intro/#iterative",[50,2.948]],["text/Search%20%26%20Sort/Search/intro/#iterative",[12,2.935,31,2.342,34,3.319,36,2.185,51,1.789,53,2.519,54,1.165,56,1.868,57,1.858,59,1.256,60,2.341,63,3.079,68,1.242,79,2.737,110,6.757,111,6.321,193,6.752,243,5.364,245,7.464]],["title/Search%20%26%20Sort/Search/jump/",[247,5.084]],["text/Search%20%26%20Sort/Search/jump/",[3,1.424,6,3.723,7,1.705,8,3.167,10,2.965,11,1.747,13,1.916,16,1.916,17,1.287,21,1.502,23,2.514,26,2.062,31,2.264,34,3.209,40,2.766,51,1.579,53,1.769,54,1.074,56,1.898,57,1.877,58,1.274,59,1.145,60,3.06,68,1.145,79,1.486,102,1.747,112,2.062,118,2.405,123,2.2,126,3.247,127,2.842,162,2.128,166,2.631,193,4.52,247,7.022,248,4.052,249,4.052,250,4.052,251,2.631,252,3.126,253,4.052,254,4.052,255,3.557,256,4.052,257,3.021,258,2.2,259,4.052,260,4.828,261,5.859,262,4.867,263,4.052,264,3.021,265,5.859,266,4.052]],["title/Search%20%26%20Sort/Search/jump/#jump-search",[6,2.221,247,3.947]],["text/Search%20%26%20Sort/Search/jump/#jump-search",[6,3.425,7,1.729,8,3.192,10,2.982,11,1.772,13,1.944,16,1.944,17,1.305,21,1.523,23,2.55,26,2.091,31,2.277,34,3.226,40,2.805,51,1.587,53,1.794,54,1.083,56,1.917,57,1.889,58,1.292,59,1.152,60,3.08,68,1.154,79,1.507,102,1.772,112,2.091,118,2.416,123,2.231,126,3.293,127,2.883,162,2.158,166,2.668,193,4.566,247,6.662,248,4.109,249,4.109,250,4.109,251,2.668,252,3.17,253,4.109,254,4.109,255,3.607,256,4.109,257,3.063,258,2.231,259,4.109,260,4.866,261,5.919,262,4.89,263,4.109,264,3.063,265,5.919,266,4.109]],["title/Search%20%26%20Sort/Sort/intro/",[102,1.939,267,3.603]],["text/Search%20%26%20Sort/Sort/intro/",[3,1.533,6,1.357,7,2.503,8,1.796,10,2.555,11,1.185,12,0.564,13,1.299,14,1.579,16,0.524,17,1.385,21,2.114,23,0.687,26,2.22,31,1.907,34,1.91,36,1.277,37,0.646,39,0.756,45,0.703,50,1.02,51,1.259,53,1.2,54,0.89,58,1.227,59,1.184,60,2.075,61,0.573,63,2.329,68,0.949,70,0.756,74,3.06,75,1.931,76,2.452,79,1.007,85,1.968,94,0.855,95,0.887,98,0.634,99,0.99,101,0.826,102,3.723,104,2.701,105,1.573,112,0.564,118,2.068,123,0.601,127,0.777,128,0.737,131,0.366,158,3.091,160,2.139,162,1.053,163,1.607,166,0.719,170,1.407,171,0.687,172,0.756,176,0.998,180,2.738,187,0.719,190,1.302,213,1.607,221,0.673,222,0.887,229,0.719,233,0.737,242,1.369,251,0.719,252,1.547,258,0.601,260,0.777,267,2.701,268,1.865,269,0.972,270,3.295,271,2.007,272,2.189,273,0.737,274,1.231,275,3.646,276,2.819,277,2.005,278,1.302,279,2.048,280,2.005,281,1.108,282,1.17,283,2.005,284,0.687,285,0.737,286,0.826,287,1.108,288,2.546,289,0.972,290,1.865,291,0.972,292,2.601,293,0.756,294,0.972,295,1.905,296,0.972,297,0.972,298,2.747,299,2.747,300,1.037,301,1.108,302,4.549,303,2.747,304,0.972,305,1.865,306,1.108,307,1.108,308,1.108,309,1.108,310,2.301,311,1.108,312,1.108,313,1.108,314,1.108,315,1.108,316,0.972,317,1.865,318,0.887,319,1.108,320,1.108,321,2.834,322,1.108,323,0.737,324,1.108,325,1.03,326,1.108,327,1.108,328,1.108,329,1.108,330,0.926,331,1.108,332,1.037,333,2.555,334,1.865,335,2.596,336,3.63,337,0.926,338,0.972,339,1.108,340,1.108,341,0.972,342,1.76,343,1.495,344,0.826,345,1.108,346,1.108,347,0.972,348,1.607,349,2.365,350,1.108,351,0.777,352,1.108,353,0.972,354,1.108,355,1.407,356,0.8,357,1.369,358,1.108,359,2.697,360,1.108,361,0.972,362,1.108,363,2.005,364,1.108,365,1.108,366,2.301,367,1.108,368,1.108,369,1.108,370,0.972,371,1.108,372,0.887,373,1.108,374,1.875,375,1.865,376,1.108,377,0.972,378,0.673,379,2.601,380,1.108,381,1.108,382,1.108,383,0.855,384,0.887,385,1.108,386,0.8,387,0.887,388,1.231,389,1.979,390,0.659,391,0.737,392,0.623,393,1.743,394,1.984,395,0.976,396,0.646,397,0.826,398,0.948,399,0.926,400,0.756,401,1.76,402,1.108,403,1.108,404,1.108,405,1.108,406,1.108,407,2.411,408,2.819,409,0.972,410,0.887,411,0.887,412,1.108,413,0.855,414,0.826,415,2.005,416,0.756,417,2.747,418,2.747,419,2.005,420,1.108,421,0.926,422,2.005,423,1.108,424,2.005,425,1.108,426,1.108,427,2.005,428,0.703,429,0.972,430,2.005,431,1.108,432,0.972,433,1.108,434,1.448,435,0.972,436,1.108,437,1.108,438,0.737,439,0.972,440,1.108,441,1.108,442,1.108,443,2.005,444,1.108,445,2.005]],["title/Search%20%26%20Sort/Sort/intro/#selection-sort",[102,1.939,267,3.603]],["text/Search%20%26%20Sort/Sort/intro/#selection-sort",[7,1.594,8,3.361,10,2.454,11,1.633,13,1.792,14,1.103,21,2.068,31,1.874,36,2.114,39,2.586,51,1.441,53,1.654,54,1.033,58,1.191,59,1.278,60,2.687,68,1.102,98,2.169,99,1.87,102,1.633,104,3.035,118,1.092,158,2.459,160,3.538,162,1.99,176,1.426,180,4.645,242,2.586,260,2.657,267,3.035,268,3.523,269,3.325,270,4.437,271,2.255,272,2.459,273,2.52,274,1.697,275,5.535,276,4.782,277,5.578,278,3.621,279,3.388,280,5.578,281,3.788,282,3.256,283,5.578,284,2.35,285,2.52,286,2.824,287,3.788,288,2.211,289,3.325,290,3.523,291,3.325,292,2.922,293,2.586,294,3.325,295,1.654,296,3.325,297,3.325,298,6.621,299,6.621,300,2.883,301,3.788,302,4.939,303,6.621,304,3.325,305,3.523,306,3.788,307,3.788,308,3.788]],["title/Search%20%26%20Sort/Sort/intro/#stable",[275,4.842]],["text/Search%20%26%20Sort/Sort/intro/#stable",[10,3.02,31,2.306,51,1.77,54,1.272,58,1.755,59,1.424,60,2.966,68,1.356,79,2.047,118,2.107,158,4.744,176,1.428,187,3.624,302,5.483,309,5.583,310,5.9,311,5.583,312,5.583,313,5.583,314,5.583,315,5.583,316,4.9]],["title/Search%20%26%20Sort/Sort/intro/#bubble-sort",[102,1.939,317,4.182]],["text/Search%20%26%20Sort/Sort/intro/#bubble-sort",[7,3.034,8,1.699,10,2.674,11,1.592,13,1.746,14,1.075,17,2.29,21,2.418,31,1.549,34,2.195,51,1.08,53,1.612,54,0.576,58,1.721,59,0.831,60,2.221,68,0.614,75,3.134,76,3.695,85,3.807,102,3.698,105,3.735,118,1.065,128,2.456,163,4.385,166,2.397,176,0.944,190,2.397,213,4.385,221,2.243,229,2.397,233,2.456,252,2.848,270,3.962,275,3.086,276,2.667,288,3.194,292,2.848,302,4.576,305,3.433,317,3.433,318,2.958,319,3.692,320,3.692,321,3.258,322,3.692,323,2.456,324,3.692,325,3.433,326,3.692,327,3.692,328,3.692,329,3.692,330,3.086,331,3.692,332,1.908,333,5.09,334,3.433,335,2.456,336,5.09,337,3.086,338,3.24,339,3.692,340,3.692,341,3.24,342,3.24,343,2.752,344,2.752,345,3.692,346,3.692,347,3.24,348,2.958,349,5.06,350,3.692,351,2.59,352,3.692,353,3.24,354,3.692,355,2.59,356,2.667,357,2.52,358,3.692]],["title/Search%20%26%20Sort/Sort/intro/#insertion-sort",[102,1.939,359,1.964]],["text/Search%20%26%20Sort/Sort/intro/#insertion-sort",[6,2.753,7,2.66,10,2.067,11,1.236,13,1.356,14,2.126,17,1.432,21,2.344,23,1.779,26,3.5,31,2.067,36,1.086,50,2.295,51,0.89,53,1.252,54,0.87,58,0.901,59,1.109,60,1.163,61,1.482,68,0.928,70,1.957,74,2.011,75,2.583,76,2.675,79,1.654,85,1.673,102,3.937,104,2.297,112,1.459,118,0.827,123,1.556,158,4.105,170,3.164,176,0.733,190,1.861,222,2.297,258,1.556,267,2.297,268,2.666,270,1.741,275,2.396,276,2.07,279,1.741,288,2.633,292,2.211,295,1.97,302,4.362,321,3.319,332,1.482,333,2.666,334,2.666,335,3.71,336,5.186,343,2.137,355,2.011,357,1.957,359,3.711,360,2.866,361,2.516,362,2.866,363,4.51,364,2.866,365,2.866,366,1.957,367,2.866,368,2.866,369,2.866,370,2.516,371,2.866,372,2.297,373,2.866,374,3.079,375,4.195,376,2.866,377,2.516,378,1.741,379,3.48,380,2.866,381,2.866,382,2.866,383,2.211,384,2.297,385,2.866,386,2.07,387,1.995,388,2.499,389,3.175,390,1.706,391,1.907,392,1.612,393,3.537,394,3.258,395,1.602,396,1.673,397,2.137,398,2.133]],["title/Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting",[74,1.888,102,1.161,348,2.157,399,2.25,400,1.837]],["text/Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting",[10,2.467,12,1.945,14,1.112,16,1.807,21,1.416,26,1.945,31,1.081,34,3.134,36,1.448,37,2.23,45,2.424,59,0.852,63,4.362,74,5.145,94,2.948,101,2.848,102,3.369,104,4.498,118,2.549,127,2.68,171,2.371,172,2.608,242,2.608,251,2.481,252,2.948,274,2.516,279,2.321,288,2.23,290,3.554,295,1.669,321,3.342,335,2.542,366,4.542,379,2.948,394,2.76,395,1.357,401,4.928,402,3.821,403,3.821,404,3.821,405,3.821,406,3.821,407,5.841,408,5.644,409,3.354,410,3.062,411,3.062,412,3.821,413,2.948,414,2.848,415,5.614,416,2.608,417,6.655,418,6.655,419,5.614,420,3.821,421,3.194,422,5.614,423,3.821,424,5.614,425,3.821,426,3.821,427,5.614,428,2.424,429,3.354,430,5.614,431,3.821,432,3.354,433,3.821,434,2.76,435,3.354,436,3.821]],["title/Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes",[271,1.85,272,2.017,292,2.397,295,1.357]],["text/Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes",[7,3.209,95,4.779,99,2.945,102,3.626,118,2.556,131,1.971,160,4.839,162,3.133,180,5.351,267,4.779,270,3.623,271,4.54,272,4.952,295,2.605,342,5.236,374,4.071,379,4.602,434,4.308,437,5.965,438,3.968,439,5.236,440,5.965,441,5.965,442,5.965,443,7.628,444,5.965,445,7.628]],["title/Search%20%26%20Sort/Sort/merge/",[101,3.352,102,1.939]],["text/Search%20%26%20Sort/Sort/merge/",[2,0.601,3,1.068,10,0.658,11,0.418,14,0.885,20,0.526,27,1.078,29,0.964,31,0.274,33,0.545,36,0.672,48,0.493,51,0.485,54,1.241,56,1.801,57,1.321,58,0.558,59,1.331,63,1.623,68,1.311,71,0.947,76,0.851,98,0.555,99,1.213,101,1.831,102,2.398,105,2.283,106,0.776,127,0.679,131,2.104,160,0.614,173,1.38,174,0.403,176,1.119,178,1.323,183,0.44,185,1.282,211,0.679,216,0.679,222,0.776,223,0.555,226,0.517,230,0.588,239,0.577,251,1.152,255,0.85,278,1.152,279,1.078,284,5.08,321,0.577,323,0.644,357,1.676,359,0.423,372,0.776,386,1.774,387,0.428,388,2.774,389,3.11,391,1.634,392,0.998,393,4.687,394,1.282,395,3.259,398,2.928,400,1.211,421,0.81,435,0.85,446,3.111,447,1.65,448,0.722,449,1.775,450,2.541,451,2.199,452,0.969,453,1.165,454,0.588,455,0.776,456,0.81,457,0.722,458,0.722,459,1.369,460,0.403,461,0.969,462,0.601,463,0.776,464,0.969,465,1.65,466,4.069,467,2.744,468,1.152,469,2.837,470,1.65,471,2.284,472,1.65,473,3.296,474,3.111,475,2.284,476,2.284,477,3.434,478,3.296,479,3.296,480,6.341,481,6.212,482,5.225,483,2.541,484,5.311,485,1.568,486,1.831,487,1.65,488,2.541,489,0.644,490,3.986,491,0.517,492,0.969,493,0.969,494,0.969,495,1.775,496,1.65,497,0.969,498,0.969,499,0.969,500,0.969,501,1.358,502,0.85,503,0.901,504,0.629,505,0.493,506,1.323,507,0.969,508,0.969,509,0.969,510,0.969,511,0.969,512,0.588,513,0.969,514,0.81,515,0.969,516,0.644,517,0.722,518,0.32,519,0.418,520,1.935,521,0.969,522,1.775,523,0.969,524,0.969,525,0.722,526,0.969,527,0.969,528,0.776,529,0.85,530,0.969,531,0.85,532,1.126,533,0.661,534,0.661,535,0.969,536,0.722,537,0.85,538,0.969,539,0.588,540,0.85,541,0.795,542,1.072,543,0.679,544,0.969,545,0.776,546,1.357,547,1.181,548,1.886,549,0.747,550,0.776,551,0.969,552,1.558,553,0.81,554,0.969,555,0.969,556,1.181,557,0.947,558,1.422,559,3.986,560,0.969,561,0.969,562,0.969]],["title/Search%20%26%20Sort/Sort/merge/#merge-sort",[101,3.352,102,1.939]],["text/Search%20%26%20Sort/Sort/merge/#merge-sort",[]],["title/Search%20%26%20Sort/Sort/merge/#dummy-nodes",[395,1.597,446,3.947]],["text/Search%20%26%20Sort/Sort/merge/#dummy-nodes",[14,0.837,29,1.561,33,1.617,54,1.237,56,2.052,57,1.577,59,1.362,63,1.535,68,1.319,99,2.233,105,2.59,131,1.494,173,1.306,176,1.156,211,2.017,284,5.277,323,1.913,389,2.633,392,1.617,393,5.292,395,3.27,398,2.643,421,2.404,446,4.905,447,2.675,448,2.144,449,4.522,450,4.672,451,3.467,452,2.876,453,1.102,454,1.747,455,2.304,456,2.404,457,2.144,458,2.144,459,2.219,460,1.195,461,2.876,462,1.784,463,2.304,464,2.876,465,2.675,466,5.197,467,2.906,468,1.867,469,2.989,470,2.675,471,2.675,472,2.675,473,4.206,474,2.524,475,2.675,476,2.675,477,4.324,478,4.206,479,4.206,480,7.581,481,7.369,482,3.087,483,3.78,484,3.172,485,2.0,486,2.144,487,2.675,488,2.404]],["title/Search%20%26%20Sort/Sort/merge/#local-reference",[386,3.248,489,2.992]],["text/Search%20%26%20Sort/Sort/merge/#local-reference",[54,1.422,56,1.741,59,1.345,63,2.87,68,1.516,131,2.355,185,5.149,284,5.284,393,4.522,395,3.147,398,2.543,446,4.719,450,4.495,467,2.614,469,1.889,474,4.719,486,4.008,490,9.108,491,2.87,492,5.376,493,5.376,494,5.376,495,7.129,496,5.0]],["title/Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx",[11,1.161,71,1.437,98,1.541,497,2.692,498,2.692]],["text/Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx",[2,0.853,10,0.902,14,0.953,20,0.746,27,1.478,29,0.746,31,0.389,36,0.922,48,0.7,51,0.646,54,1.164,56,1.619,57,1.244,58,0.765,59,1.296,63,1.299,68,1.217,71,0.734,76,1.167,99,0.679,101,1.814,102,2.732,105,2.266,106,1.102,127,0.964,131,2.173,160,0.872,173,1.486,174,0.571,176,1.157,178,1.814,183,0.624,216,0.964,222,1.102,223,0.787,226,0.734,230,0.835,239,0.818,251,1.58,255,1.207,278,1.58,279,1.478,284,4.853,321,0.818,357,2.234,359,0.6,372,1.102,386,1.758,387,0.608,388,3.206,389,3.293,391,2.178,392,0.773,393,4.171,394,1.758,395,3.229,398,2.997,400,1.661,435,1.207,447,1.279,451,1.51,453,1.254,459,1.061,465,1.279,466,3.68,467,2.624,468,0.893,469,2.785,470,1.279,471,2.263,472,1.279,473,3.044,474,2.873,475,2.263,476,2.263,477,3.087,478,3.044,479,3.044,480,5.641,481,5.641,482,5.645,483,2.034,484,5.747,485,1.448,486,1.025,487,1.279,488,2.737,496,1.279,499,1.375,500,1.375,501,1.733,502,1.207,503,1.279,504,0.893,505,0.7,506,1.814,507,1.375,508,1.375,509,1.375,510,1.375,511,1.375,512,0.835,513,1.375,514,1.149,515,1.375,516,0.915,517,1.025,518,0.454,519,0.593,520,2.391,521,1.375,522,2.433,523,1.375,524,1.375,525,1.025,526,1.375,527,1.375,528,1.102,529,1.207,530,1.375,531,1.207,532,1.544,533,0.938,534,0.938,535,1.375,536,1.025,537,1.207,538,1.375,539,0.835,540,1.207,541,1.09,542,1.429,543,0.964,544,1.375,545,1.102,546,1.808,547,1.619,548,2.455,549,1.061,550,1.102,551,1.375,552,2.136,553,1.149,554,1.375,555,1.375,556,1.619,557,1.299,558,1.95,559,5.0,560,1.375,561,1.375,562,1.375]],["title/ds/array/decay/",[17,1.428,563,4.182]],["text/ds/array/decay/",[3,2.318,16,3.12,17,2.918,20,3.582,48,3.357,99,4.012,173,3.998,271,3.926,434,4.765,514,5.515,520,2.918,563,6.135,564,5.79,565,3.164,566,6.597,567,4.388,568,6.597,569,5.285,570,6.597]],["title/ds/array/decay/#array-decay",[17,1.428,563,4.182]],["text/ds/array/decay/#array-decay",[16,3.192,17,2.824,20,3.665,48,3.435,99,4.069,173,4.039,271,4.018,434,4.875,514,5.643,520,2.985,564,5.925,565,3.238,566,6.75,567,4.49,568,6.75,569,5.408,570,6.75]],["title/ds/array/frequency/",[295,1.964,571,4.182]],["text/ds/array/frequency/",[3,2.721,6,2.119,8,1.975,10,3.032,26,2.184,31,1.728,34,1.721,51,1.726,53,2.666,54,1.277,56,1.977,58,1.92,59,1.242,60,2.884,62,3.199,68,1.361,73,4.728,79,1.574,102,1.85,164,3.438,168,3.767,176,1.561,183,3.515,295,1.874,302,4.508,390,2.554,541,2.736,542,3.904,571,3.991,572,5.678,573,4.291,574,4.291,575,3.311,576,4.291,577,3.873,578,3.767,579,4.291,580,4.291,581,4.061,582,4.291,583,6.105,584,4.291,585,4.291,586,4.291,587,4.291]],["title/ds/array/frequency/#frequency-of-a-number",[295,1.964,571,4.182]],["text/ds/array/frequency/#frequency-of-a-number",[]],["title/ds/array/frequency/#simple",[390,3.448]],["text/ds/array/frequency/#simple",[10,2.965,31,2.017,51,1.681,53,2.348,54,1.329,56,2.309,58,1.69,59,1.293,60,2.893,62,4.008,68,1.417,73,5.32,79,1.971,168,4.719,176,1.375,183,3.237,302,5.073,541,2.409,542,3.719,572,5.0,573,5.376,574,5.376,575,4.148,576,5.376,577,4.522,578,4.719,579,5.376,580,5.376,581,3.576]],["title/ds/array/frequency/#sort-then-binary-search",[6,1.815,26,1.87,102,1.585]],["text/ds/array/frequency/#sort-then-binary-search",[]],["title/ds/array/frequency/#hashing",[164,4.641]],["text/ds/array/frequency/#hashing",[8,2.925,10,2.943,34,2.549,51,1.709,53,2.776,54,0.992,58,1.998,59,0.965,60,2.579,68,1.058,176,1.625,183,3.605,541,2.848,542,3.961,572,5.911,581,4.228,582,6.356,583,7.94,584,6.356,585,6.356,586,6.356,587,6.356]],["title/ds/array/functions/",[17,1.167,520,1.626,567,2.445]],["text/ds/array/functions/",[3,1.894,8,1.664,14,1.052,17,1.711,27,2.196,51,1.682,54,1.114,57,1.777,58,2.025,59,1.084,60,2.187,68,1.188,79,1.976,97,3.086,111,2.611,150,2.536,151,3.76,173,1.641,175,2.622,176,1.647,183,1.641,203,1.963,217,2.897,230,3.273,239,3.207,295,1.579,438,2.405,451,2.243,467,1.326,489,3.584,501,2.736,504,2.347,516,2.405,517,2.695,520,3.541,541,2.886,542,3.622,543,2.536,557,2.877,567,2.405,569,2.897,581,3.584,588,6.442,589,5.389,590,6.267,591,3.615,592,3.615,593,3.615,594,3.615,595,3.997,596,2.897,597,3.086,598,3.173,599,3.615,600,2.07,601,3.615,602,5.389,603,3.615,604,3.615,605,3.615,606,3.615,607,2.789,608,5.389,609,3.615,610,1.899,611,3.173,612,6.267,613,3.615]],["title/ds/array/functions/#passing-arrays-to-functions",[17,1.167,520,1.626,567,2.445]],["text/ds/array/functions/#passing-arrays-to-functions",[176,2.355,588,9.208,589,8.649,590,8.083,591,7.316]],["title/ds/array/functions/#return-array-from-functions",[17,1.167,57,0.915,520,1.626]],["text/ds/array/functions/#return-array-from-functions",[8,1.814,14,1.148,27,2.395,51,1.724,54,1.162,57,1.686,58,2.13,59,1.13,60,2.331,68,1.239,79,2.106,97,3.289,111,2.847,150,2.765,151,3.955,173,1.79,175,2.795,183,1.79,203,2.14,217,3.159,230,3.489,239,3.419,295,1.721,438,2.622,451,2.446,467,1.446,489,3.821,501,2.852,504,2.559,516,2.622,517,2.939,520,3.293,541,3.036,542,3.723,543,2.765,557,3.066,569,3.159,581,3.821,590,3.46,592,3.942,593,3.942,594,3.942,595,4.204,596,3.159,597,3.289,598,3.46,599,3.942,600,2.258,601,3.942,602,5.743,603,3.942,604,3.942,605,3.942,606,3.942,607,3.041,608,5.743,609,3.942,610,2.071,611,3.46,612,6.534,613,3.942]],["title/ds/array/intro/",[614,5.387]],["text/ds/array/intro/",[3,2.791,4,1.759,10,1.073,12,1.473,14,0.843,17,0.919,21,1.685,22,2.541,27,1.759,31,0.819,36,2.779,41,2.32,43,1.69,51,1.733,53,2.451,54,0.992,57,0.72,58,1.765,59,1.269,68,0.934,99,1.429,102,1.248,131,0.957,156,1.879,203,2.468,223,3.214,226,1.546,228,2.388,229,2.951,230,1.759,258,2.468,271,1.723,273,1.926,278,1.879,286,2.158,295,1.264,344,2.158,348,2.32,349,2.031,359,1.264,377,2.541,378,1.759,397,3.389,410,2.32,454,3.409,457,2.158,491,2.427,501,2.648,504,2.951,505,3.236,516,1.926,517,2.158,519,1.248,543,3.189,556,4.23,557,3.915,595,1.796,600,1.658,614,2.692,615,2.158,616,2.031,617,2.895,618,2.031,619,1.879,620,1.297,621,1.521,622,1.759,623,3.024,624,2.158,625,2.895,626,2.895,627,4.593,628,5.316,629,2.895,630,2.158,631,2.091,632,2.541,633,1.496,634,2.895,635,2.541,636,4.228,637,2.895,638,2.895,639,2.895,640,2.895,641,4.692,642,4.054,643,2.895,644,2.895,645,2.895,646,4.228,647,1.976,648,2.895,649,3.507,650,2.32,651,2.895,652,2.541,653,2.42,654,2.895,655,2.895,656,4.546,657,4.546,658,2.895,659,4.546,660,2.895,661,2.895,662,2.895]],["title/ds/array/intro/#introduction",[614,5.387]],["text/ds/array/intro/#introduction",[4,4.265,43,4.098,51,1.386,131,2.32,271,4.179,377,6.163,378,4.265,504,4.558,505,3.573,615,5.234,616,4.926,617,7.022,618,4.926,619,4.558,620,3.146,621,3.688,622,4.265]],["title/ds/array/intro/#why",[]],["text/ds/array/intro/#why",[17,2.425,22,6.703,99,3.771,156,4.958,410,6.119,595,4.738,623,5.08]],["title/ds/array/intro/#declaration",[624,4.318]],["text/ds/array/intro/#declaration",[10,2.242,51,1.856,53,3.36,54,1.201,58,2.419,59,1.352,68,1.28,491,3.229,501,2.317,556,5.63,557,4.756,625,6.048,626,6.048,627,6.113,628,7.075,629,6.048]],["title/ds/array/intro/#advantages",[630,4.318]],["text/ds/array/intro/#advantages",[102,3.181,226,3.939,258,4.006,349,5.176,454,5.613,504,4.79,505,4.424,631,5.329]],["title/ds/array/intro/#disadvantages",[632,5.084]],["text/ds/array/intro/#disadvantages",[21,3.288,273,5.08,295,3.335,344,5.693,359,3.335,633,3.947]],["title/ds/array/intro/#accessing",[505,2.948]],["text/ds/array/intro/#accessing",[12,3.258,36,3.292,51,1.264,59,1.42,278,4.157,491,3.418,501,2.453,557,3.418,634,6.403,635,5.62,636,5.955,637,6.403,638,6.403,639,6.403,640,6.403,641,5.353,642,6.276,643,6.403,644,6.403,645,6.403,646,5.955]],["title/ds/array/intro/#in-c-no-index-out-of-bound-checking",[41,2.157,203,1.461,286,2.006,348,2.157,647,1.837]],["text/ds/array/intro/#in-c-no-index-out-of-bound-checking",[27,3.674,36,2.916,51,1.67,53,2.641,54,0.944,59,0.918,203,3.283,223,4.847,228,4.042,229,4.996,457,4.508,501,2.317,519,2.608,556,4.023,557,3.229,600,3.463,623,4.023,627,4.368,628,5.056,636,5.624,641,6.433,646,5.624,648,6.048,649,5.936,650,4.846,651,6.048,652,5.308,653,5.056]],["title/ds/array/intro/#traversal",[258,3.145]],["text/ds/array/intro/#traversal",[14,1.85,31,1.799,36,2.409,51,1.567,54,0.992,57,1.582,58,1.998,68,1.058,230,3.861,397,5.919,501,3.042,516,4.228,517,4.738,543,5.57,654,6.356,655,6.356,656,7.94,657,7.94,658,6.356,659,7.94,660,6.356,661,6.356,662,6.356]],["title/ds/array/min-max/",[310,3.07,663,3.248]],["text/ds/array/min-max/",[3,2.672,8,3.067,10,3.509,31,2.503,51,1.82,53,3.863,54,1.276,56,2.159,57,2.035,68,1.361,71,2.598,79,2.999,310,3.321,520,2.152,635,5.851,663,3.515,664,6.199,665,5.341,666,4.866,667,4.866,668,6.199,669,4.866,670,4.866,671,3.899,672,4.866,673,4.866]],["title/ds/array/min-max/#min-max",[310,3.07,663,3.248]],["text/ds/array/min-max/#min-max",[]],["title/ds/array/min-max/#recursive",[71,3.093]],["text/ds/array/min-max/#recursive",[8,3.495,10,3.467,31,2.647,51,1.745,53,3.316,54,1.185,56,2.46,57,1.89,68,1.264,79,2.785,635,6.666,664,5.51,665,6.085,666,5.924,667,5.924,668,5.51,669,5.924,670,5.924]],["title/ds/array/min-max/#library-functions",[520,1.989,671,3.603]],["text/ds/array/min-max/#library-functions",[10,3.416,51,1.818,53,4.024,54,1.274,57,2.032,68,1.358,79,2.993,664,6.182,668,6.182,672,6.647,673,6.647]],["title/ds/array/multi-dimensional/",[17,1.428,674,4.182]],["text/ds/array/multi-dimensional/",[3,2.504,17,1.945,31,2.196,34,1.73,36,2.322,37,3.576,51,1.531,54,1.112,58,2.439,59,1.178,68,0.718,107,3.455,203,2.341,278,3.978,279,3.722,295,2.675,302,2.736,356,3.115,519,1.86,556,2.869,557,3.271,558,3.455,674,4.011,675,5.698,676,4.313,677,4.313,678,4.313,679,4.313,680,4.313,681,6.127,682,7.322,683,4.425,684,4.727,685,4.298,686,4.909,687,4.909,688,4.313,689,5.698,690,4.313,691,4.313,692,6.127,693,3.215,694,4.313,695,4.313,696,3.785,697,4.011,698,4.313,699,4.313,700,4.313,701,4.313,702,4.313,703,4.313,704,4.313,705,4.313,706,4.313,707,4.313,708,4.313]],["title/ds/array/multi-dimensional/#multidimensional-arrays",[17,1.428,674,4.182]],["text/ds/array/multi-dimensional/#multidimensional-arrays",[]],["title/ds/array/multi-dimensional/#row-major-in-c",[203,1.995,675,3.418,676,3.675]],["text/ds/array/multi-dimensional/#row-major-in-c",[31,2.357,34,2.344,36,2.215,37,3.411,51,1.486,58,2.619,59,1.143,278,3.794,279,3.551,295,3.288,302,3.708,356,4.222,557,3.121,675,5.436,677,5.845,678,5.845,679,5.845,680,5.845,681,7.529,682,7.925,683,4.222,684,4.509,685,4.1,686,4.683,687,4.683,688,5.845,689,5.436,690,5.845]],["title/ds/array/multi-dimensional/#three-dimensional-array",[17,1.167,107,2.945,691,3.675]],["text/ds/array/multi-dimensional/#three-dimensional-array",[31,1.654,36,2.215,37,3.411,51,1.486,54,1.3,58,1.838,59,1.143,68,0.973,278,3.794,279,3.551,519,2.52,556,3.888,557,3.121,558,4.683,683,4.222,684,4.509,685,4.1,686,4.683,687,4.683,689,5.436,692,7.529,693,4.357,694,5.845,695,5.845,696,5.13,697,5.436,698,5.845,699,5.845,700,5.845,701,5.845,702,5.845,703,5.845,704,5.845,705,5.845,706,5.845,707,5.845,708,5.845]],["title/ds/array/reverse/",[17,1.428,332,2.325]],["text/ds/array/reverse/",[3,2.711,17,1.589,29,4.844,31,1.923,50,2.548,51,1.761,53,2.967,54,1.204,57,1.246,59,1.354,60,2.031,68,1.284,71,3.628,79,1.836,112,2.548,176,1.738,187,3.25,300,4.277,332,2.588,501,1.918,520,2.214,610,2.629,709,6.32,710,4.928,711,6.32,712,6.32,713,6.32,714,6.32,715,5.006]],["title/ds/array/reverse/#reverse-array",[17,1.428,332,2.325]],["text/ds/array/reverse/#reverse-array",[]],["title/ds/array/reverse/#iterative",[50,2.948]],["text/ds/array/reverse/#iterative",[29,4.749,51,1.726,53,2.838,54,1.256,59,1.328,60,2.637,68,1.34,176,1.662,187,4.219,300,4.161,709,6.043,710,4.832,711,6.043,712,6.043,713,6.043,714,6.043]],["title/ds/array/reverse/#recursive",[71,3.093]],["text/ds/array/reverse/#recursive",[29,4.655,31,2.217,51,1.692,53,2.716,54,0.971,57,1.548,59,1.302,68,1.035,71,3.321,79,2.281,112,3.165,176,1.591,300,4.049,501,2.383,520,2.751,610,3.267,709,5.785,710,4.737,711,5.785,712,5.785,713,5.785,714,5.785,715,6.22]],["title/ds/array/vectors/",[653,3.76,716,3.352]],["text/ds/array/vectors/",[3,2.42,10,1.676,11,1.24,14,0.837,16,2.643,17,0.913,20,1.561,21,3.541,24,2.524,33,2.543,48,1.464,50,2.844,91,1.824,99,2.233,111,2.077,118,1.827,131,0.95,173,1.306,180,4.832,203,1.561,270,2.747,271,1.712,274,1.289,282,1.679,294,2.524,295,2.44,332,2.338,359,2.767,366,1.963,374,1.963,386,4.975,392,2.543,396,1.679,416,1.963,451,2.806,453,2.428,459,2.219,462,2.806,486,2.144,505,1.464,532,1.824,533,3.814,550,2.304,616,2.017,653,2.404,710,3.087,716,5.907,717,3.623,718,4.905,719,4.478,720,2.876,721,2.876,722,2.876,723,7.308,724,2.876,725,2.876,726,2.876,727,2.876,728,2.524,729,5.758,730,2.876,731,2.876,732,2.876,733,3.467,734,2.304,735,2.876,736,2.876,737,2.876,738,2.675,739,2.304,740,2.675,741,2.876,742,5.588,743,2.876,744,2.219,745,2.876,746,1.784,747,3.371,748,2.219,749,2.876,750,2.876,751,1.679,752,2.144,753,2.876,754,2.524,755,1.867,756,2.876,757,2.876,758,1.712,759,2.876]],["title/ds/array/vectors/#vectors-in-cpp",[653,3.76,716,3.352]],["text/ds/array/vectors/#vectors-in-cpp",[]],["title/ds/array/vectors/#iterators",[50,2.948]],["text/ds/array/vectors/#iterators",[21,3.395,33,3.354,50,3.882,111,4.308,118,2.556,203,3.239,294,5.236,332,3.943,451,4.733,710,4.214,717,6.112,718,7.381,719,6.738,720,5.965,721,5.965,722,5.965,723,5.885,724,5.965,725,5.965,726,5.965,727,5.965,728,5.236]],["title/ds/array/vectors/#capacity",[729,4.842]],["text/ds/array/vectors/#capacity",[10,2.743,11,2.455,16,3.5,21,3.43,91,3.611,295,3.591,366,3.885,374,3.885,392,4.162,396,3.322,459,4.391,716,4.243,723,7.268,729,7.28,730,5.692,731,5.692,732,5.692,733,4.592,734,4.561,735,5.692,736,5.692,737,5.692,738,5.294,739,4.561,740,5.294,741,5.692]],["title/ds/array/vectors/#element-access",[21,1.667,505,2.289]],["text/ds/array/vectors/#element-access",[14,1.725,17,1.881,20,3.217,21,3.388,33,3.331,131,1.957,173,2.69,180,5.327,271,3.526,274,2.655,386,6.602,416,4.044,532,3.758,533,4.044,616,4.156,716,6.814,723,7.052,742,8.382,743,5.924,744,4.57,745,5.924]],["title/ds/array/vectors/#modifiers",[746,3.594]],["text/ds/array/vectors/#modifiers",[16,2.482,21,3.479,24,4.605,48,2.67,99,3.463,180,5.542,270,4.261,282,3.062,359,3.683,453,3.232,462,4.352,486,3.911,533,4.787,550,4.204,710,2.898,716,3.911,723,7.332,733,3.256,747,5.229,748,4.048,749,5.247,750,5.247,751,3.062,752,3.911,753,5.247,754,4.605,755,3.406,756,5.247,757,5.247,758,3.123,759,5.247]],["title/ds/array/vs-pointers/",[17,1.167,154,2.386,173,1.669]],["text/ds/array/vs-pointers/",[3,2.519,10,1.351,14,1.885,16,3.39,17,2.055,21,2.01,34,2.596,51,1.585,53,3.732,54,1.01,57,1.349,58,1.705,59,1.219,68,0.902,79,1.337,97,2.088,118,1.051,150,2.557,154,2.367,173,3.479,176,0.932,183,2.462,211,2.557,228,1.915,229,2.367,230,3.294,233,2.425,235,3.2,239,3.227,242,2.488,295,1.592,491,1.946,501,2.936,505,1.855,516,2.425,517,2.717,519,1.572,534,2.488,539,3.294,541,2.429,542,3.346,556,3.607,557,3.456,565,1.749,567,2.425,569,2.921,598,3.2,615,2.717,619,2.367,622,2.214,627,2.633,628,3.048,650,2.921,685,2.557,718,3.2,747,2.717,755,2.367,760,3.2,761,6.667,762,3.645,763,3.645,764,3.645,765,4.759,766,3.645,767,3.645,768,3.645,769,2.05,770,2.557,771,2.921,772,3.645,773,3.645,774,3.645,775,3.645]],["title/ds/array/vs-pointers/#array-vs-pointers",[17,1.167,154,2.386,173,1.669]],["text/ds/array/vs-pointers/#array-vs-pointers",[]],["title/ds/array/vs-pointers/#difference",[755,3.76]],["text/ds/array/vs-pointers/#difference",[10,1.835,14,1.441,16,3.895,21,1.835,51,1.513,53,3.763,54,1.052,57,1.232,58,1.556,59,1.024,68,0.824,97,2.834,173,3.061,176,1.266,183,3.061,230,3.006,239,2.946,242,3.378,295,2.161,491,2.642,501,2.939,516,3.292,517,3.689,519,2.134,539,4.096,541,3.021,542,3.763,556,3.292,557,2.642,565,2.374,598,4.344,619,3.213,622,3.006,627,3.575,628,4.137,650,3.965,685,3.472,760,4.344,761,7.133,762,4.949,763,4.949,764,4.949,765,5.918,766,4.949,767,4.949]],["title/ds/array/vs-pointers/#assignment",[747,4.318]],["text/ds/array/vs-pointers/#assignment",[34,3.496,51,1.72,53,3.499,54,1.007,57,1.605,58,2.028,59,1.384,68,1.073,228,3.388,229,4.187,230,3.918,235,5.662,239,3.839,501,3.07,556,4.291,557,4.278,761,5.999,768,6.45]],["title/ds/array/vs-pointers/#similarities",[615,4.318]],["text/ds/array/vs-pointers/#similarities",[14,2.365,17,2.58,21,2.445,53,2.881,79,2.419,118,1.902,150,4.627,173,3.689,211,4.627,233,4.388,505,3.357,534,4.503,567,4.388,569,5.285,718,5.79,769,3.709,770,4.627,771,5.285,772,6.597,773,6.597,774,6.597,775,6.597]],["title/ds/linked-list/bin-tree-cdll/",[26,1.581,408,2.245,776,2.067,777,2.316]],["text/ds/linked-list/bin-tree-cdll/",[3,2.627,8,1.831,26,2.024,51,0.785,54,1.063,56,2.206,57,1.976,59,1.377,68,0.962,105,2.278,131,1.314,171,5.305,172,5.979,230,2.417,242,2.715,276,2.873,388,1.783,389,1.653,395,3.171,408,2.873,414,6.176,467,2.741,519,1.715,520,1.76,557,2.124,558,3.187,621,3.037,627,2.873,693,2.965,776,3.846,777,2.965,778,3.978,779,3.326,780,3.978,781,3.978,782,8.55,783,8.286,784,6.811,785,6.811,786,3.978,787,5.782,788,3.978,789,3.978,790,3.978]],["title/ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll",[26,1.581,408,2.245,776,2.067,777,2.316]],["text/ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll",[276,5.822]],["title/ds/linked-list/bin-tree-cdll/#cdll",[778,5.792]],["text/ds/linked-list/bin-tree-cdll/#cdll",[51,1.468,54,1.161,131,2.459,171,4.617,172,5.079,395,3.102,519,3.209,621,4.588]],["title/ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls",[105,2.105,779,3.073,780,3.675]],["text/ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls",[54,0.894,56,2.407,57,2.053,59,1.407,68,0.953,171,4.612,172,5.959,395,3.1,467,2.725,781,5.73,782,9.436,783,9.269,784,8.25,785,8.25]],["title/ds/linked-list/bin-tree-cdll/#main-function",[230,2.732,520,1.989]],["text/ds/linked-list/bin-tree-cdll/#main-function",[8,2.689,54,0.912,56,1.893,57,1.874,59,1.335,68,0.973,171,5.458,172,5.685,242,3.989,388,2.619,389,2.429,395,2.958,414,6.947,467,2.761,557,3.121,558,4.683,627,4.222,693,4.357,776,3.888,786,5.845,787,7.529,788,5.845,789,5.845,790,5.845]],["title/ds/linked-list/cll/",[776,2.992,791,3.248]],["text/ds/linked-list/cll/",[2,1.007,3,1.936,20,2.414,23,1.007,25,1.301,27,1.71,29,1.528,33,4.906,36,1.412,45,1.03,51,1.167,54,1.207,56,1.785,57,1.632,59,1.381,60,0.659,61,0.839,68,1.263,70,1.108,76,2.132,102,1.214,106,1.301,108,1.357,112,1.432,118,2.364,131,2.883,173,0.737,174,0.675,176,0.72,183,0.737,192,0.966,252,1.252,258,1.528,270,0.986,297,1.425,300,4.409,335,1.08,357,1.108,359,1.941,378,2.263,387,0.718,389,1.17,392,0.913,395,3.156,396,4.334,398,0.768,451,1.746,453,0.622,467,2.169,469,3.123,485,2.224,488,1.357,501,1.428,512,0.986,518,0.536,519,0.7,520,0.718,541,0.727,542,1.627,546,3.622,548,4.798,581,1.08,612,5.495,621,3.9,641,1.357,649,1.252,710,2.058,717,1.301,746,1.007,765,1.425,776,1.08,791,1.172,792,1.21,793,1.252,794,1.425,795,1.357,796,0.768,797,1.623,798,1.623,799,1.301,800,1.301,801,1.623,802,1.623,803,1.252,804,1.08,805,1.425,806,1.51,807,1.623,808,1.425,809,1.623,810,2.814,811,3.726,812,1.623,813,1.623,814,1.623,815,1.623,816,1.623,817,2.617,818,1.623,819,1.623,820,1.623,821,1.425,822,1.623,823,1.623,824,1.623,825,1.623]],["title/ds/linked-list/cll/#circular-ll",[776,2.992,791,3.248]],["text/ds/linked-list/cll/#circular-ll",[2,4.221,29,4.495,258,3.693,335,4.525,395,2.94,451,4.221,710,3.758,792,5.071,793,5.248,794,5.971,795,5.687,796,3.217,797,6.803,798,6.803,799,5.45,800,5.45,801,6.803,802,6.803,803,5.248]],["title/ds/linked-list/cll/#representation",[804,3.853]],["text/ds/linked-list/cll/#representation",[51,1.481,54,1.171,131,2.48,174,3.119,395,3.118,469,2.637,518,2.48,519,3.236]],["title/ds/linked-list/cll/#traversal",[258,3.145]],["text/ds/linked-list/cll/#traversal",[20,4.938,54,1.356,59,1.211,68,1.446,131,2.116,176,1.637,300,4.836,395,2.833,467,2.348,469,2.25,485,3.528,621,3.363,641,5.353,649,4.94,805,5.62]],["title/ds/linked-list/cll/#insertion",[359,2.529]],["text/ds/linked-list/cll/#insertion",[25,2.155,33,5.344,45,1.706,51,1.316,54,1.109,56,2.159,57,1.985,59,1.4,68,1.182,118,2.601,131,2.923,173,1.221,183,1.221,300,4.701,378,3.249,389,1.782,392,1.512,395,3.254,451,1.669,467,2.445,469,3.033,485,1.897,541,1.205,542,2.336,581,1.789,612,6.793,621,4.464,710,2.369,717,2.155,806,2.501,807,2.69,808,2.361,809,2.69,810,4.289,811,5.348,812,2.69,813,2.69,814,2.69]],["title/ds/linked-list/cll/#problems",[192,3.448]],["text/ds/linked-list/cll/#problems",[23,3.142,27,4.16,36,2.941,51,0.999,54,0.79,59,1.04,68,0.843,70,3.457,76,3.988,102,2.184,106,4.058,108,4.234,112,2.577,118,1.975,131,2.87,252,3.907,270,3.076,297,4.445,357,3.457,359,2.991,387,2.24,395,2.432,396,2.956,398,2.395,453,1.94,469,2.727,488,4.234,501,2.974,512,3.076,520,2.24,546,3.783,548,5.158,746,3.142,765,4.445,815,5.064,816,5.064,817,4.71,818,5.064,819,5.064,820,5.064,821,4.445,822,5.064,823,5.064]],["title/ds/linked-list/cll/#cll-sorted-insert",[102,1.585,359,1.605,817,3.418]],["text/ds/linked-list/cll/#cll-sorted-insert",[54,1.27,56,1.559,59,1.434,60,1.953,61,2.488,68,1.354,112,2.449,131,2.689,176,1.231,395,2.349,396,5.613,467,1.765,469,3.352,485,2.129,546,4.989,548,5.918,824,4.813,825,4.813]],["title/ds/linked-list/count/",[73,3.853]],["text/ds/linked-list/count/",[3,2.872,31,1.59,50,2.859,51,1.613,54,1.276,56,1.82,57,2.034,58,2.307,59,1.241,68,1.36,71,3.0,73,5.764,79,2.06,162,2.951,395,2.606,396,5.057,398,4.098,467,2.691,469,2.579,485,2.485,826,5.619,827,5.619,828,5.619]],["title/ds/linked-list/count/#counting",[73,3.853]],["text/ds/linked-list/count/#counting",[162,4.233]],["title/ds/linked-list/count/#iterative",[50,2.948]],["text/ds/linked-list/count/#iterative",[51,1.603,54,1.268,57,1.642,58,2.074,59,1.337,68,1.352,73,5.857,395,2.343,396,5.364,398,3.843,467,2.419,469,2.318,485,2.918,826,6.597]],["title/ds/linked-list/count/#recursive",[71,3.093]],["text/ds/linked-list/count/#recursive",[31,2.003,51,1.397,54,1.105,56,2.293,57,2.111,58,2.226,68,1.178,79,2.596,395,2.514,398,4.011,467,2.596,469,2.488,827,7.079,828,7.079]],["title/ds/linked-list/deletion/",[633,2.994]],["text/ds/linked-list/deletion/",[3,2.589,20,2.489,51,0.905,54,1.309,56,2.072,57,1.592,59,1.353,61,3.306,68,1.395,131,2.114,158,4.783,176,1.636,262,4.3,300,4.93,395,2.831,467,2.923,469,2.946,485,3.526,546,4.923,621,3.36,633,2.37,829,4.585,830,4.585,831,6.159,832,4.585]],["title/ds/linked-list/deletion/#deletion",[633,2.994]],["text/ds/linked-list/deletion/#deletion",[]],["title/ds/linked-list/deletion/#first",[20,3.145]],["text/ds/linked-list/deletion/#first",[54,1.292,59,1.257,68,1.378,176,1.74,300,3.516,395,2.94,467,2.494,469,2.39,485,3.009,546,5.131,621,3.573,829,6.803,830,6.803,831,5.687]],["title/ds/linked-list/deletion/#any",[]],["text/ds/linked-list/deletion/#any",[51,1.048,54,1.241,56,2.29,57,1.76,59,1.34,61,3.655,68,1.323,131,2.336,158,5.161,176,1.358,262,4.64,300,5.015,395,2.511,467,2.915,469,2.978,485,3.516,546,4.391,621,2.789,831,5.911,832,5.311]],["title/ds/linked-list/dll/",[791,3.248,793,3.469]],["text/ds/linked-list/dll/",[3,2.225,7,0.886,11,0.908,33,3.56,49,1.569,51,1.04,54,1.141,56,2.05,57,1.458,59,1.426,68,1.171,85,2.049,98,2.011,118,1.303,131,1.936,151,1.229,173,0.956,176,1.499,258,1.143,260,1.477,262,5.045,270,1.279,300,2.725,332,1.088,359,1.533,388,0.943,389,0.875,394,3.263,395,3.001,396,4.107,428,1.335,453,1.731,454,1.279,458,1.569,467,3.099,468,1.367,469,3.067,485,2.97,486,1.569,512,1.279,519,0.908,532,1.335,545,1.687,546,4.668,547,4.211,548,5.507,621,2.373,630,1.569,632,1.848,633,1.815,710,1.163,744,1.624,777,2.617,791,1.521,793,1.624,833,1.569,834,1.624,835,1.848,836,2.935,837,3.263,838,2.813,839,2.105,840,1.687,841,2.105,842,2.105,843,3.511,844,1.624,845,1.848,846,5.144,847,2.105,848,1.848,849,2.813,850,2.105,851,7.541,852,2.105,853,2.105,854,1.848,855,1.521]],["title/ds/linked-list/dll/#doubly-ll",[791,3.248,793,3.469]],["text/ds/linked-list/dll/#doubly-ll",[51,1.444,54,1.142,131,2.417,262,4.27,395,3.27,469,2.571,519,3.155,621,4.836]],["title/ds/linked-list/dll/#advantages",[630,4.318]],["text/ds/linked-list/dll/#advantages",[118,2.11,173,3.322,258,3.972,262,4.27,359,3.195,428,4.641,454,4.444,633,3.782,744,5.644,833,5.454,834,5.644,835,6.422]],["title/ds/linked-list/dll/#disadvantages",[632,5.084]],["text/ds/linked-list/dll/#disadvantages",[56,2.074,59,0.972,98,4.568,118,2.3,131,2.116,260,4.491,262,4.656,388,2.869,389,2.661,458,4.773,469,2.25,512,3.889,836,6.668,837,6.276,838,6.391,839,6.403,840,5.13,841,6.403,842,6.403,843,7.977,844,4.94]],["title/ds/linked-list/dll/#insertion",[359,2.529]],["text/ds/linked-list/dll/#insertion",[33,4.421,49,2.567,51,1.235,54,1.167,56,1.683,57,1.557,59,1.461,68,1.244,131,2.067,176,1.6,262,4.589,394,4.519,395,3.111,453,2.397,467,3.153,469,3.079,485,2.767,486,2.567,532,2.185,545,2.759,546,4.749,547,5.23,548,5.973,710,1.902,777,3.873,845,3.023,846,6.564,847,3.444,848,3.023]],["title/ds/linked-list/dll/#deletion",[633,2.994]],["text/ds/linked-list/dll/#deletion",[7,2.334,11,2.392,54,0.866,56,2.63,57,1.811,59,1.233,68,0.923,85,4.248,176,1.419,262,5.032,395,1.97,467,3.162,468,3.601,469,3.146,485,3.219,546,4.763,849,5.831,850,5.547,851,9.697,852,5.547]],["title/ds/linked-list/dll/#reverse",[332,2.994]],["text/ds/linked-list/dll/#reverse",[54,1.16,59,1.432,68,1.237,151,3.344,176,1.465,262,5.095,270,3.481,300,4.513,395,2.64,396,5.583,467,3.025,469,2.612,485,3.287,546,4.557,853,5.73,854,5.029,855,4.139]],["title/ds/linked-list/functions/",[520,1.989,567,2.992]],["text/ds/linked-list/functions/",[3,2.409,43,4.002,57,1.706,173,3.113,388,3.072,389,2.849,398,4.404,520,3.032,567,4.561,746,4.254,747,5.111,856,6.018,857,4.349,858,6.856,859,6.018,860,6.856,861,6.856]],["title/ds/linked-list/functions/#functional-passing",[520,1.989,567,2.992]],["text/ds/linked-list/functions/#functional-passing",[43,4.098,57,1.747,173,3.188,388,3.146,389,2.918,398,4.44,746,4.357,747,5.234,856,6.163,857,4.454,858,7.022,859,6.163,860,7.022,861,7.022]],["title/ds/linked-list/generic/",[203,1.995,387,1.626,600,2.105]],["text/ds/linked-list/generic/",[3,1.611,14,1.335,51,0.905,54,1.244,59,1.318,68,1.226,79,2.346,131,2.634,173,2.082,176,2.221,199,2.448,203,4.0,387,2.028,395,3.322,434,3.312,467,1.681,469,2.589,485,2.028,519,1.977,546,4.07,547,4.255,548,5.202,600,3.663,619,4.153,621,4.187,805,4.024,808,4.024,862,4.024,863,4.024,864,3.673,865,4.585,866,4.585,867,4.585,868,4.585,869,4.585,870,4.585,871,4.585,872,4.585,873,4.585]],["title/ds/linked-list/generic/#generic-implementation-in-c",[203,1.995,387,1.626,600,2.105]],["text/ds/linked-list/generic/#generic-implementation-in-c",[14,1.363,51,0.924,54,1.256,59,1.327,68,1.24,79,2.38,131,2.658,173,2.126,176,2.236,199,2.5,203,3.525,395,3.336,434,3.383,467,1.717,469,2.618,485,2.071,519,2.019,546,4.116,547,4.318,548,5.243,600,2.682,619,4.214,621,4.226,805,4.111,808,4.111,862,4.111,863,4.111,864,3.752,865,4.683,866,4.683,867,4.683,868,4.683,869,4.683,870,4.683,871,4.683,872,4.683,873,4.683]],["title/ds/linked-list/insertion/",[359,2.529]],["text/ds/linked-list/insertion/",[3,2.588,33,4.608,49,2.874,51,1.32,54,1.224,56,1.83,57,1.665,59,1.438,68,1.305,131,2.21,176,1.71,359,1.683,394,2.784,395,3.146,398,1.823,453,2.563,467,2.875,469,3.052,485,1.705,532,2.445,541,1.727,542,1.683,545,3.089,546,4.677,547,5.451,548,5.786,746,2.392,845,3.384,846,6.465,848,3.384,874,4.724,875,2.874]],["title/ds/linked-list/insertion/#insertion",[359,2.529]],["text/ds/linked-list/insertion/#insertion",[398,3.777,746,4.955]],["title/ds/linked-list/insertion/#front-o1",[532,2.853,874,3.76]],["text/ds/linked-list/insertion/#front-o1",[51,1.322,54,1.045,59,1.402,68,1.115,131,2.213,176,1.713,395,2.913,453,2.566,469,2.354,545,5.367,546,4.897,547,5.456,548,5.732]],["title/ds/linked-list/insertion/#after-node-o1",[395,1.597,874,3.76]],["text/ds/linked-list/insertion/#after-node-o1",[49,4.508,51,1.193,54,1.201,56,1.959,57,1.505,59,1.352,68,1.28,131,1.998,176,1.547,394,4.368,395,3.006,453,2.317,467,2.822,469,2.974,541,2.71,542,2.641,547,5.119,548,5.527,845,5.308,846,7.819]],["title/ds/linked-list/insertion/#last-on",[33,2.529,875,3.352]],["text/ds/linked-list/insertion/#last-on",[33,5.076,51,1.123,54,1.155,56,1.844,57,1.842,59,1.43,68,1.232,131,1.881,176,1.456,395,2.921,453,2.181,467,3.016,469,3.06,485,2.518,546,4.81,547,4.923,548,5.601,848,4.996]],["title/ds/linked-list/intro/",[388,2.015,389,1.869]],["text/ds/linked-list/intro/",[3,2.958,10,3.12,12,2.358,16,2.191,29,2.516,51,0.914,54,1.156,59,0.703,68,1.072,79,2.363,118,2.427,131,2.646,166,3.008,173,3.364,174,1.926,176,1.185,183,2.104,258,2.516,271,2.758,359,2.023,388,2.887,389,2.678,395,2.631,439,4.067,467,1.699,469,2.604,485,2.049,489,3.082,504,3.008,505,2.358,518,1.531,519,1.998,536,3.454,540,4.067,541,2.076,542,2.814,543,3.25,631,3.347,633,2.395,665,3.713,804,3.082,876,4.309,877,4.183,878,5.387,879,3.347,880,4.633,881,3.347,882,4.633,883,4.633,884,4.633,885,4.067]],["title/ds/linked-list/intro/#linked-list",[388,2.015,389,1.869]],["text/ds/linked-list/intro/#linked-list",[166,5.046,173,3.529,876,7.229,877,5.046,878,6.498]],["title/ds/linked-list/intro/#why",[665,4.641]],["text/ds/linked-list/intro/#why",[12,3.853,16,3.58,118,2.183,359,3.306,439,6.645,631,5.468,633,3.913,879,5.468]],["title/ds/linked-list/intro/#drawbacks",[880,5.792]],["text/ds/linked-list/intro/#drawbacks",[118,2.47,173,3.267,271,4.283,489,4.786,504,4.671,505,3.662,536,5.364,877,4.671,878,6.015,881,5.197,882,7.195,883,7.195,884,7.195]],["title/ds/linked-list/intro/#representation",[804,3.853]],["text/ds/linked-list/intro/#representation",[29,3.665,51,1.332,54,1.053,79,3.022,118,2.376,131,2.939,173,3.065,174,2.805,388,3.024,389,2.805,395,3.159,469,2.896,518,2.23,519,2.911,885,5.925]],["title/ds/linked-list/intro/#traversal",[258,3.145]],["text/ds/linked-list/intro/#traversal",[10,3.529,54,1.292,59,1.033,68,1.378,131,2.248,176,1.74,183,3.088,467,2.494,469,2.39,485,3.009,540,5.971,541,3.048,542,3.616,543,4.772]],["title/ds/linked-list/reverse/",[332,2.325,791,3.248]],["text/ds/linked-list/reverse/",[3,2.512,7,2.023,11,2.074,13,2.274,50,1.584,54,1.303,56,1.557,57,1.645,59,1.441,68,1.39,71,2.567,162,2.526,176,1.691,262,4.598,300,4.316,332,2.486,395,2.89,396,4.41,398,4.414,450,2.602,460,1.293,467,3.062,468,2.02,469,3.319,485,2.127,791,2.248,886,3.112,887,4.221,888,3.112,889,1.293,890,3.112,891,3.112,892,3.112,893,6.914,894,3.112,895,3.112,896,3.112,897,1.852,898,3.112,899,3.112,900,2.493,901,2.493]],["title/ds/linked-list/reverse/#reverse-ll",[332,2.325,791,3.248]],["text/ds/linked-list/reverse/#reverse-ll",[]],["title/ds/linked-list/reverse/#iterative",[50,2.948]],["text/ds/linked-list/reverse/#iterative",[7,2.475,11,2.537,13,2.783,54,1.18,59,1.46,68,1.258,162,3.091,176,1.505,262,5.147,332,3.042,395,2.685,396,5.449,398,3.576,467,3.064,469,3.205,485,2.603]],["title/ds/linked-list/reverse/#recursive",[71,3.093]],["text/ds/linked-list/reverse/#recursive",[7,2.58,11,2.644,13,2.9,54,0.957,56,2.514,57,1.932,59,1.293,68,1.021,162,3.221,395,2.757,398,4.533,467,3.124,468,3.981,469,3.246,886,6.133,887,6.814,888,6.133]],["title/ds/linked-list/reverse/#tail-recursive-method",[71,1.962,450,3.073,889,1.527]],["text/ds/linked-list/reverse/#tail-recursive-method",[54,1.296,57,1.866,59,1.332,68,1.382,176,1.917,262,4.846,395,2.948,398,4.399,467,2.129,469,3.192,890,5.806,891,5.806,892,5.806,893,8.308,894,5.806]],["title/ds/linked-list/reverse/#stack",[460,2.407]],["text/ds/linked-list/reverse/#stack",[54,1.304,59,1.417,68,1.39,176,1.505,300,5.022,395,2.09,398,3.952,467,2.773,469,3.205,485,2.603,895,5.884,896,5.884,897,3.502,898,5.884,899,5.884,900,4.715,901,4.715]],["title/ds/linked-list/search/",[6,2.86]],["text/ds/linked-list/search/",[3,2.217,6,3.116,28,6.098,51,1.245,57,1.967,59,1.2,68,1.436,300,4.676,398,3.738,467,2.314,469,2.217,541,3.542,542,3.452,854,5.539,902,7.904,903,6.31,904,6.31,905,6.31,906,6.31]],["title/ds/linked-list/search/#search",[6,2.86]],["text/ds/linked-list/search/#search",[28,6.154,51,1.264,57,1.985,59,1.211,68,1.446,300,4.701,398,3.773,467,2.348,469,2.25,541,3.574,542,3.483,854,5.62,902,7.977,903,6.403,904,6.403,905,6.403,906,6.403]],["title/ds/linked-list/swap/",[270,3.519]],["text/ds/linked-list/swap/",[3,1.578,25,3.598,33,2.525,34,3.554,51,1.244,54,1.347,56,2.359,57,1.117,59,1.373,61,2.321,68,1.436,131,2.083,176,1.612,270,2.728,284,5.611,300,3.259,356,6.4,388,2.012,389,1.866,395,2.955,398,2.124,467,2.312,469,2.56,546,4.996,907,3.598,908,4.49,909,4.49,910,4.49,911,4.49,912,4.49,913,4.49]],["title/ds/linked-list/swap/#swapping",[270,3.519]],["text/ds/linked-list/swap/#swapping",[25,3.635,33,2.551,34,3.564,51,1.253,54,1.351,56,2.373,57,1.129,59,1.376,61,2.345,68,1.44,131,2.098,176,1.624,284,5.626,300,3.282,356,6.419,388,2.033,389,1.886,395,2.966,398,2.146,467,2.328,469,2.574,546,5.009,907,3.635,908,4.537,909,4.537,910,4.537,911,4.537,912,4.537,913,4.537]],["title/ds/linked-list/vs-array/",[17,0.987,154,2.017,388,1.392,389,1.291]],["text/ds/linked-list/vs-array/",[3,2.336,7,1.124,14,0.778,16,1.264,17,2.11,21,0.991,31,1.721,36,2.518,37,2.491,41,2.142,51,1.2,54,0.417,58,1.912,59,0.406,79,0.98,97,1.531,118,2.598,131,1.76,154,1.735,166,1.735,175,1.301,223,1.531,226,1.427,228,1.404,251,1.735,258,1.451,271,2.54,273,1.778,278,2.771,318,2.142,351,1.875,359,1.864,374,1.825,384,2.142,388,3.175,389,2.762,392,1.503,395,1.892,398,1.264,453,1.024,459,2.062,460,1.111,489,1.778,504,1.735,505,1.36,519,1.153,615,1.993,621,2.241,622,2.592,633,1.382,682,2.235,685,1.875,710,1.477,744,2.062,799,2.142,803,4.109,821,2.346,836,5.084,856,2.346,874,2.235,875,1.993,877,1.735,878,2.235,879,3.082,881,1.931,914,2.673,915,2.673,916,2.673,917,3.969,918,4.453,919,4.954,920,2.673,921,2.673,922,2.771,923,2.673,924,2.673,925,2.673,926,2.673,927,2.673,928,2.235,929,2.673,930,2.486,931,2.839,932,2.142,933,3.969,934,2.673,935,2.235,936,2.142,937,2.673,938,4.268,939,2.673,940,2.673,941,2.673,942,2.673,943,7.182,944,6.915,945,6.915,946,7.182,947,4.954,948,2.673,949,4.268,950,6.589,951,4.268,952,2.673,953,2.673,954,4.268,955,4.268,956,2.673,957,2.346,958,1.931,959,2.673]],["title/ds/linked-list/vs-array/#linked-list-vs-arrays",[17,0.987,154,2.017,388,1.392,389,1.291]],["text/ds/linked-list/vs-array/#linked-list-vs-arrays",[]],["title/ds/linked-list/vs-array/#array",[17,1.839]],["text/ds/linked-list/vs-array/#array",[7,1.515,16,1.703,17,2.04,31,1.819,36,2.435,37,3.135,41,2.885,51,1.406,54,0.562,58,2.02,59,0.547,79,1.32,97,2.062,118,2.51,131,1.19,166,2.337,175,1.752,223,2.062,226,1.922,228,1.891,251,2.337,271,3.197,273,2.395,351,2.526,374,2.457,384,2.885,388,2.407,389,2.233,395,1.279,459,2.778,460,1.496,489,2.395,504,2.337,505,1.832,519,1.552,615,2.684,621,2.821,622,2.187,633,1.861,710,1.989,744,2.778,799,2.885,803,4.144,821,3.16,836,5.372,856,3.16,874,3.01,878,3.01,879,2.6,881,2.6,914,3.6,915,3.6,916,3.6,917,3.348,918,4.491,919,4.996,920,3.6,921,3.6,922,2.337,923,3.6,924,3.6,925,3.6,926,3.6,927,3.6,928,3.01,929,3.6,930,3.348,931,3.573,932,2.885,933,3.348,934,3.6,935,3.01,936,2.885,937,3.6,938,5.372,939,3.6,940,3.6,941,3.6,942,3.6,943,6.626,944,5.976,945,6.626,946,6.626,947,3.348,948,3.6,949,5.372,950,4.996,951,5.372,952,3.6,953,3.6]],["title/ds/linked-list/vs-array/#inserting",[359,2.529]],["text/ds/linked-list/vs-array/#inserting",[31,1.632,36,2.828,58,1.813,118,2.725,131,1.906,278,4.846,359,2.519,395,2.048,453,2.21,685,4.046,943,8.139,944,8.139,945,7.697,946,8.139,947,6.942,950,8.139,954,7.464,955,7.464,956,5.768]],["title/ds/linked-list/vs-array/#how-to-optimise",[318,4.641]],["text/ds/linked-list/vs-array/#how-to-optimise",[131,2.568,388,3.483,389,3.23,392,4.371,957,6.822]],["title/ds/linked-list/vs-array/#linked-list",[388,2.015,389,1.869]],["text/ds/linked-list/vs-array/#linked-list",[14,1.98,21,2.522,118,1.962,258,3.693,388,3.048,395,2.416,398,3.217,622,4.132,682,5.687,803,5.248,836,5.687,875,5.071,877,4.416,879,4.913,917,6.326,918,5.687,919,6.326,922,4.416,933,6.326,958,4.913,959,6.803]],["title/ds/linked-list/xor-dll/",[777,3.352,837,3.248]],["text/ds/linked-list/xor-dll/",[3,2.766,10,1.442,49,2.899,51,1.122,54,1.283,57,0.968,59,1.37,68,1.31,70,2.655,131,2.6,174,1.616,176,1.454,262,3.924,284,2.413,359,1.698,388,1.743,389,1.616,395,3.317,398,2.69,453,1.49,467,2.465,469,2.599,482,2.655,484,2.728,485,2.515,518,1.285,519,1.677,531,3.414,539,2.363,541,1.743,542,1.698,543,2.728,546,4.541,548,4.589,777,2.899,804,2.587,837,5.684,838,6.306,840,3.116,893,6.908,960,3.889,961,3.889,962,3.889,963,3.889,964,3.889,965,3.889,966,3.889,967,3.889]],["title/ds/linked-list/xor-dll/#xor-dll",[777,3.352,837,3.248]],["text/ds/linked-list/xor-dll/#xor-dll",[]],["title/ds/linked-list/xor-dll/#representation",[804,3.853]],["text/ds/linked-list/xor-dll/#representation",[49,5.32,51,1.408,54,1.114,131,2.358,174,2.966,395,3.236,469,2.508,482,4.871,484,5.006,518,2.358,519,3.077,837,5.155,838,5.718]],["title/ds/linked-list/xor-dll/#xor-utility",[531,3.947,837,3.248]],["text/ds/linked-list/xor-dll/#xor-utility",[54,1.132,57,1.806,68,1.207,284,4.502,395,3.259,837,5.241,840,5.813,960,7.255,961,7.255,962,7.255,963,7.255]],["title/ds/linked-list/xor-dll/#insert",[359,2.529]],["text/ds/linked-list/xor-dll/#insert",[51,1.219,54,1.217,59,1.405,68,1.298,131,2.824,176,1.579,395,2.769,453,2.367,467,2.265,485,2.732,546,5.222,548,5.57,838,6.848,964,6.176,965,6.176]],["title/ds/linked-list/xor-dll/#print",[539,3.519]],["text/ds/linked-list/xor-dll/#print",[10,2.152,54,1.17,59,1.379,68,1.247,70,3.963,131,1.918,176,1.485,262,4.846,388,2.602,389,2.413,395,3.226,398,3.545,467,2.749,469,2.918,485,2.568,541,2.602,542,2.535,543,4.073,837,4.194,838,4.652,893,7.973,966,5.806,967,5.806]],["title/ds/queue/dequeue/",[968,3.519]],["text/ds/queue/dequeue/",[3,2.107,7,0.797,8,0.872,13,1.52,14,1.218,16,3.43,17,0.602,20,1.029,21,0.702,23,1.176,30,1.663,31,2.386,51,1.327,54,1.343,56,2.479,57,1.805,58,2.406,59,1.318,60,0.769,61,0.979,68,1.418,118,0.927,123,1.029,158,3.893,174,0.787,176,1.72,183,2.506,187,4.366,192,1.913,221,1.151,241,3.458,274,1.44,321,1.128,359,0.827,366,1.293,387,0.838,388,0.849,389,0.787,428,2.655,458,1.412,460,0.787,462,1.176,463,1.518,468,1.23,512,1.151,518,0.626,519,0.817,525,1.412,532,5.458,541,2.687,542,3.342,581,3.989,597,1.085,611,1.663,633,1.661,663,1.369,710,2.312,776,2.138,793,1.462,796,1.979,855,1.369,968,1.151,969,1.895,970,1.462,971,1.895,972,3.892,973,1.895,974,2.989,975,4.121,976,3.986,977,2.989,978,2.989,979,1.151,980,1.895,981,1.895,982,1.895,983,1.663,984,4.614,985,1.518,986,1.663,987,1.663,988,1.895,989,1.895,990,1.895,991,1.895,992,1.895,993,1.412,994,1.895,995,1.895,996,1.895,997,6.675,998,1.895,999,1.895,1000,1.895,1001,1.895,1002,1.895,1003,1.895,1004,1.895,1005,1.895,1006,1.895,1007,1.895,1008,1.895,1009,1.895,1010,1.895,1011,4.929,1012,1.895,1013,1.895,1014,1.895,1015,1.895,1016,1.895,1017,1.895,1018,1.895]],["title/ds/queue/dequeue/#dequeue",[968,3.519]],["text/ds/queue/dequeue/#dequeue",[118,2.183,359,3.306,428,4.802,633,3.913,710,4.182,796,3.58,969,7.57,970,5.84]],["title/ds/queue/dequeue/#operations",[274,2.595]],["text/ds/queue/dequeue/#operations",[971,7.57,972,7.04,973,7.57,974,7.04,975,6.329,976,5.468,977,7.04,978,7.04]],["title/ds/queue/dequeue/#application",[979,3.519]],["text/ds/queue/dequeue/#application",[7,2.379,13,2.675,14,2.387,16,2.675,20,3.07,21,2.096,23,3.509,30,4.964,31,1.6,58,1.778,123,3.07,192,4.387,221,3.435,274,2.534,321,3.366,366,3.86,428,4.675,458,4.216,460,2.35,462,3.509,463,4.531,512,3.435,525,4.216,633,2.923,710,4.071,776,3.762,796,2.675,980,5.655,981,5.655,982,5.655,983,4.964,984,6.161,985,4.531,986,4.964,987,4.964,988,5.655,989,5.655,990,5.655,991,5.655,992,5.655,993,4.216]],["title/ds/queue/dequeue/#implementation",[387,2.562]],["text/ds/queue/dequeue/#implementation",[13,3.743,118,2.282,994,7.914]],["title/ds/queue/dequeue/#doubly-linked-list",[388,1.647,389,1.527,793,2.835]],["text/ds/queue/dequeue/#doubly-linked-list",[855,5.822]],["title/ds/queue/dequeue/#circular-array",[17,1.428,776,2.992]],["text/ds/queue/dequeue/#circular-array",[8,1.061,16,3.576,31,2.472,51,1.441,54,1.4,56,2.637,57,1.937,58,2.507,59,1.371,60,0.936,61,1.192,68,1.48,158,4.297,174,0.958,176,1.867,183,2.796,187,4.74,241,3.911,468,1.497,518,0.762,519,0.994,532,5.688,541,2.966,542,3.555,581,4.403,597,1.32,611,2.024,663,1.665,796,1.09,972,3.521,974,2.144,975,4.027,976,4.027,977,2.144,978,2.144,984,4.027,995,2.306,996,2.306,997,6.997,998,2.306,999,2.306,1000,2.306,1001,2.306,1002,2.306,1003,2.306,1004,2.306,1005,2.306,1006,2.306,1007,2.306,1008,2.306,1009,2.306,1010,2.306,1011,5.576,1012,2.306,1013,2.306,1014,2.306,1015,2.306,1016,2.306,1017,2.306,1018,2.306]],["title/ds/queue/intro/",[796,2.739]],["text/ds/queue/intro/",[3,2.051,7,1.695,10,0.668,11,0.777,13,2.533,14,0.896,16,3.363,17,1.853,21,1.494,31,1.516,34,0.722,45,1.142,51,1.446,54,1.246,56,1.735,57,1.872,58,0.968,59,1.335,68,1.252,79,1.478,85,3.126,97,1.031,105,1.031,128,1.198,131,1.77,173,0.818,174,0.748,175,0.876,176,1.031,183,0.818,190,1.169,192,1.072,195,1.342,205,1.443,221,1.869,232,1.342,233,1.198,239,1.832,274,2.615,295,0.786,300,3.017,323,1.198,344,1.342,357,1.229,359,0.786,370,1.581,378,3.254,387,2.109,388,0.807,389,0.748,392,1.013,428,1.952,451,1.117,453,1.544,454,1.094,462,1.117,467,2.14,469,1.675,491,0.961,518,0.595,519,1.738,532,5.143,541,0.807,542,1.344,616,1.263,621,1.616,622,1.094,633,0.931,642,2.223,729,5.736,776,1.198,796,4.482,800,1.443,857,1.142,968,2.896,979,1.094,993,2.294,997,6.396,1019,1.581,1020,3.678,1021,1.443,1022,1.581,1023,2.159,1024,1.801,1025,1.581,1026,1.389,1027,1.801,1028,1.801,1029,1.801,1030,1.801,1031,1.581,1032,1.801,1033,1.801,1034,1.801,1035,2.862,1036,1.675,1037,1.801,1038,1.198,1039,1.801,1040,1.801,1041,1.801,1042,1.801,1043,1.801,1044,1.505,1045,1.505,1046,1.581,1047,1.443,1048,1.801,1049,1.801,1050,1.801,1051,1.801,1052,1.801,1053,1.801,1054,2.701,1055,4.768,1056,1.801,1057,1.801,1058,4.03,1059,3.537,1060,1.801,1061,1.801,1062,5.356,1063,1.801,1064,1.443,1065,1.801]],["title/ds/queue/intro/#queue",[796,2.739]],["text/ds/queue/intro/#queue",[1019,7.075]],["title/ds/queue/intro/#operations",[274,2.595]],["text/ds/queue/intro/#operations",[195,5.643,462,4.697,532,4.802,968,4.599,997,6.066,1020,5.84,1021,6.066,1022,6.645]],["title/ds/queue/intro/#application",[979,3.519]],["text/ds/queue/intro/#application",[14,1.798,21,2.289,45,3.918,105,3.537,131,2.577,221,4.737,239,4.642,491,3.297,622,3.752,800,4.949,857,3.918,993,5.813,1023,5.47,1024,6.176,1025,5.421,1026,4.765,1027,6.176,1028,6.176,1029,6.176,1030,6.176,1031,5.421,1032,6.176,1033,6.176,1034,6.176,1035,7.252,1036,5.744,1037,6.176,1038,4.108]],["title/ds/queue/intro/#implementation",[387,2.562]],["text/ds/queue/intro/#implementation",[]],["title/ds/queue/intro/#array",[17,1.839]],["text/ds/queue/intro/#array",[7,1.121,10,0.988,11,1.149,13,2.871,14,0.776,16,3.857,17,2.107,21,1.578,31,1.878,51,1.609,54,1.204,56,1.379,57,2.03,58,1.338,59,1.287,68,1.236,79,1.949,85,3.103,97,1.526,128,1.773,131,0.881,174,1.108,175,1.297,176,0.681,183,1.21,190,1.73,192,1.586,205,2.135,232,1.987,233,1.773,274,1.908,295,1.164,344,1.987,359,1.164,378,4.031,387,2.351,392,1.499,451,1.653,453,1.631,454,1.619,518,0.881,519,1.149,532,4.711,541,1.194,542,1.859,616,1.869,729,6.648,776,1.773,796,4.648,968,1.619,997,5.95,1020,3.284,1039,2.665,1040,2.665,1041,2.665,1042,2.665,1043,2.665,1044,2.228,1045,2.228,1046,2.339,1047,2.135,1048,2.665,1049,2.665,1050,2.665,1051,2.665,1052,2.665,1053,2.665,1054,3.737,1055,6.071,1056,2.665,1057,2.665,1058,5.316,1059,4.666,1060,2.665,1061,2.665]],["title/ds/queue/intro/#linked-list",[388,2.015,389,1.869]],["text/ds/queue/intro/#linked-list",[7,2.524,13,1.981,34,1.68,51,0.827,54,1.355,56,2.271,57,1.493,59,1.424,68,1.349,85,3.502,131,1.983,173,1.902,176,1.534,274,3.142,300,4.359,323,2.786,357,2.859,370,3.676,428,3.806,453,1.605,467,3.092,469,2.691,519,2.587,532,5.635,621,3.152,633,2.165,642,4.334,796,2.838,968,3.645,997,6.958,1020,3.231,1062,8.104,1063,4.188,1064,3.356,1065,4.188]],["title/ds/queue/print-binary/",[26,2.289,539,2.732]],["text/ds/queue/print-binary/",[3,2.89,10,3.228,14,1.657,26,2.897,31,1.611,54,1.155,59,1.123,68,1.232,97,3.26,151,3.322,176,1.456,323,3.787,390,3.388,501,2.181,502,4.996,539,3.458,541,2.551,542,3.232,610,2.99,796,2.692,986,4.996,1066,5.692,1067,5.692,1068,5.692,1069,5.692,1070,4.111,1071,5.692,1072,3.766,1073,6.589,1074,5.692,1075,5.692,1076,4.759,1077,5.692,1078,5.692]],["title/ds/queue/print-binary/#print-binary",[26,2.289,539,2.732]],["text/ds/queue/print-binary/#print-binary",[]],["title/ds/queue/print-binary/#simple",[390,3.448]],["text/ds/queue/print-binary/#simple",[10,2.881,31,2.2,323,5.171,610,4.082,1066,7.773]],["title/ds/queue/print-binary/#using-queues",[14,1.309,796,2.127]],["text/ds/queue/print-binary/#using-queues",[10,3.178,54,1.223,59,1.189,68,1.304,97,3.562,151,3.63,176,1.591,501,2.383,502,5.46,541,2.787,542,3.421,986,5.46,1067,6.22,1068,6.22,1069,6.22,1070,4.493,1071,6.22,1072,3.986,1073,6.87,1074,6.22,1075,6.22,1076,5.2,1077,6.22,1078,6.22]],["title/ds/queue/priority-queue/",[796,2.127,1079,3.248]],["text/ds/queue/priority-queue/",[3,3.174,13,2.971,17,1.418,21,2.922,36,1.693,51,1.24,54,0.697,68,0.743,118,2.395,162,2.346,163,3.579,166,2.9,191,3.921,216,4.406,258,2.425,274,2.002,288,2.607,292,3.446,321,3.739,359,2.743,378,3.816,387,1.976,388,2.002,389,1.857,408,3.227,413,3.446,458,3.33,462,2.772,491,2.385,512,3.816,621,2.346,622,2.714,633,3.755,796,3.728,800,3.579,803,3.446,875,3.33,968,2.714,979,3.816,993,3.33,1079,6.221,1080,3.921,1081,4.467,1082,5.842,1083,4.467,1084,4.467,1085,5.842,1086,4.467,1087,3.921,1088,4.467,1089,4.467,1090,4.467,1091,3.33,1092,3.446]],["title/ds/queue/priority-queue/#priority-queue",[796,2.127,1079,3.248]],["text/ds/queue/priority-queue/#priority-queue",[]],["title/ds/queue/priority-queue/#queue-with-properties",[796,2.127,1080,3.947]],["text/ds/queue/priority-queue/#queue-with-properties",[21,3.39,36,2.727,288,4.2,462,4.465,491,3.842,633,3.719,796,3.403,968,4.371,1079,6.186,1081,7.195,1082,6.692]],["title/ds/queue/priority-queue/#operations",[274,2.595]],["text/ds/queue/priority-queue/#operations",[1079,5.665,1083,7.843,1084,7.843,1085,7.294]],["title/ds/queue/priority-queue/#implementation",[387,2.562]],["text/ds/queue/priority-queue/#implementation",[51,1.741,54,1.182,68,1.26,378,5.36,621,3.976,1079,5.468]],["title/ds/queue/priority-queue/#arrays",[17,1.839]],["text/ds/queue/priority-queue/#arrays",[13,3.403,21,2.667,118,2.637,162,3.779,166,4.671,216,5.047,258,3.907,359,3.142,512,4.371,875,5.364,1085,6.692,1086,7.195]],["title/ds/queue/priority-queue/#linked-list",[388,2.015,389,1.869]],["text/ds/queue/priority-queue/#linked-list",[216,5.501,458,5.846,512,4.764,633,4.054]],["title/ds/queue/priority-queue/#heap",[803,4.469]],["text/ds/queue/priority-queue/#heap",[13,3.58,118,2.545,163,6.066,191,6.645,359,3.306,633,3.913,1082,7.04]],["title/ds/queue/priority-queue/#applications",[979,3.519]],["text/ds/queue/priority-queue/#applications",[292,5.417,321,5.024,408,5.072,413,5.417,622,4.265,796,3.321,800,5.626,979,4.265,993,5.234,1079,5.072,1087,6.163,1088,7.022,1089,7.022,1090,7.022,1091,5.234,1092,5.417]],["title/ds/queue/using-stack/",[14,1.07,460,1.527,796,1.738]],["text/ds/queue/using-stack/",[3,2.1,8,1.917,11,2.251,14,1.213,21,2.427,27,1.575,31,1.853,34,3.161,36,2.265,40,1.77,51,1.45,54,1.384,57,1.629,59,0.907,61,1.341,68,1.423,75,2.386,76,1.998,85,1.514,94,2.001,99,1.281,128,3.976,176,1.335,190,3.389,216,3.662,257,1.933,273,2.771,274,3.422,282,3.047,378,2.53,383,3.214,392,3.931,460,3.053,519,2.251,520,1.147,533,1.77,541,2.339,542,2.28,610,2.188,621,2.742,751,3.047,755,1.684,792,1.933,796,2.827,849,4.183,889,2.905,897,1.544,900,2.078,901,2.078,968,4.462,1020,3.214,1064,4.183,1070,3.771,1073,3.338,1076,3.482,1093,3.874,1094,3.891,1095,3.874,1096,3.874,1097,4.855,1098,3.874,1099,2.594,1100,2.594,1101,3.874,1102,2.594,1103,4.582,1104,2.594,1105,2.594,1106,2.594,1107,2.594,1108,2.594,1109,2.276,1110,2.594,1111,2.594,1112,2.594,1113,2.594,1114,2.594,1115,2.001,1116,2.594,1117,2.594,1118,4.166,1119,3.656]],["title/ds/queue/using-stack/#queue-using-stack",[14,1.07,460,1.527,796,1.738]],["text/ds/queue/using-stack/#queue-using-stack",[]],["title/ds/queue/using-stack/#costly-enqueue",[273,2.992,1020,3.469]],["text/ds/queue/using-stack/#costly-enqueue",[11,2.276,31,1.494,34,3.179,36,2.0,51,1.39,54,1.414,57,1.314,59,0.801,68,1.466,75,3.023,76,2.532,128,3.511,176,1.35,190,3.427,274,2.365,282,3.081,383,4.072,392,3.96,460,2.927,519,2.276,541,2.365,542,2.305,621,2.773,751,3.081,796,2.497,849,4.229,968,3.207,1064,4.229,1070,3.813,1073,4.229,1076,4.413,1093,4.909,1094,3.935,1095,4.909,1096,4.909,1097,6.549,1098,4.909,1099,5.279,1100,5.279,1101,4.909,1102,5.279,1103,4.633,1104,5.279]],["title/ds/queue/using-stack/#costly-dequeue",[273,2.992,968,2.732]],["text/ds/queue/using-stack/#costly-dequeue",[11,1.897,21,2.671,31,2.216,34,2.89,36,2.73,40,3.003,51,1.226,54,1.338,57,1.095,59,0.668,61,2.274,68,1.374,75,2.52,76,2.11,85,2.568,94,3.394,128,2.927,176,1.125,190,2.856,216,5.054,257,3.28,274,3.7,282,2.568,383,3.394,392,4.051,460,2.583,519,1.897,541,1.971,542,1.921,621,2.311,751,2.568,796,2.081,849,3.525,889,3.254,968,4.377,1020,3.394,1064,3.525,1070,3.178,1073,3.525,1076,3.678,1093,4.092,1094,3.28,1095,4.092,1096,4.092,1097,4.092,1098,4.092,1101,4.092,1103,3.862,1105,4.4,1106,4.4,1107,4.4,1108,4.4,1109,3.862,1110,4.4,1111,4.4,1112,4.4,1113,4.4,1114,4.4]],["title/ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion",[14,0.559,99,0.948,460,1.351,520,0.849,610,1.009,1115,1.482,1116,1.921]],["text/ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion",[8,3.202,11,2.236,21,2.579,27,3.149,34,3.15,51,1.55,54,1.31,57,1.955,59,1.056,68,1.307,128,4.629,176,1.326,190,3.366,274,3.118,282,3.026,378,4.227,392,2.915,519,2.236,533,3.539,541,2.323,542,2.264,610,2.723,621,2.723,751,3.026,755,3.366,792,3.865,796,2.452,849,4.154,889,2.892,897,3.086,900,4.154,901,4.154,968,4.227,1064,4.154,1070,3.745,1094,3.865,1103,4.551,1117,5.185,1118,6.958,1119,6.107]],["title/ds/stack/intro/",[460,2.407]],["text/ds/stack/intro/",[3,1.694,7,0.971,8,0.596,10,1.404,11,0.995,12,0.659,13,0.613,14,0.672,16,0.613,17,0.733,20,0.703,21,2.847,29,0.703,31,1.23,32,0.909,34,2.238,36,0.874,37,0.756,39,2.13,51,1.537,53,0.566,54,1.245,57,1.781,58,1.851,59,1.148,60,1.538,61,0.669,62,0.965,63,0.692,68,1.296,70,2.13,75,0.742,76,0.621,85,0.756,99,1.14,102,1.346,103,0.965,105,1.322,112,1.174,118,1.253,123,0.703,128,0.862,130,1.137,131,1.843,151,0.756,173,1.417,174,0.959,176,0.59,183,2.373,192,2.587,195,0.965,213,1.038,230,1.402,241,2.658,257,0.965,258,0.703,260,2.189,270,0.787,271,1.374,279,0.787,282,3.596,285,0.862,288,2.211,296,1.137,300,1.193,321,1.858,323,2.076,332,0.669,335,0.862,366,0.884,387,1.38,388,1.034,389,0.959,392,1.298,396,0.756,408,0.936,414,4.936,453,0.496,454,0.787,457,0.965,460,3.385,467,0.846,469,2.615,491,0.692,501,0.496,506,0.965,512,1.402,518,1.031,519,0.995,529,1.137,533,0.884,536,0.965,539,0.787,541,2.638,542,3.303,556,0.862,557,0.692,575,0.999,577,0.822,581,1.535,597,0.742,623,0.862,627,0.936,647,1.575,652,1.137,663,1.667,751,4.263,831,1.083,863,1.137,875,0.965,879,0.936,887,1.137,897,1.374,900,1.038,901,1.038,922,1.498,932,1.038,976,1.667,979,1.402,987,1.137,1022,1.137,1023,1.619,1044,1.929,1045,1.929,1059,2.026,1072,0.659,1087,1.137,1091,0.965,1092,1.78,1094,0.965,1109,1.137,1119,1.137,1120,2.146,1121,1.295,1122,1.137,1123,1.295,1124,1.295,1125,2.146,1126,1.137,1127,1.295,1128,1.295,1129,1.295,1130,1.295,1131,1.295,1132,1.295,1133,1.295,1134,1.205,1135,1.038,1136,1.295,1137,1.295,1138,1.295,1139,1.083,1140,1.295,1141,1.295,1142,1.295,1143,1.295,1144,1.295,1145,1.295,1146,1.295,1147,1.295,1148,1.295,1149,1.137,1150,1.295,1151,1.137,1152,2.146,1153,2.146,1154,1.038,1155,1.295,1156,3.735,1157,1.295,1158,0.999,1159,1.295,1160,1.295,1161,3.524,1162,1.295,1163,1.295,1164,1.137,1165,1.295,1166,1.295,1167,1.295,1168,1.295,1169,1.295,1170,1.295,1171,1.295,1172,1.295,1173,7.157,1174,1.295,1175,1.295,1176,1.295,1177,1.295,1178,1.295,1179,1.295,1180,1.295,1181,1.295,1182,3.121,1183,1.295,1184,1.295,1185,1.295,1186,1.295,1187,1.295,1188,1.205,1189,0.999,1190,1.295,1191,1.295,1192,1.137,1193,1.295,1194,1.137,1195,1.849,1196,0.965,1197,2.026,1198,1.295,1199,1.295,1200,1.295,1201,1.295,1202,1.295,1203,1.295,1204,3.121,1205,1.295]],["title/ds/stack/intro/#stack",[460,2.407]],["text/ds/stack/intro/#stack",[13,3.403,70,4.911,118,2.075,282,4.2,288,4.2,335,4.786,460,2.99,751,4.2,976,5.197,1120,6.692,1121,7.195,1122,6.316,1123,7.195,1124,7.195]],["title/ds/stack/intro/#applications-of-stack",[460,1.869,979,2.732]],["text/ds/stack/intro/#applications-of-stack",[10,2.124,12,2.916,14,1.668,102,2.471,192,5.196,258,3.111,296,5.029,321,4.424,408,4.139,623,3.811,979,3.481,987,5.029,1087,5.029,1091,4.271,1125,5.329,1126,5.029,1127,5.73,1128,5.73,1129,5.73,1130,5.73,1131,5.73,1132,5.73,1133,5.73,1134,5.329,1135,4.591,1136,5.73,1137,5.73,1138,5.73,1139,4.79,1140,5.73,1141,5.73,1142,5.73,1143,5.73,1144,5.73,1145,5.73,1146,5.73,1147,5.73,1148,5.73,1149,5.029,1150,5.73,1151,5.029]],["title/ds/stack/intro/#implementation",[387,2.562]],["text/ds/stack/intro/#implementation",[]],["title/ds/stack/intro/#array",[17,1.839]],["text/ds/stack/intro/#array",[16,1.597,31,1.449,34,3.349,51,1.687,54,1.418,57,2.078,58,2.454,59,1.047,60,2.509,68,1.494,112,1.719,173,1.533,174,1.404,183,2.324,195,2.517,230,2.051,241,4.84,271,2.01,282,1.971,366,2.305,387,1.494,392,1.899,454,2.051,460,3.369,501,1.294,512,2.051,518,1.692,519,1.456,541,3.322,542,3.54,575,2.605,577,2.142,597,1.934,652,2.964,663,3.698,751,2.988,863,2.964,879,2.439,897,2.01,922,2.192,976,2.439,1022,2.964,1044,2.823,1045,2.823,1092,2.605,1120,3.141,1152,3.141,1153,3.141,1154,2.706,1155,3.377,1156,4.95,1157,3.377,1158,2.605,1159,3.377,1160,3.377,1161,4.761,1162,3.377,1163,3.377,1164,2.964,1165,3.377,1166,3.377,1167,3.377,1168,3.377,1169,3.377,1170,3.377,1171,3.377]],["title/ds/stack/intro/#linked-list",[388,2.015,389,1.869]],["text/ds/stack/intro/#linked-list",[21,1.282,51,1.613,54,1.276,57,2.034,58,1.087,59,1.331,68,1.31,123,1.877,131,2.779,173,1.57,174,1.437,176,0.884,183,2.848,230,2.1,271,2.058,282,2.018,300,2.694,387,1.529,388,1.549,389,1.437,414,6.729,453,1.325,460,1.437,467,1.911,469,2.454,512,2.1,518,1.142,519,1.491,536,2.577,541,2.81,542,3.569,556,2.3,557,1.846,581,2.3,627,2.497,751,3.661,831,2.89,922,2.245,932,2.77,1044,2.89,1045,2.89,1059,4.574,1092,2.667,1152,3.216,1153,3.216,1156,2.193,1161,4.847,1172,3.458,1173,9.3,1174,3.458,1175,3.458,1176,3.458,1177,3.458,1178,3.458,1179,3.458,1180,3.458,1181,3.458,1182,6.272,1183,3.458,1184,3.458]],["title/ds/stack/intro/#problems",[192,3.448]],["text/ds/stack/intro/#problems",[7,1.897,8,1.319,10,2.067,11,1.945,14,0.834,17,0.91,20,1.556,21,3.411,29,1.556,31,1.578,32,2.011,36,1.709,37,1.673,39,3.806,51,1.248,53,1.252,54,0.704,58,1.418,59,0.96,60,1.163,61,1.482,62,2.137,63,1.53,68,0.751,70,3.079,75,1.642,76,1.375,85,1.673,99,2.227,102,1.945,103,2.137,105,2.583,112,1.459,118,1.824,128,1.907,130,2.516,151,1.673,173,1.301,176,0.733,183,2.048,213,2.297,257,2.137,260,3.912,270,1.741,279,1.741,282,4.459,285,1.907,288,3.255,321,1.706,323,3.71,332,1.482,392,1.612,396,1.673,457,2.137,460,3.642,469,3.079,491,1.53,506,2.137,529,2.516,533,1.957,539,1.741,541,1.284,542,2.762,581,1.907,647,3.079,751,4.864,875,2.137,887,2.516,897,1.706,900,2.297,901,2.297,1023,3.164,1072,1.459,1094,2.137,1109,2.516,1119,2.516,1125,2.666,1156,2.861,1185,2.866,1186,2.866,1187,2.866,1188,2.666,1189,2.211,1190,2.866,1191,2.866,1192,2.516,1193,2.866,1194,2.516,1195,3.614,1196,2.137,1197,3.959,1198,2.866,1199,2.866,1200,2.866,1201,2.866,1202,2.866,1203,2.866,1204,5.577,1205,2.866]],["title/ds/stack/k-stacks/",[460,1.869,985,3.603]],["text/ds/stack/k-stacks/",[3,2.061,10,2.174,11,1.337,17,1.523,21,1.149,31,2.226,36,1.817,51,1.798,53,2.094,54,1.268,56,1.553,57,1.776,58,1.508,59,1.425,60,1.258,62,2.312,68,1.309,103,2.312,118,1.383,174,1.289,176,1.226,195,2.312,233,2.063,241,3.364,304,2.722,361,2.722,378,3.562,390,1.846,453,2.247,460,2.437,469,2.061,518,1.025,519,1.337,536,2.312,541,2.149,542,2.094,834,2.392,975,4.009,985,5.717,1156,3.72,1158,2.392,1206,3.101,1207,2.175,1208,3.101,1209,3.101,1210,7.867,1211,3.101,1212,7.136,1213,3.101,1214,3.101,1215,3.101,1216,3.101,1217,4.796,1218,4.796,1219,4.796,1220,3.101,1221,3.101,1222,3.101,1223,3.101,1224,5.864,1225,3.101,1226,3.101,1227,4.796,1228,3.101,1229,4.796,1230,4.796,1231,4.796,1232,3.101,1233,3.101,1234,3.101,1235,3.101]],["title/ds/stack/k-stacks/#k-stacks",[460,1.869,985,3.603]],["text/ds/stack/k-stacks/#k-stacks",[]],["title/ds/stack/k-stacks/#simple",[390,3.448]],["text/ds/stack/k-stacks/#simple",[11,3.264,17,2.404,103,5.643,195,5.643,233,5.036,460,3.146,834,5.84,1206,7.57]],["title/ds/stack/k-stacks/#extra-2-integer-arrays",[17,0.987,36,1.177,536,2.316,1207,2.18]],["text/ds/stack/k-stacks/#extra-2-integer-arrays",[10,2.265,21,1.228,31,2.279,36,1.255,51,1.821,53,2.203,54,1.296,56,1.634,57,1.83,58,1.586,59,1.439,60,1.344,62,2.47,68,1.34,118,1.455,174,1.377,176,1.29,241,3.539,304,2.908,361,2.908,378,3.712,453,2.341,460,1.377,469,2.147,518,1.095,519,1.429,541,2.261,542,2.203,975,4.218,985,5.474,1156,3.876,1158,2.556,1208,3.313,1209,3.313,1210,8.054,1211,3.313,1212,7.352,1213,3.313,1214,3.313,1215,3.313,1216,3.313,1217,5.046,1218,5.046,1219,5.046,1220,3.313,1221,3.313,1222,3.313,1223,3.313,1224,6.111,1225,3.313,1226,3.313,1227,5.046,1228,3.313,1229,5.046,1230,5.046,1231,5.046,1232,3.313,1233,3.313,1234,3.313,1235,3.313]],["title/ds/stack/medium-special/",[1236,4.182,1237,3.352]],["text/ds/stack/medium-special/",[3,1.265,21,1.991,31,2.262,51,1.268,54,1.19,56,1.74,57,1.599,58,1.132,59,1.41,68,1.268,73,5.51,131,1.775,151,2.101,176,0.921,196,6.683,233,2.395,262,4.158,264,2.684,378,3.263,398,4.19,453,1.38,460,1.496,467,2.356,469,2.258,485,1.592,501,1.38,547,3.573,633,1.861,1236,3.348,1237,2.684,1238,3.6,1239,5.372,1240,3.6,1241,3.6,1242,8.463,1243,6.426,1244,8.283,1245,3.6,1246,4.715,1247,3.6,1248,3.6,1249,3.6,1250,3.6,1251,3.6]],["title/ds/stack/medium-special/#medium-special",[1236,4.182,1237,3.352]],["text/ds/stack/medium-special/#medium-special",[21,2.01,31,2.273,51,1.278,54,1.196,56,1.756,57,1.611,58,1.146,59,1.414,68,1.275,73,5.533,131,1.792,151,2.128,176,0.932,196,6.714,233,2.425,262,4.184,264,2.717,378,3.294,398,4.203,453,1.397,460,1.515,467,2.374,469,2.275,485,1.612,501,1.397,547,3.607,633,1.884,1238,3.645,1239,5.422,1240,3.645,1241,3.645,1242,8.477,1243,6.474,1244,8.317,1245,3.645,1246,4.759,1247,3.645,1248,3.645,1249,3.645,1250,3.645,1251,3.645]],["title/ds/stack/min-special/",[310,3.07,1237,3.352]],["text/ds/stack/min-special/",[3,1.929,11,2.819,13,2.597,21,2.035,34,3.518,36,1.405,51,1.65,54,1.34,56,1.778,57,1.366,59,1.171,60,1.505,63,1.979,68,1.429,75,2.123,76,1.778,118,2.412,162,2.884,176,1.404,274,2.46,282,3.204,288,2.164,310,3.747,318,2.971,356,5.837,460,2.282,462,3.407,482,2.531,484,2.601,485,1.64,577,3.483,751,3.204,770,2.601,889,2.282,976,5.221,1156,2.352,1197,3.254,1237,2.764,1252,5.106,1253,6.722,1254,6.722,1255,6.722,1256,6.722,1257,3.707,1258,5.106,1259,5.106,1260,5.106,1261,5.106]],["title/ds/stack/min-special/#min-special",[310,3.07,1237,3.352]],["text/ds/stack/min-special/#min-special",[11,2.236,13,2.452,21,2.579,34,3.367,51,1.55,54,1.31,56,1.679,57,1.29,59,1.056,60,2.104,68,1.397,118,2.265,162,2.723,176,1.326,274,2.323,282,3.026,310,3.539,356,5.026,460,2.155,462,4.317,482,3.539,484,3.637,577,3.289,751,3.026,770,3.637,889,2.892,976,5.026,1156,3.289,1252,4.822,1253,6.471,1254,6.471,1255,6.471,1256,6.471,1257,5.185,1258,4.822,1259,4.822,1260,4.822,1261,4.822]],["title/ds/stack/min-special/#optimised-space-for-2-stacks",[11,1.34,36,1.177,318,2.49,460,1.291]],["text/ds/stack/min-special/#optimised-space-for-2-stacks",[11,2.262,13,2.482,34,3.526,51,1.664,54,1.316,56,1.699,57,1.306,59,1.199,63,2.801,68,1.404,75,3.005,76,2.517,118,2.432,162,2.756,176,1.342,274,2.351,282,3.062,288,3.062,356,6.092,485,2.321,577,3.328,751,3.062,976,5.066,1197,4.605,1252,4.88,1253,6.523,1254,6.523,1255,6.523,1256,6.523,1258,4.88,1259,4.88,1260,4.88,1261,4.88]],["title/ds/stack/reverse/",[332,2.994]],["text/ds/stack/reverse/",[3,2.17,34,3.128,54,1.401,56,2.0,58,1.942,59,1.184,68,1.494,71,3.297,332,4.418,619,5.828,1262,6.176,1263,6.176,1264,6.176,1265,7.798,1266,6.845,1267,7.798,1268,6.176,1269,6.176]],["title/ds/stack/reverse/#reverse",[332,2.994]],["text/ds/stack/reverse/#reverse",[34,3.156,54,1.408,56,2.029,58,1.97,59,1.194,68,1.502,71,3.345,332,4.067,619,5.858,1262,6.265,1263,6.265,1264,6.265,1265,7.869,1266,6.907,1267,7.869,1268,6.265,1269,6.265]],["title/ds/stack/sort/",[102,2.498]],["text/ds/stack/sort/",[3,1.811,7,2.915,10,1.91,11,2.222,21,1.91,34,3.609,51,1.545,54,1.307,57,1.283,59,1.052,68,1.393,71,3.7,75,2.952,76,2.472,85,3.008,102,2.222,118,1.486,162,2.707,171,3.198,176,1.772,190,3.346,276,3.723,300,3.582,460,2.88,549,3.976,610,2.707,897,4.125,1270,5.154,1271,5.154,1272,5.154,1273,5.154,1274,5.154,1275,5.154,1276,6.93,1277,6.93,1278,6.93,1279,5.154,1280,5.154,1281,5.154]],["title/ds/stack/sort/#sort",[102,2.498]],["text/ds/stack/sort/#sort",[7,2.939,10,1.933,11,2.249,21,1.933,34,3.621,51,1.555,54,1.313,57,1.298,59,1.06,68,1.4,71,3.73,75,2.987,76,2.502,85,3.044,118,1.504,162,2.739,171,3.236,176,1.786,190,3.386,276,3.767,300,3.611,460,2.903,549,4.024,610,2.739,897,4.158,1270,5.216,1271,5.216,1272,5.216,1273,5.216,1274,5.216,1275,5.216,1276,6.986,1277,6.986,1278,6.986,1279,5.216,1280,5.216,1281,5.216]],["title/ds/stack/stock-span/",[1091,3.352,1139,3.76]],["text/ds/stack/stock-span/",[3,2.545,8,1.713,10,3.0,14,1.084,31,2.528,51,1.788,54,1.307,58,1.732,59,1.375,60,2.66,61,3.388,63,1.988,68,1.394,79,1.365,112,3.686,151,2.173,162,2.893,176,1.676,264,2.775,293,2.541,302,4.158,316,3.268,460,2.289,665,2.983,897,3.278,1091,2.775,1094,2.775,1139,3.113,1266,3.268,1282,3.723,1283,5.753,1284,5.122,1285,5.122,1286,5.122,1287,3.723,1288,3.723,1289,3.723,1290,3.723,1291,3.723,1292,3.723,1293,3.723,1294,3.723,1295,3.723,1296,3.723,1297,3.723,1298,3.723,1299,3.723,1300,3.723,1301,3.723,1302,8.093,1303,3.723,1304,3.723,1305,3.723]],["title/ds/stack/stock-span/#stock-span",[1091,3.352,1139,3.76]],["text/ds/stack/stock-span/#stock-span",[]],["title/ds/stack/stock-span/#naive",[1282,5.792]],["text/ds/stack/stock-span/#naive",[10,2.84,31,2.515,51,1.754,54,1.196,58,1.888,59,1.349,60,2.437,61,3.104,68,1.275,112,3.899,151,3.505,162,3.154,176,1.536,302,5.351,897,3.575,1283,5.272,1284,5.586,1285,5.586,1286,5.586,1287,6.006,1288,6.006,1289,6.006,1290,6.006]],["title/ds/stack/stock-span/#using-stack",[14,1.309,460,1.869]],["text/ds/stack/stock-span/#using-stack",[8,2.745,10,2.827,31,2.38,51,1.659,54,1.191,59,1.277,60,2.421,61,3.083,63,3.185,68,1.269,79,2.187,162,3.133,176,1.525,665,4.779,897,3.55,1094,4.446,1266,5.236,1283,5.236,1284,5.547,1285,5.547,1286,5.547,1291,5.965,1292,5.965,1293,5.965,1294,5.965,1295,5.965,1296,5.965,1297,5.965,1298,5.965,1299,5.965]],["title/ds/stack/stock-span/#without-stack",[293,3.07,460,1.869]],["text/ds/stack/stock-span/#without-stack",[10,2.827,31,2.38,51,1.749,54,1.312,58,1.875,59,1.345,60,2.421,61,3.083,68,1.399,112,3.882,176,1.525,264,4.446,316,5.236,1283,5.236,1300,5.965,1301,5.965,1302,9.369,1303,5.965,1304,5.965,1305,5.965]],["title/ds/stack/using-queue/",[14,1.07,460,1.527,796,1.738]],["text/ds/stack/using-queue/",[3,2.656,14,1.401,31,1.362,34,2.653,54,1.376,57,1.646,59,1.338,68,1.467,176,2.081,187,4.294,273,4.4,282,2.809,460,2.0,485,2.129,751,4.412,796,2.276,1070,5.879,1158,5.103,1306,7.569,1307,4.813,1308,4.813,1309,6.152,1310,7.569,1311,6.152,1312,7.569,1313,7.569,1314,6.152,1315,4.813,1316,4.813]],["title/ds/stack/using-queue/#stack-using-queue",[14,1.07,460,1.527,796,1.738]],["text/ds/stack/using-queue/#stack-using-queue",[]],["title/ds/stack/using-queue/#costly-push",[273,2.992,282,2.625]],["text/ds/stack/using-queue/#costly-push",[34,2.531,54,1.347,57,1.57,59,1.31,68,1.436,176,2.021,187,4.097,751,3.683,1070,5.709,1158,4.868,1306,7.351,1307,6.31,1308,6.31,1309,5.869,1310,7.351,1311,5.869,1312,7.351,1313,7.351,1314,5.869]],["title/ds/stack/using-queue/#costly-pop",[273,2.992,751,2.625]],["text/ds/stack/using-queue/#costly-pop",[31,1.76,34,2.495,54,1.338,57,1.548,59,1.302,68,1.427,176,2.003,187,4.038,485,2.751,751,3.63,1070,5.658,1158,4.799,1306,7.285,1309,5.785,1310,7.285,1311,5.785,1312,7.285,1313,7.285,1314,5.785,1315,6.22,1316,6.22]],["title/java/IO/",[1035,5.387]],["text/java/IO/",[]],["title/java/annotations/",[1317,3.674]],["text/java/annotations/",[2,1.841,3,2.145,7,1.642,14,1.136,17,0.942,20,0.937,21,0.64,31,0.488,40,1.178,42,4.184,48,0.878,51,0.586,54,1.184,59,1.151,68,1.262,91,1.882,98,0.988,105,0.988,108,1.443,123,0.937,131,0.57,150,1.211,151,1.732,156,1.12,174,2.17,176,1.185,199,2.084,204,5.398,223,2.236,226,2.474,228,3.385,229,1.12,239,1.027,274,0.773,288,1.007,341,1.515,387,1.727,416,1.178,448,1.287,453,1.137,477,1.178,501,1.776,518,2.31,565,3.091,600,1.7,616,2.082,623,1.148,624,4.251,647,1.178,683,1.247,693,1.287,723,3.012,733,1.841,748,1.332,752,1.287,758,2.324,769,0.971,834,1.332,855,1.247,881,2.143,885,1.515,889,0.717,907,1.383,922,2.534,931,1.148,936,1.383,993,2.91,1023,2.738,1038,1.148,1047,1.383,1072,3.429,1192,4.068,1317,5.392,1318,2.378,1319,1.909,1320,1.605,1321,2.481,1322,3.63,1323,1.909,1324,1.605,1325,1.515,1326,1.287,1327,1.605,1328,1.605,1329,1.909,1330,1.909,1331,1.605,1332,1.909,1333,1.605,1334,1.12,1335,1.909,1336,2.212,1337,1.909,1338,3.904,1339,1.909,1340,1.909,1341,3.904,1342,1.909,1343,3.63,1344,1.909,1345,1.909,1346,1.909,1347,4.319,1348,3.904,1349,4.635,1350,1.909,1351,2.968,1352,1.605,1353,1.909,1354,1.909,1355,2.289,1356,1.909,1357,2.968,1358,2.76,1359,3.904,1360,1.909,1361,1.909,1362,1.909,1363,1.909,1364,1.909,1365,1.605,1366,1.909,1367,2.378,1368,1.909,1369,1.909,1370,1.443,1371,2.76,1372,1.928,1373,2.968,1374,2.968,1375,3.617,1376,2.968,1377,2.968,1378,2.968,1379,2.968,1380,1.726,1381,1.726,1382,1.726,1383,1.726,1384,1.515,1385,1.726,1386,1.726,1387,1.726,1388,1.726,1389,1.726,1390,2.968,1391,1.726,1392,1.726,1393,1.726,1394,1.726,1395,1.726,1396,1.726,1397,3.904,1398,1.383,1399,2.968,1400,1.726,1401,1.515,1402,1.383,1403,2.289,1404,1.726,1405,1.515,1406,1.443,1407,1.726,1408,1.178,1409,1.515,1410,1.726,1411,1.443,1412,1.515,1413,1.515,1414,1.726,1415,1.605,1416,1.726,1417,1.726,1418,1.726,1419,1.726,1420,1.726,1421,1.726,1422,1.726,1423,1.726,1424,1.726,1425,1.515,1426,1.211,1427,1.048,1428,1.726,1429,1.726,1430,1.726,1431,1.726,1432,1.726,1433,1.726,1434,1.605,1435,1.726,1436,1.726,1437,1.515,1438,1.726,1439,1.383,1440,1.726,1441,1.726,1442,1.515]],["title/java/annotations/#annotation-type",[565,2.157,1317,2.853]],["text/java/annotations/#annotation-type",[2,4.12,14,1.409,17,2.108,31,1.37,51,0.955,54,1.036,59,1.341,68,1.105,150,3.395,151,2.824,174,2.011,226,3.545,448,3.607,501,2.905,518,2.194,623,3.219,683,3.495,748,3.733,758,2.88,1072,4.351,1317,3.07,1338,6.64,1341,6.64,1348,4.839,1349,6.64,1351,4.839,1370,4.046,1371,4.501,1372,2.389,1373,6.64,1374,6.64,1375,4.809,1376,6.64,1377,6.64,1378,6.64,1379,6.64,1380,4.839,1381,4.839,1382,4.839,1383,4.839,1384,4.248,1385,4.839,1386,4.839,1387,4.839,1388,4.839]],["title/java/annotations/#java-inbuilt",[199,2.401,1389,4.497]],["text/java/annotations/#java-inbuilt",[274,3.306,501,2.827,855,5.329,1047,5.912,1336,5.5,1390,8.692,1391,7.378,1392,7.378,1393,7.378,1394,7.378]],["title/java/annotations/#meta-annotations",[885,3.947,1317,2.853]],["text/java/annotations/#meta-annotations",[7,2.319,14,1.605,40,3.762,42,4.417,98,3.157,199,2.943,228,4.253,239,3.281,477,3.762,518,1.821,616,3.867,723,6.246,752,4.109,881,3.982,922,3.579,1192,7.549,1317,5.667,1371,5.126,1395,5.512,1396,5.512,1397,8.097,1398,4.417,1399,7.247,1400,5.512,1401,4.838,1402,4.417,1403,5.591,1404,5.512,1405,4.838,1406,4.608,1407,5.512,1408,3.762,1409,4.838,1410,5.512,1411,4.608,1412,4.838]],["title/java/annotations/#type-annotations-and-pluggable-type-systems",[565,2.058,931,1.79,1317,1.707,1413,2.362]],["text/java/annotations/#type-annotations-and-pluggable-type-systems",[91,4.641,387,3.236,453,2.803,1072,3.723,1355,5.644,1357,7.316,1358,6.804,1359,8.649,1367,5.862,1414,7.316,1415,6.804]],["title/java/annotations/#repeating-annotations",[42,3.603,1317,2.853]],["text/java/annotations/#repeating-annotations",[20,2.657,42,5.361,48,2.49,51,0.966,54,1.279,68,1.364,105,2.803,123,2.657,174,3.406,176,1.251,199,2.613,204,5.361,226,2.613,228,3.514,288,2.856,518,1.617,565,3.209,600,2.803,616,3.433,624,5.684,693,3.648,733,4.152,758,2.913,993,5.684,1072,3.405,1317,5.199,1372,3.304,1375,4.837,1416,4.894,1417,4.894,1418,4.894,1419,4.894,1420,4.894,1421,4.894,1422,4.894,1423,4.894,1424,4.894,1425,4.295,1426,3.433,1427,2.973,1428,4.894,1429,4.894,1430,4.894,1431,4.894,1432,4.894,1433,4.894]],["title/java/annotations/#retrieving-annotations",[1317,2.853,1434,4.182]],["text/java/annotations/#retrieving-annotations",[1435,7.986,1436,7.986]],["title/java/annotations/#design-considerations",[1437,3.947,1438,4.497]],["text/java/annotations/#design-considerations",[565,3.663,907,6.119,1317,4.844,1439,6.119,1440,7.637,1441,7.637,1442,6.703]],["title/java/basics/",[595,3.594]],["text/java/basics/",[3,2.345,6,1.564,12,0.948,14,0.542,17,1.006,29,1.011,31,1.169,32,1.306,36,1.2,39,2.162,43,1.087,48,2.481,51,0.625,54,1.214,56,1.026,57,0.788,58,1.299,59,1.203,60,1.677,61,0.963,63,0.994,68,1.266,74,1.306,76,1.519,79,2.324,81,1.635,90,1.635,91,3.092,99,0.92,105,1.067,107,1.492,112,1.612,118,0.537,131,0.615,156,1.209,160,1.181,170,1.306,171,1.965,172,1.271,174,0.774,175,1.541,178,2.361,180,2.222,183,2.698,185,3.521,187,1.209,205,1.492,211,1.306,223,1.067,225,1.635,227,1.635,234,1.965,274,3.803,285,3.953,293,1.271,295,0.813,302,3.092,323,1.239,344,1.388,347,1.635,351,1.306,355,2.898,390,1.108,393,1.181,407,1.635,453,0.714,457,1.388,468,1.209,485,0.824,489,1.239,505,2.103,518,1.611,519,0.803,534,1.271,542,0.813,565,1.982,577,1.181,578,1.635,595,3.39,618,1.306,619,1.209,620,0.834,631,2.288,642,1.345,649,3.188,683,1.345,684,1.437,686,1.492,739,1.492,746,1.156,747,1.388,752,1.388,760,1.635,769,1.781,771,1.492,779,1.557,840,1.492,857,1.181,877,1.209,958,1.345,1047,1.492,1054,1.635,1072,1.612,1156,1.181,1242,1.635,1246,1.635,1334,3.547,1352,1.732,1375,1.181,1443,1.862,1444,1.862,1445,1.862,1446,2.945,1447,1.862,1448,1.862,1449,1.557,1450,1.557,1451,1.862,1452,1.862,1453,1.862,1454,1.635,1455,1.862,1456,1.635,1457,1.635,1458,1.862,1459,1.862,1460,1.492,1461,1.635,1462,1.862,1463,1.862,1464,1.862,1465,1.862,1466,3.167,1467,1.862,1468,1.862,1469,1.862,1470,1.862,1471,1.862,1472,1.862,1473,1.862,1474,1.862,1475,1.862,1476,1.862,1477,1.862,1478,1.862,1479,1.862,1480,1.388,1481,1.862,1482,1.862,1483,1.862,1484,4.874,1485,1.635,1486,1.635,1487,1.862,1488,1.862,1489,1.862,1490,2.78,1491,1.862,1492,1.862,1493,3.167,1494,1.862,1495,1.306,1496,4.132,1497,1.862,1498,1.862,1499,3.946,1500,1.635,1501,5.463,1502,4.874,1503,1.862,1504,3.167,1505,1.862,1506,1.862,1507,1.635,1508,1.862,1509,2.06,1510,1.862,1511,1.732,1512,3.167,1513,1.862,1514,4.132,1515,1.862,1516,3.167,1517,3.167,1518,3.167,1519,1.862,1520,1.862,1521,4.132,1522,1.862,1523,1.862,1524,1.862,1525,1.862,1526,1.862,1527,3.167,1528,2.945,1529,1.862,1530,1.862,1531,1.345,1532,1.862]],["title/java/basics/#variables",[595,3.594]],["text/java/basics/#variables",[43,3.579,51,1.21,59,0.931,131,2.026,156,3.981,175,3.778,211,4.302,234,3.805,489,4.079,518,2.565,534,4.186,565,2.942,595,5.556,618,4.302,619,3.981,877,3.981,958,4.43,1334,5.53,1443,6.133,1444,6.133,1445,6.133,1446,7.22,1447,6.133,1448,6.133,1449,5.127,1450,5.127,1451,6.133]],["title/java/basics/#naming",[769,3.257]],["text/java/basics/#naming",[29,3.752,59,1.049,76,3.315,178,5.151,683,4.991,739,5.537,1047,5.537,1452,6.91,1453,6.91,1454,6.065,1455,6.91,1456,6.065,1457,6.065,1458,6.91,1459,6.91,1460,5.537,1461,6.065,1462,6.91,1463,6.91]],["title/java/basics/#arrays",[17,1.839]],["text/java/basics/#arrays",[36,3.036,51,1.273,54,1.007,58,2.028,59,1.216,178,4.808,344,4.808,453,2.472,519,2.781,649,6.182,684,4.976,686,5.168,769,3.627,1072,3.283,1242,5.662,1352,5.999,1464,6.45,1465,6.45,1466,8.013,1467,6.45,1468,6.45,1469,6.45,1470,6.45,1471,6.45]],["title/java/basics/#javautilarrays",[1472,5.792]],["text/java/basics/#javautilarrays",[79,2.705,118,2.128,183,3.35,285,4.908,347,6.476,1473,7.378,1474,7.378,1475,7.378,1476,7.378,1477,7.378,1478,7.378]],["title/java/basics/#operators",[274,2.595]],["text/java/basics/#operators",[12,1.928,14,1.103,31,1.579,32,2.657,39,3.807,48,3.717,56,1.227,57,0.943,59,0.847,60,1.537,61,1.958,63,2.022,74,2.657,81,3.325,91,2.403,99,1.87,105,2.169,107,3.035,171,3.461,172,2.586,180,3.913,205,3.035,225,3.325,234,2.35,274,4.31,285,5.179,293,2.586,295,1.654,351,2.657,355,3.913,390,2.255,393,2.403,468,2.459,485,1.675,542,1.654,565,2.676,620,1.697,631,4.029,747,2.824,752,2.824,771,3.035,779,3.167,840,3.035,857,2.403,1054,3.325,1072,1.928,1246,3.325,1479,3.788,1480,2.824,1481,3.788,1482,3.788,1483,3.788,1484,7.304,1485,3.325,1486,3.325,1487,3.788,1488,3.788,1489,3.788,1490,4.896,1491,3.788,1492,3.788,1493,5.578,1494,3.788,1495,2.657,1496,6.621,1497,3.788,1498,3.788,1499,2.736,1500,3.325,1501,7.786,1502,7.304,1503,3.788,1504,5.578,1505,3.788,1506,3.788,1507,3.325]],["title/java/basics/#expressions-result9-blocks-statements-",[91,1.506,187,1.541,227,2.084,246,2.374,1499,1.715,1508,2.374]],["text/java/basics/#expressions-result9-blocks-statements-",[]],["title/java/basics/#control-flow",[1510,4.497,1511,4.182]],["text/java/basics/#control-flow",[6,2.845,17,1.257,31,1.121,54,1.449,56,1.283,57,0.986,58,1.812,59,1.328,60,2.338,68,1.545,76,1.899,79,3.033,90,3.476,91,3.655,112,2.933,160,2.512,170,2.778,183,3.599,185,5.388,223,2.268,302,4.732,323,2.634,355,2.778,407,3.476,457,2.952,577,2.512,578,3.476,642,2.86,649,3.055,760,3.476,1156,2.512,1375,2.512,1499,4.907,1512,5.762,1513,3.96,1514,6.793,1515,3.96,1516,5.762,1517,5.762,1518,5.762,1519,3.96,1520,3.96,1521,6.793,1522,3.96,1523,3.96,1524,3.96,1525,3.96,1526,3.96,1527,5.762,1528,5.359,1529,3.96,1530,3.96]],["title/java/basics/#access-modifiers",[505,2.289,746,2.79]],["text/java/basics/#access-modifiers",[174,3.119,505,4.468,518,2.901,1334,5.7,1531,5.421,1532,7.505]],["title/java/classes/",[518,1.914]],["text/java/classes/",[1533,8.917]],["title/java/collections/",[4,3.519]],["text/java/collections/",[3,2.222,4,4.807,8,1.115,14,1.672,16,0.647,20,1.316,21,2.343,27,0.831,31,0.387,35,1.02,36,0.519,43,0.799,45,0.868,48,1.66,50,2.007,51,0.478,54,0.897,56,1.277,57,0.341,58,0.762,59,1.084,68,0.956,79,1.446,91,0.868,97,2.855,98,0.784,103,1.02,110,2.939,112,0.696,118,1.438,126,1.096,131,0.801,151,0.799,154,0.888,158,2.117,159,1.201,174,1.639,175,1.587,176,0.834,183,1.1,192,1.442,193,1.056,203,1.316,210,1.201,211,0.96,223,1.388,234,0.849,251,0.888,258,0.743,274,2.234,279,0.831,284,1.504,286,1.02,288,2.631,321,1.442,330,2.726,335,0.91,337,2.026,353,2.127,359,0.598,374,3.077,379,1.056,387,1.442,389,1.355,391,0.91,393,0.868,401,1.201,410,2.613,414,1.02,416,0.934,428,0.868,438,2.169,453,2.066,462,1.504,467,0.502,469,0.481,501,2.422,518,0.452,520,0.605,528,1.096,534,0.934,539,0.831,549,1.056,550,1.096,565,0.656,607,1.869,610,1.273,616,0.96,619,0.888,620,1.767,622,0.831,630,1.02,633,0.707,710,0.756,716,1.02,733,2.023,746,1.504,755,0.888,770,0.96,792,1.02,796,1.865,799,1.942,804,0.91,833,1.02,844,2.516,857,2.069,862,1.201,864,1.096,876,1.273,881,1.75,889,1.639,897,1.442,957,2.127,968,0.831,970,1.056,983,1.201,984,1.144,1019,1.201,1023,2.766,1031,1.201,1038,0.91,1072,2.007,1079,0.988,1080,1.201,1092,1.056,1207,1.7,1318,1.096,1322,5.88,1326,1.02,1372,2.462,1415,1.273,1427,1.472,1434,1.273,1437,1.201,1454,1.201,1461,2.127,1531,0.988,1534,2.423,1535,1.514,1536,2.862,1537,1.514,1538,1.273,1539,3.957,1540,1.514,1541,1.201,1542,1.514,1543,1.02,1544,2.127,1545,1.273,1546,2.681,1547,2.127,1548,3.261,1549,1.201,1550,1.368,1551,3.033,1552,2.127,1553,3.159,1554,1.144,1555,1.368,1556,1.368,1557,2.254,1558,3.769,1559,2.254,1560,1.201,1561,1.368,1562,1.201,1563,2.423,1564,2.423,1565,2.423,1566,1.144,1567,1.368,1568,2.423,1569,1.201,1570,1.368,1571,1.368,1572,1.368,1573,1.368,1574,1.368,1575,1.368,1576,1.368,1577,1.368,1578,1.368,1579,1.368,1580,1.368,1581,1.368,1582,1.368,1583,1.368,1584,1.942,1585,1.368,1586,1.368,1587,1.368,1588,1.368,1589,1.201,1590,1.368,1591,1.368,1592,1.368,1593,1.368,1594,2.026,1595,1.201,1596,1.368,1597,1.368,1598,1.368,1599,1.368,1600,1.368,1601,1.368,1602,1.368,1603,1.368,1604,1.368,1605,1.096,1606,1.056,1607,2.423,1608,1.368,1609,1.201,1610,1.368,1611,1.368,1612,1.368,1613,1.368,1614,1.368,1615,1.368,1616,1.368,1617,1.368,1618,1.368,1619,1.368,1620,1.368,1621,1.368,1622,1.368,1623,1.368,1624,1.368,1625,1.368,1626,1.368,1627,1.368,1628,1.368,1629,1.273,1630,1.368,1631,1.368,1632,1.368,1633,1.368,1634,1.368,1635,1.368,1636,1.368,1637,1.368,1638,1.368,1639,1.368,1640,1.368,1641,1.368,1642,1.368,1643,2.862,1644,3.296,1645,2.254,1646,2.254,1647,2.254,1648,1.368,1649,1.368,1650,2.423,1651,1.368,1652,1.368,1653,2.254,1654,1.144,1655,1.368,1656,1.368,1657,1.368,1658,2.254,1659,2.254,1660,2.254,1661,1.368,1662,1.368,1663,1.368,1664,1.368,1665,1.368,1666,1.368,1667,1.368,1668,1.368,1669,1.368,1670,1.368,1671,1.368,1672,1.368,1673,1.368,1674,1.368,1675,1.368,1676,1.368,1677,1.368,1678,1.368,1679,1.368,1680,1.368,1681,1.368]],["title/java/collections/#why",[]],["text/java/collections/#why",[4,3.551,14,1.702,97,5.337,159,5.13,223,4.312,374,5.685,389,2.429,438,3.888,453,2.885,796,2.764,881,4.222,968,3.551,1326,4.357,1437,5.13,1548,8.329,1549,5.13,1550,5.845,1551,7.002,1552,6.608,1553,7.048,1554,4.886,1555,5.845,1556,5.845,1557,5.436,1558,4.886,1559,5.436]],["title/java/collections/#interfaces",[1372,2.86]],["text/java/collections/#interfaces",[4,5.41,14,1.759,20,3.28,21,3.228,48,2.152,118,1.22,158,3.922,174,1.758,286,3.152,288,4.748,359,1.847,389,2.511,410,3.388,414,3.152,428,2.683,438,4.019,462,2.624,528,3.388,610,2.221,620,2.707,633,2.186,710,2.336,716,3.152,733,3.749,796,3.334,799,3.388,804,2.813,844,3.263,857,3.833,881,3.055,957,5.303,984,3.535,1019,3.712,1023,4.238,1031,3.712,1079,3.055,1080,3.712,1322,8.282,1372,2.983,1454,3.712,1534,4.229,1536,3.712,1544,3.712,1557,3.933,1558,6.429,1559,3.933,1560,3.712,1561,4.229,1562,3.712,1563,6.042,1564,6.042,1565,6.042,1566,3.535,1567,4.229,1568,6.042]],["title/java/collections/#traversing-collections",[4,2.732,258,2.442]],["text/java/collections/#traversing-collections",[4,2.805,8,2.125,14,1.344,16,1.397,27,1.794,31,0.836,35,2.202,36,1.119,45,1.874,50,2.35,51,0.911,54,1.248,56,1.496,57,0.735,59,1.276,68,1.331,79,1.693,110,4.792,112,1.503,118,1.332,126,2.367,151,1.724,158,1.918,174,2.363,175,2.767,176,1.454,183,1.341,193,2.279,203,1.604,234,1.833,274,2.548,279,1.794,379,2.279,401,2.593,453,2.463,462,1.833,467,1.083,469,1.038,501,1.769,518,0.976,539,1.794,549,2.279,550,2.367,619,1.918,620,1.324,622,1.794,746,1.833,755,1.918,897,2.749,970,2.279,1038,1.965,1072,3.272,1372,1.459,1427,2.805,1461,4.053,1531,2.134,1536,2.593,1539,4.053,1547,2.593,1569,2.593,1570,2.954,1571,2.954,1572,2.954,1573,2.954,1574,2.954,1575,2.954,1576,2.954,1577,2.954,1578,2.954,1579,2.954,1580,2.954,1581,2.954,1582,2.954,1583,2.954,1584,2.367,1585,2.954,1586,2.954,1587,2.954,1588,2.954,1589,2.593,1590,2.954,1591,2.954,1592,2.954,1593,2.954,1594,3.861,1595,2.593,1596,2.954,1597,2.954,1598,2.954,1599,2.954,1600,2.954,1601,2.954,1602,2.954,1603,2.954,1604,2.954,1605,2.367,1606,2.279,1607,4.618,1608,2.954,1609,2.593,1610,2.954,1611,2.954,1612,2.954,1613,2.954,1614,2.954,1615,2.954,1616,2.954,1617,2.954,1618,2.954,1619,2.954,1620,2.954,1621,2.954,1622,2.954,1623,2.954,1624,2.954,1625,2.954,1626,2.954,1627,2.954,1628,2.954,1629,2.747,1630,2.954,1631,2.954,1632,2.954,1633,2.954,1634,2.954,1635,2.954,1636,2.954,1637,2.954,1638,2.954,1639,2.954,1640,2.954,1641,2.954,1642,2.954]],["title/java/collections/#aggregate-operations",[274,2.015,1539,3.947]],["text/java/collections/#aggregate-operations",[43,4.235,56,2.35,59,1.101,118,2.092,330,7.195,1643,6.368,1644,6.065,1645,6.748,1646,6.748,1647,6.748,1648,7.255,1649,7.255]],["title/java/collections/#aggregate-operations-vs-iterators",[50,1.581,154,2.017,274,1.392,1539,2.728]],["text/java/collections/#aggregate-operations-vs-iterators",[14,1.85,21,2.356,50,3.235,91,4.032,98,3.64,103,4.738,192,4.726,210,5.579,335,4.228,337,5.314,353,6.969,393,4.032,416,4.338,534,4.338,630,4.738,833,4.738,864,5.093,983,5.579,1023,4.459,1092,4.904,1644,5.314,1650,7.94,1651,6.356,1652,6.356,1653,5.911,1654,5.314,1655,6.356]],["title/java/collections/#reduction",[1656,5.792]],["text/java/collections/#reduction",[58,2.208,59,1.066,79,2.575,118,2.025,284,5.237,374,4.793,501,3.234,607,5.417,1207,4.926,1643,6.163,1644,5.87,1657,7.022,1658,6.53,1659,6.53,1660,6.53]],["title/java/collections/#streamcollect-method",[889,1.869,1661,4.497]],["text/java/collections/#streamcollect-method",[4,4.227,21,1.922,48,3.541,56,1.679,58,1.63,59,1.056,79,1.901,118,1.495,183,2.354,211,3.637,274,2.323,330,4.334,374,3.539,391,3.449,453,1.987,501,3.454,607,4.0,746,3.217,770,3.637,862,4.551,889,2.892,1023,3.637,1207,3.637,1584,4.154,1643,4.551,1644,4.334,1645,4.822,1646,4.822,1647,4.822,1653,4.822,1658,4.822,1659,4.822,1660,4.822,1662,5.185,1663,5.185,1664,5.185,1665,5.185,1666,5.185,1667,5.185,1668,5.185,1669,5.185,1670,5.185,1671,5.185,1672,5.185,1673,5.185,1674,5.185,1675,5.185,1676,5.185,1677,5.185,1678,5.185,1679,5.185,1680,5.185]],["title/java/collections/#algorithms",[321,3.448]],["text/java/collections/#algorithms",[]],["title/java/collections/#custom-implementation",[387,1.989,1681,4.497]],["text/java/collections/#custom-implementation",[]],["title/java/collections/#interoperability",[1551,5.387]],["text/java/collections/#interoperability",[]],["title/java/concurrency/",[1682,6.408]],["text/java/concurrency/",[]],["title/java/debugging/",[1683,5.387]],["text/java/debugging/",[]],["title/java/deployment/",[1325,5.084]],["text/java/deployment/",[]],["title/java/exceptions/",[1365,5.387]],["text/java/exceptions/",[375,6.53,460,2.918,610,3.688,620,3.146,1365,8.932,1367,5.626,1511,6.53,1629,6.53,1684,7.768,1685,7.768,1686,7.768,1687,7.768,1688,7.768]],["title/java/generics/",[600,3.317]],["text/java/generics/",[3,2.234,7,3.34,23,3.944,228,4.17,321,3.783,341,5.579,387,2.811,518,2.1,534,4.338,565,3.809,597,3.64,600,4.959,647,4.338,889,2.642,922,4.126,1331,5.911,1355,4.904,1372,3.138,1689,8.784,1690,7.032,1691,6.638,1692,6.356,1693,5.579]],["title/java/generics/#why",[]],["text/java/generics/#why",[7,3.078,228,3.843,321,4.355,387,3.236,565,3.509,600,4.19,647,4.994,1331,6.804,1355,5.644,1691,6.116,1692,7.316,1693,6.422]],["title/java/helloworld/",[1694,6.408]],["text/java/helloworld/",[12,4.481,54,1.268,68,1.352,174,2.742,175,3.21,176,1.687,349,4.627,482,4.503,501,3.113,518,2.18,792,4.917,1072,3.357,1406,5.515,1605,5.285,1606,5.089,1695,7.298,1696,7.298,1697,5.285,1698,6.135,1699,7.298]],["title/java/inheritance/",[1408,3.954]],["text/java/inheritance/",[2,0.717,3,2.048,4,0.702,7,0.486,12,0.588,14,1.306,32,0.811,48,1.061,51,0.411,54,0.763,57,1.001,59,0.529,68,0.813,76,0.555,88,1.075,98,1.194,99,2.587,118,0.333,123,0.628,131,0.382,154,0.751,156,2.611,164,0.926,174,3.207,175,3.253,176,1.554,192,1.694,199,0.617,221,1.266,226,1.113,228,1.495,229,0.751,232,0.862,234,0.717,272,1.848,285,1.387,289,3.057,293,0.789,295,1.243,335,0.769,359,0.505,383,0.892,386,0.835,387,2.317,389,0.48,391,0.769,393,0.733,397,0.862,400,0.789,411,0.926,453,1.541,491,2.609,501,0.799,505,1.772,506,2.122,518,2.85,520,0.511,525,1.554,533,1.423,534,0.789,552,1.015,565,2.151,597,2.799,600,0.662,610,2.112,615,0.862,620,3.203,623,1.893,624,3.906,630,0.862,647,0.789,650,0.926,733,1.293,734,2.28,746,1.293,748,0.892,752,0.862,755,1.353,758,2.394,769,1.6,770,3.428,804,0.769,857,2.551,877,1.353,889,3.431,922,0.751,970,1.608,1026,1.608,1072,1.061,1115,0.892,1126,1.015,1154,0.926,1189,0.892,1196,4.695,1317,0.733,1318,0.926,1333,1.938,1334,3.402,1336,2.998,1355,2.196,1367,1.67,1372,3.0,1375,1.322,1401,1.015,1408,4.299,1411,2.911,1412,1.015,1426,1.462,1439,1.67,1460,1.67,1480,0.862,1485,1.015,1486,1.015,1495,0.811,1499,1.506,1500,1.015,1531,2.905,1543,4.138,1545,1.075,1547,1.015,1552,1.829,1605,0.926,1606,0.892,1654,2.379,1691,0.966,1700,5.516,1701,1.279,1702,1.279,1703,5.706,1704,4.022,1705,1.279,1706,1.279,1707,2.498,1708,1.279,1709,5.435,1710,3.937,1711,1.075,1712,2.033,1713,3.223,1714,1.279,1715,3.148,1716,1.279,1717,3.239,1718,3.74,1719,1.156,1720,1.938,1721,1.075,1722,1.279,1723,1.279,1724,1.156,1725,1.742,1726,1.829,1727,1.156,1728,1.156,1729,1.156,1730,2.687,1731,1.015,1732,1.015,1733,1.156,1734,1.015,1735,1.156,1736,1.156,1737,0.966,1738,1.156,1739,1.156,1740,1.156,1741,1.156,1742,1.156,1743,1.156,1744,1.938,1745,1.156,1746,1.156,1747,1.156,1748,1.156,1749,1.156,1750,1.156,1751,1.156,1752,1.829,1753,1.156,1754,1.156,1755,1.156,1756,2.084,1757,1.156,1758,1.156,1759,1.156,1760,1.156,1761,2.084,1762,2.084,1763,1.156,1764,1.156,1765,1.015,1766,1.156,1767,1.156,1768,1.075,1769,1.156,1770,1.015,1771,1.156,1772,1.075,1773,1.156,1774,1.938,1775,1.156,1776,1.156,1777,2.084,1778,0.966,1779,1.742,1780,1.015,1781,1.156,1782,1.156,1783,1.156,1784,1.156,1785,1.938,1786,1.156,1787,4.485,1788,2.084,1789,3.482,1790,2.084,1791,4.485,1792,2.084,1793,1.156,1794,1.156,1795,1.156]],["title/java/inheritance/#casting-objects",[620,2.015,1355,3.469]],["text/java/inheritance/#casting-objects",[59,1.287,453,2.712,501,3.25,620,3.172,1355,6.543,1500,6.213,1724,7.079,1725,5.918,1726,7.444,1727,7.079,1728,7.079,1729,7.079]],["title/java/inheritance/#multiple-inheritance-of-state-implementation-and-type",[387,1.19,565,1.291,857,1.707,1408,1.837,1730,2.076]],["text/java/inheritance/#multiple-inheritance-of-state-implementation-and-type",[14,1.785,76,2.942,99,3.028,175,2.984,192,4.621,228,3.221,387,3.434,393,3.89,518,2.026,597,3.512,733,3.805,755,3.981,758,3.65,769,3.448,857,5.404,889,2.549,1115,4.731,1334,3.981,1372,3.833,1375,3.89,1408,6.112,1730,5.989,1731,5.383,1732,5.383,1733,6.133,1734,5.383]],["title/java/inheritance/#polymorphism",[1547,5.084]],["text/java/inheritance/#polymorphism",[491,3.719,518,2.775,520,3.081,597,3.989,623,4.634,755,4.522,1026,5.374,1318,5.581,1654,5.823,1700,5.374,1704,6.966,1735,6.966,1736,6.966,1737,5.823,1738,6.966,1739,6.966,1740,6.966]],["title/java/inheritance/#virtual-method-invocation",[889,1.527,1401,3.226,1741,3.675]],["text/java/inheritance/#virtual-method-invocation",[565,3.728,597,4.452,610,4.082,889,3.23,1742,7.773]],["title/java/inheritance/#super-keyword",[1411,3.76,1460,3.603]],["text/java/inheritance/#super-keyword",[2,3.859,7,2.617,118,1.794,192,3.702,199,3.321,228,4.114,229,4.038,359,2.716,389,2.585,506,4.637,518,2.588,610,3.267,620,3.51,1411,6.549,1426,4.363,1703,7.526,1709,7.917,1718,5.785,1743,6.22,1744,7.285,1745,6.22]],["title/java/inheritance/#constructor-chaining",[1707,3.947,1709,3.76]],["text/java/inheritance/#constructor-chaining",[383,5.84,397,5.643,533,5.167,610,3.976,620,3.392,1707,6.645,1709,7.377]],["title/java/inheritance/#object-as-superclass",[620,2.015,1703,3.947]],["text/java/inheritance/#object-as-superclass",[4,2.243,12,1.879,48,2.785,51,1.08,57,1.795,98,3.134,99,1.823,164,2.958,174,3.641,176,2.063,221,2.243,226,1.971,232,2.752,234,2.291,285,3.641,295,1.612,386,2.667,391,2.456,518,2.666,525,4.08,552,3.24,600,2.114,610,2.875,620,3.843,624,4.862,647,2.52,650,2.958,734,2.958,804,2.456,889,2.998,922,2.397,1072,2.785,1126,3.24,1196,6.531,1317,2.342,1334,2.397,1336,4.08,1367,4.385,1372,1.823,1412,3.24,1486,3.24,1700,2.848,1709,3.086,1710,4.804,1712,2.155,1725,3.086,1746,3.692,1747,3.692,1748,3.692,1749,3.692,1750,3.692,1751,3.692,1752,4.804,1753,3.692,1754,3.692,1755,3.692,1756,5.473,1757,3.692,1758,3.692,1759,3.692,1760,3.692,1761,5.473,1762,5.473,1763,3.692,1764,3.692,1765,3.24,1766,3.692,1767,3.692,1768,3.433,1769,3.692,1770,3.24,1771,3.692,1772,3.433,1773,3.692]],["title/java/inheritance/#abstract-methods-and-classes",[518,1.214,889,1.527,1543,2.74]],["text/java/inheritance/#abstract-methods-and-classes",[518,2.591,1543,5.846,1700,6.05,1774,7.294]],["title/java/inheritance/#abstract-classes-vs-interface",[154,2.017,518,1.027,1372,1.534,1543,2.316]],["text/java/inheritance/#abstract-classes-vs-interface",[14,1.903,32,2.601,99,1.831,123,2.013,131,1.225,174,3.004,175,3.182,221,2.252,226,1.979,289,6.344,293,2.531,295,1.619,335,2.466,387,3.413,411,2.971,505,2.794,506,2.764,518,2.948,565,2.633,597,3.745,615,2.764,620,1.661,623,3.652,624,5.388,630,2.764,733,2.3,734,2.971,746,3.407,752,2.764,758,3.268,857,2.352,877,3.564,889,3.358,1026,2.86,1189,2.86,1196,4.874,1333,5.106,1334,4.693,1372,4.129,1375,2.352,1408,2.531,1426,2.601,1439,4.399,1480,2.764,1495,2.601,1499,3.966,1531,3.966,1543,6.024,1545,3.448,1552,4.819,1654,4.59,1691,3.099,1710,4.819,1730,2.86,1774,3.448,1775,3.707,1776,3.707,1777,5.49,1778,3.099,1779,4.59,1780,3.254,1781,3.707,1782,3.707,1783,3.707]],["title/java/inheritance/#overriding-and-hiding-methods",[889,1.527,1336,2.74,1713,2.945]],["text/java/inheritance/#overriding-and-hiding-methods",[54,1.325,57,0.968,59,0.863,68,1.413,99,2.808,156,4.802,174,3.529,175,4.321,176,2.013,295,1.698,453,1.49,491,3.036,518,1.879,534,2.655,565,2.728,597,2.227,734,3.116,758,2.315,769,2.187,889,3.801,970,4.388,1154,3.116,1336,2.899,1485,3.414,1605,3.116,1606,3.001,1700,5.706,1703,5.901,1713,3.116,1717,5.289,1718,6.253,1784,3.889,1785,5.289,1786,3.889,1787,8.221,1788,5.687,1789,7.397,1790,5.687,1791,8.221,1792,5.687,1793,3.889,1794,3.889,1795,3.889]],["title/java/interfaces/",[1372,2.86]],["text/java/interfaces/",[3,1.82,31,1.68,34,1.655,39,1.749,43,4.703,44,2.384,48,2.1,51,1.549,54,1.085,57,1.477,58,1.297,59,0.626,60,1.04,68,1.157,98,1.468,118,1.19,156,2.679,160,3.285,171,1.59,172,1.749,174,3.16,175,3.383,176,0.655,234,2.56,285,1.705,332,1.325,357,1.749,387,1.825,400,1.749,491,1.368,501,3.267,518,1.961,597,2.966,610,1.346,620,1.849,624,3.076,631,1.851,682,2.143,719,4.15,733,1.59,744,3.995,758,3.533,889,3.713,897,2.456,1026,1.977,1072,1.304,1196,1.911,1336,1.911,1372,3.755,1375,4.979,1408,1.749,1495,2.894,1543,3.076,1553,2.054,1594,2.143,1717,4.817,1719,2.563,1796,2.384,1797,4.565,1798,2.835,1799,2.835,1800,2.835,1801,2.835,1802,2.835,1803,4.565,1804,4.565,1805,2.835,1806,2.835,1807,2.835,1808,2.835,1809,4.565,1810,4.565,1811,2.835,1812,2.835,1813,2.835,1814,2.835,1815,2.835,1816,2.835,1817,2.835,1818,2.835,1819,2.835,1820,2.835,1821,2.835,1822,2.563,1823,2.835,1824,4.565,1825,4.565,1826,2.835,1827,2.835,1828,4.565,1829,4.565,1830,2.563,1831,2.563,1832,2.563,1833,2.563,1834,2.563,1835,2.384,1836,2.563,1837,2.563,1838,2.563,1839,2.563,1840,2.563,1841,2.563,1842,2.563,1843,2.563]],["title/java/interfaces/#evolving-interfaces",[1372,2.221,1830,4.497]],["text/java/interfaces/#evolving-interfaces",[34,2.666,43,3.88,54,1.037,68,1.106,160,5.178,175,3.234,234,4.124,357,4.537,501,2.547,597,3.807,758,3.956,889,3.393,897,3.956,1072,3.383,1372,3.282,1375,5.178,1831,6.647,1832,6.647,1833,6.647,1834,6.647,1835,6.182]],["title/java/interfaces/#extending-interfaces-that-contain-default-methods",[733,1.67,758,1.602,889,1.119,1372,1.329,1375,1.707]],["text/java/interfaces/#extending-interfaces-that-contain-default-methods",[160,4.418,758,4.146,889,3.891,1336,5.192,1372,3.439,1375,5.939,1408,4.754,1543,5.192,1836,6.966,1837,6.966,1838,6.966,1839,6.966]],["title/java/interfaces/#static-methods",[175,2.188,889,1.869]],["text/java/interfaces/#static-methods",[156,4.595,175,4.127,332,3.659,518,2.802,597,4.054,620,3.172,889,3.774,1026,5.461,1840,7.079,1841,7.079,1842,7.079,1843,7.079]],["title/java/intro/",[199,3.093]],["text/java/intro/",[3,2.259,4,1.794,7,1.243,8,3.21,14,0.86,23,1.833,29,3.087,37,1.724,40,2.016,73,1.965,95,2.367,98,2.645,118,1.854,125,3.7,170,3.988,198,3.861,199,4.388,203,2.507,223,3.256,226,4.126,228,1.551,251,4.174,257,2.202,260,2.072,272,1.918,390,1.758,400,3.152,454,1.794,455,2.367,491,1.577,505,2.35,518,1.526,600,2.645,620,3.126,622,3.454,631,2.134,671,2.367,710,1.632,794,2.593,795,2.469,833,2.202,835,4.053,844,2.279,879,2.134,889,1.228,918,2.469,922,1.918,979,2.805,1115,3.563,1135,3.7,1151,2.593,1156,1.874,1195,2.367,1325,2.593,1326,4.792,1327,2.747,1328,2.747,1372,1.459,1398,2.367,1402,2.367,1403,3.563,1405,4.053,1406,2.469,1426,2.072,1442,2.593,1449,2.469,1480,2.202,1541,4.053,1553,4.556,1554,3.861,1560,2.593,1752,2.593,1844,2.954,1845,3.442,1846,2.747,1847,2.954,1848,2.954,1849,2.954,1850,2.954,1851,2.593,1852,5.288,1853,2.954,1854,2.954,1855,4.295,1856,2.954,1857,3.861,1858,2.954,1859,5.926,1860,4.618,1861,4.053,1862,2.954,1863,2.747,1864,2.747,1865,4.618,1866,2.954,1867,2.954,1868,2.954,1869,2.954,1870,2.954,1871,2.954,1872,2.954,1873,2.954,1874,2.954,1875,2.954,1876,2.954,1877,2.747,1878,2.954,1879,4.618,1880,2.954,1881,2.954,1882,2.367,1883,2.954,1884,2.954,1885,2.954]],["title/java/intro/#what-is-java",[199,3.093]],["text/java/intro/#what-is-java",[1844,8.06]],["title/java/intro/#programming-language",[223,2.576,1845,3.352]],["text/java/intro/#programming-language",[14,1.615,23,3.442,98,3.177,118,2.486,125,4.445,198,6.084,199,2.962,226,4.603,228,2.914,251,5.597,260,3.891,390,3.302,455,4.445,518,1.833,600,3.177,620,2.486,879,4.007,918,4.638,922,3.601,979,3.37,1398,4.445,1402,4.445,1403,4.28,1449,4.638,1480,4.135,1541,4.869,1554,4.638,1846,5.159,1847,5.547,1848,5.547,1849,5.547,1850,5.547,1851,4.869,1852,5.159,1853,5.547,1854,5.547,1855,5.159,1856,5.547,1857,4.638,1858,5.547]],["title/java/intro/#platform",[1859,4.641]],["text/java/intro/#platform",[29,2.672,170,4.712,199,4.739,223,2.818,400,3.359,505,3.418,600,2.818,620,3.01,622,4.08,671,3.943,710,2.718,844,3.797,979,2.989,1115,5.182,1135,3.943,1156,3.122,1325,4.319,1326,5.007,1327,4.577,1328,4.577,1372,2.43,1403,3.797,1405,5.896,1406,4.114,1553,5.382,1560,4.319,1857,4.114,1859,6.89,1860,6.717,1861,4.319,1862,4.921,1863,4.577,1864,4.577,1865,6.717,1866,4.921,1867,4.921,1868,4.921,1869,4.921,1870,4.921,1871,4.921,1872,4.921,1873,4.921,1874,4.921,1875,4.921,1876,4.921,1877,4.577,1878,4.921,1879,6.717,1880,4.921,1881,4.921]],["title/java/intro/#why",[]],["text/java/intro/#why",[4,3.187,7,2.207,8,4.045,29,3.808,37,3.062,40,3.581,73,3.49,95,4.204,98,3.005,125,4.204,170,3.681,199,2.801,203,3.808,223,3.005,226,4.218,257,3.911,272,3.406,400,3.581,454,3.187,491,2.801,518,1.734,620,3.143,622,3.187,631,3.79,794,4.605,795,4.386,833,3.911,835,6.156,889,2.181,1135,4.204,1151,4.605,1195,4.204,1326,5.229,1426,3.681,1442,4.605,1541,4.605,1553,4.204,1554,4.386,1752,4.605,1845,3.911,1852,6.523,1855,4.88,1861,4.605,1882,4.204,1883,5.247,1884,5.247,1885,5.247]],["title/java/java9%26beyond/",[1886,6.408]],["text/java/java9%26beyond/",[154,3.954,161,4.879,199,5.029,216,4.272,453,2.333,557,3.251,685,5.956,686,4.879,687,6.803,697,5.664,738,5.664,855,4.399,970,4.698,1134,7.188,1425,5.345,1887,6.737,1888,6.737,1889,6.737,1890,6.737,1891,6.737,1892,7.188,1893,6.737,1894,6.737,1895,6.737,1896,6.737]],["title/java/jdbc/",[1877,5.387]],["text/java/jdbc/",[]],["title/java/jsp/",[1897,6.408]],["text/java/jsp/",[]],["title/java/networking/",[1864,5.387]],["text/java/networking/",[]],["title/java/numbers/",[295,2.529]],["text/java/numbers/",[3,1.122,4,1.939,14,2.222,26,1.624,43,1.863,45,2.025,48,3.039,59,0.744,79,3.008,110,2.379,127,2.239,131,1.62,174,1.326,175,1.553,183,3.725,198,2.668,199,1.704,228,1.676,242,4.076,276,2.305,295,2.607,310,2.179,348,2.557,379,2.462,399,2.668,421,2.668,453,1.223,483,2.668,504,2.072,506,2.379,518,2.214,565,2.864,595,3.043,597,1.828,618,3.44,620,3.002,642,2.305,663,2.305,719,2.557,844,2.462,889,2.038,897,1.9,928,2.668,931,2.123,936,3.929,958,4.84,979,1.939,1072,3.41,1207,3.44,1425,2.801,1427,1.939,1446,2.968,1449,2.668,1450,2.668,1594,2.668,1606,2.462,1744,2.968,1779,2.668,1859,2.557,1898,3.531,1899,5.425,1900,3.531,1901,3.531,1902,3.531,1903,5.553,1904,2.968,1905,2.968,1906,2.968,1907,3.531,1908,3.531,1909,2.968,1910,3.531,1911,3.531,1912,3.531,1913,3.531,1914,2.968,1915,3.531,1916,3.531,1917,3.531,1918,3.531,1919,3.531,1920,3.531,1921,3.531,1922,3.531,1923,3.531,1924,3.531,1925,3.531,1926,3.531,1927,3.531,1928,3.531,1929,5.425,1930,5.425,1931,3.531,1932,3.531,1933,3.531,1934,3.531,1935,3.531,1936,3.531,1937,3.531,1938,3.531,1939,3.531,1940,3.531,1941,2.801,1942,2.801,1943,3.192,1944,3.192,1945,3.192,1946,3.192,1947,3.192,1948,2.801,1949,3.192,1950,3.192,1951,3.192,1952,3.192,1953,3.192]],["title/java/numbers/#advanced-math",[483,3.76,1941,3.947]],["text/java/numbers/#advanced-math",[127,4.847,175,3.363,310,4.717,504,4.486,663,4.991,1427,4.198,1594,5.777,1942,6.065,1943,6.91,1944,6.91,1945,6.91,1946,6.91,1947,6.91,1948,6.065,1949,6.91,1950,6.91,1951,6.91,1952,6.91,1953,6.91]],["title/java/oops/",[620,2.595]],["text/java/oops/",[3,2.753,8,2.028,12,3.167,14,0.81,31,0.788,45,1.766,51,1.08,54,1.223,58,1.386,59,1.147,68,1.304,79,2.645,123,1.512,131,0.92,156,2.862,176,2.063,183,2.001,185,2.011,226,1.486,251,1.807,355,3.838,387,1.231,391,1.852,416,1.9,438,2.932,448,2.075,453,1.067,501,2.097,516,1.852,518,2.496,520,1.231,537,2.444,553,2.327,567,1.852,595,1.727,596,2.231,597,1.594,620,3.232,671,2.231,748,2.148,758,1.657,833,2.075,859,2.444,889,2.586,931,1.852,1046,2.444,1122,2.444,1318,2.231,1321,2.327,1326,2.075,1334,3.552,1372,2.702,1402,2.231,1408,1.9,1413,2.444,1490,4.803,1495,1.953,1538,2.589,1549,6.631,1558,2.327,1562,2.444,1683,2.589,1697,3.532,1700,2.148,1712,2.573,1713,3.532,1726,2.444,1730,3.401,1737,3.685,1770,2.444,1796,2.589,1954,2.784,1955,2.784,1956,2.784,1957,2.784,1958,2.784,1959,2.784,1960,2.784,1961,2.784,1962,2.327,1963,2.784,1964,2.784,1965,2.784,1966,5.952,1967,2.784,1968,2.784,1969,2.784,1970,2.784,1971,2.784,1972,2.784,1973,2.784,1974,2.784,1975,2.784,1976,4.408,1977,7.212,1978,4.408,1979,4.408,1980,4.408,1981,2.784,1982,5.472,1983,6.222,1984,2.784,1985,2.784]],["title/java/oops/#objects",[620,2.595]],["text/java/oops/#objects",[12,4.752,520,3.056,595,4.288,620,3.745,859,6.065,889,2.872,1122,6.065,1334,4.486,1538,6.427,1558,5.777,1697,5.537,1730,5.331,1954,6.91,1955,6.91,1956,6.91]],["title/java/oops/#why",[]],["text/java/oops/#why",[8,3.792,14,1.965,185,4.875,226,3.604,553,5.643,567,4.49,620,3.024,748,5.207,833,5.032,931,4.49,1321,5.643,1402,5.408,1413,5.925,1683,6.277,1713,5.408,1957,6.75,1958,6.75,1959,6.75,1960,6.75,1961,6.75,1962,5.643]],["title/java/oops/#data-encapsulation",[131,1.486,1963,4.497]],["text/java/oops/#data-encapsulation",[123,4.075,251,4.872,416,5.123,889,3.119,1713,6.013,1730,5.79,1770,6.588,1964,7.505,1965,7.505]],["title/java/oops/#class",[518,1.914]],["text/java/oops/#class",[156,5.615,391,4.867,518,2.858,620,3.876,1562,6.422,1966,7.592,1967,7.316,1968,7.316]],["title/java/oops/#inheritance",[1408,3.954]],["text/java/oops/#inheritance",[54,1.045,68,1.115,448,4.993,453,2.566,501,3.143,518,2.213,537,5.879,597,3.836,758,3.987,889,3.409,1046,5.879,1326,4.993,1334,5.325,1700,5.167,1726,5.879,1737,5.599,1966,5.879,1969,6.698,1970,6.698,1971,6.698]],["title/java/oops/#interface",[1372,2.86]],["text/java/oops/#interface",[31,1.209,45,2.709,51,1.399,54,1.363,58,1.913,59,1.326,68,1.453,79,3.112,176,2.323,183,2.762,355,4.972,387,1.889,501,1.636,518,2.01,596,3.422,1318,3.422,1372,2.109,1490,6.221,1549,7.666,1697,3.422,1796,3.971,1966,5.34,1972,4.27,1973,4.27,1974,4.27,1975,4.27,1976,6.084,1977,8.487,1978,6.084,1979,6.084,1980,6.084,1981,4.27,1982,7.088,1983,7.725,1984,4.27,1985,4.27]],["title/java/oops/#package",[1712,3.381]],["text/java/oops/#package",[438,5.125,516,5.125,518,2.546,1372,3.804,1495,5.404,1737,6.441]],["title/java/oops/#library",[671,4.641]],["text/java/oops/#library",[438,5.313,1712,4.661]],["title/java/packages/",[1712,3.381]],["text/java/packages/",[3,2.712,6,1.03,11,0.899,14,1.834,23,1.294,29,1.132,31,0.59,36,1.32,76,1.0,99,2.588,105,1.194,118,1.294,123,1.132,160,1.323,171,1.294,174,2.779,175,2.55,199,3.112,217,1.671,221,1.267,226,1.113,228,2.752,239,2.67,272,1.354,295,1.521,332,1.078,338,1.83,343,1.554,351,2.443,384,1.671,390,1.241,391,1.387,396,2.033,399,1.743,409,1.83,411,1.671,413,4.86,428,2.21,438,1.387,453,0.799,454,1.267,463,1.671,477,3.062,491,2.395,505,2.667,512,1.267,516,1.387,518,2.819,520,0.922,565,3.93,595,1.294,596,1.671,610,1.095,623,1.387,717,1.671,719,1.671,733,1.294,739,1.671,754,1.83,769,4.607,770,3.147,877,2.912,889,0.867,931,2.317,935,3.75,936,2.791,1021,1.671,1038,4.844,1149,1.83,1156,2.21,1189,1.609,1196,1.554,1317,1.323,1320,1.939,1334,1.354,1372,1.72,1375,1.323,1398,1.671,1403,3.461,1426,2.443,1427,4.977,1460,1.671,1495,3.676,1499,1.506,1507,1.83,1531,1.506,1536,1.83,1544,1.83,1569,1.83,1710,1.83,1712,5.244,1720,1.939,1721,1.939,1731,1.83,1732,1.83,1765,1.83,1768,1.939,1845,2.597,1851,1.83,1859,1.671,1942,1.83,1962,2.912,1986,2.085,1987,2.085,1988,2.085,1989,2.085,1990,2.085,1991,3.24,1992,3.938,1993,2.085,1994,2.085,1995,2.085,1996,2.085,1997,2.085,1998,2.085,1999,2.085,2000,2.085,2001,2.085,2002,2.085,2003,2.085,2004,3.24,2005,3.24,2006,1.939,2007,2.085,2008,2.085,2009,2.085,2010,2.085,2011,2.085,2012,2.085,2013,3.483,2014,2.085,2015,2.085,2016,1.83,2017,2.085,2018,2.085,2019,1.83,2020,2.085,2021,2.085,2022,4.172,2023,2.085,2024,2.085,2025,2.085,2026,2.085,2027,2.085,2028,2.085]],["title/java/packages/#why",[]],["text/java/packages/#why",[23,3.179,99,3.855,174,3.733,239,3.05,343,3.819,384,4.105,391,3.408,411,4.105,453,1.963,454,3.112,477,3.497,491,2.735,505,3.513,516,3.408,520,2.266,565,4.585,596,4.105,754,4.497,769,4.39,877,5.068,936,4.105,1038,4.592,1149,4.497,1156,4.379,1189,3.953,1398,4.105,1495,4.842,1531,3.701,1712,5.09,1731,4.497,1986,5.124,1987,5.124,1988,5.124,1989,5.124,1990,5.124]],["title/java/packages/#naming",[769,3.257]],["text/java/packages/#naming",[29,3.451,76,3.049,118,2.29,199,4.239,295,2.776,332,3.286,351,4.459,399,5.314,717,5.093,739,5.093,769,4.465,1021,5.093,1320,5.911,1460,5.093,1712,3.71,1845,4.738,1991,5.911,1992,5.579,1993,6.356,1994,6.356,1995,6.356,1996,6.356,1997,6.356,1998,6.356,1999,6.356,2000,6.356,2001,6.356]],["title/java/packages/#usage",[2002,5.792]],["text/java/packages/#usage",[]],["title/java/packages/#by-its-qualified-name",[769,2.529,1992,3.947]],["text/java/packages/#by-its-qualified-name",[14,2.481,171,4.428,226,3.81,272,4.633,390,4.248,491,3.81,769,4.013,770,5.978,1427,4.335,1712,4.974,2003,7.137,2004,6.637]],["title/java/packages/#importing-a-package-member",[770,2.578,1427,2.233,1712,2.145]],["text/java/packages/#importing-a-package-member",[1427,4.851,2005,7.427]],["title/java/packages/#importing-an-entire-package",[1427,2.233,1712,2.145,1962,3.073]],["text/java/packages/#importing-an-entire-package",[14,2.493,338,6.316,518,2.378,565,3.451,623,4.786,1427,5.202,1712,5.337,1962,6.015,2006,6.692,2007,7.195]],["title/java/packages/#import-the-public-nested-classes-of-an-enclosing-class",[174,0.987,518,1.281,1427,1.442,1720,2.208,1721,2.208]],["text/java/packages/#import-the-public-nested-classes-of-an-enclosing-class",[217,5.962,1427,5.812,1499,5.375,2005,6.92,2008,7.441,2009,7.441,2010,7.441]],["title/java/packages/#static-import",[175,2.188,1427,2.732]],["text/java/packages/#static-import",[31,1.853,36,2.481,99,3.233,105,3.75,175,4.27,199,3.495,228,3.439,396,3.821,505,3.332,512,3.977,518,2.163,719,5.246,889,2.721,1038,4.355,1196,4.88,1334,4.25,1426,4.593,1427,4.913,1712,4.72,1765,5.747,1851,5.747,1942,5.747]],["title/java/packages/#apparent-hierarchies-of-packages",[1544,3.226,1712,2.145,2011,3.675]],["text/java/packages/#apparent-hierarchies-of-packages",[14,2.078,160,4.527,239,4.248,295,3.116,1495,5.006,1507,6.264,1712,5.318,2012,7.137,2013,8.522,2014,7.137,2015,7.137,2016,6.264]],["title/java/packages/#name-ambiguities",[769,2.529,1732,3.947]],["text/java/packages/#name-ambiguities",[14,2.095,36,2.727,118,2.075,239,4.283,428,4.564,491,3.842,565,3.451,769,4.816,1712,4.2,1991,6.692,1992,6.316,2004,6.692,2017,7.195]],["title/java/packages/#managing-source-and-class-files",[477,2.121,518,1.027,935,2.598,1038,2.067]],["text/java/packages/#managing-source-and-class-files",[6,2.472,123,2.718,199,3.628,221,3.041,228,4.052,351,3.512,396,2.922,409,4.394,413,6.883,428,3.175,438,3.33,463,4.011,477,3.417,518,3.145,595,3.106,610,2.629,733,3.106,769,3.821,931,4.52,935,4.185,1038,5.755,1375,3.175,1403,5.952,1426,3.512,1569,4.394,1712,3.966,1845,3.732,1859,4.011,2018,5.006,2019,4.394,2020,5.006,2021,5.006,2022,7.175,2023,5.006,2024,5.006,2025,5.006,2026,5.006,2027,5.006,2028,5.006]],["title/java/re/",[553,4.842]],["text/java/re/",[]],["title/java/security/",[1857,4.842]],["text/java/security/",[]],["title/java/strings/",[1072,2.948]],["text/java/strings/",[2,1.376,3,1.288,14,1.585,17,1.164,28,1.711,31,1.326,40,1.514,45,1.407,51,1.554,54,1.28,57,1.166,58,1.712,59,1.388,60,1.488,63,1.184,68,1.364,79,2.211,118,1.057,174,3.098,175,1.784,176,0.938,185,2.648,199,1.184,223,1.27,234,1.376,274,0.994,293,1.514,302,3.454,332,1.146,342,1.946,349,2.572,413,1.711,453,1.796,477,1.514,489,1.475,501,2.086,505,1.129,514,1.854,518,1.993,539,1.347,549,1.711,575,1.711,577,1.407,595,1.376,619,4.463,620,1.643,755,1.44,779,1.854,806,3.41,857,1.407,889,0.922,907,1.777,958,2.648,1038,1.475,1072,4.241,1073,1.777,1091,1.653,1358,3.41,1480,1.653,1499,1.602,1528,4.359,1531,2.648,1605,2.938,1606,2.829,1780,1.946,1785,2.062,1845,1.653,1882,1.777,1914,2.062,2006,2.062,2029,2.453,2030,4.687,2031,2.453,2032,2.453,2033,2.453,2034,2.453,2035,4.687,2036,4.056,2037,4.056,2038,4.056,2039,2.453,2040,6.671,2041,4.056,2042,6.024,2043,4.056,2044,2.453,2045,4.056,2046,2.453,2047,2.453,2048,2.453,2049,2.453,2050,2.453,2051,4.056,2052,2.453,2053,4.056,2054,4.056,2055,2.453,2056,6.024,2057,2.453,2058,2.453,2059,2.453,2060,2.453,2061,2.453,2062,2.453,2063,2.453,2064,2.453,2065,5.185,2066,2.453,2067,2.453,2068,4.056,2069,2.453,2070,2.453,2071,2.453,2072,2.453,2073,2.453,2074,2.453,2075,2.453,2076,2.453,2077,4.687,2078,2.218,2079,3.666,2080,2.218,2081,2.218,2082,2.218,2083,2.218,2084,2.218,2085,3.41,2086,3.41]],["title/java/strings/#why",[]],["text/java/strings/#why",[2,4.032,14,2.546,489,4.323,505,3.307,595,4.032,755,4.219,857,4.122,889,2.701,907,5.207,1072,3.307,1480,4.844,1882,5.207,1914,6.043,2030,6.498,2077,8.747,2078,6.498,2079,8.05,2080,6.498,2081,6.498,2082,6.498,2083,6.498,2084,6.498]],["title/java/strings/#autoboxing-and-unboxing",[2085,4.182,2086,4.182]],["text/java/strings/#autoboxing-and-unboxing",[118,2.545,620,3.954,958,6.374,2085,7.04,2086,7.04]],["title/php/atttributes/",[2087,6.408]],["text/php/atttributes/",[54,1.425,58,1.212,59,1.244,68,1.519,94,4.359,118,1.112,174,3.406,387,1.705,453,2.822,518,1.867,520,3.468,590,3.384,889,2.78,1072,2.876,1367,4.527,1372,1.903,1584,3.089,1772,3.585,2022,5.255,2035,7.842,2088,2.445,2089,8.675,2090,6.689,2091,6.251,2092,7.4,2093,6.251,2094,9.367,2095,4.265,2096,6.251,2097,4.265,2098,4.265,2099,4.265,2100,4.265,2101,4.265,2102,4.265,2103,4.265,2104,4.265,2105,4.265,2106,4.265,2107,6.251,2108,4.265,2109,3.585,2110,4.265,2111,4.265,2112,6.251,2113,4.265,2114,7.4,2115,4.265,2116,4.265,2117,4.265]],["title/php/basics/",[1863,5.387]],["text/php/basics/",[2,0.582,3,2.075,10,0.347,14,1.007,16,0.814,17,1.36,20,0.509,26,0.876,29,0.509,31,1.612,32,0.658,33,0.527,35,0.699,36,1.122,37,1.394,43,1.394,48,1.216,50,1.507,51,0.185,54,0.979,56,0.304,57,0.233,58,0.751,59,1.174,68,1.044,79,1.697,91,1.092,97,1.368,98,0.537,102,0.404,118,0.689,123,0.509,135,0.823,150,0.658,161,1.38,174,0.993,175,1.896,183,1.085,203,1.608,204,0.751,221,1.451,226,1.275,228,0.492,229,1.551,232,0.699,234,1.482,241,0.658,242,0.64,264,0.699,269,0.823,272,0.609,274,1.07,278,0.609,279,1.046,284,1.068,285,0.624,286,2.208,288,0.547,291,0.823,293,0.64,295,2.811,325,0.872,343,1.284,349,0.658,355,0.658,366,0.64,372,0.751,387,0.415,390,1.025,393,1.092,397,0.699,400,1.175,416,1.63,432,2.6,434,0.677,448,0.699,451,2.658,453,0.915,454,0.569,455,1.38,456,1.997,467,0.344,468,0.609,469,0.329,482,1.63,484,1.676,501,3.383,503,0.872,518,1.529,520,2.418,525,0.699,528,0.751,539,1.799,557,1.581,564,0.823,565,3.01,575,3.305,577,2.195,607,0.723,610,1.556,618,4.402,620,1.327,642,0.677,647,0.64,683,0.677,684,0.723,685,0.658,687,1.914,693,0.699,696,0.823,710,0.518,728,0.823,733,0.582,758,0.558,769,0.527,771,0.751,792,0.699,804,1.589,834,0.723,855,0.677,864,0.751,877,0.609,889,1.438,928,0.784,931,0.624,932,0.751,958,0.677,1021,0.751,1025,0.823,1036,0.872,1038,1.146,1072,2.18,1154,0.751,1164,0.823,1189,0.723,1194,0.823,1195,0.751,1207,2.734,1237,0.699,1321,0.784,1324,0.872,1343,1.602,1370,1.44,1384,0.823,1409,0.823,1439,0.751,1450,1.44,1456,0.823,1457,0.823,1566,0.784,1584,0.751,1589,0.823,1595,2.097,1609,0.823,1693,0.823,1697,1.38,1698,2.755,1711,0.872,1725,0.784,1734,0.823,1778,1.44,1779,0.784,1822,0.937,1882,0.751,1892,0.872,1903,0.872,1904,3.218,1905,0.872,1906,0.872,1909,3.624,1941,0.823,1948,0.823,2016,1.512,2019,0.823,2088,5.038,2109,0.872,2118,1.037,2119,1.037,2120,1.037,2121,4.731,2122,1.037,2123,1.037,2124,1.037,2125,1.512,2126,0.937,2127,3.958,2128,0.937,2129,0.937,2130,0.937,2131,0.937,2132,0.937,2133,1.722,2134,0.937,2135,0.937,2136,0.937,2137,1.722,2138,1.722,2139,1.722,2140,1.602,2141,0.937,2142,0.937,2143,2.389,2144,1.602,2145,0.937,2146,0.937,2147,0.937,2148,0.937,2149,0.937,2150,0.937,2151,1.602,2152,2.097,2153,0.937,2154,0.937,2155,0.937,2156,0.937,2157,0.937,2158,0.937,2159,0.937,2160,2.389,2161,0.937,2162,6.072,2163,0.937,2164,1.722,2165,0.937,2166,0.937,2167,0.937,2168,0.937,2169,0.937,2170,0.937,2171,4.936,2172,0.937,2173,2.389,2174,3.897,2175,0.937,2176,0.937,2177,1.722,2178,1.722,2179,1.722,2180,0.937,2181,0.937,2182,0.937,2183,0.937,2184,0.937,2185,2.389,2186,0.937,2187,0.937,2188,0.937,2189,0.937,2190,0.937,2191,0.937,2192,0.937,2193,0.937,2194,0.937,2195,0.937,2196,0.937,2197,0.937,2198,0.937,2199,0.937,2200,0.937,2201,1.602,2202,0.937,2203,0.937,2204,0.937,2205,0.937,2206,0.937,2207,0.937,2208,0.937,2209,0.937,2210,0.937,2211,0.937,2212,0.937,2213,0.937,2214,0.937,2215,0.937,2216,0.937,2217,0.937,2218,0.937,2219,0.937,2220,0.937,2221,0.937,2222,0.937,2223,0.937,2224,0.937,2225,0.937,2226,0.937,2227,0.937,2228,0.937,2229,0.937,2230,0.937,2231,1.722,2232,0.937,2233,1.722,2234,3.897,2235,3.897,2236,0.937,2237,2.389,2238,2.962,2239,2.962,2240,2.962,2241,0.937,2242,0.937,2243,0.937,2244,0.937,2245,1.722,2246,0.937,2247,3.624,2248,0.937,2249,0.937,2250,1.722,2251,0.937,2252,0.937,2253,0.937,2254,2.389,2255,0.937,2256,2.389,2257,2.389,2258,0.937,2259,0.937,2260,0.937,2261,0.937,2262,0.937,2263,0.937,2264,0.937,2265,0.937,2266,0.937,2267,0.937,2268,0.937,2269,0.937,2270,0.937,2271,0.937]],["title/php/basics/#html-escaping",[2125,3.947,2126,4.497]],["text/php/basics/#html-escaping",[56,2.311,91,5.406,577,5.406,2016,7.48,2088,5.78,2127,5.916,2128,7.137,2129,7.137]],["title/php/basics/#comments",[1370,4.842]],["text/php/basics/#comments",[2,2.89,14,1.356,16,2.203,20,2.529,31,1.318,35,3.472,36,1.765,97,4.255,102,2.009,123,2.529,161,3.732,226,3.453,232,3.472,272,3.024,279,2.83,349,3.268,372,3.732,397,3.472,448,3.472,454,2.83,456,5.407,469,1.637,482,4.415,484,4.537,501,3.231,528,3.732,792,3.472,1194,4.089,1195,3.732,1321,3.894,1370,3.894,1409,4.089,1456,4.089,1589,4.089,1595,6.521,1609,4.089,1778,3.894,1882,3.732,2088,4.713,2125,4.089,2127,3.024,2130,4.658,2131,4.658,2132,4.658,2133,6.468,2134,4.658,2135,4.658,2136,4.658,2137,6.468,2138,6.468,2139,6.468,2140,4.332,2141,4.658,2142,4.658,2143,7.43,2144,4.332,2145,4.658,2146,4.658,2147,4.658,2148,4.658]],["title/php/basics/#types",[565,2.778]],["text/php/basics/#types",[17,1.293,37,2.376,43,3.431,48,2.072,50,2.072,51,0.803,54,0.918,59,1.147,68,0.978,118,1.99,228,2.138,234,3.648,241,2.856,264,3.035,286,5.633,295,1.778,355,2.856,451,2.526,467,1.493,501,3.441,520,1.801,539,4.591,557,2.173,565,4.13,577,2.582,618,4.124,620,1.824,647,2.779,693,3.035,864,3.262,958,2.94,1025,3.573,1072,4.25,1207,4.124,1237,3.035,1584,3.262,1693,3.573,1734,3.573,2088,4.377,2121,5.529,2127,2.643,2149,4.071,2150,4.071,2151,3.786,2152,3.573,2153,4.071,2154,4.071,2155,4.071,2156,4.071,2157,4.071,2158,4.071,2159,4.071,2160,6.901,2161,4.071,2162,4.71,2163,4.071,2164,5.879,2165,4.071,2166,4.071,2167,4.071,2168,4.071,2169,4.071,2170,4.071]],["title/php/basics/#boolean",[234,3.594]],["text/php/basics/#boolean",[17,1.463,31,1.817,36,1.746,48,2.346,58,2.323,59,0.975,274,2.065,295,3.226,468,2.992,482,3.146,484,3.233,501,3.685,575,6.886,577,4.073,728,4.045,1698,7.431,2088,4.073,2121,5.919,2127,4.168,2162,3.693,2171,9.246,2172,4.609,2173,7.388,2174,8.699,2175,4.609,2176,4.609,2177,6.42,2178,6.42,2179,6.42,2180,4.609,2181,4.609,2182,4.609]],["title/php/basics/#integers",[1207,4.063]],["text/php/basics/#integers",[26,3.056,59,1.393,295,4.008,501,3.517,1904,8.537,1905,5.586,1906,5.586,2088,4.86,2127,3.899,2183,6.006,2184,6.006,2185,8.436,2186,6.006,2187,6.006,2188,6.006,2189,6.006,2190,6.006,2191,6.006,2192,6.006]],["title/php/basics/#float",[618,4.063]],["text/php/basics/#float",[14,1.522,16,1.642,26,1.767,32,2.435,33,1.952,36,1.315,43,2.026,57,0.864,59,1.062,161,2.781,203,1.885,221,2.109,229,4.081,269,3.047,274,2.342,284,2.154,285,2.309,288,2.026,291,3.047,293,2.369,295,3.573,343,2.588,366,2.369,390,2.066,393,3.316,400,3.568,416,4.291,434,2.507,451,4.893,455,4.188,456,2.902,501,1.33,520,2.312,525,2.588,557,2.791,564,3.047,618,5.74,642,2.507,684,2.678,685,2.435,696,3.047,771,2.781,804,4.182,834,2.678,877,2.254,928,2.902,931,2.309,932,2.781,1021,2.781,1154,2.781,1324,3.228,1439,2.781,1457,3.047,1566,2.902,1711,3.228,1778,2.902,1779,2.902,1892,3.228,1903,3.228,1909,7.334,1941,3.047,1948,3.047,2019,3.047,2088,3.988,2127,2.254,2140,3.228,2144,3.228,2151,3.228,2193,3.471,2194,3.471,2195,3.471,2196,3.471,2197,3.471,2198,3.471,2199,3.471,2200,3.471,2201,3.228,2202,3.471,2203,3.471,2204,3.471,2205,3.471,2206,3.471,2207,3.471,2208,3.471,2209,3.471,2210,3.471,2211,3.471,2212,3.471,2213,3.471,2214,3.471,2215,3.471,2216,3.471,2217,3.471,2218,3.471,2219,3.471,2220,3.471,2221,3.471,2222,3.471,2223,3.471,2224,3.471,2225,3.471,2226,3.471,2227,3.471,2228,3.471]],["title/php/basics/#string",[1072,2.948]],["text/php/basics/#string",[31,2.464,37,2.27,59,1.321,79,3.192,150,2.728,183,3.052,343,2.899,501,3.336,557,2.077,618,5.521,687,5.387,1207,4.716,1384,3.414,2088,5.386,2127,2.525,2162,7.652,2229,3.889,2230,3.889,2231,5.687,2232,3.889,2233,5.687,2234,8.221,2235,8.221,2236,3.889,2237,6.723,2238,7.397,2239,7.397,2240,7.397,2241,3.889,2242,3.889,2243,3.889,2244,3.889,2245,5.687,2246,3.889]],["title/php/basics/#arrays",[17,1.839]],["text/php/basics/#arrays",[14,1.892,17,2.903,59,1.222,135,5.704,432,8.024,501,2.49,607,5.013,1164,5.704,1450,5.433,2088,4.122,2127,4.219,2162,7.325,2247,8.502,2248,6.498]],["title/php/basics/#iterable",[50,2.948]],["text/php/basics/#iterable",[48,3.662,50,4.358,54,1.337,68,1.425,204,5.765,501,2.757,520,3.183,2088,4.564,2109,6.692,2127,4.671,2249,7.195]],["title/php/basics/#object",[620,2.595]],["text/php/basics/#object",[54,1.305,59,1.049,68,1.391,453,2.648,518,2.283,520,3.056,2088,4.383,2121,5.537,2127,4.486,2162,7.201,2247,7.774,2250,8.359,2251,6.91]],["title/php/basics/#reources",[2252,5.792]],["text/php/basics/#reources",[2253,8.06]],["title/php/basics/#callable",[2152,5.084]],["text/php/basics/#callable",[10,1.398,14,1.098,31,1.067,36,1.429,37,2.201,54,1.375,59,0.844,68,1.466,174,2.745,175,3.957,203,3.586,221,3.378,278,2.449,279,2.291,284,2.34,387,1.668,390,2.245,453,2.131,501,3.376,518,2.778,520,3.596,565,3.9,610,3.828,620,2.491,683,2.724,758,2.245,769,2.121,889,3.23,1343,5.171,1697,4.455,1725,3.153,2088,2.392,2121,6.227,2127,2.449,2152,3.31,2201,3.508,2254,6.604,2255,3.772,2256,6.604,2257,6.604,2258,3.772,2259,3.772,2260,3.772,2261,3.772,2262,3.772,2263,3.772,2264,3.772,2265,3.772,2266,3.772,2267,3.772,2268,3.772,2269,3.772]],["title/php/basics/#type-juggling-and-declartion",[565,1.763,2270,3.675,2271,3.675]],["text/php/basics/#type-juggling-and-declartion",[855,5.822]],["title/php/intro/",[2272,6.408]],["text/php/intro/",[3,1.8,14,1.492,71,2.735,141,4.497,223,2.934,272,3.326,337,4.283,349,3.594,351,3.594,398,3.265,429,4.497,477,3.497,600,2.934,740,4.765,930,4.765,979,3.112,1023,3.594,1115,3.953,1135,5.531,1188,4.765,1372,3.408,1566,4.283,1691,4.283,1780,4.497,1835,6.42,1845,3.819,1846,4.765,1861,4.497,2088,5.299,2090,5.124,2121,4.105,2125,7.332,2127,3.326,2273,5.668,2274,5.668,2275,6.903,2276,5.668,2277,5.668,2278,5.668,2279,5.668,2280,5.668,2281,8.354,2282,5.668,2283,5.668,2284,5.668,2285,5.668,2286,5.668,2287,5.124,2288,5.124]],["title/php/intro/#what-it-can-do",[]],["text/php/intro/#what-it-can-do",[272,4.872,349,5.265,429,6.588,979,4.559,2275,7.505,2281,8.78,2287,7.505,2288,7.505]],["title/php/security/",[1857,4.842]],["text/php/security/",[388,3.483,795,6.498,931,5.171,1707,6.822,2289,8.599]]],"fields":["title","text"],"invertedIndex":[["!",{"_index":1491,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["!=",{"_index":485,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["\"",{"_index":183,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#javautilarrays":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"php/basics/":{},"php/basics/#string":{}},"title":{}}],["\"\"",{"_index":2034,"text":{"java/strings/":{}},"title":{}}],["\"\");",{"_index":2172,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["\"%f%n,",{"_index":1917,"text":{"java/numbers/":{}},"title":{}}],["\")",{"_index":613,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["\"));",{"_index":1580,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["\").foreach(system.out::print)",{"_index":1477,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["\",",{"_index":649,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#traversal":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{}},"title":{}}],["\"/home/user\";",{"_index":2116,"text":{"php/atttributes/":{}},"title":{}}],["\"/tmp/foo.jpg\";",{"_index":2115,"text":{"php/atttributes/":{}},"title":{}}],["\"10.0",{"_index":2245,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["\"10.2",{"_index":2241,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["\"10.5\";",{"_index":2229,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["\"3/17/2002\",",{"_index":1380,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["\"3/27/2003\"",{"_index":1342,"text":{"java/annotations/":{}},"title":{}}],["\"4/12/2004\",",{"_index":1381,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["\":",{"_index":1638,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["\";",{"_index":543,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{}},"title":{}}],["\"a\\n\";",{"_index":2262,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["\"b\\n\";",{"_index":2263,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["\"n/a\";",{"_index":1377,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["\"overflow\\n\"",{"_index":1005,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["\"},",{"_index":1467,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["#",{"_index":2143,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["###,###.###",{"_index":1931,"text":{"java/numbers/":{}},"title":{}}],["###.##",{"_index":1933,"text":{"java/numbers/":{}},"title":{}}],["#include<bits/stdc++.h>",{"_index":654,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["$",{"_index":1459,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["$###,###.###",{"_index":1939,"text":{"java/numbers/":{}},"title":{}}],["$12,345.67",{"_index":1940,"text":{"java/numbers/":{}},"title":{}}],["$z=true",{"_index":2177,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["%",{"_index":1054,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["&",{"_index":1246,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["&&",{"_index":61,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["&arr[i]);",{"_index":308,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["&arr[j+1]);",{"_index":329,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["',",{"_index":2268,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["'/'",{"_index":2104,"text":{"php/atttributes/":{}},"title":{}}],["'parent::who'));",{"_index":2265,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["(",{"_index":150,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"php/basics/":{},"php/basics/#string":{}},"title":{}}],["(!cond(it.next()))",{"_index":1599,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(!file_exists($thi",{"_index":2096,"text":{"php/atttributes/":{}},"title":{}}],["(!is_dir($thi",{"_index":2101,"text":{"php/atttributes/":{}},"title":{}}],["(!isempty(*s))",{"_index":1280,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["(!q1.empty())",{"_index":1308,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["(!s.empty()",{"_index":1201,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["(!s.empty())",{"_index":899,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{}},"title":{}}],["(!s1.empty())",{"_index":1095,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["(!s2.empty())",{"_index":1099,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["(!st.empty()",{"_index":1293,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["(((double)(hi",{"_index":145,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{}},"title":{}}],["()",{"_index":611,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["(*fptr)(node",{"_index":873,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["(*fptr)(void",{"_index":871,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["(11.5)",{"_index":2230,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["(14.2)",{"_index":2244,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["(a[min]",{"_index":311,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#stable":{}},"title":{}}],["(arr[0]",{"_index":55,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["(arr[hi]",{"_index":137,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{}},"title":{}}],["(arr[i]",{"_index":168,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],["(arr[j]",{"_index":305,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["(arr[left]",{"_index":181,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{}},"title":{}}],["(arr[lo]",{"_index":144,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{}},"title":{}}],["(arr[m]",{"_index":245,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{}},"title":{}}],["(arr[mid1]",{"_index":116,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["(arr[mid2]",{"_index":117,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["(arr[mid]",{"_index":244,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#recursive":{}},"title":{}}],["(arr[min(step,",{"_index":263,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["(arr[pos]",{"_index":148,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{}},"title":{}}],["(arr[prev]",{"_index":265,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["(arr[right]",{"_index":186,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{}},"title":{}}],["(arrayofints[i][j]",{"_index":1526,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["(b==null)",{"_index":493,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{}},"title":{}}],["(count($attributes)",{"_index":2111,"text":{"php/atttributes/":{}},"title":{}}],["(e.g.",{"_index":919,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{}},"title":{}}],["(i=0;",{"_index":869,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["(int)$var2;",{"_index":2182,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["(is_int($an_int))",{"_index":2168,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["(is_string($a_bool))",{"_index":2170,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["(isempty(*root))",{"_index":1179,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["(isempty(*s)",{"_index":1274,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["(isempty(queue))",{"_index":1058,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["(isempty(root))",{"_index":1181,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["(isempty(sn))",{"_index":1233,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["(isfull(queue))",{"_index":1053,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["(l+r)/2",{"_index":194,"text":{"Search%20%26%20Sort/Search/intro/":{}},"title":{"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}}}],["(l.size()",{"_index":1636,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(list<string>",{"_index":1634,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(mountainbike)obj;",{"_index":1729,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["(o(1))",{"_index":874,"text":{"ds/linked-list/insertion/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{}}}],["(o(n))",{"_index":875,"text":{"ds/linked-list/insertion/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{"ds/linked-list/insertion/#last-on":{}}}],["(o(n^2))",{"_index":1191,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["(price[i]",{"_index":1287,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{}},"title":{}}],["(q1.empty())",{"_index":1314,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["(q1.size()",{"_index":1315,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{}},"title":{}}],["(rectangleplus)other;",{"_index":1827,"text":{"java/interfaces/":{}},"title":{}}],["(result=9),",{"_index":1508,"text":{"java/basics/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["(s.empty())",{"_index":1119,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["(s.hasnext())",{"_index":1619,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(s1.empty()",{"_index":1111,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["(s1.empty())",{"_index":1102,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["(s2.empty())",{"_index":1113,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["(searchme.regionmatches(i,",{"_index":2058,"text":{"java/strings/":{}},"title":{}}],["(st.empty())",{"_index":1296,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["(that'",{"_index":2083,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["(this.getarea()",{"_index":1828,"text":{"java/interfaces/":{}},"title":{}}],["(top[sn]",{"_index":1215,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["(unsigned)time(",{"_index":606,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["(visited[i]",{"_index":576,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],[")",{"_index":151,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[");",{"_index":607,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],["*",{"_index":97,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"java/collections/":{},"java/collections/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["*)",{"_index":822,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["*))",{"_index":872,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["*)malloc(sizeof(int)*arrsize);",{"_index":924,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["*)malloc(sizeof(struct",{"_index":811,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["*,",{"_index":765,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["*/",{"_index":484,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#comments":{}},"title":{}}],["*>(",{"_index":961,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{}}],["*addafter(struct",{"_index":813,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["*addbegin(struct",{"_index":809,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["*addend(struct",{"_index":812,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["*addtoempty(struct",{"_index":807,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["*btreetoclist(nod",{"_index":786,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{}},"title":{}}],["*concatenate(nod",{"_index":781,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}},"title":{}}],["*max_element(arr,",{"_index":673,"text":{"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{}},"title":{}}],["*min_element(arr,",{"_index":672,"text":{"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{}},"title":{}}],["+",{"_index":79,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/linked-list/count/":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#javautilarrays":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{},"php/basics/":{},"php/basics/#string":{}},"title":{}}],["++",{"_index":1489,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["+=",{"_index":264,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],[",",{"_index":682,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"java/interfaces/":{}},"title":{}}],[".",{"_index":94,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"php/atttributes/":{}},"title":{}}],["..",{"_index":200,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["...",{"_index":204,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"php/basics/":{},"php/basics/#iterable":{}},"title":{}}],["......",{"_index":1812,"text":{"java/interfaces/":{}},"title":{}}],[".collect(averager::new,",{"_index":1665,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],[".collect(collectors.joining(\",",{"_index":1579,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".collect(collectors.summingint(employee::getsalary)));",{"_index":1583,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".filter(",{"_index":1571,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".filter(p",{"_index":1645,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],[".foreach(",{"_index":1574,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".map(object::tostring)",{"_index":1578,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".map(person::getage)",{"_index":1658,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],[".maptoint(person::getage)",{"_index":1648,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{}},"title":{}}],[".thencomparing(comparator.comparing(card::getsuit)));",{"_index":1843,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["/",{"_index":12,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/basics/":{},"java/basics/#operators":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["/*",{"_index":482,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"java/helloworld/":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#comments":{}},"title":{}}],["//",{"_index":501,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/intro/#traversal":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#java-inbuilt":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/strings/":{},"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#float":{},"php/basics/#integers":{},"php/basics/#iterable":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{}}],["//======================================================================",{"_index":2137,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["0",{"_index":58,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#traversal":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#without-stack":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["0.1",{"_index":2210,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["0.7,",{"_index":2211,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["000000.000",{"_index":1936,"text":{"java/numbers/":{}},"title":{}}],["000123.780",{"_index":1937,"text":{"java/numbers/":{}},"title":{}}],["0123",{"_index":2184,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["0b11111111",{"_index":2189,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["0x1a",{"_index":2187,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["0x500",{"_index":943,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["0x508",{"_index":944,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["0x510",{"_index":945,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["0x518",{"_index":946,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["0x520",{"_index":950,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["1",{"_index":31,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/min-max/":{},"ds/array/min-max/#recursive":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/linked-list/count/":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#simple":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/packages/":{},"java/packages/#static-import":{},"java/strings/":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#string":{}},"title":{}}],["1.0;",{"_index":2246,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["1.11e",{"_index":2202,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["1.234;",{"_index":2193,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["1.2e3;",{"_index":2194,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["1.3e3\";",{"_index":2231,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["10",{"_index":557,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{}}],["100",{"_index":995,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["1000",{"_index":1155,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["11",{"_index":687,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#string":{}},"title":{}}],["12",{"_index":693,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["123,456.789",{"_index":1932,"text":{"java/numbers/":{}},"title":{}}],["123.78",{"_index":1935,"text":{"java/numbers/":{}},"title":{}}],["1234",{"_index":2183,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["12345.67",{"_index":1938,"text":{"java/numbers/":{}},"title":{}}],["123456.789",{"_index":1930,"text":{"java/numbers/":{}},"title":{}}],["123456.79",{"_index":1934,"text":{"java/numbers/":{}},"title":{}}],["1234_5678_9012_3456l",{"_index":1448,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["1299",{"_index":2232,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["13",{"_index":694,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["14",{"_index":695,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["15",{"_index":558,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{}},"title":{}}],["16",{"_index":696,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["17",{"_index":697,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"java/java9%26beyond/":{}},"title":{}}],["17.html",{"_index":1895,"text":{"java/java9%26beyond/":{}},"title":{}}],["18",{"_index":698,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["19",{"_index":699,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["1_234.567;",{"_index":2196,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["1_234_567",{"_index":2191,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["1dio",{"_index":1888,"text":{"java/java9%26beyond/":{}},"title":{}}],["1st",{"_index":718,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["2",{"_index":36,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/intro/#traversal":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/min-special/":{},"java/basics/":{},"java/basics/#arrays":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#static-import":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}}}],["2.3e5);",{"_index":2175,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["2.718282;",{"_index":1819,"text":{"java/interfaces/":{}},"title":{}}],["20",{"_index":556,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["21",{"_index":700,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["22",{"_index":701,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["23",{"_index":702,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["230",{"_index":214,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["24",{"_index":767,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["25",{"_index":789,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{}},"title":{}}],["255",{"_index":2190,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["26",{"_index":2188,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["2^x",{"_index":427,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["2clog2n",{"_index":86,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["2d",{"_index":1872,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["2log2n",{"_index":83,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["2log3n",{"_index":92,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["2n",{"_index":345,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["2nd",{"_index":951,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["2x",{"_index":1885,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["3",{"_index":279,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#comments":{}},"title":{}}],["30",{"_index":627,"text":{"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["32",{"_index":224,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["36",{"_index":790,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{}},"title":{}}],["4",{"_index":37,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/intro/":{},"java/intro/#why":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{}}],["40",{"_index":628,"text":{"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["4a",{"_index":277,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["4b",{"_index":280,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["4clog3n",{"_index":87,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["4log3n",{"_index":84,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["5",{"_index":278,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{},"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["50",{"_index":650,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["6",{"_index":683,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#naming":{},"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["60",{"_index":760,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["7",{"_index":684,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"java/basics/":{},"java/basics/#arrays":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["7.0",{"_index":238,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["7.4.0",{"_index":2197,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["7.4.0)",{"_index":2192,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["7.9999999999999991118....",{"_index":2219,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["754",{"_index":2200,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["7e",{"_index":2195,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["8",{"_index":685,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{},"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["8.0.0,",{"_index":2234,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["83",{"_index":2186,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["9",{"_index":686,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"java/basics/":{},"java/basics/#arrays":{},"java/java9%26beyond/":{}},"title":{}}],["90",{"_index":1513,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],[":",{"_index":8,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/min-max/":{},"ds/array/min-max/#recursive":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/intro/":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["::insertrear(int",{"_index":1007,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],[";",{"_index":187,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"java/basics/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["<",{"_index":60,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/interfaces/":{},"java/strings/":{}},"title":{}}],["<<",{"_index":542,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["<=",{"_index":63,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{},"java/basics/":{},"java/basics/#operators":{},"java/strings/":{}},"title":{}}],["<=>",{"_index":773,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["<?=",{"_index":2118,"text":{"php/basics/":{}},"title":{}}],["<bits/stdc++.h>",{"_index":515,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["<path_one>\\sources\\com\\example\\graphics\\rectangle.java",{"_index":2020,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<path_two>\\class",{"_index":2024,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<path_two>\\classes\\com\\example\\graphics.",{"_index":2027,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<path_two>\\classes\\com\\example\\graphics\\rectangle.class",{"_index":2021,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<stdbool.h>",{"_index":240,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["<stdio.h>",{"_index":768,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{}},"title":{}}],["<title>example</title>",{"_index":2285,"text":{"php/intro/":{}},"title":{}}],["=",{"_index":59,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{},"java/basics/#naming":{},"java/basics/#operators":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#float":{},"php/basics/#integers":{},"php/basics/#object":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}}}],["==",{"_index":56,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/array/min-max/":{},"ds/array/min-max/#recursive":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/count/":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#html-escaping":{}},"title":{}}],["=>",{"_index":432,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],[">",{"_index":118,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/intro/#searching":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/intro/#why":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/dequeue/#implementation":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#heap":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"java/basics/":{},"java/basics/#javautilarrays":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#interfaces":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{},"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],[">;",{"_index":1509,"text":{"java/basics/":{}},"title":{}}],[">=",{"_index":112,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#problems":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#problems":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#without-stack":{},"java/basics/":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[">>",{"_index":208,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],[">>>",{"_index":202,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],[">array[queu",{"_index":1055,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],[">getattributes(setup::class);",{"_index":2110,"text":{"php/atttributes/":{}},"title":{}}],[">value==val){",{"_index":906,"text":{"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["?",{"_index":665,"text":{"ds/array/min-max/":{},"ds/array/min-max/#recursive":{},"ds/linked-list/intro/":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{"ds/linked-list/intro/#why":{}}}],["?:",{"_index":1497,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["?>",{"_index":2127,"text":{"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#float":{},"php/basics/#html-escaping":{},"php/basics/#integers":{},"php/basics/#iterable":{},"php/basics/#object":{},"php/basics/#string":{},"php/basics/#types":{},"php/intro/":{}},"title":{}}],["@alert(role=\"administrator\")",{"_index":1421,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@alert(role=\"manager\")",{"_index":1420,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@author(nam",{"_index":1347,"text":{"java/annotations/":{}},"title":{}}],["@repeatable(schedules.class)",{"_index":1429,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@schedule(dayofmonth=\"last\")",{"_index":1416,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@schedule(dayofweek=\"fri\",",{"_index":1417,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@suppresswarnings(valu",{"_index":1344,"text":{"java/annotations/":{}},"title":{}}],["@suppresswarnings({\"unchecked\",",{"_index":1391,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["[",{"_index":135,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],["[(1),1]",{"_index":947,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["[(1),2]",{"_index":952,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["[(2),2]",{"_index":948,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["[(2),3]",{"_index":954,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["[(3),3]",{"_index":949,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["[(4),4]",{"_index":955,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["[(8),0]",{"_index":956,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["]",{"_index":139,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{}},"title":{}}],["];",{"_index":1164,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],["^",{"_index":840,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["_",{"_index":1458,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["__advantage__",{"_index":925,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["__invok",{"_index":2266,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["__invoke($name)",{"_index":2267,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["__this__",{"_index":942,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["a[++top]",{"_index":1160,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["a[i",{"_index":1303,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["a[i]",{"_index":316,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["a[j])",{"_index":312,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#stable":{}},"title":{}}],["a[max];",{"_index":1157,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["a[min",{"_index":315,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#stable":{}},"title":{}}],["a[min]",{"_index":314,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#stable":{}},"title":{}}],["a[min];",{"_index":313,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#stable":{}},"title":{}}],["a[top",{"_index":1163,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["a[top];",{"_index":1166,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["a_bool",{"_index":2160,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["a_str",{"_index":2161,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["a_str2",{"_index":2163,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["ab",{"_index":1944,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["abhinav'",{"_index":1,"text":{"":{}},"title":{"#abhinavs-notes":{}}}],["abov",{"_index":27,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["abstract",{"_index":1543,"text":{"java/collections/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{}}}],["access",{"_index":505,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/array/intro/#introduction":{},"ds/array/vectors/":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/intro/":{},"java/intro/#platform":{},"java/packages/":{},"java/packages/#static-import":{},"java/packages/#why":{},"java/strings/":{},"java/strings/#why":{}},"title":{"ds/array/intro/#accessing":{},"ds/array/vectors/#element-access":{},"java/basics/#access-modifiers":{}}}],["accord",{"_index":1172,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["accumul",{"_index":1660,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["acmebicycl",{"_index":1981,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["acronym",{"_index":2277,"text":{"php/intro/":{}},"title":{}}],["actionhandl",{"_index":2089,"text":{"php/atttributes/":{}},"title":{}}],["ad",{"_index":463,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["add",{"_index":1021,"text":{"ds/queue/intro/":{},"ds/queue/intro/#operations":{},"java/packages/":{},"java/packages/#naming":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["addal",{"_index":1587,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["addit",{"_index":1480,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/intro/":{},"java/intro/#programming-language":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["addition",{"_index":2207,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["addr",{"_index":843,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{}},"title":{}}],["addr(next)",{"_index":839,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{}},"title":{}}],["addr(prev)",{"_index":841,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{}},"title":{}}],["address",{"_index":569,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["addtoempty(last,",{"_index":810,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["adher",{"_index":1798,"text":{"java/interfaces/":{}},"title":{}}],["adjac",{"_index":908,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["adn",{"_index":2001,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["advanc",{"_index":483,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/numbers/":{}},"title":{"java/numbers/#advanced-math":{}}}],["advantag",{"_index":630,"text":{"ds/array/intro/":{},"ds/linked-list/dll/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{"ds/array/intro/#advantages":{},"ds/linked-list/dll/#advantages":{}}}],["advoc",{"_index":594,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["ag",{"_index":1670,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["again",{"_index":2033,"text":{"java/strings/":{}},"title":{}}],["aggreg",{"_index":1539,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{"java/collections/#aggregate-operations":{},"java/collections/#aggregate-operations-vs-iterators":{}}}],["ai",{"_index":417,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["ain't",{"_index":2078,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["aj",{"_index":418,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["aka",{"_index":2150,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["algo",{"_index":820,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["algorithm",{"_index":321,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#problems":{},"java/collections/":{},"java/generics/":{},"java/generics/#why":{}},"title":{"java/collections/#algorithms":{}}}],["algorithm/cod",{"_index":818,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["alic",{"_index":1383,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["alloc",{"_index":459,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["alloc(from",{"_index":921,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["allow",{"_index":881,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{}}],["aloc",{"_index":917,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{}},"title":{}}],["alpha",{"_index":1621,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["alphabetize(str",{"_index":1639,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["alphabetize(word);",{"_index":1622,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["alreadi",{"_index":333,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["although",{"_index":2019,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["alwai",{"_index":211,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["ambigu",{"_index":1732,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/packages/":{}},"title":{"java/packages/#name-ambiguities":{}}}],["amort",{"_index":1108,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["an",{"_index":1300,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["an_int",{"_index":2164,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["anagram",{"_index":1604,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["analysi",{"_index":1039,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["anarrai",{"_index":1464,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["and/or",{"_index":909,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["angri",{"_index":1833,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["anim",{"_index":1787,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["animal.testclassmethod();",{"_index":1794,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["annot",{"_index":1317,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#design-considerations":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{}},"title":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/annotations/#retrieving-annotations":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}}}],["annotatedelement.getannotation(class<t>)",{"_index":1435,"text":{"java/annotations/":{},"java/annotations/#retrieving-annotations":{}},"title":{}}],["annotatedelement.getannotationsbytype(class<t>)",{"_index":1436,"text":{"java/annotations/":{},"java/annotations/#retrieving-annotations":{}},"title":{}}],["anoth",{"_index":754,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["ans[0]",{"_index":1301,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["ans[i",{"_index":1304,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["ans[i]",{"_index":1305,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["answer",{"_index":523,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["anticlockwis",{"_index":981,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["anyth",{"_index":2169,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["anywher",{"_index":794,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["api",{"_index":1553,"text":{"java/collections/":{},"java/collections/#why":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["api's)",{"_index":937,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["appar",{"_index":2011,"text":{"java/packages/":{}},"title":{"java/packages/#apparent-hierarchies-of-packages":{}}}],["appear",{"_index":220,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["append",{"_index":452,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{}},"title":{}}],["append(node**",{"_index":848,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#last-on":{}},"title":{}}],["appli",{"_index":1333,"text":{"java/annotations/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["applic",{"_index":979,"text":{"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/numbers/":{},"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{"ds/queue/dequeue/#application":{},"ds/queue/intro/#application":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/#applications-of-stack":{}}}],["applybrakes(int",{"_index":1980,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["approach",{"_index":368,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["aprior",{"_index":1081,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{}},"title":{}}],["arbitrari",{"_index":2224,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["architectur",{"_index":1541,"text":{"java/collections/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["aren't",{"_index":929,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["arg",{"_index":1606,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/numbers/":{},"java/strings/":{}},"title":{}}],["argument",{"_index":1744,"text":{"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/numbers/":{}},"title":{}}],["arithmet",{"_index":771,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"java/basics/":{},"java/basics/#operators":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["around",{"_index":1958,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["arr",{"_index":53,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/array/vs-pointers/#similarities":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["arr.length;",{"_index":179,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{}},"title":{}}],["arr1[10];",{"_index":625,"text":{"ds/array/intro/":{},"ds/array/intro/#declaration":{}},"title":{}}],["arr1[i]",{"_index":1204,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["arr1[n];",{"_index":1200,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["arr2[n];",{"_index":626,"text":{"ds/array/intro/":{},"ds/array/intro/#declaration":{}},"title":{}}],["arr[(k+1)m]",{"_index":250,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["arr[0]",{"_index":635,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/min-max/":{},"ds/array/min-max/#recursive":{}},"title":{}}],["arr[0],",{"_index":643,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[0];",{"_index":640,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[1<<30];",{"_index":231,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["arr[1]",{"_index":638,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[1],",{"_index":644,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[2]",{"_index":636,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}},"title":{}}],["arr[2],",{"_index":645,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[2];",{"_index":648,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}},"title":{}}],["arr[3",{"_index":637,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[3]",{"_index":639,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[3]);",{"_index":646,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}},"title":{}}],["arr[5];",{"_index":634,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[6]",{"_index":629,"text":{"ds/array/intro/":{},"ds/array/intro/#declaration":{}},"title":{}}],["arr[6]={11,12,13,14,15,16};",{"_index":655,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["arr[end]",{"_index":714,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{}},"title":{}}],["arr[end];",{"_index":713,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{}},"title":{}}],["arr[front]",{"_index":1006,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["arr[front];",{"_index":1015,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["arr[hi])",{"_index":143,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{}},"title":{}}],["arr[i]",{"_index":62,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["arr[i])",{"_index":1203,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["arr[i];",{"_index":361,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["arr[j",{"_index":363,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["arr[j+1])",{"_index":327,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["arr[j]",{"_index":362,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["arr[j])",{"_index":579,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],["arr[j];",{"_index":364,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["arr[km]",{"_index":249,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["arr[lo]",{"_index":142,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{}},"title":{}}],["arr[lo])",{"_index":138,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{}},"title":{}}],["arr[lo]))",{"_index":146,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{}},"title":{}}],["arr[lo]));",{"_index":147,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{}},"title":{}}],["arr[lo])*(hi",{"_index":136,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{}},"title":{}}],["arr[max];",{"_index":996,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["arr[min_idx])",{"_index":306,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["arr[pos]",{"_index":152,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{}},"title":{}}],["arr[rear]",{"_index":1010,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["arr[rear];",{"_index":1018,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["arr[start]",{"_index":712,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{}},"title":{}}],["arr[start];",{"_index":711,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{}},"title":{}}],["arrai",{"_index":17,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"ds/array/multi-dimensional/":{},"ds/array/reverse/":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{},"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#types":{}},"title":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#multidimensional-arrays":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#reverse-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#array-vs-pointers":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list-vs-arrays":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/#arrays":{},"ds/stack/intro/#array":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"java/basics/#arrays":{},"php/basics/#arrays":{}}}],["array(12));",{"_index":2176,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["array_name[size1][size2]....[sizen];",{"_index":678,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["arraylist<string>());",{"_index":1627,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["arrayll[5];",{"_index":941,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["arrayofints.length;",{"_index":1524,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["arrayofints[i].length;",{"_index":1525,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["arrays.sort(a);",{"_index":1641,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["ascend",{"_index":1568,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["assign",{"_index":747,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/array/vs-pointers/":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"ds/array/vs-pointers/#assignment":{}}}],["associ",{"_index":1840,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["assum",{"_index":821,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["asymptot",{"_index":436,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["asynchron",{"_index":1030,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["at(g)",{"_index":743,"text":{"ds/array/vectors/":{},"ds/array/vectors/#element-access":{}},"title":{}}],["atomicinteg",{"_index":1911,"text":{"java/numbers/":{}},"title":{}}],["atomiclong",{"_index":1912,"text":{"java/numbers/":{}},"title":{}}],["attempt",{"_index":184,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{}},"title":{}}],["attribut",{"_index":2091,"text":{"php/atttributes/":{}},"title":{}}],["atttribut",{"_index":2087,"text":{},"title":{"php/atttributes/":{}}}],["author",{"_index":1338,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["auto",{"_index":585,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["autobox",{"_index":2085,"text":{"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{}},"title":{"java/strings/#autoboxing-and-unboxing":{}}}],["automat",{"_index":1426,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{}},"title":{}}],["aux",{"_index":1261,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["auxiliari",{"_index":190,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["avail",{"_index":834,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{},"java/annotations/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["averag",{"_index":330,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averagecollect",{"_index":1663,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averagecollect.average());",{"_index":1672,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averager::accept,",{"_index":1667,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averager::combin",{"_index":1668,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["avoid",{"_index":1047,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["awar",{"_index":2009,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["axi",{"_index":354,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["a\u20181",{"_index":403,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["a\u20182",{"_index":404,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["a\u2018n.",{"_index":406,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["b",{"_index":284,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{},"java/collections/":{},"java/collections/#reduction":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{}},"title":{}}],["back",{"_index":533,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#modifiers":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/inheritance/":{},"java/inheritance/#constructor-chaining":{}},"title":{}}],["backref",{"_index":479,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["backtrack",{"_index":1141,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["backward",{"_index":1133,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["balanc",{"_index":1125,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#problems":{}},"title":{}}],["bar",{"_index":2247,"text":{"php/basics/":{},"php/basics/#arrays":{},"php/basics/#object":{}},"title":{}}],["base",{"_index":400,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/inheritance/":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"php/basics/":{},"php/basics/#float":{}},"title":{"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}}}],["basename($thi",{"_index":2105,"text":{"php/atttributes/":{}},"title":{}}],["basic",{"_index":1863,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{"php/basics/":{}}}],["be",{"_index":1198,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["becom",{"_index":1109,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["befor",{"_index":486,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{}},"title":{}}],["begin",{"_index":717,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["beging",{"_index":544,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["behavior",{"_index":1654,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#polymorphism":{}},"title":{}}],["behaviour",{"_index":859,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["belong",{"_index":1781,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["below",{"_index":222,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["benjamin",{"_index":1339,"text":{"java/annotations/":{}},"title":{}}],["best",{"_index":163,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#searching":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#heap":{}},"title":{}}],["better",{"_index":257,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["between",{"_index":45,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["beyond",{"_index":738,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"java/java9%26beyond/":{}},"title":{}}],["bf",{"_index":986,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["bicycl",{"_index":1966,"text":{"java/oops/":{},"java/oops/#class":{},"java/oops/#inheritance":{},"java/oops/#interface":{}},"title":{}}],["big",{"_index":373,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["bigdecim",{"_index":1907,"text":{"java/numbers/":{}},"title":{}}],["biginteg",{"_index":1908,"text":{"java/numbers/":{}},"title":{}}],["bike",{"_index":1971,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["binari",{"_index":26,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#searching":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/frequency/":{},"ds/linked-list/bin-tree-cdll/":{},"ds/queue/print-binary/":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#integers":{}},"title":{"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"ds/array/frequency/#sort-then-binary-search":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#print-binary":{}}}],["binarysearch",{"_index":1473,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["binarysearch(arr,",{"_index":65,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#recursive":{}},"title":{}}],["binarysearch(int",{"_index":243,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#recursive":{}},"title":{}}],["biologi",{"_index":1736,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["bit",{"_index":225,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["bitwis",{"_index":1501,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["block",{"_index":227,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"java/basics/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["blueprint",{"_index":1967,"text":{"java/oops/":{},"java/oops/#class":{}},"title":{}}],["bob",{"_index":1384,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"php/basics/":{},"php/basics/#string":{}},"title":{}}],["bob3",{"_index":2236,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["bodi",{"_index":1835,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"php/intro/":{}},"title":{}}],["boil",{"_index":89,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["bolt",{"_index":1961,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["bool",{"_index":241,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["bool(false)",{"_index":2173,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["bool(true)",{"_index":2174,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["boolean",{"_index":234,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"java/basics/":{},"java/basics/#operators":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/strings/":{},"php/basics/":{},"php/basics/#types":{}},"title":{"php/basics/#boolean":{}}}],["boost",{"_index":1847,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["both",{"_index":428,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"java/collections/":{},"java/collections/#interfaces":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#name-ambiguities":{}},"title":{}}],["bottleneck",{"_index":1848,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["bound",{"_index":348,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/array/intro/":{},"java/numbers/":{}},"title":{"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}}}],["boundari",{"_index":334,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["bracket",{"_index":775,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["branch",{"_index":1523,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["break",{"_index":185,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"java/basics/":{},"java/basics/#control-flow":{},"java/oops/":{},"java/oops/#why":{},"java/strings/":{}},"title":{}}],["browser",{"_index":1136,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["btreetoclist(root",{"_index":787,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{}},"title":{}}],["bubbl",{"_index":317,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}}}],["bubblesort(int",{"_index":326,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["buffer",{"_index":1036,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"php/basics/":{}},"title":{}}],["bug",{"_index":1689,"text":{"java/generics/":{}},"title":{}}],["bulk",{"_index":1585,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["bw",{"_index":1443,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["byte",{"_index":1449,"text":{"java/basics/":{},"java/basics/#variables":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{}},"title":{}}],["c",{"_index":203,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/intro/":{},"java/intro/#why":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{}},"title":{"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}}}],["c.iterator();",{"_index":1597,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["c.removeall(collections.singleton(e));",{"_index":1601,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["cach",{"_index":882,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{}},"title":{}}],["cadenc",{"_index":1982,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["calcul",{"_index":1910,"text":{"java/numbers/":{}},"title":{}}],["calculatespan(int",{"_index":1283,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["call",{"_index":610,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#simple":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"java/collections/":{},"java/collections/#interfaces":{},"java/exceptions/":{},"java/inheritance/":{},"java/inheritance/#constructor-chaining":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#super-keyword":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}}}],["call_user_func($c,",{"_index":2269,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["call_user_func('my_callback_function');",{"_index":2258,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["call_user_func('myclass::mycallbackmethod');",{"_index":2261,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["call_user_func(array($obj,",{"_index":2260,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["call_user_func(array('b',",{"_index":2264,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["call_user_func(array('myclass',",{"_index":2259,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["callabl",{"_index":2152,"text":{"php/basics/":{},"php/basics/#callable":{},"php/basics/#types":{}},"title":{"php/basics/#callable":{}}}],["callback",{"_index":2254,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["capabl",{"_index":340,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["capac",{"_index":729,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{"ds/array/vectors/#capacity":{}}}],["capit",{"_index":2142,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["cardin",{"_index":1440,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{}},"title":{}}],["case",{"_index":76,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#naming":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["cast",{"_index":1355,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{"java/inheritance/#casting-objects":{}}}],["cat",{"_index":1791,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["catch",{"_index":1629,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/exceptions/":{}},"title":{}}],["categori",{"_index":2138,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["caus",{"_index":325,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"php/basics/":{}},"title":{}}],["cbegin",{"_index":722,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{}},"title":{}}],["cdll",{"_index":778,"text":{"ds/linked-list/bin-tree-cdll/":{}},"title":{"ds/linked-list/bin-tree-cdll/#cdll":{}}}],["cdll'",{"_index":780,"text":{"ds/linked-list/bin-tree-cdll/":{}},"title":{"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}}}],["ceil",{"_index":1945,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["cend",{"_index":724,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{}},"title":{}}],["cgi",{"_index":2274,"text":{"php/intro/":{}},"title":{}}],["chain",{"_index":1707,"text":{"java/inheritance/":{},"java/inheritance/#constructor-chaining":{},"php/security/":{}},"title":{"java/inheritance/#constructor-chaining":{}}}],["chang",{"_index":357,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["changecadence(int",{"_index":1976,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["changegear(int",{"_index":1978,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["changelanes(direct",{"_index":1805,"text":{"java/interfaces/":{}},"title":{}}],["char",{"_index":619,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/strings/":{}},"title":{}}],["char[len];",{"_index":2068,"text":{"java/strings/":{}},"title":{}}],["charact",{"_index":2029,"text":{"java/strings/":{}},"title":{}}],["chararrai",{"_index":2069,"text":{"java/strings/":{}},"title":{}}],["chararray[j]",{"_index":2072,"text":{"java/strings/":{}},"title":{}}],["check",{"_index":647,"text":{"ds/array/intro/":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/annotations/":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/basics/":{},"php/basics/#types":{}},"title":{"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}}}],["checker",{"_index":1414,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}},"title":{}}],["child",{"_index":1702,"text":{"java/inheritance/":{}},"title":{}}],["cindi",{"_index":1385,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["circular",{"_index":776,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/queue/dequeue/#circular-array":{}}}],["class",{"_index":518,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/generics/":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/inheritance/#super-keyword":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/numbers/":{},"java/oops/":{},"java/oops/#class":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#object":{}},"title":{"java/classes/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{},"java/oops/#class":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#managing-source-and-class-files":{}}}],["class'",{"_index":1412,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["classifi",{"_index":1445,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["classpath",{"_index":2023,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["classpreambl",{"_index":1373,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["class\u2014both",{"_index":1722,"text":{"java/inheritance/":{}},"title":{}}],["claus",{"_index":1359,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}},"title":{}}],["clear",{"_index":756,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{}},"title":{}}],["cll",{"_index":817,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{"ds/linked-list/cll/#cll-sorted-insert":{}}}],["clockwis",{"_index":980,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["clone",{"_index":1746,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["cloneabl",{"_index":1782,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["clonenotsupportedexcept",{"_index":1747,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["close",{"_index":1189,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{},"php/basics/":{}},"title":{}}],["closer",{"_index":19,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["code",{"_index":226,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["coffe",{"_index":1476,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["colect",{"_index":914,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["collect",{"_index":4,"text":{"":{},"#abhinavs-notes":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#why":{},"java/numbers/":{}},"title":{"java/collections/":{},"java/collections/#traversing-collections":{}}}],["collection<e>",{"_index":1561,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["collector",{"_index":1753,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["collectors.groupingby(",{"_index":1675,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["collectors.reducing(",{"_index":1677,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["color.red)",{"_index":1573,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["column",{"_index":680,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["com.example.graphics,",{"_index":2025,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["com.example.region.mypackag",{"_index":1997,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["combin",{"_index":1653,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#streamcollect-method":{}},"title":{}}],["come",{"_index":2130,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["command",{"_index":2287,"text":{"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["comment",{"_index":1370,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"php/basics/":{},"php/basics/#comments":{}},"title":{"php/basics/#comments":{}}}],["common",{"_index":1780,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/strings/":{},"php/intro/":{}},"title":{}}],["commun",{"_index":1538,"text":{"java/collections/":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["compar",{"_index":32,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["comparator.comparing(card::getrank)",{"_index":1842,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["comparison",{"_index":74,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}}}],["compat",{"_index":1424,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["compil",{"_index":228,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["complement",{"_index":1493,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["complet",{"_index":372,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["complex",{"_index":85,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["compon",{"_index":1151,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["compound",{"_index":2151,"text":{"php/basics/":{},"php/basics/#float":{},"php/basics/#types":{}},"title":{}}],["comput",{"_index":337,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"php/intro/":{}},"title":{}}],["con",{"_index":1045,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["concaten",{"_index":779,"text":{"ds/linked-list/bin-tree-cdll/":{},"java/basics/":{},"java/basics/#operators":{},"java/strings/":{}},"title":{"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}}}],["concatenate(concatenate(left,",{"_index":788,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{}},"title":{}}],["concern",{"_index":1783,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["concret",{"_index":1545,"text":{"java/collections/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["concurr",{"_index":1682,"text":{},"title":{"java/concurrency/":{}}}],["condit",{"_index":1496,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["conflict",{"_index":1731,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["confus",{"_index":2216,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["connect",{"_index":1150,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["consid",{"_index":1439,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["consider",{"_index":1438,"text":{"java/annotations/":{}},"title":{"java/annotations/#design-considerations":{}}}],["consist",{"_index":2135,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["constant",{"_index":719,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"java/interfaces/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["construct",{"_index":1569,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["constructor",{"_index":1709,"text":{"java/inheritance/":{},"java/inheritance/#constructor-chaining":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#super-keyword":{}},"title":{"java/inheritance/#constructor-chaining":{}}}],["consum",{"_index":1027,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["contagi",{"_index":878,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["contain",{"_index":733,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vectors/#modifiers":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{}},"title":{"java/interfaces/#extending-interfaces-that-contain-default-methods":{}}}],["containsal",{"_index":1586,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["contigu",{"_index":617,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{}},"title":{}}],["continu",{"_index":578,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["contract",{"_index":1796,"text":{"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["contribut",{"_index":561,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["control",{"_index":1510,"text":{"java/basics/":{}},"title":{"java/basics/#control-flow":{}}}],["convers",{"_index":1130,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["convert",{"_index":1903,"text":{"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["coordin",{"_index":350,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["copi",{"_index":1748,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["copy($thi",{"_index":2103,"text":{"php/atttributes/":{}},"title":{}}],["copyact",{"_index":2114,"text":{"php/atttributes/":{}},"title":{}}],["copyfil",{"_index":2093,"text":{"php/atttributes/":{}},"title":{}}],["copyto",{"_index":1470,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["correct",{"_index":445,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["costli",{"_index":273,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/using-stack/":{},"ds/stack/using-queue/":{}},"title":{"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}}}],["count",{"_index":73,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"java/intro/":{},"java/intro/#why":{}},"title":{"ds/linked-list/count/":{},"ds/linked-list/count/#counting":{}}}],["counter",{"_index":1302,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["counterpart",{"_index":2214,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["countfreq(int",{"_index":572,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{}},"title":{}}],["cours",{"_index":2205,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["cout",{"_index":541,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["cout<<\"bi",{"_index":660,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["cout<<\"stack",{"_index":1249,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["cout<<\"th",{"_index":847,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{}},"title":{}}],["cout<<arr[i]<<\"",{"_index":658,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["cout<<curr",{"_index":967,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{}},"title":{}}],["cout<<endl;",{"_index":659,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["cout<<i[arr]<<\"",{"_index":662,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["cpp",{"_index":653,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vectors/":{}},"title":{"ds/array/vectors/":{},"ds/array/vectors/#vectors-in-cpp":{}}}],["cpu",{"_index":800,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{}},"title":{}}],["crash",{"_index":236,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["crbegin",{"_index":725,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{}},"title":{}}],["creat",{"_index":391,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#class":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["createqueue(unsign",{"_index":1048,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["creation",{"_index":1353,"text":{"java/annotations/":{}},"title":{}}],["creditcardnumb",{"_index":1447,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["crend",{"_index":726,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{}},"title":{}}],["critic",{"_index":1368,"text":{"java/annotations/":{}},"title":{}}],["ctime",{"_index":599,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["curr",{"_index":893,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{}},"title":{}}],["curr_siz",{"_index":1306,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["current",{"_index":396,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{}},"title":{}}],["currentrevis",{"_index":1374,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["custom",{"_index":1681,"text":{"java/collections/":{}},"title":{"java/collections/#custom-implementation":{}}}],["cycl",{"_index":443,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["cyclat",{"_index":798,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{}},"title":{}}],["d",{"_index":642,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"java/basics/":{},"java/basics/#control-flow":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["data",{"_index":131,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#how-to-optimise":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"java/annotations/":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/numbers/":{},"java/oops/":{}},"title":{"java/oops/#data-encapsulation":{}}}],["data_s",{"_index":867,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["data_typ",{"_index":677,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["databas",{"_index":1865,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["dataint",{"_index":939,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["datatyp",{"_index":915,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["date",{"_index":1341,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["dayofmonth",{"_index":1430,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["dayofweek",{"_index":1431,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["debug",{"_index":1683,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{"java/debugging/":{}}}],["decai",{"_index":563,"text":{"ds/array/decay/":{}},"title":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{}}}],["decid",{"_index":1734,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["decim",{"_index":1904,"text":{"java/numbers/":{},"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["decimalformat",{"_index":1924,"text":{"java/numbers/":{}},"title":{}}],["decimalformat(pattern);",{"_index":1926,"text":{"java/numbers/":{}},"title":{}}],["decis",{"_index":407,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["decison",{"_index":425,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["declar",{"_index":624,"text":{"ds/array/intro/":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{}},"title":{"ds/array/intro/#declaration":{}}}],["declart",{"_index":2271,"text":{"php/basics/":{}},"title":{"php/basics/#type-juggling-and-declartion":{}}}],["decreas",{"_index":1197,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["decrement",{"_index":1490,"text":{"java/basics/":{},"java/basics/#operators":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["default",{"_index":1375,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#control-flow":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/interfaces/#extending-interfaces-that-contain-default-methods":{}}}],["defin",{"_index":597,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#static-methods":{},"java/numbers/":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["definit",{"_index":1105,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["del",{"_index":851,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{}},"title":{}}],["delet",{"_index":633,"text":{"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/linked-list/deletion/":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#heap":{},"ds/queue/priority-queue/#linked-list":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#deletion":{},"ds/linked-list/dll/#deletion":{}}}],["deletefirst(struct",{"_index":829,"text":{"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#first":{}},"title":{}}],["deletefront",{"_index":972,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["deletehighestprior",{"_index":1085,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#operations":{}},"title":{}}],["deletemiddl",{"_index":1240,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["deletenode(node**",{"_index":850,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{}},"title":{}}],["deletenode(struct",{"_index":832,"text":{"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{}},"title":{}}],["deleterear",{"_index":974,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["depend",{"_index":1154,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["deploi",{"_index":1868,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["deploy",{"_index":1325,"text":{"java/annotations/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{"java/deployment/":{}}}],["deprec",{"_index":1390,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["dequ",{"_index":984,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#circular-array":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["deque(deletion)",{"_index":1041,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["deque(int",{"_index":998,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::deleterear()",{"_index":1013,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::getfront()",{"_index":1014,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::getrear()",{"_index":1016,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::insertfront(int",{"_index":1004,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::isempti",{"_index":1003,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::isfull()",{"_index":1001,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["dequeu",{"_index":968,"text":{"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/intro/#operations":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"java/collections/":{},"java/collections/#why":{}},"title":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/using-stack/#costly-dequeue":{}}}],["dequeue(queue*",{"_index":1057,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["deriv",{"_index":1701,"text":{"java/inheritance/":{}},"title":{}}],["descend",{"_index":1706,"text":{"java/inheritance/":{}},"title":{}}],["design",{"_index":1437,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#why":{}},"title":{"java/annotations/#design-considerations":{}}}],["desir",{"_index":287,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["desktop",{"_index":2288,"text":{"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["destroi",{"_index":737,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["detail",{"_index":528,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/collections/":{},"java/collections/#interfaces":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["detect",{"_index":341,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"java/annotations/":{},"java/generics/":{}},"title":{}}],["determin",{"_index":1754,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["dev",{"_index":1832,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["develop",{"_index":1861,"text":{"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"php/intro/":{}},"title":{}}],["diditwork(int",{"_index":1834,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["didn\u2019t",{"_index":324,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["differ",{"_index":755,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/array/vs-pointers/":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#polymorphism":{},"java/strings/":{},"java/strings/#why":{}},"title":{"ds/array/vs-pointers/#difference":{}}}],["difficult",{"_index":1690,"text":{"java/generics/":{}},"title":{}}],["digit",{"_index":1457,"text":{"java/basics/":{},"java/basics/#naming":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["dijkstra\u2019",{"_index":1088,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{}},"title":{}}],["dimens",{"_index":566,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{}},"title":{}}],["dimension",{"_index":691,"text":{"ds/array/multi-dimensional/":{}},"title":{"ds/array/multi-dimensional/#three-dimensional-array":{}}}],["direct",{"_index":744,"text":{"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/interfaces/":{}},"title":{}}],["directli",{"_index":2221,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["directori",{"_index":2022,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/atttributes/":{}},"title":{}}],["disadvantag",{"_index":632,"text":{"ds/array/intro/":{},"ds/linked-list/dll/":{}},"title":{"ds/array/intro/#disadvantages":{},"ds/linked-list/dll/#disadvantages":{}}}],["discourag",{"_index":1989,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["disk",{"_index":1028,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["displai",{"_index":1698,"text":{"java/helloworld/":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["disrupt",{"_index":1685,"text":{"java/exceptions/":{}},"title":{}}],["distancetocar",{"_index":1809,"text":{"java/interfaces/":{}},"title":{}}],["distribut",{"_index":125,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["divid",{"_index":103,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["divis",{"_index":1482,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["dll",{"_index":777,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/xor-dll/":{}},"title":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-dll":{}}}],["dllnode",{"_index":1243,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["do",{"_index":2251,"text":{"php/basics/":{},"php/basics/#object":{}},"title":{}}],["do_foo",{"_index":2250,"text":{"php/basics/":{},"php/basics/#object":{}},"title":{}}],["doc",{"_index":1881,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["doc)[http://www.phpdoc.org/]",{"_index":2148,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["doctyp",{"_index":2284,"text":{"php/intro/":{}},"title":{}}],["document",{"_index":1371,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{}},"title":{}}],["doe",{"_index":1349,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["doesn't",{"_index":2153,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["doesn\u2019t",{"_index":863,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["domain",{"_index":1995,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["done",{"_index":421,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"java/numbers/":{}},"title":{}}],["don\u2019t",{"_index":2228,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["doperiodiccleanup",{"_index":1419,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["dosometh",{"_index":1820,"text":{"java/interfaces/":{}},"title":{}}],["dosomethingelse(str",{"_index":1821,"text":{"java/interfaces/":{}},"title":{}}],["dot",{"_index":2042,"text":{"java/strings/":{}},"title":{}}],["doubl",{"_index":43,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#types":{}},"title":{}}],["doubli",{"_index":793,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/dll/":{},"ds/queue/dequeue/":{}},"title":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#doubly-ll":{},"ds/queue/dequeue/#doubly-linked-list":{}}}],["down",{"_index":90,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["drawback",{"_index":880,"text":{"ds/linked-list/intro/":{}},"title":{"ds/linked-list/intro/#drawbacks":{}}}],["driver",{"_index":551,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["ds",{"_index":876,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#linked-list":{},"java/collections/":{}},"title":{}}],["due",{"_index":932,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["dummi",{"_index":446,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{}},"title":{"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{}}}],["dummy.next.",{"_index":464,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{}},"title":{}}],["duplic",{"_index":1563,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["dynam",{"_index":879,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["dynarr",{"_index":923,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["e",{"_index":1594,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/interfaces/":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["e.g.",{"_index":927,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["e.getcolor()",{"_index":1572,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["e_notic",{"_index":2240,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["e_warn",{"_index":2238,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["each",{"_index":379,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{}},"title":{}}],["eas",{"_index":1960,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["easi",{"_index":454,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["easili",{"_index":833,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/intro/":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["ebook",{"_index":1350,"text":{"java/annotations/":{}},"title":{}}],["echo",{"_index":2121,"text":{"php/basics/":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#object":{},"php/basics/#types":{},"php/intro/":{}},"title":{}}],["eeprom",{"_index":440,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["effect",{"_index":2124,"text":{"php/basics/":{}},"title":{}}],["effici",{"_index":458,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#linked-list":{}},"title":{}}],["effort",{"_index":1548,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["eg",{"_index":799,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["egg",{"_index":2051,"text":{"java/strings/":{}},"title":{}}],["element",{"_index":21,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#iterators":{},"ds/array/vectors/#modifiers":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/array/vs-pointers/#similarities":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"java/annotations/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{}},"title":{"ds/array/vectors/#element-access":{}}}],["element,pop",{"_index":1193,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["elementari",{"_index":2203,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["elements.stream()",{"_index":1577,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["elimin",{"_index":1692,"text":{"java/generics/":{},"java/generics/#why":{}},"title":{}}],["elseif",{"_index":2100,"text":{"php/atttributes/":{}},"title":{}}],["embed",{"_index":930,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"php/intro/":{}},"title":{}}],["emplac",{"_index":757,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{}},"title":{}}],["emplace_back",{"_index":759,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{}},"title":{}}],["employees.stream()",{"_index":1582,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["empti",{"_index":392,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#how-to-optimise":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#problems":{}},"title":{}}],["empty\\n\";",{"_index":1250,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["enabl",{"_index":1691,"text":{"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"php/intro/":{}},"title":{}}],["encapsul",{"_index":1963,"text":{"java/oops/":{}},"title":{"java/oops/#data-encapsulation":{}}}],["enclos",{"_index":1721,"text":{"java/inheritance/":{},"java/packages/":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}}}],["end",{"_index":710,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/array/vectors/#modifiers":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#dequeue":{},"java/collections/":{},"java/collections/#interfaces":{},"java/intro/":{},"java/intro/#platform":{},"php/basics/":{}},"title":{}}],["endif",{"_index":2129,"text":{"php/basics/":{},"php/basics/#html-escaping":{}},"title":{}}],["endl",{"_index":581,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{}},"title":{}}],["endspe",{"_index":1804,"text":{"java/interfaces/":{}},"title":{}}],["enough",{"_index":741,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["enque(insertion)",{"_index":1040,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["enqueu",{"_index":1020,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/intro/#operations":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{"ds/queue/using-stack/#costly-enqueue":{}}}],["enqueue(int",{"_index":1064,"text":{"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}},"title":{}}],["enqueue(queue*",{"_index":1052,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["entir",{"_index":1962,"text":{"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{"java/packages/#importing-an-entire-package":{}}}],["entiti",{"_index":1335,"text":{"java/annotations/":{}},"title":{}}],["enum",{"_index":1800,"text":{"java/interfaces/":{}},"title":{}}],["enumer",{"_index":1768,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{}},"title":{}}],["environ",{"_index":1405,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["equal",{"_index":285,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/basics/":{},"java/basics/#javautilarrays":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["equals(object",{"_index":1749,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["equival",{"_index":2185,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["eras",{"_index":753,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{}},"title":{}}],["error",{"_index":229,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"java/annotations/":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["escap",{"_index":2126,"text":{"php/basics/":{}},"title":{"php/basics/#html-escaping":{}}}],["especi",{"_index":2282,"text":{"php/intro/":{}},"title":{}}],["etc",{"_index":622,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["even",{"_index":233,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["event",{"_index":1684,"text":{"java/exceptions/":{}},"title":{}}],["evid",{"_index":2015,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["evolv",{"_index":1830,"text":{"java/interfaces/":{}},"title":{"java/interfaces/#evolving-interfaces":{}}}],["exact",{"_index":2212,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["exactli",{"_index":2209,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["examin",{"_index":1330,"text":{"java/annotations/":{}},"title":{}}],["exampl",{"_index":221,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{}},"title":{}}],["except",{"_index":1365,"text":{"java/annotations/":{},"java/exceptions/":{}},"title":{"java/exceptions/":{}}}],["exclus",{"_index":1505,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["execut",{"_index":2090,"text":{"php/atttributes/":{},"php/intro/":{}},"title":{}}],["executeaction($copyaction);",{"_index":2117,"text":{"php/atttributes/":{}},"title":{}}],["executeaction(actionhandl",{"_index":2106,"text":{"php/atttributes/":{}},"title":{}}],["exercis",{"_index":100,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["exist",{"_index":1584,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["exit(0);",{"_index":1103,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}},"title":{}}],["exp",{"_index":1949,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["expect",{"_index":1779,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["expens",{"_index":439,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{}},"title":{}}],["explan",{"_index":2144,"text":{"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["explicit",{"_index":1727,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["explicitli",{"_index":1743,"text":{"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{}}],["exponenti",{"_index":5,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{}},"title":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}}}],["exponentialsearch(int",{"_index":52,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["express",{"_index":91,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"php/basics/":{},"php/basics/#html-escaping":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["ext",{"_index":806,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"java/strings/":{}},"title":{}}],["extend",{"_index":758,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/oops/":{},"java/oops/#inheritance":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"java/interfaces/#extending-interfaces-that-contain-default-methods":{}}}],["extens",{"_index":2041,"text":{"java/strings/":{}},"title":{}}],["extensionsepar",{"_index":2038,"text":{"java/strings/":{}},"title":{}}],["extern",{"_index":2276,"text":{"php/intro/":{}},"title":{}}],["extra",{"_index":536,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{}},"title":{"ds/stack/k-stacks/#extra-2-integer-arrays":{}}}],["extrem",{"_index":1186,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["f",{"_index":1515,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["factor",{"_index":926,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["fals",{"_index":575,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"java/strings/":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["fast",{"_index":480,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["fast/slow",{"_index":538,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["faster",{"_index":201,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["featur",{"_index":1134,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/java9%26beyond/":{}},"title":{}}],["few",{"_index":370,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{}},"title":{}}],["fibonici",{"_index":802,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{}},"title":{}}],["field",{"_index":1334,"text":{"java/annotations/":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/basics/#variables":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["fifo",{"_index":1019,"text":{"ds/queue/intro/":{},"ds/queue/intro/#queue":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["file",{"_index":1038,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/annotations/":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{},"java/packages/#why":{},"java/strings/":{},"php/basics/":{}},"title":{"java/packages/#managing-source-and-class-files":{}}}],["file(args[0]));",{"_index":1618,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["fileexist",{"_index":2095,"text":{"php/atttributes/":{}},"title":{}}],["filenam",{"_index":2035,"text":{"java/strings/":{},"php/atttributes/":{}},"title":{}}],["filename(str",{"_index":2039,"text":{"java/strings/":{}},"title":{}}],["fill",{"_index":347,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["filter(collection<?>",{"_index":1596,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["finaal",{"_index":1773,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["final",{"_index":1196,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["find",{"_index":23,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"java/generics/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["findm",{"_index":2053,"text":{"java/strings/":{}},"title":{}}],["findme.length();",{"_index":2057,"text":{"java/strings/":{}},"title":{}}],["findmelength",{"_index":2056,"text":{"java/strings/":{}},"title":{}}],["findmiddl",{"_index":1238,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["fine",{"_index":235,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{}},"title":{}}],["first",{"_index":20,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/deletion/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"php/basics/":{},"php/basics/#comments":{}},"title":{"ds/linked-list/deletion/#first":{}}}],["fit",{"_index":736,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["fix",{"_index":344,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["flash",{"_index":441,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["flexibl",{"_index":1441,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{}},"title":{}}],["float",{"_index":618,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{},"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{"php/basics/#float":{}}}],["floatvar",{"_index":1918,"text":{"java/numbers/":{}},"title":{}}],["floor",{"_index":1946,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["floor((0.1+0.7)*10)",{"_index":2217,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["flow",{"_index":1511,"text":{"java/basics/":{},"java/exceptions/":{}},"title":{"java/basics/#control-flow":{}}}],["follow",{"_index":70,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{}},"title":{}}],["font",{"_index":2139,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["foo",{"_index":2162,"text":{"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#object":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{}}],["foo(iter",{"_index":2249,"text":{"php/basics/":{},"php/basics/#iterable":{}},"title":{}}],["for(int",{"_index":656,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["foreach",{"_index":2109,"text":{"php/atttributes/":{},"php/basics/":{},"php/basics/#iterable":{}},"title":{}}],["forget",{"_index":861,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{}},"title":{}}],["form",{"_index":1318,"text":{"java/annotations/":{},"java/collections/":{},"java/inheritance/":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["format",{"_index":928,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["format(local",{"_index":1922,"text":{"java/numbers/":{}},"title":{}}],["former",{"_index":2080,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["formula",{"_index":72,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["forth",{"_index":1329,"text":{"java/annotations/":{}},"title":{}}],["forward",{"_index":296,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["foster",{"_index":1555,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["found",{"_index":28,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"java/strings/":{}},"title":{}}],["foundit",{"_index":1528,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{}},"title":{}}],["four",{"_index":2167,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["framework",{"_index":1415,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/collections/":{}},"title":{}}],["franklin",{"_index":1340,"text":{"java/annotations/":{}},"title":{}}],["free",{"_index":1210,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["free(del);",{"_index":852,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{}},"title":{}}],["free(head);",{"_index":1251,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["free(temp);",{"_index":831,"text":{"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["frequenc",{"_index":571,"text":{"ds/array/frequency/":{}},"title":{"ds/array/frequency/":{},"ds/array/frequency/#frequency-of-a-number":{}}}],["frequent",{"_index":1851,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["friendli",{"_index":883,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{}},"title":{}}],["front",{"_index":532,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/intro/#operations":{}},"title":{"ds/linked-list/insertion/#front-o1":{}}}],["front(get",{"_index":1042,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["front(queue*",{"_index":1060,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["front+1;",{"_index":1012,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["frontbacksplit(head,",{"_index":470,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["frontbacksplit(node*",{"_index":476,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["frontref",{"_index":478,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["full",{"_index":409,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["fulli",{"_index":1991,"text":{"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{}},"title":{}}],["fullpath",{"_index":2036,"text":{"java/strings/":{}},"title":{}}],["fullpath.lastindexof(extensionseparator);",{"_index":2043,"text":{"java/strings/":{}},"title":{}}],["fullpath.lastindexof(pathseparator);",{"_index":2045,"text":{"java/strings/":{}},"title":{}}],["fullpath.substring(0,",{"_index":2047,"text":{"java/strings/":{}},"title":{}}],["fullpath.substring(dot",{"_index":2044,"text":{"java/strings/":{}},"title":{}}],["fullpath.substring(sep",{"_index":2046,"text":{"java/strings/":{}},"title":{}}],["function",{"_index":520,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/min-max/":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/functions/":{},"ds/queue/using-stack/":{},"java/collections/":{},"java/inheritance/":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#why":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{},"php/basics/#iterable":{},"php/basics/#object":{},"php/basics/#types":{}},"title":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/min-max/#library-functions":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}}}],["functionalinterfac",{"_index":1394,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["g",{"_index":742,"text":{"ds/array/vectors/":{},"ds/array/vectors/#element-access":{}},"title":{}}],["garbag",{"_index":1752,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["gatewai",{"_index":2273,"text":{"php/intro/":{}},"title":{}}],["gear",{"_index":1983,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["gearratio",{"_index":1462,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["gener",{"_index":600,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"php/intro/":{}},"title":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"java/generics/":{}}}],["generalis",{"_index":969,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#dequeue":{}},"title":{}}],["generateprintbinary(int",{"_index":1068,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["generation2list",{"_index":1387,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["generation3list",{"_index":1386,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["get",{"_index":1785,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/strings/":{}},"title":{}}],["get_resource_typ",{"_index":2253,"text":{"php/basics/":{},"php/basics/#reources":{}},"title":{}}],["getasdoubl",{"_index":1649,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{}},"title":{}}],["getclass",{"_index":1755,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["getcount(head",{"_index":828,"text":{"ds/linked-list/count/":{},"ds/linked-list/count/#recursive":{}},"title":{}}],["getcount(node*",{"_index":826,"text":{"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{}},"title":{}}],["getcount(struct",{"_index":827,"text":{"ds/linked-list/count/":{},"ds/linked-list/count/#recursive":{}},"title":{}}],["getfield",{"_index":1771,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["getfront",{"_index":977,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["gethighest",{"_index":1086,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{}},"title":{}}],["gethighestprior",{"_index":1084,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#operations":{}},"title":{}}],["getmax(arr",{"_index":670,"text":{"ds/array/min-max/":{},"ds/array/min-max/#recursive":{}},"title":{}}],["getmax(int",{"_index":668,"text":{"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{}},"title":{}}],["getmethod",{"_index":1772,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/atttributes/":{}},"title":{}}],["getmin",{"_index":1260,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["getmin(arr",{"_index":667,"text":{"ds/array/min-max/":{},"ds/array/min-max/#recursive":{}},"title":{}}],["getmin(int",{"_index":664,"text":{"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{}},"title":{}}],["getnam",{"_index":2113,"text":{"php/atttributes/":{}},"title":{}}],["getradarfront(doubl",{"_index":1808,"text":{"java/interfaces/":{}},"title":{}}],["getradarrear(doubl",{"_index":1811,"text":{"java/interfaces/":{}},"title":{}}],["getrandom",{"_index":602,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["getrear",{"_index":978,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["gettyp",{"_index":2156,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["gettype($a_bool);",{"_index":2165,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["gettype($a_str);",{"_index":2166,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["give",{"_index":455,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"java/intro/":{},"java/intro/#programming-language":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["given",{"_index":394,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{}},"title":{}}],["global",{"_index":856,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["gmp",{"_index":2225,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["go",{"_index":537,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["goe",{"_index":1388,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["good",{"_index":795,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"java/intro/":{},"java/intro/#why":{},"php/security/":{}},"title":{}}],["grade",{"_index":1514,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["graph",{"_index":1087,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["graphic",{"_index":338,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{}}],["graphics.rectangle.*;",{"_index":2008,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["graphics.rectangle;",{"_index":2005,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#importing-a-package-member":{}},"title":{}}],["grater",{"_index":1190,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["greater",{"_index":39,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{}},"title":{}}],["green",{"_index":2050,"text":{"java/strings/":{}},"title":{}}],["group",{"_index":1536,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/packages/":{}},"title":{}}],["groupedinterfac",{"_index":1813,"text":{"java/interfaces/":{}},"title":{}}],["grow",{"_index":1152,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["gt",{"_index":246,"text":{},"title":{"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"java/basics/#expressions-result9-blocks-statements-":{}}}],["gui",{"_index":1873,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["guid",{"_index":1892,"text":{"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["hair",{"_index":816,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["half",{"_index":218,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["halv",{"_index":106,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["ham",{"_index":2052,"text":{"java/strings/":{}},"title":{}}],["hand",{"_index":2119,"text":{"php/basics/":{}},"title":{}}],["handler",{"_index":1688,"text":{"java/exceptions/":{}},"title":{}}],["hanoi",{"_index":1138,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["happen",{"_index":2082,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["hardwar",{"_index":1860,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["hash",{"_index":164,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#searching":{},"ds/array/frequency/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{"ds/array/frequency/#hashing":{}}}],["hashcod",{"_index":1756,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["hashmap<string,",{"_index":1614,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["hasnext",{"_index":1593,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["head",{"_index":398,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#insertion":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"php/intro/":{}},"title":{}}],["head_ref",{"_index":546,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{}},"title":{}}],["headref",{"_index":466,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["heap",{"_index":803,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/priority-queue/":{}},"title":{"ds/queue/priority-queue/#heap":{}}}],["heapsort",{"_index":435,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["height",{"_index":424,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["hello",{"_index":2256,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["helloworld",{"_index":1694,"text":{},"title":{"java/helloworld/":{}}}],["helloworldapp",{"_index":1695,"text":{"java/helloworld/":{}},"title":{}}],["help",{"_index":2136,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["henc",{"_index":434,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["here",{"_index":448,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/oops/":{},"java/oops/#inheritance":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["hexadecim",{"_index":1906,"text":{"java/numbers/":{},"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["hi",{"_index":141,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"php/intro/":{}},"title":{}}],["hidden",{"_index":1786,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["hide",{"_index":1713,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/oops/#why":{}},"title":{"java/inheritance/#overriding-and-hiding-methods":{}}}],["hierarch",{"_index":2018,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["hierarchi",{"_index":1544,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/packages/":{}},"title":{"java/packages/#apparent-hierarchies-of-packages":{}}}],["high",{"_index":198,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{}},"title":{}}],["higher",{"_index":2222,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["highest",{"_index":1082,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#heap":{},"ds/queue/priority-queue/#queue-with-properties":{}},"title":{}}],["histogram",{"_index":1140,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["histor",{"_index":1831,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["hold",{"_index":1564,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["home",{"_index":0,"text":{},"title":{"":{}}}],["hour",{"_index":1433,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["hour=\"23\")",{"_index":1418,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["html",{"_index":2125,"text":{"php/basics/":{},"php/basics/#comments":{},"php/intro/":{}},"title":{"php/basics/#html-escaping":{}}}],["http",{"_index":526,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["http://locklessinc.com/articles/binary_search/",{"_index":209,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["http://wiki.c2.com/?globalvariablesarebad",{"_index":860,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{}},"title":{}}],["https://4comprehension.com/keep",{"_index":1889,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://codete.com/blog/java",{"_index":1890,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://dev.to/awwsmm/20",{"_index":1887,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://www.infoworld.com/article/3606833/jdk",{"_index":1894,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://www.javatpoint.com/java",{"_index":1893,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://www.marcobehler.com/guides/a",{"_index":1896,"text":{"java/java9%26beyond/":{}},"title":{}}],["huge",{"_index":437,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["human",{"_index":2157,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["hypertext",{"_index":2278,"text":{"php/intro/":{}},"title":{}}],["hyphen",{"_index":2000,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["i'm",{"_index":2286,"text":{"php/intro/":{}},"title":{}}],["i*2;",{"_index":64,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["i+1;",{"_index":304,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["i.e.",{"_index":294,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{}},"title":{}}],["i/2",{"_index":46,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["i/2,",{"_index":66,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["i/2?",{"_index":47,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["i<data_size;",{"_index":870,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["i<n",{"_index":1223,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["i=0;",{"_index":1222,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["i=0;i<6;i++)",{"_index":657,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["idea",{"_index":22,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"ds/array/intro/":{},"ds/array/intro/#why":{}},"title":{}}],["ident",{"_index":1659,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["idl",{"_index":1876,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["ieee",{"_index":2199,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["if(!(m",{"_index":1245,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["if(*head_ref",{"_index":830,"text":{"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#first":{}},"title":{}}],["if(a",{"_index":494,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{}},"title":{}}],["if(isempty()",{"_index":1017,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["if(st.size()",{"_index":1263,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["if(st.size()>0)",{"_index":1269,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["if(temp",{"_index":854,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["ignor",{"_index":1399,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["iiop",{"_index":1880,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["imag",{"_index":511,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["immedi",{"_index":1024,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["immut",{"_index":2030,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["impact",{"_index":281,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["implement",{"_index":387,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/generic/":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/collections/":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/queue/dequeue/#implementation":{},"ds/queue/intro/#implementation":{},"ds/queue/priority-queue/#implementation":{},"ds/stack/intro/#implementation":{},"java/collections/#custom-implementation":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}}}],["implicit",{"_index":1724,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["implicitli",{"_index":1719,"text":{"java/inheritance/":{},"java/interfaces/":{}},"title":{}}],["import",{"_index":1427,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/numbers/#advanced-math":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#importing-a-package-member":{},"java/packages/#importing-an-entire-package":{},"java/packages/#static-import":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#importing-a-package-member":{},"java/packages/#importing-an-entire-package":{},"java/packages/#static-import":{}}}],["imposs",{"_index":510,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["improv",{"_index":129,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{}},"title":{}}],["inbuilt",{"_index":1389,"text":{"java/annotations/":{}},"title":{"java/annotations/#java-inbuilt":{}}}],["includ",{"_index":239,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#name-ambiguities":{},"java/packages/#why":{}},"title":{}}],["inclus",{"_index":1507,"text":{"java/basics/":{},"java/basics/#operators":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["increas",{"_index":159,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"java/collections/":{},"java/collections/#why":{}},"title":{}}],["increment",{"_index":355,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/oops/":{},"java/oops/#interface":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["independ",{"_index":1560,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["index",{"_index":41,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"ds/array/intro/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}}}],["indic",{"_index":1486,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["indirect",{"_index":1723,"text":{"java/inheritance/":{}},"title":{}}],["individu",{"_index":1968,"text":{"java/oops/":{},"java/oops/#class":{}},"title":{}}],["ineffici",{"_index":1185,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["infinit",{"_index":18,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["infix",{"_index":1127,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["inform",{"_index":1321,"text":{"java/annotations/":{},"java/oops/":{},"java/oops/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["infrequ",{"_index":2003,"text":{"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{}}],["inheret",{"_index":1410,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["inherit",{"_index":1408,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/oops/":{}},"title":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/oops/#inheritance":{}}}],["initi",{"_index":457,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["inner",{"_index":322,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["input",{"_index":104,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["insert",{"_index":359,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/insertion/":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/xor-dll/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#heap":{},"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#insertion":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/xor-dll/#insert":{}}}],["insert(item,",{"_index":1083,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#operations":{}},"title":{}}],["insert(nod",{"_index":964,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{}},"title":{}}],["insert_at_bottom(char",{"_index":1262,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["insert_at_bottom(x);",{"_index":1267,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["insertafter(node*",{"_index":845,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{}},"title":{}}],["insertfront",{"_index":971,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["insertfront(int",{"_index":999,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["insertionsort(int",{"_index":360,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["insertrear",{"_index":973,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["insertrear(int",{"_index":1000,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["insid",{"_index":1959,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["instanc",{"_index":156,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"java/annotations/":{},"java/basics/":{},"java/basics/#variables":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/oops/":{},"java/oops/#class":{}},"title":{}}],["instanceof",{"_index":1500,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["instanti",{"_index":1774,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{}},"title":{}}],["instead",{"_index":291,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["instruct",{"_index":1687,"text":{"java/exceptions/":{}},"title":{}}],["int",{"_index":51,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/intro/#introduction":{},"ds/array/intro/#traversal":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["int)high))",{"_index":207,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["int)low",{"_index":206,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["int[10];",{"_index":1465,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["int[k];",{"_index":1220,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["int[n];",{"_index":1219,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["int_max",{"_index":1235,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["int_min",{"_index":1059,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["integ",{"_index":1207,"text":{"ds/stack/k-stacks/":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/numbers/":{},"php/basics/":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{"ds/stack/k-stacks/#extra-2-integer-arrays":{},"php/basics/#integers":{}}}],["integer.parseint(args[1]);",{"_index":1608,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["integer::sum)));",{"_index":1680,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["integr",{"_index":1874,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["interact",{"_index":1964,"text":{"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["interfac",{"_index":1372,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/intro/":{},"java/intro/#platform":{},"java/oops/":{},"java/oops/#interface":{},"java/oops/#package":{},"java/packages/":{},"php/atttributes/":{},"php/intro/":{}},"title":{"java/collections/#interfaces":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/oops/#interface":{}}}],["interface1",{"_index":1814,"text":{"java/interfaces/":{}},"title":{}}],["interface2",{"_index":1815,"text":{"java/interfaces/":{}},"title":{}}],["interface3",{"_index":1816,"text":{"java/interfaces/":{}},"title":{}}],["intern",{"_index":416,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"java/annotations/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["internet",{"_index":1994,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["interoper",{"_index":1551,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{"java/collections/#interoperability":{}}}],["interpol",{"_index":122,"text":{"Search%20%26%20Sort/Search/interpolation/":{}},"title":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{}}}],["interpolationsearch(arr,",{"_index":153,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{}},"title":{}}],["interpolationsearch(int",{"_index":140,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{}},"title":{}}],["intersect",{"_index":358,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["intro",{"_index":2272,"text":{},"title":{"php/intro/":{}}}],["introduct",{"_index":614,"text":{"ds/array/intro/":{}},"title":{"ds/array/intro/":{},"ds/array/intro/#introduction":{}}}],["intvar",{"_index":1919,"text":{"java/numbers/":{}},"title":{}}],["invalid",{"_index":1520,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["invert",{"_index":1494,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["invoc",{"_index":1741,"text":{"java/inheritance/":{}},"title":{"java/inheritance/#virtual-method-invocation":{}}}],["invok",{"_index":1718,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#super-keyword":{}},"title":{}}],["involv",{"_index":1092,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["io",{"_index":1035,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{"java/IO/":{}}}],["ioexcept",{"_index":1630,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["iostream",{"_index":598,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["is_typ",{"_index":2159,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["isannot",{"_index":1766,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["isempti",{"_index":976,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#stack":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["isempty(int",{"_index":1214,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["isempty(queue*",{"_index":1051,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["isempty(stacknode*",{"_index":1175,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["isenum",{"_index":1769,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["isful",{"_index":975,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["isfull(queue*",{"_index":1050,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["isinterfac",{"_index":1767,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["islargerthan",{"_index":1823,"text":{"java/interfaces/":{}},"title":{}}],["islargerthan(relat",{"_index":1824,"text":{"java/interfaces/":{}},"title":{}}],["it'",{"_index":1882,"text":{"java/intro/":{},"java/intro/#why":{},"java/strings/":{},"java/strings/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["it.hasnext();",{"_index":1598,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["it.remove();",{"_index":1600,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["item",{"_index":378,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["iter",{"_index":50,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/reverse/":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/linked-list/count/":{},"ds/linked-list/reverse/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#iterable":{},"php/basics/#types":{}},"title":{"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"ds/array/reverse/#iterative":{},"ds/array/vectors/#iterators":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/reverse/#iterative":{},"java/collections/#aggregate-operations-vs-iterators":{},"php/basics/#iterable":{}}}],["iterator<e>",{"_index":1592,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["ith",{"_index":381,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["itself",{"_index":1320,"text":{"java/annotations/":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["j",{"_index":302,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{}},"title":{}}],["jane",{"_index":1348,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["januari",{"_index":1519,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["jar",{"_index":2028,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["java",{"_index":199,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/java9%26beyond/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#naming":{},"java/packages/#static-import":{},"java/strings/":{}},"title":{"java/annotations/#java-inbuilt":{},"java/intro/":{},"java/intro/#what-is-java":{}}}],["java.awt",{"_index":2013,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["java.awt.xxxx",{"_index":2012,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["java.io.*;",{"_index":1603,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["java.lang",{"_index":1765,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["java.lang.annot",{"_index":1332,"text":{"java/annotations/":{}},"title":{}}],["java.lang.annotation.repeatable;",{"_index":1428,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["java.lang.math.*;",{"_index":1942,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["java.lang.str",{"_index":1451,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["java.text.decimalformat(...)",{"_index":1923,"text":{"java/numbers/":{}},"title":{}}],["java.util.*;",{"_index":1602,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["java.util.arrai",{"_index":1472,"text":{"java/basics/":{}},"title":{"java/basics/#javautilarrays":{}}}],["java.util.arrays.copyofrange(copyfrom,",{"_index":1471,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["java.util.arrays.stream(copyto).map(coffe",{"_index":1475,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["java.util.random",{"_index":1953,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["java9&beyond",{"_index":1886,"text":{},"title":{"java/java9%26beyond/":{}}}],["javabean",{"_index":1884,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["javac",{"_index":1862,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["javadoc",{"_index":1406,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/helloworld/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["javafx",{"_index":1870,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["javase/tutori",{"_index":1844,"text":{"java/intro/":{},"java/intro/#what-is-java":{}},"title":{}}],["javax",{"_index":1998,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["jdbc",{"_index":1877,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{"java/jdbc/":{}}}],["jndi",{"_index":1878,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["job",{"_index":992,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["john",{"_index":1351,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["join",{"_index":1576,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["jone",{"_index":1468,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["jsp",{"_index":1897,"text":{},"title":{"java/jsp/":{}}}],["juggl",{"_index":2270,"text":{"php/basics/":{}},"title":{"php/basics/#type-juggling-and-declartion":{}}}],["jump",{"_index":247,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}}}],["jumpsearch(int",{"_index":259,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["jvm",{"_index":1403,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["k",{"_index":985,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#k-stacks":{}}}],["k1",{"_index":1217,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["keep",{"_index":1194,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["kei",{"_index":158,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{}},"title":{}}],["key(let\u2019",{"_index":283,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["keyword",{"_index":1460,"text":{"java/basics/":{},"java/basics/#naming":{},"java/inheritance/":{},"java/packages/":{},"java/packages/#naming":{}},"title":{"java/inheritance/#super-keyword":{}}}],["knight",{"_index":1142,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["know",{"_index":44,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"java/interfaces/":{}},"title":{}}],["known",{"_index":1562,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/oops/":{},"java/oops/#class":{}},"title":{}}],["kstack",{"_index":1209,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["kstacks(int",{"_index":1211,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["kstacks::kstacks(int",{"_index":1216,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["kstacks::pop(int",{"_index":1232,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["kstacks::push(int",{"_index":1226,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["l",{"_index":110,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{}},"title":{}}],["l)/3;",{"_index":114,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["l.add(word);",{"_index":1628,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["l=new",{"_index":1626,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["lambda",{"_index":1655,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["languag",{"_index":1845,"text":{"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#naming":{},"java/strings/":{},"php/intro/":{}},"title":{"java/intro/#programming-language":{}}}],["larg",{"_index":232,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["larger",{"_index":2204,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["largest",{"_index":256,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["last",{"_index":33,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#iterators":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"php/basics/":{},"php/basics/#float":{}},"title":{"ds/linked-list/insertion/#last-on":{}}}],["lastmodifi",{"_index":1376,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["lastmodifiedbi",{"_index":1378,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["lastptrref",{"_index":490,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{}},"title":{}}],["lead",{"_index":2215,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["leaf",{"_index":415,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["learn",{"_index":1554,"text":{"java/collections/":{},"java/collections/#why":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["leav",{"_index":422,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["left",{"_index":172,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{}},"title":{}}],["leftlast",{"_index":784,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}},"title":{}}],["leftlist",{"_index":782,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}},"title":{}}],["len",{"_index":2065,"text":{"java/strings/":{}},"title":{}}],["length",{"_index":178,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#naming":{}},"title":{}}],["less",{"_index":631,"text":{"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["let",{"_index":1837,"text":{"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["letter",{"_index":1456,"text":{"java/basics/":{},"java/basics/#naming":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["level",{"_index":1398,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["librari",{"_index":671,"text":{"ds/array/min-max/":{},"java/intro/":{},"java/intro/#platform":{},"java/oops/":{}},"title":{"ds/array/min-max/#library-functions":{},"java/oops/#library":{}}}],["library.package.class",{"_index":1993,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["life",{"_index":1123,"text":{"ds/stack/intro/":{},"ds/stack/intro/#stack":{}},"title":{}}],["lifespan",{"_index":442,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["lifo/filo",{"_index":1121,"text":{"ds/stack/intro/":{},"ds/stack/intro/#stack":{}},"title":{}}],["limit",{"_index":2198,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["line",{"_index":349,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"java/helloworld/":{},"java/strings/":{},"php/basics/":{},"php/basics/#comments":{},"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["linear",{"_index":166,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{}},"title":{"Search%20%26%20Sort/Search/intro/#linear-search":{}}}],["link",{"_index":388,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#how-to-optimise":{},"ds/linked-list/vs-array/#linked-list":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/priority-queue/":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"php/security/":{}},"title":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/linked-list/vs-array/#linked-list-vs-arrays":{},"ds/queue/dequeue/#doubly-linked-list":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/#linked-list":{},"ds/stack/intro/#linked-list":{}}}],["linkedlistnod",{"_index":902,"text":{"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["list",{"_index":389,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#how-to-optimise":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/priority-queue/":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/linked-list/vs-array/#linked-list-vs-arrays":{},"ds/queue/dequeue/#doubly-linked-list":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/#linked-list":{},"ds/stack/intro/#linked-list":{}}}],["list<@readonli",{"_index":1362,"text":{"java/annotations/":{}},"title":{}}],["list<string>",{"_index":1623,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["list<string>>",{"_index":1613,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["list<string>>();",{"_index":1615,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["liter",{"_index":2032,"text":{"java/strings/":{}},"title":{}}],["littl",{"_index":2242,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["ll",{"_index":791,"text":{"ds/linked-list/cll/":{},"ds/linked-list/dll/":{},"ds/linked-list/reverse/":{}},"title":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#reverse-ll":{}}}],["lo",{"_index":134,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{}},"title":{}}],["local",{"_index":489,"text":{"Search%20%26%20Sort/Sort/merge/":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/basics/":{},"java/basics/#variables":{},"java/strings/":{},"java/strings/#why":{}},"title":{"Search%20%26%20Sort/Sort/merge/#local-reference":{}}}],["locat",{"_index":377,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{}},"title":{}}],["log",{"_index":127,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["log(log(n))",{"_index":155,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{}},"title":{}}],["log2(n!)",{"_index":430,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["log23",{"_index":96,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["log2n",{"_index":93,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["logarithm",{"_index":1818,"text":{"java/interfaces/":{}},"title":{}}],["logic",{"_index":1492,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["logn",{"_index":1067,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["long",{"_index":1446,"text":{"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{}},"title":{}}],["look",{"_index":2026,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["loop",{"_index":323,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#simple":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["loss",{"_index":564,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["low",{"_index":197,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["lower",{"_index":399,"text":{"Search%20%26%20Sort/Sort/intro/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#naming":{}},"title":{"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}}}],["m",{"_index":193,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}}}],["m.get(alpha);",{"_index":1624,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["m.put(alpha,",{"_index":1625,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["m.values())",{"_index":1635,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["machin",{"_index":1402,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#programming-language":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["made",{"_index":290,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["main",{"_index":230,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{"ds/linked-list/bin-tree-cdll/#main-function":{}}}],["main(string[]",{"_index":1605,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/strings/":{}},"title":{}}],["maintain",{"_index":957,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#how-to-optimise":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["major",{"_index":676,"text":{"ds/array/multi-dimensional/":{}},"title":{"ds/array/multi-dimensional/#row-major-in-c":{}}}],["make",{"_index":160,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/basics/":{},"java/basics/#control-flow":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["male",{"_index":1671,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["malloc",{"_index":933,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{}},"title":{}}],["malloc(data_size);",{"_index":868,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["manag",{"_index":935,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/packages/#managing-source-and-class-files":{}}}],["mani",{"_index":623,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/intro/#why":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#polymorphism":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{}}],["manipul",{"_index":844,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"java/collections/":{},"java/collections/#interfaces":{},"java/intro/":{},"java/intro/#platform":{},"java/numbers/":{}},"title":{}}],["manner",{"_index":1567,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["mantissa",{"_index":2213,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["map",{"_index":1558,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["map<person.sex,",{"_index":1673,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["map<string,",{"_index":1612,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["mapper",{"_index":1679,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["mark",{"_index":1192,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["match",{"_index":2006,"text":{"java/packages/":{},"java/packages/#importing-an-entire-package":{},"java/strings/":{}},"title":{}}],["math",{"_index":1941,"text":{"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{"java/numbers/#advanced-math":{}}}],["matter",{"_index":1711,"text":{"java/inheritance/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["max",{"_index":663,"text":{"ds/array/min-max/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{"ds/array/min-max/":{},"ds/array/min-max/#min-max":{}}}],["max(arr[0],",{"_index":669,"text":{"ds/array/min-max/":{},"ds/array/min-max/#recursive":{}},"title":{}}],["max_siz",{"_index":730,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["max_valu",{"_index":1901,"text":{"java/numbers/":{}},"title":{}}],["maximum",{"_index":366,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["maze",{"_index":1144,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["mean",{"_index":1589,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["mechan",{"_index":1956,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["medium",{"_index":1236,"text":{"ds/stack/medium-special/":{}},"title":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}}}],["mem",{"_index":836,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{}},"title":{}}],["member",{"_index":770,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/inheritance/":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{"java/packages/#importing-a-package-member":{}}}],["member'",{"_index":2004,"text":{"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#name-ambiguities":{}},"title":{}}],["memori",{"_index":271,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{}}}],["mention",{"_index":1836,"text":{"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["merg",{"_index":101,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#merge-sort":{}}}],["mergesort",{"_index":513,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["mergesort(&a);",{"_index":471,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["mergesort(&b);",{"_index":472,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["mergesort(node**",{"_index":465,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["meta",{"_index":885,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"java/annotations/":{}},"title":{"java/annotations/#meta-annotations":{}}}],["metadata",{"_index":1319,"text":{"java/annotations/":{}},"title":{}}],["method",{"_index":889,"text":{"ds/linked-list/reverse/":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"java/annotations/":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/interfaces/#static-methods":{},"java/intro/":{},"java/intro/#why":{},"java/numbers/":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/oops/#inheritance":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#static-import":{},"java/strings/":{},"java/strings/#why":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"ds/linked-list/reverse/#tail-recursive-method":{},"java/collections/#streamcollect-method":{},"java/inheritance/#abstract-methods-and-classes":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/interfaces/#static-methods":{}}}],["method:\"<<endl;",{"_index":661,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["methodnam",{"_index":2112,"text":{"php/atttributes/":{}},"title":{}}],["mid",{"_index":196,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["mid1",{"_index":113,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["mid1+1,",{"_index":121,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["mid2",{"_index":115,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["mid2+1,",{"_index":120,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["middl",{"_index":1239,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["midpoint",{"_index":487,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["min",{"_index":310,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"ds/array/min-max/":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{"ds/array/min-max/":{},"ds/array/min-max/#min-max":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{}}}],["min(arr[0],",{"_index":666,"text":{"ds/array/min-max/":{},"ds/array/min-max/#recursive":{}},"title":{}}],["min(i,",{"_index":67,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["min(step,",{"_index":266,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["min.pop();",{"_index":1255,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["min.push(x);",{"_index":1254,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["min.push(y);",{"_index":1256,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["min<(n/m)",{"_index":254,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["min_idx",{"_index":303,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["min_valu",{"_index":1900,"text":{"java/numbers/":{}},"title":{}}],["mingroups",{"_index":1607,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["minimum",{"_index":292,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{}},"title":{"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{}}}],["minu",{"_index":1487,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["minut",{"_index":1975,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["misplac",{"_index":371,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["mix",{"_index":1775,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["mkdir($thi",{"_index":2099,"text":{"php/atttributes/":{}},"title":{}}],["modifi",{"_index":746,"text":{"ds/array/vectors/":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#insertion":{},"java/basics/":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{"ds/array/vectors/#modifiers":{},"java/basics/#access-modifiers":{}}}],["modul",{"_index":934,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["modular",{"_index":1957,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["mon",{"_index":1432,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["monitortemperatur",{"_index":1366,"text":{"java/annotations/":{}},"title":{}}],["month",{"_index":1517,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["monthstr",{"_index":1518,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["more",{"_index":98,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{},"php/basics/":{}},"title":{"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}}}],["mountain",{"_index":1970,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["mountainbik",{"_index":1726,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["move",{"_index":216,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"java/java9%26beyond/":{}},"title":{}}],["movenode(lastptrref,",{"_index":495,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{}},"title":{}}],["mp",{"_index":583,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["mp[arr[i]]++;",{"_index":584,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["mr",{"_index":1466,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["ms",{"_index":1242,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["much",{"_index":219,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["multi",{"_index":1913,"text":{"java/numbers/":{}},"title":{}}],["multidimension",{"_index":674,"text":{"ds/array/multi-dimensional/":{}},"title":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#multidimensional-arrays":{}}}],["multilin",{"_index":1699,"text":{"java/helloworld/":{}},"title":{}}],["multimap",{"_index":1611,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["multipl",{"_index":857,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/strings/":{},"java/strings/#why":{}},"title":{"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}}}],["multithread",{"_index":1853,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["mut",{"_index":1588,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["mutat",{"_index":1662,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["my_callback_funct",{"_index":2255,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["myanim",{"_index":1793,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["myanimal.testinstancemethod();",{"_index":1795,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["mybik",{"_index":1728,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["mycallbackmethod",{"_index":2257,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["mycat",{"_index":1792,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["myclass",{"_index":1343,"text":{"java/annotations/":{},"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["mydeck.sort(",{"_index":1841,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["myformatt",{"_index":1925,"text":{"java/numbers/":{}},"title":{}}],["myformatter.format(value);",{"_index":1927,"text":{"java/numbers/":{}},"title":{}}],["myfunct",{"_index":592,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["myfunction(int",{"_index":588,"text":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{}},"title":{}}],["mymethod",{"_index":1346,"text":{"java/annotations/":{}},"title":{}}],["myobject",{"_index":1354,"text":{"java/annotations/":{}},"title":{}}],["myshapescollection.stream()",{"_index":1570,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["mystr",{"_index":1356,"text":{"java/annotations/":{}},"title":{}}],["mysupermethod",{"_index":1337,"text":{"java/annotations/":{}},"title":{}}],["n",{"_index":10,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#simple":{},"ds/queue/print-binary/#using-queues":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["n/k",{"_index":1206,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{}},"title":{}}],["n1",{"_index":1218,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["naiv",{"_index":1282,"text":{"ds/stack/stock-span/":{}},"title":{"ds/stack/stock-span/#naive":{}}}],["name",{"_index":769,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"java/annotations/":{},"java/basics/":{},"java/basics/#arrays":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{},"java/packages/#why":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"java/basics/#naming":{},"java/packages/#by-its-qualified-name":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{}}}],["namespac",{"_index":516,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"java/oops/":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["nano",{"_index":1763,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["nativ",{"_index":1850,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["natur",{"_index":1817,"text":{"java/interfaces/":{}},"title":{}}],["necessari",{"_index":2223,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["necessarili",{"_index":1031,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["need",{"_index":512,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["negat",{"_index":1488,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["nest",{"_index":1720,"text":{"java/inheritance/":{},"java/packages/":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}}}],["network",{"_index":1864,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{"java/networking/":{}}}],["neutral",{"_index":1854,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["never",{"_index":269,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["new",{"_index":453,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/basics/":{},"java/basics/#arrays":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/java9%26beyond/":{},"java/numbers/":{},"java/oops/":{},"java/oops/#inheritance":{},"java/packages/":{},"java/packages/#why":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#object":{}},"title":{}}],["new_data",{"_index":547,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["new_dllnod",{"_index":1244,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["new_nod",{"_index":548,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{}},"title":{}}],["newnode(data);",{"_index":1177,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["newnode(int",{"_index":1174,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["newvalu",{"_index":1977,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["next",{"_index":469,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["next[i]",{"_index":1224,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["next[i];",{"_index":1229,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["next[n",{"_index":1225,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["nextindex",{"_index":940,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["node",{"_index":395,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/vs-array/#linked-list":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"ds/linked-list/insertion/#after-node-o1":{}}}],["node'",{"_index":953,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["node*)malloc(sizeof(struct",{"_index":808,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["non",{"_index":877,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"java/basics/":{},"java/basics/#variables":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["nonnul",{"_index":1357,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}},"title":{}}],["normal",{"_index":375,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"java/exceptions/":{}},"title":{}}],["notat",{"_index":1382,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["note",{"_index":2,"text":{"":{},"#abhinavs-notes":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/strings/":{},"java/strings/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{"#abhinavs-notes":{}}}],["noth",{"_index":2180,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["notic",{"_index":2141,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["notifi",{"_index":1758,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["notifyal",{"_index":1759,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["now",{"_index":2154,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["npx",{"_index":838,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{}},"title":{}}],["nstack",{"_index":1227,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["null",{"_index":467,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["num_gear",{"_index":1463,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["number",{"_index":295,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/frequency/":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/numbers/":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#naming":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#float":{},"php/basics/#integers":{},"php/basics/#types":{}},"title":{"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"ds/array/frequency/":{},"ds/array/frequency/#frequency-of-a-number":{},"java/numbers/":{}}}],["numer",{"_index":157,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{}},"title":{}}],["o",{"_index":126,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["o(1)",{"_index":13,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#implementation":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#heap":{},"ds/stack/intro/":{},"ds/stack/intro/#stack":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["o(1).",{"_index":849,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}},"title":{}}],["o(2n),",{"_index":1299,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["o(i)",{"_index":380,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["o(log",{"_index":9,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["o(logi)",{"_index":382,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["o(logn)",{"_index":191,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#heap":{}},"title":{}}],["o(n",{"_index":502,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["o(n)",{"_index":162,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/linked-list/count/":{},"ds/linked-list/count/#counting":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["o(n).",{"_index":128,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["o(n):",{"_index":1093,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["o(n*2)",{"_index":365,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["o(n*n).",{"_index":331,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["o(n/2)",{"_index":169,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{}},"title":{}}],["o(n2)",{"_index":268,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["o(n2).",{"_index":1270,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["o(n^2)",{"_index":319,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["o(n^2),",{"_index":1290,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{}},"title":{}}],["o(\u221an)",{"_index":248,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["obbject",{"_index":1954,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["obj",{"_index":1725,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/inheritance/#object-as-superclass":{},"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["object",{"_index":620,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/exceptions/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#casting-objects":{},"java/inheritance/#constructor-chaining":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#super-keyword":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/numbers/":{},"java/oops/":{},"java/oops/#class":{},"java/oops/#objects":{},"java/oops/#why":{},"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#types":{}},"title":{"java/inheritance/#casting-objects":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#objects":{},"php/basics/#object":{}}}],["object'",{"_index":1770,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["occupi",{"_index":570,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{}},"title":{}}],["occur",{"_index":213,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["octal",{"_index":1905,"text":{"java/numbers/":{},"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["odd",{"_index":535,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["old",{"_index":550,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["omit",{"_index":1822,"text":{"java/interfaces/":{},"php/basics/":{}},"title":{}}],["on",{"_index":99,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/queue/using-stack/":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/packages/":{},"java/packages/#static-import":{},"java/packages/#why":{}},"title":{"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}}}],["onc",{"_index":40,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#why":{},"java/strings/":{}},"title":{}}],["onlin",{"_index":369,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["op",{"_index":994,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#implementation":{}},"title":{}}],["open",{"_index":1188,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"php/intro/":{}},"title":{}}],["oper",{"_index":274,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/strings/":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#float":{}},"title":{"ds/queue/dequeue/#operations":{},"ds/queue/intro/#operations":{},"ds/queue/priority-queue/#operations":{},"java/basics/#operators":{},"java/collections/#aggregate-operations":{},"java/collections/#aggregate-operations-vs-iterators":{}}}],["operand",{"_index":1479,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["operatecar",{"_index":1799,"text":{"java/interfaces/":{}},"title":{}}],["optim",{"_index":252,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["optimis",{"_index":318,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/linked-list/vs-array/":{},"ds/stack/min-special/":{}},"title":{"ds/linked-list/vs-array/#how-to-optimise":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}}}],["option",{"_index":1595,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["order",{"_index":288,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["organ",{"_index":1737,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#package":{}},"title":{}}],["orient",{"_index":1852,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["origin",{"_index":514,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"java/strings/":{}},"title":{}}],["other",{"_index":509,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["otherrect",{"_index":1826,"text":{"java/interfaces/":{}},"title":{}}],["otherrect.getarea())",{"_index":1829,"text":{"java/interfaces/":{}},"title":{}}],["otherwis",{"_index":2128,"text":{"php/basics/":{},"php/basics/#html-escaping":{}},"title":{}}],["out",{"_index":286,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/intro/":{},"java/collections/":{},"java/collections/#interfaces":{},"php/basics/":{},"php/basics/#types":{}},"title":{"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}}}],["output",{"_index":242,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"java/numbers/":{},"php/basics/":{}},"title":{}}],["outsid",{"_index":596,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"java/oops/":{},"java/oops/#interface":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["over",{"_index":130,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["overflow",{"_index":195,"text":{"Search%20%26%20Sort/Search/intro/":{},"ds/queue/intro/":{},"ds/queue/intro/#operations":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{}},"title":{"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}}}],["overflow\\n",{"_index":1008,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["overflow\\n\";",{"_index":1228,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["overrid",{"_index":1336,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{"java/inheritance/#overriding-and-hiding-methods":{}}}],["overridden",{"_index":1784,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["own",{"_index":745,"text":{"ds/array/vectors/":{},"ds/array/vectors/#element-access":{}},"title":{}}],["p",{"_index":612,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["p.getgender()",{"_index":1646,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],["packag",{"_index":1712,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#library":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#by-its-qualified-name":{},"java/packages/#importing-an-entire-package":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{},"java/packages/#static-import":{},"java/packages/#why":{}},"title":{"java/oops/#package":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#importing-a-package-member":{},"java/packages/#importing-an-entire-package":{}}}],["packagesar",{"_index":2017,"text":{"java/packages/":{},"java/packages/#name-ambiguities":{}},"title":{}}],["palindrom",{"_index":2062,"text":{"java/strings/":{}},"title":{}}],["palindrome.charat(i);",{"_index":2071,"text":{"java/strings/":{}},"title":{}}],["palindrome.length();",{"_index":2066,"text":{"java/strings/":{}},"title":{}}],["paradigm",{"_index":367,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["paragraph",{"_index":2145,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["parallel",{"_index":353,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["parallelsort",{"_index":1474,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["param",{"_index":589,"text":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{}},"title":{}}],["param[10])",{"_index":591,"text":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{}},"title":{}}],["paramet",{"_index":534,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["parent",{"_index":1704,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["parenthesi",{"_index":1187,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["parser",{"_index":2147,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["part",{"_index":108,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"java/annotations/":{}},"title":{}}],["particular",{"_index":411,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["pass",{"_index":567,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/linked-list/functions/":{},"java/oops/":{},"java/oops/#why":{}},"title":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{}}}],["path",{"_index":413,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/strings/":{}},"title":{}}],["pathsepar",{"_index":2037,"text":{"java/strings/":{}},"title":{}}],["pattern",{"_index":1929,"text":{"java/numbers/":{}},"title":{}}],["peek",{"_index":1120,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#stack":{}},"title":{}}],["peek(root)",{"_index":1184,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["peek(stacknode*",{"_index":1180,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["peopl",{"_index":1797,"text":{"java/interfaces/":{}},"title":{}}],["per",{"_index":1974,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["perform",{"_index":251,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/collections/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["permit",{"_index":2031,"text":{"java/strings/":{}},"title":{}}],["permut",{"_index":401,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["person",{"_index":2133,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["person.sex.male)",{"_index":1647,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],["person::getage,",{"_index":1678,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["person::getgender,",{"_index":1676,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["petrol",{"_index":989,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["php",{"_index":2088,"text":{"php/atttributes/":{},"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#float":{},"php/basics/#html-escaping":{},"php/basics/#integers":{},"php/basics/#iterable":{},"php/basics/#object":{},"php/basics/#string":{},"php/basics/#types":{},"php/intro/":{}},"title":{}}],["pi",{"_index":1943,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["pick",{"_index":529,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["pig",{"_index":2237,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["piggi",{"_index":2243,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["pipe",{"_index":1037,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["place",{"_index":276,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"java/numbers/":{}},"title":{}}],["plate",{"_index":1124,"text":{"ds/stack/intro/":{},"ds/stack/intro/#stack":{}},"title":{}}],["platform",{"_index":1859,"text":{"java/intro/":{},"java/intro/#platform":{},"java/numbers/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/intro/#platform":{}}}],["plu",{"_index":1485,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["plug",{"_index":1867,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["pluggabl",{"_index":1413,"text":{"java/annotations/":{},"java/oops/":{},"java/oops/#why":{}},"title":{"java/annotations/#type-annotations-and-pluggable-type-systems":{}}}],["po",{"_index":133,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{}},"title":{}}],["point",{"_index":451,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/cll/#insertion":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#types":{}},"title":{}}],["pointer",{"_index":173,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/array/vs-pointers/#similarities":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/intro/#representation":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{}},"title":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#array-vs-pointers":{}}}],["polygon",{"_index":346,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["polymorph",{"_index":1547,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{}},"title":{"java/inheritance/#polymorphism":{}}}],["poorli",{"_index":508,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["pop",{"_index":751,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{"ds/stack/using-queue/#costly-pop":{}}}],["pop(&root)",{"_index":1183,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["pop(int",{"_index":1213,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["pop(mystack",{"_index":1248,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["pop(s);",{"_index":1277,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["pop(stacknode**",{"_index":1178,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["pop_back",{"_index":750,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{}},"title":{}}],["popular",{"_index":339,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["portabl",{"_index":1855,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["posit",{"_index":180,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#modifiers":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["possibl",{"_index":907,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"java/annotations/":{},"java/annotations/#design-considerations":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["postfix",{"_index":1128,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["pow",{"_index":1950,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["power",{"_index":1442,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["practic",{"_index":1883,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["preced",{"_index":728,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["precis",{"_index":1909,"text":{"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["prefer",{"_index":503,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"php/basics/":{}},"title":{}}],["prefix",{"_index":1129,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["preprocessor",{"_index":2279,"text":{"php/intro/":{}},"title":{}}],["present",{"_index":25,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["prev",{"_index":262,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["prev_nod",{"_index":846,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{}},"title":{}}],["previou",{"_index":49,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{}},"title":{}}],["previous",{"_index":2235,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["price",{"_index":1284,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["price[i])",{"_index":1295,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["price[j]);",{"_index":1288,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{}},"title":{}}],["price[st.top()]",{"_index":1294,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["primari",{"_index":1955,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["primit",{"_index":958,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{},"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["prim\u2019",{"_index":1090,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{}},"title":{}}],["principl",{"_index":1735,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["print",{"_index":539,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/xor-dll/":{},"ds/queue/print-binary/":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/strings/":{},"php/basics/":{},"php/basics/#types":{}},"title":{"ds/linked-list/xor-dll/#print":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#print-binary":{}}}],["printf(\"%d",{"_index":641,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#traversal":{}},"title":{}}],["printlist",{"_index":966,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{}},"title":{}}],["printlist(a);",{"_index":560,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["printlist(node*",{"_index":540,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{}},"title":{}}],["printlist(struct",{"_index":805,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["printnge(int",{"_index":1199,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["printstat",{"_index":1984,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["printstream",{"_index":1921,"text":{"java/numbers/":{}},"title":{}}],["prior",{"_index":1565,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["prioriti",{"_index":1079,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/priority-queue/#operations":{},"ds/queue/priority-queue/#queue-with-properties":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#priority-queue":{}}}],["privat",{"_index":1531,"text":{"java/basics/":{},"java/basics/#access-modifiers":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{},"java/strings/":{}},"title":{}}],["pro",{"_index":1044,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["problem",{"_index":192,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"ds/linked-list/cll/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#super-keyword":{}},"title":{"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"ds/linked-list/cll/#problems":{},"ds/stack/intro/#problems":{}}}],["proce",{"_index":461,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{}},"title":{}}],["process",{"_index":1023,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/annotations/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{},"php/intro/":{}},"title":{}}],["produt",{"_index":497,"text":{"Search%20%26%20Sort/Sort/merge/":{}},"title":{"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}}}],["program",{"_index":223,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/annotations/":{},"java/basics/":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#why":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"java/strings/":{},"php/intro/":{}},"title":{"java/intro/#programming-language":{}}}],["program'",{"_index":1686,"text":{"java/exceptions/":{}},"title":{}}],["programm",{"_index":1693,"text":{"java/generics/":{},"java/generics/#why":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["propag",{"_index":2206,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["proper",{"_index":376,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["properli",{"_index":423,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["properti",{"_index":1080,"text":{"ds/queue/priority-queue/":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{"ds/queue/priority-queue/#queue-with-properties":{}}}],["protect",{"_index":1710,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{}},"title":{}}],["prototyp",{"_index":521,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["provid",{"_index":936,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/annotations/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["ptr",{"_index":761,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["public",{"_index":174,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#why":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}}}],["pump",{"_index":990,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["purpos",{"_index":1846,"text":{"java/intro/":{},"java/intro/#programming-language":{},"php/intro/":{}},"title":{}}],["push",{"_index":282,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/using-queue/":{}},"title":{"ds/stack/using-queue/#costly-push":{}}}],["push(&a,",{"_index":559,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["push(&root,",{"_index":1182,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["push(int",{"_index":1158,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["push(mystack",{"_index":1241,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["push(node**",{"_index":545,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#front-o1":{}},"title":{}}],["push(s,",{"_index":1276,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["push(stacknode**",{"_index":1176,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["push(struct",{"_index":865,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["push_back",{"_index":749,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{}},"title":{}}],["put",{"_index":549,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/strings/":{}},"title":{}}],["q",{"_index":1070,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["q.front();",{"_index":1074,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["q.pop();",{"_index":1075,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["q.push(\"1\");",{"_index":1071,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["q.push(s1.append(\"0\"));",{"_index":1077,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["q.push(s2.append(\"1\"));",{"_index":1078,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["q1",{"_index":1312,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["q1.pop();",{"_index":1310,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["q1.push(x);",{"_index":1316,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{}},"title":{}}],["q2",{"_index":1313,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["q2.push(q1.front());",{"_index":1309,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["q2.push(x);",{"_index":1307,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["qnode",{"_index":1062,"text":{"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{}},"title":{}}],["qnode(int",{"_index":1063,"text":{"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{}},"title":{}}],["qnode(x);",{"_index":1065,"text":{"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{}},"title":{}}],["qualifi",{"_index":1992,"text":{"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{}},"title":{"java/packages/#by-its-qualified-name":{}}}],["qualiti",{"_index":1550,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["queen",{"_index":1145,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["queue",{"_index":796,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/using-queue/":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{"ds/queue/intro/":{},"ds/queue/intro/#queue":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#priority-queue":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#queue-using-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#stack-using-queue":{}}}],["queue<int>",{"_index":1311,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["queue<string>",{"_index":1069,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["queue\\n\";",{"_index":1056,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["quick",{"_index":1891,"text":{"java/java9%26beyond/":{}},"title":{}}],["quickli",{"_index":835,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["quicksort",{"_index":507,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["quot",{"_index":2146,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["r",{"_index":111,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{}},"title":{}}],["r[10];",{"_index":603,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["r[i]",{"_index":608,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["radiu",{"_index":1802,"text":{"java/interfaces/":{}},"title":{}}],["rais",{"_index":2239,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["rand",{"_index":609,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["random",{"_index":504,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/array/intro/#introduction":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["rang",{"_index":24,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{}},"title":{}}],["rarer",{"_index":2084,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["rat",{"_index":1143,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["rate",{"_index":1033,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["rathbhupendra",{"_index":562,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["ration",{"_index":2208,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["rbegin",{"_index":720,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{}},"title":{}}],["re",{"_index":553,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/oops/":{},"java/oops/#why":{}},"title":{"java/re/":{}}}],["reach",{"_index":420,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["read",{"_index":1609,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["readabl",{"_index":2158,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["readonli",{"_index":1361,"text":{"java/annotations/":{}},"title":{}}],["real",{"_index":1122,"text":{"ds/stack/intro/":{},"ds/stack/intro/#stack":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["rear",{"_index":997,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/intro/#operations":{}},"title":{}}],["rear(get",{"_index":1043,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["rear(queue*",{"_index":1061,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["rear+1);",{"_index":1002,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["rear+1;",{"_index":1009,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["reason",{"_index":1425,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/java9%26beyond/":{},"java/numbers/":{}},"title":{}}],["receiv",{"_index":1032,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["recommend",{"_index":1716,"text":{"java/inheritance/":{}},"title":{}}],["recompil",{"_index":1849,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["rectangl",{"_index":2010,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["rectangleplu",{"_index":1825,"text":{"java/interfaces/":{}},"title":{}}],["recur",{"_index":530,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["recurion",{"_index":1116,"text":{"ds/queue/using-stack/":{}},"title":{"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}}}],["recurs",{"_index":71,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/min-max/":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/linked-list/count/":{},"ds/linked-list/reverse/":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"php/intro/":{}},"title":{"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/min-max/#recursive":{},"ds/array/reverse/#recursive":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#tail-recursive-method":{}}}],["redeclar",{"_index":1838,"text":{"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["redefin",{"_index":1839,"text":{"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["redo",{"_index":1131,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["reduc",{"_index":374,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#why":{}},"title":{}}],["reduct",{"_index":1656,"text":{"java/collections/":{}},"title":{"java/collections/#reduction":{}}}],["refer",{"_index":386,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{"Search%20%26%20Sort/Sort/merge/#local-reference":{}}}],["refernc",{"_index":884,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{}},"title":{}}],["refernec",{"_index":1750,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["reflect",{"_index":2107,"text":{"php/atttributes/":{}},"title":{}}],["reflectionobject($actionhandler);",{"_index":2108,"text":{"php/atttributes/":{}},"title":{}}],["region",{"_index":1996,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["regionmatchesdemo",{"_index":2048,"text":{"java/strings/":{}},"title":{}}],["reinterpret_cast<nod",{"_index":960,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{}}],["reinterpret_cast<uintptr_t>(a)",{"_index":962,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{}}],["reinterpret_cast<uintptr_t>(b));",{"_index":963,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{}}],["rel",{"_index":2201,"text":{"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{}},"title":{}}],["relat",{"_index":1495,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#why":{}},"title":{}}],["relationship",{"_index":2014,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["remaind",{"_index":1483,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["rememb",{"_index":593,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["remot",{"_index":1875,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["remov",{"_index":462,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#operations":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{}},"title":{}}],["rend",{"_index":721,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{}},"title":{}}],["reorder",{"_index":402,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["reourc",{"_index":2252,"text":{"php/basics/":{}},"title":{"php/basics/#reources":{}}}],["repeat",{"_index":42,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{}},"title":{"java/annotations/#repeating-annotations":{}}}],["repeatedli",{"_index":215,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["replac",{"_index":748,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/inheritance/":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["repres",{"_index":410,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["represent",{"_index":804,"text":{"ds/linked-list/cll/":{},"ds/linked-list/intro/":{},"ds/linked-list/xor-dll/":{},"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/basics/":{},"php/basics/#float":{}},"title":{"ds/linked-list/cll/#representation":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/xor-dll/#representation":{}}}],["request",{"_index":740,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"php/intro/":{}},"title":{}}],["requir",{"_index":123,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["reserv",{"_index":739,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"java/basics/":{},"java/basics/#naming":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["resiz",{"_index":732,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["resize(n)",{"_index":731,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["resourc",{"_index":1025,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["rest",{"_index":887,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["restor",{"_index":1117,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}},"title":{}}],["restrict",{"_index":1988,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["result",{"_index":393,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["retain",{"_index":1397,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retent",{"_index":1395,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retentionpolicy.class",{"_index":1400,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retentionpolicy.runtim",{"_index":1404,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retentionpolicy.sourc",{"_index":1396,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retriev",{"_index":1434,"text":{"java/annotations/":{},"java/collections/":{}},"title":{"java/annotations/#retrieving-annotations":{}}}],["retriv",{"_index":916,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["retrun",{"_index":601,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["return",{"_index":57,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/strings/":{},"php/basics/":{},"php/basics/#float":{}},"title":{"ds/array/functions/#return-array-from-functions":{}}}],["return(a);",{"_index":500,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["return(b);",{"_index":499,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["return(result);",{"_index":496,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["reursiv",{"_index":149,"text":{"Search%20%26%20Sort/Search/interpolation/":{}},"title":{"Search%20%26%20Sort/Search/interpolation/#reursive":{}}}],["reus",{"_index":1556,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["reusabl",{"_index":1546,"text":{"java/collections/":{}},"title":{}}],["revers",{"_index":332,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/reverse/":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/linked-list/dll/":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/packages/":{},"java/packages/#naming":{},"java/strings/":{}},"title":{"ds/array/reverse/":{},"ds/array/reverse/#reverse-array":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#reverse-ll":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}}}],["reverse(head",{"_index":888,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{}},"title":{}}],["reverse(nod",{"_index":853,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{}},"title":{}}],["reverse(node*",{"_index":886,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{}},"title":{}}],["reverse(node**",{"_index":890,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#tail-recursive-method":{}},"title":{}}],["reversell(node**",{"_index":895,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{}},"title":{}}],["reversepalindrom",{"_index":2074,"text":{"java/strings/":{}},"title":{}}],["reverseutil(*head,",{"_index":891,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#tail-recursive-method":{}},"title":{}}],["reverseutil(next,",{"_index":894,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#tail-recursive-method":{}},"title":{}}],["reverseutil(node*",{"_index":892,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#tail-recursive-method":{}},"title":{}}],["review",{"_index":1379,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["revolut",{"_index":1973,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["right",{"_index":171,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{}}],["rightlast",{"_index":785,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}},"title":{}}],["rightlist",{"_index":783,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}},"title":{}}],["rint",{"_index":1947,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["rmi",{"_index":1879,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["robust",{"_index":1856,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["root",{"_index":414,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["root(n)",{"_index":253,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["roster",{"_index":1643,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["roster.stream()",{"_index":1664,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["rotat",{"_index":982,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["round",{"_index":1948,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["row",{"_index":675,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{"ds/array/multi-dimensional/#row-major-in-c":{}}}],["run",{"_index":170,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"java/basics/":{},"java/basics/#control-flow":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["runtim",{"_index":922,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["runtimeexception(\"fil",{"_index":2097,"text":{"php/atttributes/":{}},"title":{}}],["runtimeexception(\"target",{"_index":2102,"text":{"php/atttributes/":{}},"title":{}}],["rveresearray(arr,",{"_index":715,"text":{"ds/array/reverse/":{},"ds/array/reverse/#recursive":{}},"title":{}}],["rveresearray(int",{"_index":709,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{}},"title":{}}],["s",{"_index":897,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#problems":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/numbers/":{}},"title":{}}],["s.next();",{"_index":1620,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["s.pop()",{"_index":1171,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["s.pop();",{"_index":901,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["s.push(10);",{"_index":1168,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["s.push(20);",{"_index":1169,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["s.push(30);",{"_index":1170,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["s.push(arr[i]);",{"_index":1205,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["s.push(temp);",{"_index":898,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{}},"title":{}}],["s.push(x);",{"_index":1118,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}},"title":{}}],["s.tochararray();",{"_index":1640,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["s.top()",{"_index":1202,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["s.top();",{"_index":900,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["s1",{"_index":1073,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"java/strings/":{}},"title":{}}],["s1.pop();",{"_index":1097,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s1.push(s2.top());",{"_index":1100,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s1.push(x);",{"_index":1098,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s1.top();",{"_index":1104,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s2",{"_index":1076,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s2.empty())",{"_index":1112,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["s2.pop();",{"_index":1101,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s2.push(s1.top());",{"_index":1096,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s2.top();",{"_index":1114,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["s[0]",{"_index":1285,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["s[i]",{"_index":1286,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["s[i]++;",{"_index":1289,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{}},"title":{}}],["safevararg",{"_index":1392,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["same",{"_index":491,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#declaration":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#name-ambiguities":{},"java/packages/#why":{}},"title":{}}],["save",{"_index":652,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["saw",{"_index":2063,"text":{"java/strings/":{}},"title":{}}],["scalar",{"_index":2149,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["scan",{"_index":352,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["scanner",{"_index":1616,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["scanner(new",{"_index":1617,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["schedul",{"_index":993,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["script",{"_index":2281,"text":{"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["search",{"_index":6,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/frequency/":{},"ds/linked-list/search/":{},"java/basics/":{},"java/basics/#control-flow":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#searching":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"ds/array/frequency/#sort-then-binary-search":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}}}],["search(int",{"_index":167,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{}},"title":{}}],["search(linkedlistnode*",{"_index":903,"text":{"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["search_el",{"_index":177,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{}},"title":{}}],["searchfor",{"_index":1527,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["searchm",{"_index":2049,"text":{"java/strings/":{}},"title":{}}],["searchme.length();",{"_index":2055,"text":{"java/strings/":{}},"title":{}}],["searchmelength",{"_index":2054,"text":{"java/strings/":{}},"title":{}}],["second",{"_index":217,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["section",{"_index":918,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["secur",{"_index":1857,"text":{"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{}},"title":{"java/security/":{},"php/security/":{}}}],["securityexcept",{"_index":1423,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["see",{"_index":525,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["seed",{"_index":604,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["select",{"_index":267,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}}}],["selectionsort(int",{"_index":301,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["send",{"_index":568,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{}},"title":{}}],["sensit",{"_index":1452,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["sent",{"_index":1034,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["sep",{"_index":2040,"text":{"java/strings/":{}},"title":{}}],["sequenc",{"_index":1454,"text":{"java/basics/":{},"java/basics/#naming":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["seri",{"_index":385,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["server",{"_index":2275,"text":{"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["set",{"_index":438,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{},"java/oops/":{},"java/oops/#library":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["setup",{"_index":2092,"text":{"php/atttributes/":{}},"title":{}}],["sever",{"_index":1778,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["shall",{"_index":555,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["shape",{"_index":2131,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["share",{"_index":1026,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#polymorphism":{},"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["shcedul",{"_index":801,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{}},"title":{}}],["shift",{"_index":1502,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["short",{"_index":1450,"text":{"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],["shortest",{"_index":1089,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{}},"title":{}}],["shorthand",{"_index":1498,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["show",{"_index":2016,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"php/basics/":{},"php/basics/#html-escaping":{}},"title":{}}],["shrink",{"_index":1153,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["shrink_to_fit",{"_index":735,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["side",{"_index":429,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["sign",{"_index":1504,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["signalon",{"_index":1807,"text":{"java/interfaces/":{}},"title":{}}],["signalturn(direct",{"_index":1806,"text":{"java/interfaces/":{}},"title":{}}],["signatur",{"_index":1717,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{}},"title":{}}],["similar",{"_index":615,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vs-pointers/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{"ds/array/vs-pointers/#similarities":{}}}],["simpl",{"_index":390,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/frequency/":{},"ds/queue/print-binary/":{},"ds/stack/k-stacks/":{},"java/basics/":{},"java/basics/#operators":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{}},"title":{"ds/array/frequency/#simple":{},"ds/queue/print-binary/#simple":{},"ds/stack/k-stacks/#simple":{}}}],["simpli",{"_index":1535,"text":{"java/collections/":{}},"title":{}}],["simul",{"_index":1610,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["simultan",{"_index":1652,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["sin",{"_index":1952,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["singl",{"_index":792,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"java/collections/":{},"java/helloworld/":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["situat",{"_index":1777,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["size",{"_index":16,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vectors/#modifiers":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["size_t",{"_index":866,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["sizeof",{"_index":764,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["sizeof(arr)",{"_index":763,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["sizeof(int))];",{"_index":1049,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["sizeof(ptr);",{"_index":766,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["sizof(int)",{"_index":762,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["sllnode",{"_index":938,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["slow",{"_index":481,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["small",{"_index":343,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"java/packages/":{},"java/packages/#why":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#string":{}},"title":{}}],["smaller",{"_index":1195,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/intro/":{},"java/intro/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["smallest",{"_index":255,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["smith",{"_index":1352,"text":{"java/annotations/":{},"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["sn",{"_index":1212,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["softwar",{"_index":1326,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#why":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["solut",{"_index":210,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["solv",{"_index":983,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["solver",{"_index":1147,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["someth",{"_index":456,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["sometim",{"_index":1534,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["sort",{"_index":102,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#problems":{},"ds/stack/sort/":{},"php/basics/":{},"php/basics/#comments":{}},"title":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#merge-sort":{},"ds/array/frequency/#sort-then-binary-search":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{}}}],["sortedinsert",{"_index":1272,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sortedinsert(node**",{"_index":824,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{}},"title":{}}],["sortedinsert(s,",{"_index":1278,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sortedinsert(struct",{"_index":1273,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sortedmap",{"_index":1559,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{}}],["sortedmerge(a",{"_index":475,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["sortedmerge(a,",{"_index":473,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["sortedmerge(node*",{"_index":474,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["sortedset",{"_index":1557,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{}}],["sortstack",{"_index":1271,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sortstack(s);",{"_index":1281,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sortstack(struct",{"_index":1279,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sourc",{"_index":477,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#why":{},"java/strings/":{},"php/intro/":{}},"title":{"java/packages/#managing-source-and-class-files":{}}}],["space",{"_index":11,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"java/packages/":{}},"title":{"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}}}],["span",{"_index":1091,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/stock-span/":{},"java/strings/":{}},"title":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#stock-span":{}}}],["speci",{"_index":1738,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["special",{"_index":1237,"text":{"ds/stack/medium-special/":{},"ds/stack/min-special/":{},"php/basics/":{},"php/basics/#types":{}},"title":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{}}}],["specialstack'",{"_index":1257,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{}},"title":{}}],["specialstack::pop()",{"_index":1258,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["specialstack::push(int",{"_index":1252,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["specif",{"_index":351,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/basics/":{},"java/basics/#operators":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#naming":{},"php/intro/":{}},"title":{}}],["specifi",{"_index":752,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["speed",{"_index":1549,"text":{"java/collections/":{},"java/collections/#why":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["speedofcar",{"_index":1810,"text":{"java/interfaces/":{}},"title":{}}],["speedup(int",{"_index":1979,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["split",{"_index":488,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["sqrt",{"_index":1951,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["sqrt(n);",{"_index":261,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{}},"title":{}}],["squar",{"_index":774,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["srand",{"_index":605,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["st",{"_index":1291,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["st.pop();",{"_index":1266,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["st.push(0);",{"_index":1292,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["st.push(a);",{"_index":1268,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["st.push(i);",{"_index":1298,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["st.push(x);",{"_index":1264,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["st.top());",{"_index":1297,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["st.top();",{"_index":1265,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["stabl",{"_index":275,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{"Search%20%26%20Sort/Sort/intro/#stable":{}}}],["stableselectionsort(int",{"_index":309,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#stable":{}},"title":{}}],["stack",{"_index":460,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"ds/linked-list/reverse/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/k-stacks/#simple":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/using-queue/":{},"java/exceptions/":{}},"title":{"ds/linked-list/reverse/#stack":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#queue-using-stack":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#stack":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#k-stacks":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#stack-using-queue":{}}}],["stack2",{"_index":1107,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["stack::isempty()",{"_index":1167,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["stack::peek()",{"_index":1165,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["stack::pop()",{"_index":1162,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["stack::pop();",{"_index":1259,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["stack::push(int",{"_index":1159,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["stack::push(x);",{"_index":1253,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["stack<int>",{"_index":1094,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["stack<node*>",{"_index":896,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{}},"title":{}}],["stack\\n\";",{"_index":1161,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["stacknod",{"_index":1173,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["stage",{"_index":1739,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["start",{"_index":29,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/basics/":{},"java/basics/#naming":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#naming":{},"php/basics/":{}},"title":{}}],["startspe",{"_index":1803,"text":{"java/interfaces/":{}},"title":{}}],["state",{"_index":1730,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/oops/#objects":{}},"title":{"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}}}],["statement",{"_index":1499,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/strings/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["statement(s)",{"_index":1521,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["static",{"_index":175,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#static-methods":{},"java/numbers/":{},"java/numbers/#advanced-math":{},"java/packages/":{},"java/packages/#static-import":{},"java/strings/":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"java/interfaces/#static-methods":{},"java/packages/#static-import":{}}}],["std",{"_index":517,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["steal",{"_index":991,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["step",{"_index":260,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["still",{"_index":384,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["stl",{"_index":1542,"text":{"java/collections/":{}},"title":{}}],["stock",{"_index":1139,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/stock-span/":{}},"title":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#stock-span":{}}}],["stop",{"_index":320,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["store",{"_index":616,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/collections/":{}},"title":{}}],["str",{"_index":1358,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/strings/":{}},"title":{}}],["strategi",{"_index":447,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["stream",{"_index":1644,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["stream.collect",{"_index":1661,"text":{"java/collections/":{}},"title":{"java/collections/#streamcollect-method":{}}}],["stretch",{"_index":1708,"text":{"java/inheritance/":{}},"title":{}}],["string",{"_index":1072,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/numbers/":{},"java/strings/":{},"java/strings/#why":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#types":{}},"title":{"java/strings/":{},"php/basics/#string":{}}}],["string(a);",{"_index":1642,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["string(chararray);",{"_index":2075,"text":{"java/strings/":{}},"title":{}}],["stringbuff",{"_index":2079,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["stringbuild",{"_index":2077,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["stringdemo",{"_index":2061,"text":{"java/strings/":{}},"title":{}}],["stringvar",{"_index":1920,"text":{"java/numbers/":{}},"title":{}}],["stronger",{"_index":1331,"text":{"java/annotations/":{},"java/generics/":{},"java/generics/#why":{}},"title":{}}],["strongli",{"_index":1149,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["struct",{"_index":621,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}},"title":{}}],["structur",{"_index":1046,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["sub",{"_index":1409,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["subarrai",{"_index":30,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["subclass",{"_index":1700,"text":{"java/inheritance/":{},"java/inheritance/#abstract-methods-and-classes":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["sublist",{"_index":522,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["subproblem",{"_index":1650,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["subset",{"_index":2007,"text":{"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{}}],["subtract",{"_index":1481,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["subtre",{"_index":419,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["such",{"_index":506,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#super-keyword":{},"java/numbers/":{}},"title":{}}],["sudoku",{"_index":1146,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["suggest",{"_index":819,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["suit",{"_index":2283,"text":{"php/intro/":{}},"title":{}}],["super",{"_index":1411,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{"java/inheritance/#super-keyword":{}}}],["super(paramet",{"_index":1745,"text":{"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{}}],["superclass",{"_index":1703,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#super-keyword":{}},"title":{"java/inheritance/#object-as-superclass":{}}}],["superclass'",{"_index":1969,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["supplement",{"_index":1714,"text":{"java/inheritance/":{}},"title":{}}],["supplier",{"_index":1666,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["support",{"_index":864,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["suppress",{"_index":1323,"text":{"java/annotations/":{}},"title":{}}],["swap",{"_index":270,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/swap/":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}}}],["swap(&(curr",{"_index":823,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["swap(&arr[j],",{"_index":328,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{}},"title":{}}],["swap(&arr[min_idx],",{"_index":307,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["swap(((*a)",{"_index":913,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["swap(*a,",{"_index":912,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["swap(int",{"_index":297,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["swap(node*&",{"_index":910,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["swapnodes(node**",{"_index":911,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["swing",{"_index":1871,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["switch",{"_index":1516,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["symbol",{"_index":1126,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["synchron",{"_index":2081,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["syntax",{"_index":2248,"text":{"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],["system",{"_index":931,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/annotations/":{},"java/numbers/":{},"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{},"php/basics/#float":{},"php/security/":{}},"title":{"java/annotations/#type-annotations-and-pluggable-type-systems":{}}}],["system.arraycopy(copyfrom,",{"_index":1469,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["system.err.println(e);",{"_index":1631,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.exit(1);",{"_index":1632,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.format(\"th",{"_index":1916,"text":{"java/numbers/":{}},"title":{}}],["system.out.printf(...)",{"_index":1915,"text":{"java/numbers/":{}},"title":{}}],["system.out.println(",{"_index":182,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{}},"title":{}}],["system.out.println(\"averag",{"_index":1669,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["system.out.println(\"cadence:\"",{"_index":1985,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["system.out.println(\"found",{"_index":1529,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["system.out.println(\"hello",{"_index":1696,"text":{"java/helloworld/":{}},"title":{}}],["system.out.println(\"no",{"_index":2060,"text":{"java/strings/":{}},"title":{}}],["system.out.println(\"not",{"_index":188,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{}},"title":{}}],["system.out.println(\"th",{"_index":1789,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["system.out.println(e.getname()));",{"_index":1575,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.println(java.util.arrays.tostring(copyto))",{"_index":1478,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["system.out.println(l.size()",{"_index":1637,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.println(o);",{"_index":1591,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.println(reversepalindrome);",{"_index":2076,"text":{"java/strings/":{}},"title":{}}],["system.out.println(searchfor",{"_index":1530,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["system.out.println(searchme.substring(i,",{"_index":2059,"text":{"java/strings/":{}},"title":{}}],["system.out.println(valu",{"_index":1928,"text":{"java/numbers/":{}},"title":{}}],["t",{"_index":1363,"text":{"java/annotations/":{}},"title":{}}],["t(1)",{"_index":80,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["t(n)",{"_index":77,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["t(n/2)",{"_index":78,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["t(n/3)",{"_index":82,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["tabl",{"_index":165,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#searching":{}},"title":{}}],["tag",{"_index":2122,"text":{"php/basics/":{}},"title":{}}],["tail",{"_index":450,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"ds/linked-list/reverse/":{}},"title":{"ds/linked-list/reverse/#tail-recursive-method":{}}}],["take",{"_index":335,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/stack/intro/":{},"ds/stack/intro/#stack":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["target",{"_index":1407,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["targetdirectori",{"_index":2094,"text":{"php/atttributes/":{}},"title":{}}],["targetdirectoryexist",{"_index":2098,"text":{"php/atttributes/":{}},"title":{}}],["technolog",{"_index":1866,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["temp",{"_index":300,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["tempchararrai",{"_index":2067,"text":{"java/strings/":{}},"title":{}}],["tempchararray[i]",{"_index":2070,"text":{"java/strings/":{}},"title":{}}],["tempchararray[len",{"_index":2073,"text":{"java/strings/":{}},"title":{}}],["temperatureexcept",{"_index":1369,"text":{"java/annotations/":{}},"title":{}}],["temporari",{"_index":449,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{}},"title":{}}],["termin",{"_index":1522,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["ternari",{"_index":81,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["ternarysearch(arr,",{"_index":119,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["ternarysearch(int",{"_index":109,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{}},"title":{}}],["terneri",{"_index":69,"text":{"Search%20%26%20Sort/Search/exponential/":{}},"title":{"Search%20%26%20Sort/Search/exponential/#ternery-search":{}}}],["test",{"_index":552,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["testclassmethod",{"_index":1788,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["testinstancemethod",{"_index":1790,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["testscor",{"_index":1512,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["that'",{"_index":2227,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["theoret",{"_index":727,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{}},"title":{}}],["therefor",{"_index":88,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"java/inheritance/":{}},"title":{}}],["theta",{"_index":1110,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["theta(logn)",{"_index":189,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{}},"title":{}}],["thing",{"_index":2134,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["those",{"_index":1651,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["thread",{"_index":1914,"text":{"java/numbers/":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["three",{"_index":107,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"ds/array/multi-dimensional/":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"ds/array/multi-dimensional/#three-dimensional-array":{}}}],["threshold",{"_index":1633,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["through",{"_index":1965,"text":{"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["throw",{"_index":1367,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/exceptions/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/atttributes/":{}},"title":{}}],["throwabl",{"_index":1751,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["thrown",{"_index":1364,"text":{"java/annotations/":{}},"title":{}}],["thu",{"_index":1715,"text":{"java/inheritance/":{}},"title":{}}],["time",{"_index":7,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#binary-search":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["timeout",{"_index":1762,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["titl",{"_index":2140,"text":{"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["tobin",{"_index":1066,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#simple":{}},"title":{}}],["tod",{"_index":2064,"text":{"java/strings/":{}},"title":{}}],["todo",{"_index":855,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#doubly-linked-list":{},"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#type-juggling-and-declartion":{}},"title":{}}],["togeth",{"_index":524,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["tool",{"_index":1327,"text":{"java/annotations/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["toolkit",{"_index":1869,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["top",{"_index":1156,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"java/basics/":{},"java/basics/#control-flow":{},"java/intro/":{},"java/intro/#platform":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["top(*s))",{"_index":1275,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["top[i]",{"_index":1221,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["top[k]",{"_index":1208,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["top[sn]",{"_index":1231,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["top[sn];",{"_index":1230,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["topmost",{"_index":1705,"text":{"java/inheritance/":{}},"title":{}}],["topolog",{"_index":1148,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["tortois",{"_index":815,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["tostr",{"_index":1757,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["total",{"_index":1581,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["totalagebygend",{"_index":1674,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["totalagereduc",{"_index":1657,"text":{"java/collections/":{},"java/collections/#reduction":{}},"title":{}}],["tour",{"_index":987,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["tower",{"_index":1137,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["trace",{"_index":412,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["transfer",{"_index":1029,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["travers",{"_index":258,"text":{"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/intro/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/collections/":{}},"title":{"ds/array/intro/#traversal":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/intro/#traversal":{},"java/collections/#traversing-collections":{}}}],["tree",{"_index":408,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/linked-list/bin-tree-cdll/":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll":{}}}],["tree_",{"_index":426,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["true",{"_index":577,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#html-escaping":{},"php/basics/#types":{}},"title":{}}],["trust",{"_index":2220,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["trvers",{"_index":842,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{}},"title":{}}],["try",{"_index":35,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["turn(direct",{"_index":1801,"text":{"java/interfaces/":{}},"title":{}}],["twice",{"_index":1106,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["two",{"_index":105,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/bin-tree-cdll/":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}}}],["type",{"_index":565,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"java/annotations/":{},"java/annotations/#design-considerations":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/basics/#variables":{},"java/collections/":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#virtual-method-invocation":{},"java/numbers/":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{},"java/packages/#name-ambiguities":{},"java/packages/#why":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#types":{}},"title":{"java/annotations/#annotation-type":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"php/basics/#type-juggling-and-declartion":{},"php/basics/#types":{}}}],["typecast",{"_index":2181,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["typeerror",{"_index":2233,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["typic",{"_index":1566,"text":{"java/collections/":{},"java/collections/#interfaces":{},"php/basics/":{},"php/basics/#float":{},"php/intro/":{}},"title":{}}],["unari",{"_index":1484,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["unauthorizedaccessexcept",{"_index":1422,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["unbound",{"_index":15,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["unbox",{"_index":2086,"text":{"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{}},"title":{"java/strings/#autoboxing-and-unboxing":{}}}],["uncheck",{"_index":1345,"text":{"java/annotations/":{}},"title":{}}],["underflow",{"_index":1022,"text":{"ds/queue/intro/":{},"ds/queue/intro/#operations":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["underflow\\n\"",{"_index":1011,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["underflow\\n\";",{"_index":1234,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["underli",{"_index":1590,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["underscor",{"_index":1999,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["undo",{"_index":1132,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["unicod",{"_index":1455,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["unifi",{"_index":1540,"text":{"java/collections/":{}},"title":{}}],["uniformali",{"_index":132,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{}},"title":{}}],["uniformli",{"_index":124,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{}},"title":{}}],["uniqu",{"_index":1740,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["unit",{"_index":1537,"text":{"java/collections/":{}},"title":{}}],["unless",{"_index":1990,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["unlik",{"_index":862,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["unlimit",{"_index":1453,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["unmodifiablelist<t>",{"_index":1360,"text":{"java/annotations/":{}},"title":{}}],["unord",{"_index":959,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{}},"title":{}}],["unordered_map<int,",{"_index":582,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["unpredict",{"_index":858,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{}},"title":{}}],["unrel",{"_index":1552,"text":{"java/collections/":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["unrestrict",{"_index":1987,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["unsaf",{"_index":1393,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["unsign",{"_index":205,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["unsort",{"_index":554,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["until",{"_index":38,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{}},"title":{}}],["unwant",{"_index":2123,"text":{"php/basics/":{}},"title":{}}],["up",{"_index":161,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["updat",{"_index":1247,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["upper",{"_index":1902,"text":{"java/numbers/":{}},"title":{}}],["us",{"_index":14,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/array/vs-pointers/#similarities":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/using-stack/":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#problems":{},"ds/stack/stock-span/":{},"ds/stack/using-queue/":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{},"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#by-its-qualified-name":{},"java/packages/#importing-an-entire-package":{},"java/packages/#name-ambiguities":{},"java/strings/":{},"java/strings/#why":{},"php/basics/":{},"php/basics/#arrays":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#float":{},"php/intro/":{}},"title":{"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#queue-using-stack":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#stack-using-queue":{}}}],["usag",{"_index":2002,"text":{"java/packages/":{}},"title":{"java/packages/#usage":{}}}],["usefl",{"_index":797,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{}},"title":{}}],["user",{"_index":1115,"text":{"ds/queue/using-stack/":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/intro/":{},"java/intro/#platform":{},"php/intro/":{}},"title":{"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}}}],["usual",{"_index":2218,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["util",{"_index":531,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/xor-dll/":{}},"title":{"ds/linked-list/xor-dll/#xor-utility":{}}}],["val",{"_index":904,"text":{"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["valu",{"_index":48,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/numbers/":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#iterable":{},"php/basics/#types":{}},"title":{}}],["var1",{"_index":2178,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["var2",{"_index":2179,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["var_dump",{"_index":2155,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["var_dump((bool)",{"_index":2171,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["vararg",{"_index":1533,"text":{"java/classes/":{}},"title":{}}],["vari",{"_index":2132,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["variabl",{"_index":595,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{},"java/oops/":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/strings/":{},"java/strings/#why":{}},"title":{"java/basics/":{},"java/basics/#variables":{}}}],["variable'",{"_index":1742,"text":{"java/inheritance/":{},"java/inheritance/#virtual-method-invocation":{}},"title":{}}],["vector",{"_index":716,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#modifiers":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{"ds/array/vectors/":{},"ds/array/vectors/#vectors-in-cpp":{}}}],["vector<bool>",{"_index":573,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],["verbos",{"_index":2120,"text":{"php/basics/":{}},"title":{}}],["veri",{"_index":342,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"java/strings/":{}},"title":{}}],["version",{"_index":970,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#dequeue":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/java9%26beyond/":{}},"title":{}}],["virtual",{"_index":1401,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{}},"title":{"java/inheritance/#virtual-method-invocation":{}}}],["visit",{"_index":988,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["visited(n,",{"_index":574,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],["visited[j]",{"_index":580,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],["void",{"_index":176,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["vs",{"_index":154,"text":{"Search%20%26%20Sort/Search/interpolation/":{},"ds/array/vs-pointers/":{},"ds/linked-list/vs-array/":{},"java/collections/":{},"java/inheritance/":{},"java/java9%26beyond/":{}},"title":{"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#array-vs-pointers":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list-vs-arrays":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/#abstract-classes-vs-interface":{}}}],["wai",{"_index":397,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"java/inheritance/":{},"java/inheritance/#constructor-chaining":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["wait",{"_index":1760,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["wait(long",{"_index":1761,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["want",{"_index":289,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["warn",{"_index":1324,"text":{"java/annotations/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["wastag",{"_index":920,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["weakest",{"_index":2289,"text":{"php/security/":{}},"title":{}}],["web",{"_index":1135,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"php/intro/":{}},"title":{}}],["well",{"_index":1764,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["wheel",{"_index":1972,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["wherea",{"_index":1776,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["whether",{"_index":734,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["while(1)",{"_index":492,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{}},"title":{}}],["while(curr",{"_index":825,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{}},"title":{}}],["while(p",{"_index":814,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["while(temp!=null){",{"_index":905,"text":{"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["whitepap",{"_index":1858,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["whole",{"_index":383,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"java/inheritance/":{},"java/inheritance/#constructor-chaining":{}},"title":{}}],["wide",{"_index":2280,"text":{"php/intro/":{}},"title":{}}],["window",{"_index":237,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["within",{"_index":1532,"text":{"java/basics/":{},"java/basics/#access-modifiers":{}},"title":{}}],["without",{"_index":293,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"ds/stack/stock-span/":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/strings/":{},"php/basics/":{},"php/basics/#float":{}},"title":{"ds/stack/stock-span/#without-stack":{}}}],["won't",{"_index":1986,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["won\u2019t",{"_index":651,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}},"title":{}}],["word",{"_index":1461,"text":{"java/basics/":{},"java/basics/#naming":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["work",{"_index":212,"text":{"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["world",{"_index":1697,"text":{"java/helloworld/":{},"java/oops/":{},"java/oops/#interface":{},"java/oops/#objects":{},"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["worri",{"_index":1733,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}},"title":{}}],["worst",{"_index":75,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-vs-binary":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["wrap",{"_index":1899,"text":{"java/numbers/":{}},"title":{}}],["wrapper",{"_index":1898,"text":{"java/numbers/":{}},"title":{}}],["write",{"_index":272,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"java/inheritance/":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"php/basics/":{},"php/basics/#comments":{},"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{}}}],["written",{"_index":95,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["www.geeksforgeeks.org/?p=3622",{"_index":527,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["x",{"_index":34,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#interpolation-search":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["x.first",{"_index":586,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["x.second",{"_index":587,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["x[2][3][4]",{"_index":692,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["x[3][4]",{"_index":681,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["x[i][j]",{"_index":679,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["xml",{"_index":1328,"text":{"java/annotations/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["xor",{"_index":837,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-dll":{},"ds/linked-list/xor-dll/#xor-utility":{}}}],["xor(new_node,",{"_index":965,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{}},"title":{}}],["xp",{"_index":298,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["xxx",{"_index":498,"text":{"Search%20%26%20Sort/Sort/merge/":{}},"title":{"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{}}}],["y",{"_index":356,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["ye",{"_index":336,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{}},"title":{}}],["yp",{"_index":299,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{}},"title":{}}],["zero",{"_index":444,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["{",{"_index":54,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/intro/#traversal":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{},"ds/linked-list/xor-dll/#xor-utility":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#iterable":{},"php/basics/#object":{},"php/basics/#types":{}},"title":{}}],["{0,1,2,3},",{"_index":703,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{12,13,14,15},",{"_index":706,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{16,17,18,19},",{"_index":707,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{20,21,22,23}",{"_index":708,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{4,5,6,7},",{"_index":689,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{8,9,10,11}",{"_index":704,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{8,9,10,11}};",{"_index":690,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["{{0,1,2,3},",{"_index":688,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["{}",{"_index":590,"text":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{},"ds/array/functions/#return-array-from-functions":{},"php/atttributes/":{}},"title":{}}],["{}.",{"_index":1444,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["|",{"_index":1506,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["||",{"_index":468,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"java/basics/":{},"java/basics/#operators":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["}",{"_index":68,"text":{"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/exponential/#exponential-search":{},"Search%20%26%20Sort/Search/exponential/#ternery-search":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/interpolation/#iterative":{},"Search%20%26%20Sort/Search/interpolation/#reursive":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/intro/#iterative":{},"Search%20%26%20Sort/Search/intro/#linear-search":{},"Search%20%26%20Sort/Search/intro/#problem-m-lr2-might-overflow":{},"Search%20%26%20Sort/Search/intro/#recursive":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Search/jump/#jump-search":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#bubble-sort":{},"Search%20%26%20Sort/Sort/intro/#insertion-sort":{},"Search%20%26%20Sort/Sort/intro/#selection-sort":{},"Search%20%26%20Sort/Sort/intro/#stable":{},"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#dummy-nodes":{},"Search%20%26%20Sort/Sort/merge/#local-reference":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#traversal":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#xor-utility":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#iterable":{},"php/basics/#object":{},"php/basics/#types":{}},"title":{}}],["},",{"_index":705,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["};",{"_index":519,"text":{"Search%20%26%20Sort/Sort/merge/":{},"Search%20%26%20Sort/Sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["~",{"_index":1503,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["\u00b6",{"_index":3,"text":{"":{},"Search%20%26%20Sort/Search/exponential/":{},"Search%20%26%20Sort/Search/interpolation/":{},"Search%20%26%20Sort/Search/intro/":{},"Search%20%26%20Sort/Search/jump/":{},"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/merge/":{},"ds/array/decay/":{},"ds/array/frequency/":{},"ds/array/functions/":{},"ds/array/intro/":{},"ds/array/min-max/":{},"ds/array/multi-dimensional/":{},"ds/array/reverse/":{},"ds/array/vectors/":{},"ds/array/vs-pointers/":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/cll/":{},"ds/linked-list/count/":{},"ds/linked-list/deletion/":{},"ds/linked-list/dll/":{},"ds/linked-list/functions/":{},"ds/linked-list/generic/":{},"ds/linked-list/insertion/":{},"ds/linked-list/intro/":{},"ds/linked-list/reverse/":{},"ds/linked-list/search/":{},"ds/linked-list/swap/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/xor-dll/":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/print-binary/":{},"ds/queue/priority-queue/":{},"ds/queue/using-stack/":{},"ds/stack/intro/":{},"ds/stack/k-stacks/":{},"ds/stack/medium-special/":{},"ds/stack/min-special/":{},"ds/stack/reverse/":{},"ds/stack/sort/":{},"ds/stack/stock-span/":{},"ds/stack/using-queue/":{},"java/annotations/":{},"java/basics/":{},"java/collections/":{},"java/generics/":{},"java/inheritance/":{},"java/interfaces/":{},"java/intro/":{},"java/numbers/":{},"java/oops/":{},"java/packages/":{},"java/strings/":{},"php/basics/":{},"php/intro/":{}},"title":{}}],["\u00bb",{"_index":2226,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["\u03b8(nlogn)",{"_index":431,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["\u03c9(nlog2n)",{"_index":433,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["\u2013",{"_index":723,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#iterators":{},"ds/array/vectors/#modifiers":{},"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["\u2014",{"_index":1322,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["\u201carr[i]\u201d",{"_index":772,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["\u2026..",{"_index":405,"text":{"Search%20%26%20Sort/Sort/intro/":{},"Search%20%26%20Sort/Sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}]],"pipeline":["stemmer"],"version":"2.3.8"}}