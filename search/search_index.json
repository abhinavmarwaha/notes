{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":"python","separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Abhinav's Notes \u00b6 Collection of my notes.","title":"Home"},{"location":"#abhinavs-notes","text":"Collection of my notes.","title":"Abhinav's Notes"},{"location":"algo/bits/","text":"Bits Tricks \u00b6 Java \u00b6 >> (Signed right shift) \u00b6 negative number -> 1 is used as a filler positive number -> 0 is used as a filler 4>>1 -> 2 -4>>1 -> -2 >>> (Unsigned right shift) \u00b6 fills 0 -1 >>> 29 -> 00...0111 -1 >>> 30 -> 00...0011 -1>>>31 -> 00...0001 Detect if two integers have opposite signs \u00b6 XOR \u00b6 bool oppositeSigns(int x, int y) { return ((x ^ y) < 0); } ternery \u00b6 bool oppositeSigns(int x, int y) { return (x < 0)? (y >= 0): (y < 0); } 32 bit ints \u00b6 bool oppositeSigns(int x, int y) { return ((x ^ y) >> 31); } Count total set bits in all numbers from 1 to n \u00b6 A simple solution is to run a loop from 1 to n and sum the count of set bits in all numbers from 1 to n. unsigned int countSetBits(unsigned int n) { int bitCount = 0; for (int i = 1; i <= n; i++) bitCount += countSetBitsUtil(i); return bitCount; } unsigned int countSetBitsUtil(unsigned int x) { if (x <= 0) return 0; return (x % 2 == 0 ? 0 : 1) + countSetBitsUtil(x / 2); } Add two numbers without using arithmetic operators \u00b6 iterative \u00b6 int Add(int x, int y) { while (y != 0) { int carry = x & y; x = x ^ y; y = carry << 1; } return x; } Recursive \u00b6 int Add(int x, int y) { if (y == 0) return x; else return Add( x ^ y, (x & y) << 1); } Smallest of three integers without comparison operators \u00b6 Method 1 (Repeated Subtraction) \u00b6 int smallest(int x, int y, int z) { int c = 0; while (x && y && z) { x--; y--; z--; c++; } return c; } Method 2 (Use Bit Operations) \u00b6 ####define CHAR_BIT 8 int min(int x, int y) { return y + ((x - y) & ((x - y) >> (sizeof(int) * CHAR_BIT - 1))); } int smallest(int x, int y, int z) { return min(x, min(y, z)); } Method 3 (Use Division operator) \u00b6 int smallest(int x, int y, int z) { if (!(y / x)) // Same as \"if (y < x)\" return (!(y / z)) ? y : z; return (!(x / z)) ? x : z; } A Boolean Array Puzzle \u00b6 Input: A array arr[] of two elements having value 0 and 1 Output: Make both elements 0. Specifications: Following are the specifications to follow. It is guaranteed that one element is 0 but we do not know its position. We can\u2019t say about another element it can be 0 or 1. We can only complement array elements, no other operation like and, or, multi, division, \u2026. etc. We can\u2019t use if, else and loop constructs. Obviously, we can\u2019t directly assign 0 to array elements. void changeToZero(int a[2]) { a[ a[1] ] = a[ !a[1] ]; } void changeToZero(int a[2]) { a[ !a[0] ] = a[ !a[1] ] } void changeToZero(int a[2]) { a[ a[1] ] = a[ a[0] ] } void changeToZero(int a[2]) { a[0] = a[a[0]]; a[1] = a[0]; } int main() { int a[] = {1, 0}; changeToZero(a); cout<<\"arr[0] = \"<<a[0]<<endl; cout<<\" arr[1] = \"<<a[1]; return 0; }","title":"Bits Tricks"},{"location":"algo/bits/#bits-tricks","text":"","title":"Bits Tricks"},{"location":"algo/bits/#java","text":"","title":"Java"},{"location":"algo/bits/#signed-right-shift","text":"negative number -> 1 is used as a filler positive number -> 0 is used as a filler 4>>1 -> 2 -4>>1 -> -2","title":"&gt;&gt; (Signed right shift)"},{"location":"algo/bits/#unsigned-right-shift","text":"fills 0 -1 >>> 29 -> 00...0111 -1 >>> 30 -> 00...0011 -1>>>31 -> 00...0001","title":"&gt;&gt;&gt; (Unsigned right shift)"},{"location":"algo/bits/#detect-if-two-integers-have-opposite-signs","text":"","title":"Detect if two integers have opposite signs"},{"location":"algo/bits/#xor","text":"bool oppositeSigns(int x, int y) { return ((x ^ y) < 0); }","title":"XOR"},{"location":"algo/bits/#ternery","text":"bool oppositeSigns(int x, int y) { return (x < 0)? (y >= 0): (y < 0); }","title":"ternery"},{"location":"algo/bits/#32-bit-ints","text":"bool oppositeSigns(int x, int y) { return ((x ^ y) >> 31); }","title":"32 bit ints"},{"location":"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n","text":"A simple solution is to run a loop from 1 to n and sum the count of set bits in all numbers from 1 to n. unsigned int countSetBits(unsigned int n) { int bitCount = 0; for (int i = 1; i <= n; i++) bitCount += countSetBitsUtil(i); return bitCount; } unsigned int countSetBitsUtil(unsigned int x) { if (x <= 0) return 0; return (x % 2 == 0 ? 0 : 1) + countSetBitsUtil(x / 2); }","title":"Count total set bits in all numbers from 1 to n"},{"location":"algo/bits/#add-two-numbers-without-using-arithmetic-operators","text":"","title":"Add two numbers without using arithmetic operators"},{"location":"algo/bits/#iterative","text":"int Add(int x, int y) { while (y != 0) { int carry = x & y; x = x ^ y; y = carry << 1; } return x; }","title":"iterative"},{"location":"algo/bits/#recursive","text":"int Add(int x, int y) { if (y == 0) return x; else return Add( x ^ y, (x & y) << 1); }","title":"Recursive"},{"location":"algo/bits/#smallest-of-three-integers-without-comparison-operators","text":"","title":"Smallest of three integers without comparison operators"},{"location":"algo/bits/#method-1-repeated-subtraction","text":"int smallest(int x, int y, int z) { int c = 0; while (x && y && z) { x--; y--; z--; c++; } return c; }","title":"Method 1 (Repeated Subtraction)"},{"location":"algo/bits/#method-2-use-bit-operations","text":"####define CHAR_BIT 8 int min(int x, int y) { return y + ((x - y) & ((x - y) >> (sizeof(int) * CHAR_BIT - 1))); } int smallest(int x, int y, int z) { return min(x, min(y, z)); }","title":"Method 2 (Use Bit Operations)"},{"location":"algo/bits/#method-3-use-division-operator","text":"int smallest(int x, int y, int z) { if (!(y / x)) // Same as \"if (y < x)\" return (!(y / z)) ? y : z; return (!(x / z)) ? x : z; }","title":"Method 3 (Use Division operator)"},{"location":"algo/bits/#a-boolean-array-puzzle","text":"Input: A array arr[] of two elements having value 0 and 1 Output: Make both elements 0. Specifications: Following are the specifications to follow. It is guaranteed that one element is 0 but we do not know its position. We can\u2019t say about another element it can be 0 or 1. We can only complement array elements, no other operation like and, or, multi, division, \u2026. etc. We can\u2019t use if, else and loop constructs. Obviously, we can\u2019t directly assign 0 to array elements. void changeToZero(int a[2]) { a[ a[1] ] = a[ !a[1] ]; } void changeToZero(int a[2]) { a[ !a[0] ] = a[ !a[1] ] } void changeToZero(int a[2]) { a[ a[1] ] = a[ a[0] ] } void changeToZero(int a[2]) { a[0] = a[a[0]]; a[1] = a[0]; } int main() { int a[] = {1, 0}; changeToZero(a); cout<<\"arr[0] = \"<<a[0]<<endl; cout<<\" arr[1] = \"<<a[1]; return 0; }","title":"A Boolean Array Puzzle"},{"location":"algo/maths/","text":"Maths \u00b6 Multiple of 3 \u00b6 Proof: Above can be proved by taking the example of 11 in decimal numbers. (In this context 11 in decimal numbers is same as 3 in binary numbers) If difference between sum of odd digits and even digits is multiple of 11 then decimal number is multiple of 11. Let\u2019s see how. Let\u2019s take the example of 2 digit numbers in decimal AB = 11A -A + B = 11A + (B \u2013 A) So if (B \u2013 A) is a multiple of 11 then is AB. Let us take 3 digit numbers. ABC = 99A + A + 11B \u2013 B + C = (99A + 11B) + (A + C \u2013 B) So if (A + C \u2013 B) is a multiple of 11 then is (ABC) Let us take 4 digit numbers now. ABCD = 1001A + D + 11C \u2013 C + 999B + B \u2013 A = (1001A \u2013 999B + 11C) + (D + B \u2013 A -C ) So, if (B + D \u2013 A \u2013 C) is a multiple of 11 then is ABCD. This can be continued for all decimal numbers. Above concept can be proved for 3 in binary numbers in the same way. int isMultipleOf3(int n) { int odd_count = 0; int even_count = 0; if (n < 0) n = -n; if (n == 0) return 1; if (n == 1) return 0; while (n) { if (n & 1) odd_count++; if (n & 2) even_count++; n = n >> 2; } return isMultipleOf3(abs(odd_count - even_count)); } Multiply by 7 \u00b6 7n = 8n -n n<<3 -n Note: Works only for positive integers. Same concept can be used for fast multiplication by 9 or other numbers. Lucky number \u00b6 bool isLucky(int n) { static int counter = 2; int next_position = n; if(counter > n) return 1; if(n % counter == 0) return 0; counter++; return isLucky(next_position); } Base n Addition \u00b6 column by column addition -> carry if sum > base -> sum - base; char *sumBase14(char num1[], char num2[]) { int l1 = strlen(num1); int l2 = strlen(num2); char *res; int i; int nml1, nml2, res_nml; bool carry = 0; if(l1 != l2) { cout << \"Function doesn't support numbers of different\" \" lengths. If you want to add such numbers then\" \" prefix smaller number with required no. of zeroes\"; assert(0); } res = new char[(sizeof(char)*(l1 + 1))]; for(i = l1-1; i >= 0; i--) { nml1 = getNumeralValue(num1[i]); nml2 = getNumeralValue(num2[i]); res_nml = carry + nml1 + nml2; if(res_nml >= 14) { carry = 1; res_nml -= 14; } else { carry = 0; } res[i+1] = getNumeral(res_nml); } if(carry == 0) return (res + 1); res[0] = '1'; return res; } int getNumeralValue(char num) { if( num >= '0' && num <= '9') return (num - '0'); if( num >= 'A' && num <= 'D') return (num - 'A' + 10); assert(0); } char getNumeral(int val) { if( val >= 0 && val <= 9) return (val + '0'); if( val >= 10 && val <= 14) return (val + 'A' - 10); assert(0); } Notes: The above approach can be used to add numbers to any base. We don\u2019t have to do string operations if the base is smaller than 10. You can try extending the above program for numbers of different lengths. Square Root \u00b6 float squareRoot(float n) { /*We are using n itself as initial approximation This can definitely be improved */ float x = n; float y = 1; float e = 0.000001; /* e decides the accuracy level*/ while (x - y > e) { x = (x + y) / 2; y = n / x; } return x; } Multiply two integers without using multiplication, division and bitwise operators, and no loops \u00b6 public : int multiply(int x, int y) { if(y == 0) return 0; if(y > 0 ) return (x + multiply(x, y-1)); if(y < 0 ) return -multiply(x, -y); } Russian Peasant (Multiply two numbers using bitwise operators) \u00b6 unsigned int russianPeasant(unsigned int a, unsigned int b) { int res = 0; // initialize result // While second number doesn't become 1 while (b > 0) { // If second number becomes odd, add the first number to result if (b & 1) res = res + a; // Double the first number and halve the second number a = a << 1; b = b >> 1; } return res; } How does this work? The value of a b is same as (a 2) (b/2) if b is even, otherwise the value is same as ((a 2)*(b/2) + a). In the while loop, we keep multiplying \u2018a\u2019 with 2 and keep dividing \u2018b\u2019 by 2. If \u2018b\u2019 becomes odd in loop, we add \u2018a\u2019 to \u2018res\u2019. When value of \u2018b\u2019 becomes 1, the value of \u2018res\u2019 + \u2018a\u2019, gives us the result. Note that when \u2018b\u2019 is a power of 2, the \u2018res\u2019 would remain 0 and \u2018a\u2019 would have the multiplication Print all combinations of points that can compose a given number \u00b6 void printCompositions(int n, int i) { static int arr[ARR_SIZE]; if (n == 0) { printArray(arr, i); } else if(n > 0) { int k; for (k = 1; k <= MAX_POINT; k++) { arr[i]= k; printCompositions(n-k, i+1); } } } Write you own Power without using multiplication(*) and division(/) operators \u00b6 Method 1 (Using Nested Loops) \u00b6 int pow(int a, int b) { if (b == 0) return 1; int answer = a; int increment = a; int i, j; for(i = 1; i < b; i++) { for(j = 1; j < a; j++) { answer += increment; } increment = answer; } return answer; } Method 2 (Using Recursion) \u00b6 /* A recursive function to get x*y */ int multiply(int x, int y) { if(y) return (x + multiply(x, y - 1)); else return 0; } /* A recursive function to get a^b Works only if a >= 0 and b >= 0 */ int pow(int a, int b) { if(b) return multiply(a, pow(a, b - 1)); else return 1; } Fibonici \u00b6 Method 1 (Recurssion) \u00b6 Time Complexity: T(n) = T(n-1) + T(n-2) which is exponential. Extra Space: O(n) if we consider the function call stack size, otherwise O(1). int fib(int n) { if (n <= 1) return n; return fib(n-1) + fib(n-2); } Method 2 (DP) \u00b6 Time Complexity: O(n) Extra Space: O(n) int fib(int n) { int f[n + 2]; int i; f[0] = 0; f[1] = 1; for(i = 2; i <= n; i++) { f[i] = f[i - 1] + f[i - 2]; } return f[n]; } }; Method 3 (space optimised 2) \u00b6 Time Complexity:O(n) Extra Space: O(1) int fib(int n) { int a = 0, b = 1, c, i; if( n == 0) return a; for(i = 2; i <= n; i++) { c = a + b; a = b; b = c; } return b; } Method 4 ( Using power of the matrix {{1,1},{1,0}} ) \u00b6 This another O(n) which relies on the fact that if we n times multiply the matrix M = {{1,1},{1,0}} to itself (in other words calculate power(M, n )), then we get the (n+1)th Fibonacci number as the element at row and column (0, 0) in the resultant matrix. The matrix representation gives the following closed expression for the Fibonacci numbers: Time Complexity: O(n) Extra Space: O(1) int fib(int n) { int F[2][2] = {{1,1},{1,0}}; if (n == 0) return 0; power(F, n-1); return F[0][0]; } void multiply(int F[2][2], int M[2][2]) { int x = F[0][0]*M[0][0] + F[0][1]*M[1][0]; int y = F[0][0]*M[0][1] + F[0][1]*M[1][1]; int z = F[1][0]*M[0][0] + F[1][1]*M[1][0]; int w = F[1][0]*M[0][1] + F[1][1]*M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; } void power(int F[2][2], int n) { int i; int M[2][2] = {{1,1},{1,0}}; // n - 1 times multiply the matrix to {{1,0},{0,1}} for (i = 2; i <= n; i++) multiply(F, M); } Method 5 ( Optimized Method 4 ) \u00b6 The method 4 can be optimized to work in O(Logn) time complexity. We can do recursive multiplication to get power(M, n) in the prevous method Time Complexity: O(Logn) Extra Space: O(Logn) if we consider the function call stack size, otherwise O(1). int fib(int n) { int F[2][2] = {{1, 1}, {1, 0}}; if (n == 0) return 0; power(F, n - 1); return F[0][0]; } void power(int F[2][2], int n) { if(n == 0 || n == 1) return; int M[2][2] = {{1, 1}, {1, 0}}; power(F, n / 2); multiply(F, F); if (n % 2 != 0) multiply(F, M); } void multiply(int F[2][2], int M[2][2]) { int x = F[0][0] * M[0][0] + F[0][1] * M[1][0]; int y = F[0][0] * M[0][1] + F[0][1] * M[1][1]; int z = F[1][0] * M[0][0] + F[1][1] * M[1][0]; int w = F[1][0] * M[0][1] + F[1][1] * M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; } Method 6 (O(Log n) Time) \u00b6 If n is even then k = n/2: F(n) = [2*F(k-1) + F(k)]*F(k) If n is odd then k = (n + 1)/2 F(n) = F(k)*F(k) + F(k-1)*F(k-1) Method 7 (Using formula) \u00b6 Fn = {[(\u221a5 + 1)/2] ^ n} / \u221a5 Average of Stream of numbers \u00b6 float getAvg(float prev_avg, int x, int n) { return (prev_avg * n + x) / (n + 1); } The above function getAvg() can be optimized using following changes. We can avoid the use of prev_avg and number of elements by using static variables (Assuming that only this function is called for average of stream). Following is the oprimnized version. filter_none float getAvg(int x) { static int sum, n; sum += x; return (((float)sum) / ++n); }","title":"Maths"},{"location":"algo/maths/#maths","text":"","title":"Maths"},{"location":"algo/maths/#multiple-of-3","text":"Proof: Above can be proved by taking the example of 11 in decimal numbers. (In this context 11 in decimal numbers is same as 3 in binary numbers) If difference between sum of odd digits and even digits is multiple of 11 then decimal number is multiple of 11. Let\u2019s see how. Let\u2019s take the example of 2 digit numbers in decimal AB = 11A -A + B = 11A + (B \u2013 A) So if (B \u2013 A) is a multiple of 11 then is AB. Let us take 3 digit numbers. ABC = 99A + A + 11B \u2013 B + C = (99A + 11B) + (A + C \u2013 B) So if (A + C \u2013 B) is a multiple of 11 then is (ABC) Let us take 4 digit numbers now. ABCD = 1001A + D + 11C \u2013 C + 999B + B \u2013 A = (1001A \u2013 999B + 11C) + (D + B \u2013 A -C ) So, if (B + D \u2013 A \u2013 C) is a multiple of 11 then is ABCD. This can be continued for all decimal numbers. Above concept can be proved for 3 in binary numbers in the same way. int isMultipleOf3(int n) { int odd_count = 0; int even_count = 0; if (n < 0) n = -n; if (n == 0) return 1; if (n == 1) return 0; while (n) { if (n & 1) odd_count++; if (n & 2) even_count++; n = n >> 2; } return isMultipleOf3(abs(odd_count - even_count)); }","title":"Multiple of 3"},{"location":"algo/maths/#multiply-by-7","text":"7n = 8n -n n<<3 -n Note: Works only for positive integers. Same concept can be used for fast multiplication by 9 or other numbers.","title":"Multiply by 7"},{"location":"algo/maths/#lucky-number","text":"bool isLucky(int n) { static int counter = 2; int next_position = n; if(counter > n) return 1; if(n % counter == 0) return 0; counter++; return isLucky(next_position); }","title":"Lucky number"},{"location":"algo/maths/#base-n-addition","text":"column by column addition -> carry if sum > base -> sum - base; char *sumBase14(char num1[], char num2[]) { int l1 = strlen(num1); int l2 = strlen(num2); char *res; int i; int nml1, nml2, res_nml; bool carry = 0; if(l1 != l2) { cout << \"Function doesn't support numbers of different\" \" lengths. If you want to add such numbers then\" \" prefix smaller number with required no. of zeroes\"; assert(0); } res = new char[(sizeof(char)*(l1 + 1))]; for(i = l1-1; i >= 0; i--) { nml1 = getNumeralValue(num1[i]); nml2 = getNumeralValue(num2[i]); res_nml = carry + nml1 + nml2; if(res_nml >= 14) { carry = 1; res_nml -= 14; } else { carry = 0; } res[i+1] = getNumeral(res_nml); } if(carry == 0) return (res + 1); res[0] = '1'; return res; } int getNumeralValue(char num) { if( num >= '0' && num <= '9') return (num - '0'); if( num >= 'A' && num <= 'D') return (num - 'A' + 10); assert(0); } char getNumeral(int val) { if( val >= 0 && val <= 9) return (val + '0'); if( val >= 10 && val <= 14) return (val + 'A' - 10); assert(0); } Notes: The above approach can be used to add numbers to any base. We don\u2019t have to do string operations if the base is smaller than 10. You can try extending the above program for numbers of different lengths.","title":"Base n Addition"},{"location":"algo/maths/#square-root","text":"float squareRoot(float n) { /*We are using n itself as initial approximation This can definitely be improved */ float x = n; float y = 1; float e = 0.000001; /* e decides the accuracy level*/ while (x - y > e) { x = (x + y) / 2; y = n / x; } return x; }","title":"Square Root"},{"location":"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops","text":"public : int multiply(int x, int y) { if(y == 0) return 0; if(y > 0 ) return (x + multiply(x, y-1)); if(y < 0 ) return -multiply(x, -y); }","title":"Multiply two integers without using multiplication, division and bitwise operators, and no loops"},{"location":"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators","text":"unsigned int russianPeasant(unsigned int a, unsigned int b) { int res = 0; // initialize result // While second number doesn't become 1 while (b > 0) { // If second number becomes odd, add the first number to result if (b & 1) res = res + a; // Double the first number and halve the second number a = a << 1; b = b >> 1; } return res; } How does this work? The value of a b is same as (a 2) (b/2) if b is even, otherwise the value is same as ((a 2)*(b/2) + a). In the while loop, we keep multiplying \u2018a\u2019 with 2 and keep dividing \u2018b\u2019 by 2. If \u2018b\u2019 becomes odd in loop, we add \u2018a\u2019 to \u2018res\u2019. When value of \u2018b\u2019 becomes 1, the value of \u2018res\u2019 + \u2018a\u2019, gives us the result. Note that when \u2018b\u2019 is a power of 2, the \u2018res\u2019 would remain 0 and \u2018a\u2019 would have the multiplication","title":"Russian Peasant (Multiply two numbers using bitwise operators)"},{"location":"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number","text":"void printCompositions(int n, int i) { static int arr[ARR_SIZE]; if (n == 0) { printArray(arr, i); } else if(n > 0) { int k; for (k = 1; k <= MAX_POINT; k++) { arr[i]= k; printCompositions(n-k, i+1); } } }","title":"Print all combinations of points that can compose a given number"},{"location":"algo/maths/#write-you-own-power-without-using-multiplication-and-division-operators","text":"","title":"Write you own Power without using multiplication(*) and division(/) operators"},{"location":"algo/maths/#method-1-using-nested-loops","text":"int pow(int a, int b) { if (b == 0) return 1; int answer = a; int increment = a; int i, j; for(i = 1; i < b; i++) { for(j = 1; j < a; j++) { answer += increment; } increment = answer; } return answer; }","title":"Method 1 (Using Nested Loops)"},{"location":"algo/maths/#method-2-using-recursion","text":"/* A recursive function to get x*y */ int multiply(int x, int y) { if(y) return (x + multiply(x, y - 1)); else return 0; } /* A recursive function to get a^b Works only if a >= 0 and b >= 0 */ int pow(int a, int b) { if(b) return multiply(a, pow(a, b - 1)); else return 1; }","title":"Method 2 (Using Recursion)"},{"location":"algo/maths/#fibonici","text":"","title":"Fibonici"},{"location":"algo/maths/#method-1-recurssion","text":"Time Complexity: T(n) = T(n-1) + T(n-2) which is exponential. Extra Space: O(n) if we consider the function call stack size, otherwise O(1). int fib(int n) { if (n <= 1) return n; return fib(n-1) + fib(n-2); }","title":"Method 1 (Recurssion)"},{"location":"algo/maths/#method-2-dp","text":"Time Complexity: O(n) Extra Space: O(n) int fib(int n) { int f[n + 2]; int i; f[0] = 0; f[1] = 1; for(i = 2; i <= n; i++) { f[i] = f[i - 1] + f[i - 2]; } return f[n]; } };","title":"Method 2 (DP)"},{"location":"algo/maths/#method-3-space-optimised-2","text":"Time Complexity:O(n) Extra Space: O(1) int fib(int n) { int a = 0, b = 1, c, i; if( n == 0) return a; for(i = 2; i <= n; i++) { c = a + b; a = b; b = c; } return b; }","title":"Method 3 (space optimised 2)"},{"location":"algo/maths/#method-4-using-power-of-the-matrix-1110","text":"This another O(n) which relies on the fact that if we n times multiply the matrix M = {{1,1},{1,0}} to itself (in other words calculate power(M, n )), then we get the (n+1)th Fibonacci number as the element at row and column (0, 0) in the resultant matrix. The matrix representation gives the following closed expression for the Fibonacci numbers: Time Complexity: O(n) Extra Space: O(1) int fib(int n) { int F[2][2] = {{1,1},{1,0}}; if (n == 0) return 0; power(F, n-1); return F[0][0]; } void multiply(int F[2][2], int M[2][2]) { int x = F[0][0]*M[0][0] + F[0][1]*M[1][0]; int y = F[0][0]*M[0][1] + F[0][1]*M[1][1]; int z = F[1][0]*M[0][0] + F[1][1]*M[1][0]; int w = F[1][0]*M[0][1] + F[1][1]*M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; } void power(int F[2][2], int n) { int i; int M[2][2] = {{1,1},{1,0}}; // n - 1 times multiply the matrix to {{1,0},{0,1}} for (i = 2; i <= n; i++) multiply(F, M); }","title":"Method 4 ( Using power of the matrix {{1,1},{1,0}} )"},{"location":"algo/maths/#method-5-optimized-method-4","text":"The method 4 can be optimized to work in O(Logn) time complexity. We can do recursive multiplication to get power(M, n) in the prevous method Time Complexity: O(Logn) Extra Space: O(Logn) if we consider the function call stack size, otherwise O(1). int fib(int n) { int F[2][2] = {{1, 1}, {1, 0}}; if (n == 0) return 0; power(F, n - 1); return F[0][0]; } void power(int F[2][2], int n) { if(n == 0 || n == 1) return; int M[2][2] = {{1, 1}, {1, 0}}; power(F, n / 2); multiply(F, F); if (n % 2 != 0) multiply(F, M); } void multiply(int F[2][2], int M[2][2]) { int x = F[0][0] * M[0][0] + F[0][1] * M[1][0]; int y = F[0][0] * M[0][1] + F[0][1] * M[1][1]; int z = F[1][0] * M[0][0] + F[1][1] * M[1][0]; int w = F[1][0] * M[0][1] + F[1][1] * M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; }","title":"Method 5 ( Optimized Method 4 )"},{"location":"algo/maths/#method-6-olog-n-time","text":"If n is even then k = n/2: F(n) = [2*F(k-1) + F(k)]*F(k) If n is odd then k = (n + 1)/2 F(n) = F(k)*F(k) + F(k-1)*F(k-1)","title":"Method 6 (O(Log n) Time)"},{"location":"algo/maths/#method-7-using-formula","text":"Fn = {[(\u221a5 + 1)/2] ^ n} / \u221a5","title":"Method 7 (Using formula)"},{"location":"algo/maths/#average-of-stream-of-numbers","text":"float getAvg(float prev_avg, int x, int n) { return (prev_avg * n + x) / (n + 1); } The above function getAvg() can be optimized using following changes. We can avoid the use of prev_avg and number of elements by using static variables (Assuming that only this function is called for average of stream). Following is the oprimnized version. filter_none float getAvg(int x) { static int sum, n; sum += x; return (((float)sum) / ++n); }","title":"Average of Stream of numbers"},{"location":"algo/analysis/amortised/","text":"Amortized Analysis \u00b6 is used for algorithms where an occasional operation is very slow, but most of the other operations are faster. In Amortized Analysis, we analyze a sequence of operations and guarantee a worst case average time which is lower than the worst case time of a particular expensive operation. The example data structures whose operations are analyzed using Amortized Analysis are Hash Tables, Disjoint Sets and Splay Trees. Let us consider an example of a simple hash table insertions. How do we decide table size? There is a trade-off between space and time, if we make hash-table size big, search time becomes fast, but space required becomes high. Dynamic Table The solution to this trade-off problem is to use Dynamic Table (or Arrays). The idea is to increase size of table whenever it becomes full. Following are the steps to follow when table becomes full. 1) Allocate memory for a larger table of size, typically twice the old table. 2) Copy the contents of old table to new table. 3) Free the old table. If the table has space available, we simply insert new item in available space. What is the time complexity of n insertions using the above scheme? If we use simple analysis, the worst case cost of an insertion is O(n). Therefore, worst case cost of n inserts is n * O(n) which is O(n2). This analysis gives an upper bound, but not a tight upper bound for n insertions as all insertions don\u2019t take \u0398(n) time. So using Amortized Analysis, we could prove that the Dynamic Table scheme has O(1) insertion time which is a great result used in hashing. Also, the concept of dynamic table is used in vectors in C++, ArrayList in Java. Following are few important notes. 1) Amortized cost of a sequence of operations can be seen as expenses of a salaried person. The average monthly expense of the person is less than or equal to the salary, but the person can spend more money in a particular month by buying a car or something. In other months, he or she saves money for the expensive month. 2) The above Amortized Analysis done for Dynamic Array example is called Aggregate Method. There are two more powerful ways to do Amortized analysis called Accounting Method and Potential Method. We will be discussing the other two methods in separate posts. 3) The amortized analysis doesn\u2019t involve probability. There is also another different notion of average-case running time where algorithms use randomization to make them faster and expected running time is faster than the worst-case running time. These algorithms are analyzed using Randomized Analysis. Examples of these algorithms are Randomized Quick Sort, Quick Select and Hashing. We will soon be covering Randomized analysis in a different post. To perform the amortized analysis of Red-Black Tree Insertion operation, we use Potential(or Physicist\u2019s) method. For potential method, we define a potential function \\phi that maps a data structure to a non-negative real value. An operation can result in a change of this potential. Let us define the potential function \\phi in the following manner: https://www.geeksforgeeks.org/analysis-algorithm-set-5-amortized-analysis-introduction/ Thus, the total amortized cost of insertion in Red-Black Tree is O(n).","title":"Amortized Analysis"},{"location":"algo/analysis/amortised/#amortized-analysis","text":"is used for algorithms where an occasional operation is very slow, but most of the other operations are faster. In Amortized Analysis, we analyze a sequence of operations and guarantee a worst case average time which is lower than the worst case time of a particular expensive operation. The example data structures whose operations are analyzed using Amortized Analysis are Hash Tables, Disjoint Sets and Splay Trees. Let us consider an example of a simple hash table insertions. How do we decide table size? There is a trade-off between space and time, if we make hash-table size big, search time becomes fast, but space required becomes high. Dynamic Table The solution to this trade-off problem is to use Dynamic Table (or Arrays). The idea is to increase size of table whenever it becomes full. Following are the steps to follow when table becomes full. 1) Allocate memory for a larger table of size, typically twice the old table. 2) Copy the contents of old table to new table. 3) Free the old table. If the table has space available, we simply insert new item in available space. What is the time complexity of n insertions using the above scheme? If we use simple analysis, the worst case cost of an insertion is O(n). Therefore, worst case cost of n inserts is n * O(n) which is O(n2). This analysis gives an upper bound, but not a tight upper bound for n insertions as all insertions don\u2019t take \u0398(n) time. So using Amortized Analysis, we could prove that the Dynamic Table scheme has O(1) insertion time which is a great result used in hashing. Also, the concept of dynamic table is used in vectors in C++, ArrayList in Java. Following are few important notes. 1) Amortized cost of a sequence of operations can be seen as expenses of a salaried person. The average monthly expense of the person is less than or equal to the salary, but the person can spend more money in a particular month by buying a car or something. In other months, he or she saves money for the expensive month. 2) The above Amortized Analysis done for Dynamic Array example is called Aggregate Method. There are two more powerful ways to do Amortized analysis called Accounting Method and Potential Method. We will be discussing the other two methods in separate posts. 3) The amortized analysis doesn\u2019t involve probability. There is also another different notion of average-case running time where algorithms use randomization to make them faster and expected running time is faster than the worst-case running time. These algorithms are analyzed using Randomized Analysis. Examples of these algorithms are Randomized Quick Sort, Quick Select and Hashing. We will soon be covering Randomized analysis in a different post. To perform the amortized analysis of Red-Black Tree Insertion operation, we use Potential(or Physicist\u2019s) method. For potential method, we define a potential function \\phi that maps a data structure to a non-negative real value. An operation can result in a change of this potential. Let us define the potential function \\phi in the following manner: https://www.geeksforgeeks.org/analysis-algorithm-set-5-amortized-analysis-introduction/ Thus, the total amortized cost of insertion in Red-Black Tree is O(n).","title":"Amortized Analysis"},{"location":"algo/analysis/caching/","text":"Caching \u00b6 Ignoring the compiler optimizations, which of the two is better implementation of sum? int fun1(int arr[R][C]) { int sum = 0; for (int i=0; i<R; i++) for (int j=0; j<C; j++) sum += arr[i][j]; } int fun2(int arr[R][C]) { int sum = 0; for (int j=0; j<C; j++) for (int i=0; i<R; i++) sum += arr[i][j]; } In C/C++, elements are stored in Row-Major order. So the first implementation has better spatial locality (nearby memory locations are referenced in successive iterations). Therefore, first implementation should always be preferred for iterating multidimensional arrays.","title":"Caching"},{"location":"algo/analysis/caching/#caching","text":"Ignoring the compiler optimizations, which of the two is better implementation of sum? int fun1(int arr[R][C]) { int sum = 0; for (int i=0; i<R; i++) for (int j=0; j<C; j++) sum += arr[i][j]; } int fun2(int arr[R][C]) { int sum = 0; for (int j=0; j<C; j++) for (int i=0; i<R; i++) sum += arr[i][j]; } In C/C++, elements are stored in Row-Major order. So the first implementation has better spatial locality (nearby memory locations are referenced in successive iterations). Therefore, first implementation should always be preferred for iterating multidimensional arrays.","title":"Caching"},{"location":"algo/analysis/classes/","text":"Time complexity classes \u00b6 O(1) loop with constant swap O(n): if the loop variables is incremented / decremented by a constant amount. O(nc): Time complexity of nested loops is equal to the number of times the innermost statement is executed. O(Logn) Time Complexity of a loop is considered as O(Logn) if the loop variables is divided / multiplied by a constant amount. Binary -> is 1, c, c2, c3, \u2026 ck. If we put k equals to Logcn, we get cLogcn which is n. O(LogLogn) Time Complexity of a loop is considered as O(LogLogn) if the loop variables is reduced / increased exponentially by a constant amount. // Here c is a constant greater than 1 for (int i = 2; i <=n; i = pow(i, c)) { // some O(1) expressions } //Here fun is sqrt or cuberoot or any other constant root for (int i = n; i > 1; i = fun(i)) { // some O(1) expressions } See this for mathematical details. https://www.geeksforgeeks.org/time-complexity-loop-loop-variable-expands-shrinks-exponentially/ How to combine time complexities of consecutive loops? \u00b6 When there are consecutive loops, we calculate time complexity as sum of time complexities of individual loops. How to calculate time complexity when there are many if, else statements inside loops? Consider worst case bitch! What did you expect you little piece of shit For example consider the linear search function where we consider the case when element is present at the end or not present at all. When the code is too complex to consider all if-else cases, we can get an upper bound by ignoring if else and other complex control statements. P \u00b6 solved by deterministic Turing machine in Polynomial time. NP \u00b6 set of decision problems solved by a Non-deterministic Turing Machine in Polynomial time. P is subset of NP. NP is set of decision problems which can be solved by a polynomial time via a \u201cLucky Algorithm\u201d, a magical algorithm that always makes a right guess among the given set of choices L: A decision problem. A: Algoriithm on L. NP-complete are hardest in NP set. L is NP-complete if: 1) L is in NP (Any given solution for NP-complete problems can be verified quickly, but there is no efficient known solution). 2) Every problem in NP is reducible to L in polynomial time. NP-Hard -> follows property 2 but no neccassirally property 1. NP-Complete set is also a subset of NP-Hard set. Decision vs Optimization Problems \u00b6 NP-completeness applies on decision problems . As it\u2019s easier to compare the difficulty of decision problems than that of optimization problems. In reality, though, being able to solve a decision problem in polynomial time will often permit us to solve the corresponding optimization problem in polynomial time (using a polynomial number of calls to the decision problem). So, discussing the difficulty of decision problems is often really equivalent to discussing the difficulty of optimization problems. For example, consider the vertex cover problem (Given a graph, find out the minimum sized vertex set that covers all edges). It is an optimization problem. Corresponding decision problem is, given undirected graph G and k, is there a vertex cover of size k? Reduction \u00b6 if A1 solves L1. i.e. x1->A1->y1 given l1 = {x1,y1} if A2 solves L2. i.e. x2->A2->y2 given l2 = {x2,y2} Transoform input x1 into x2 with funtion f such that A1 = A2(f(x1)) The idea is to find a transformation(f) from L1 to L2 so that the algorithm A2 can be part of an algorithm A1 to solve L1. Learning reduction in general is very important. if we have library functions to solve certain problem and if we can reduce a new problem to one of the solved problems, we save a lot of time. For example, Consider the example of a problem where we have to find minimum product path in a given directed graph where product of path is multiplication of weights of edges along the path. If we have code for Dijkstra\u2019s algorithm to find shortest path, we can take log of all weights and use Dijkstra\u2019s algorithm to find the minimum product path rather than writing a fresh code for this new problem. How to prove that a given problem is NP complete? \u00b6 From the definition of NP-complete, it appears impossible to prove that a problem L is NP-Complete. By definition, it requires us to that show every problem in NP is polynomial time reducible to L. Fortunately, there is an alternate way to prove it. The idea is to take a known NP-Complete problem and reduce it to L. If polynomial time reduction is possible, we can prove that L is NP-Complete by transitivity of reduction (If a NP-Complete problem is reducible to L in polynomial time, then all problems are reducible to L in polynomial time). first problem as NP-Complete \u00b6 (SAT)Boolean satisfiability problem It is always useful to know about NP-Completeness even for engineers. Suppose you are asked to write an efficient algorithm to solve an extremely important problem for your company. After a lot of thinking, you can only come up exponential time approach which is impractical. If you don\u2019t know about NP-Completeness, you can only say that I could not come with an efficient algorithm. If you know about NP-Completeness and prove that the problem as NP-complete, you can proudly say that the polynomial time solution is unlikely to exist. If there is a polynomial time solution possible, then that solution solves a big problem of computer science many scientists have been trying for years.","title":"Time complexity classes"},{"location":"algo/analysis/classes/#time-complexity-classes","text":"O(1) loop with constant swap O(n): if the loop variables is incremented / decremented by a constant amount. O(nc): Time complexity of nested loops is equal to the number of times the innermost statement is executed. O(Logn) Time Complexity of a loop is considered as O(Logn) if the loop variables is divided / multiplied by a constant amount. Binary -> is 1, c, c2, c3, \u2026 ck. If we put k equals to Logcn, we get cLogcn which is n. O(LogLogn) Time Complexity of a loop is considered as O(LogLogn) if the loop variables is reduced / increased exponentially by a constant amount. // Here c is a constant greater than 1 for (int i = 2; i <=n; i = pow(i, c)) { // some O(1) expressions } //Here fun is sqrt or cuberoot or any other constant root for (int i = n; i > 1; i = fun(i)) { // some O(1) expressions } See this for mathematical details. https://www.geeksforgeeks.org/time-complexity-loop-loop-variable-expands-shrinks-exponentially/","title":"Time complexity classes"},{"location":"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops","text":"When there are consecutive loops, we calculate time complexity as sum of time complexities of individual loops. How to calculate time complexity when there are many if, else statements inside loops? Consider worst case bitch! What did you expect you little piece of shit For example consider the linear search function where we consider the case when element is present at the end or not present at all. When the code is too complex to consider all if-else cases, we can get an upper bound by ignoring if else and other complex control statements.","title":"How to combine time complexities of consecutive loops?"},{"location":"algo/analysis/classes/#p","text":"solved by deterministic Turing machine in Polynomial time.","title":"P "},{"location":"algo/analysis/classes/#np","text":"set of decision problems solved by a Non-deterministic Turing Machine in Polynomial time. P is subset of NP. NP is set of decision problems which can be solved by a polynomial time via a \u201cLucky Algorithm\u201d, a magical algorithm that always makes a right guess among the given set of choices L: A decision problem. A: Algoriithm on L. NP-complete are hardest in NP set. L is NP-complete if: 1) L is in NP (Any given solution for NP-complete problems can be verified quickly, but there is no efficient known solution). 2) Every problem in NP is reducible to L in polynomial time. NP-Hard -> follows property 2 but no neccassirally property 1. NP-Complete set is also a subset of NP-Hard set.","title":"NP "},{"location":"algo/analysis/classes/#decision-vs-optimization-problems","text":"NP-completeness applies on decision problems . As it\u2019s easier to compare the difficulty of decision problems than that of optimization problems. In reality, though, being able to solve a decision problem in polynomial time will often permit us to solve the corresponding optimization problem in polynomial time (using a polynomial number of calls to the decision problem). So, discussing the difficulty of decision problems is often really equivalent to discussing the difficulty of optimization problems. For example, consider the vertex cover problem (Given a graph, find out the minimum sized vertex set that covers all edges). It is an optimization problem. Corresponding decision problem is, given undirected graph G and k, is there a vertex cover of size k?","title":"Decision vs Optimization Problems"},{"location":"algo/analysis/classes/#reduction","text":"if A1 solves L1. i.e. x1->A1->y1 given l1 = {x1,y1} if A2 solves L2. i.e. x2->A2->y2 given l2 = {x2,y2} Transoform input x1 into x2 with funtion f such that A1 = A2(f(x1)) The idea is to find a transformation(f) from L1 to L2 so that the algorithm A2 can be part of an algorithm A1 to solve L1. Learning reduction in general is very important. if we have library functions to solve certain problem and if we can reduce a new problem to one of the solved problems, we save a lot of time. For example, Consider the example of a problem where we have to find minimum product path in a given directed graph where product of path is multiplication of weights of edges along the path. If we have code for Dijkstra\u2019s algorithm to find shortest path, we can take log of all weights and use Dijkstra\u2019s algorithm to find the minimum product path rather than writing a fresh code for this new problem.","title":"Reduction"},{"location":"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete","text":"From the definition of NP-complete, it appears impossible to prove that a problem L is NP-Complete. By definition, it requires us to that show every problem in NP is polynomial time reducible to L. Fortunately, there is an alternate way to prove it. The idea is to take a known NP-Complete problem and reduce it to L. If polynomial time reduction is possible, we can prove that L is NP-Complete by transitivity of reduction (If a NP-Complete problem is reducible to L in polynomial time, then all problems are reducible to L in polynomial time).","title":"How to prove that a given problem is NP complete?"},{"location":"algo/analysis/classes/#first-problem-as-np-complete","text":"(SAT)Boolean satisfiability problem It is always useful to know about NP-Completeness even for engineers. Suppose you are asked to write an efficient algorithm to solve an extremely important problem for your company. After a lot of thinking, you can only come up exponential time approach which is impractical. If you don\u2019t know about NP-Completeness, you can only say that I could not come with an efficient algorithm. If you know about NP-Completeness and prove that the problem as NP-complete, you can proudly say that the polynomial time solution is unlikely to exist. If there is a polynomial time solution possible, then that solution solves a big problem of computer science many scientists have been trying for years.","title":"first problem as NP-Complete"},{"location":"algo/analysis/examples/","text":"Examples \u00b6 void fun() { int i, j; for (i=1; i<=n; i++) for (j=1; j<=log(i); j++) printf(\"GeeksforGeeks\"); } \u0398(log 1) + \u0398(log 2) + \u0398(log 3) + . . . . + \u0398(log n) \u0398 (log n!) ~ \u0398(n log n) for large valusee of n by Stirling\u2019s approximation (or Stirling\u2019s formula). log n! = n log n - n + O(log(n)) void fun(int n) { int j = 1, i = 0; while (i < n) { // Some O(1) task i = i + j; j++; } } x(x+1)/2 after x iterations then x(x+1)/2 < n ===== \u0398(\u221an). void fun(int n, int k) { for (int i=1; i<=n; i++) { int p = pow(i, k); for (int j=1; j<=p; j++) { // Some O(1) work } } } 1k + 2k + 3k + \u2026 n1k. k=1 Sum = 1 + 2 + 3 ... n = n(n+1)/2 = n2/2 + n/2 k=2 Sum = 12 + 22 + 32 + ... n12. = n(n+1)(2n+1)/6 = n3/3 + n2/2 + n/6 k=3 Sum = 13 + 23 + 33 + ... n13. = n2(n+1)2/4 = n4/4 + n3/2 + n2/4 (nk+1)/(k+1) + \u0398(nk) \u0398(nk+1 / (k+1)) as can ignore lower terms","title":"Examples"},{"location":"algo/analysis/examples/#examples","text":"void fun() { int i, j; for (i=1; i<=n; i++) for (j=1; j<=log(i); j++) printf(\"GeeksforGeeks\"); } \u0398(log 1) + \u0398(log 2) + \u0398(log 3) + . . . . + \u0398(log n) \u0398 (log n!) ~ \u0398(n log n) for large valusee of n by Stirling\u2019s approximation (or Stirling\u2019s formula). log n! = n log n - n + O(log(n)) void fun(int n) { int j = 1, i = 0; while (i < n) { // Some O(1) task i = i + j; j++; } } x(x+1)/2 after x iterations then x(x+1)/2 < n ===== \u0398(\u221an). void fun(int n, int k) { for (int i=1; i<=n; i++) { int p = pow(i, k); for (int j=1; j<=p; j++) { // Some O(1) work } } } 1k + 2k + 3k + \u2026 n1k. k=1 Sum = 1 + 2 + 3 ... n = n(n+1)/2 = n2/2 + n/2 k=2 Sum = 12 + 22 + 32 + ... n12. = n(n+1)(2n+1)/6 = n3/3 + n2/2 + n/6 k=3 Sum = 13 + 23 + 33 + ... n13. = n2(n+1)2/4 = n4/4 + n3/2 + n2/4 (nk+1)/(k+1) + \u0398(nk) \u0398(nk+1 / (k+1)) as can ignore lower terms","title":"Examples"},{"location":"algo/analysis/graph-coloring/","text":"Graph coloring problem is to assign colors to certain elements of a graph subject to certain constraints. Vertex coloring \u00b6 The problem is, given m colors, find a way of coloring the vertices of a graph such that no two adjacent vertices are colored using same color. Edge Coloring and Face Coloring can be transformed into vertex coloring. Chromatic Number \u00b6 The smallest number of colors needed to color a graph G is called its chromatic number. Applications \u00b6 Making Schedule or Time Table This problem can be represented as a graph where every vertex is a subject and an edge between two vertices mean there is a common student. So this is a graph coloring problem where minimum number of time slots is equal to the chromatic number of the graph. Mobile Radio Frequency Assignment When frequencies are assigned to towers, frequencies assigned to all towers at the same location must be different. How to assign frequencies with this constraint? What is the minimum number of frequencies needed? This problem is also an instance of graph coloring problem where every tower represents a vertex and an edge between two towers represents that they are in range of each other. Sudoku Sudoku is also a variation of Graph coloring problem where every cell represents a vertex. There is an edge between two vertices if they are in same row or same column or same block. Register Allocation In compiler optimization, register allocation is the process of assigning a large number of target program variables onto a small number of CPU registers. This problem is also a graph coloring problem. Bipartite Graphs We can check if a graph is Bipartite or not by coloring the graph using two colors. If a given graph is 2-colorable, then it is Bipartite, otherwise not. ref-> https://www.geeksforgeeks.org/bipartite-graph/ Map Coloring Geographical maps of countries or states where no two adjacent cities cannot be assigned same color. Four colors are sufficient to color any map Four Color Theorem-> http://en.wikipedia.org/wiki/Four_color_theorem Updates on servers distributing content on internet Updates-> every week The update cannot be deployed on every server at the same time, because the server may have to be taken down for the install. Also, the update should not be done one at a time, because it will take a lot of time. There are sets of servers that cannot be taken down together, because they have certain critical functions. This is a typical scheduling application of graph coloring problem. It turned out that 8 colors were good enough to color the graph of 75000 nodes. So they could install updates in 8 passes. Greedy Aproach \u00b6 TODO","title":"Graph coloring"},{"location":"algo/analysis/graph-coloring/#vertex-coloring","text":"The problem is, given m colors, find a way of coloring the vertices of a graph such that no two adjacent vertices are colored using same color. Edge Coloring and Face Coloring can be transformed into vertex coloring.","title":"Vertex coloring"},{"location":"algo/analysis/graph-coloring/#chromatic-number","text":"The smallest number of colors needed to color a graph G is called its chromatic number.","title":"Chromatic Number"},{"location":"algo/analysis/graph-coloring/#applications","text":"Making Schedule or Time Table This problem can be represented as a graph where every vertex is a subject and an edge between two vertices mean there is a common student. So this is a graph coloring problem where minimum number of time slots is equal to the chromatic number of the graph. Mobile Radio Frequency Assignment When frequencies are assigned to towers, frequencies assigned to all towers at the same location must be different. How to assign frequencies with this constraint? What is the minimum number of frequencies needed? This problem is also an instance of graph coloring problem where every tower represents a vertex and an edge between two towers represents that they are in range of each other. Sudoku Sudoku is also a variation of Graph coloring problem where every cell represents a vertex. There is an edge between two vertices if they are in same row or same column or same block. Register Allocation In compiler optimization, register allocation is the process of assigning a large number of target program variables onto a small number of CPU registers. This problem is also a graph coloring problem. Bipartite Graphs We can check if a graph is Bipartite or not by coloring the graph using two colors. If a given graph is 2-colorable, then it is Bipartite, otherwise not. ref-> https://www.geeksforgeeks.org/bipartite-graph/ Map Coloring Geographical maps of countries or states where no two adjacent cities cannot be assigned same color. Four colors are sufficient to color any map Four Color Theorem-> http://en.wikipedia.org/wiki/Four_color_theorem Updates on servers distributing content on internet Updates-> every week The update cannot be deployed on every server at the same time, because the server may have to be taken down for the install. Also, the update should not be done one at a time, because it will take a lot of time. There are sets of servers that cannot be taken down together, because they have certain critical functions. This is a typical scheduling application of graph coloring problem. It turned out that 8 colors were good enough to color the graph of 75000 nodes. So they could install updates in 8 passes.","title":"Applications"},{"location":"algo/analysis/graph-coloring/#greedy-aproach","text":"TODO","title":"Greedy Aproach"},{"location":"algo/analysis/intro/","text":"Algorithm Analysis \u00b6 Why \u00b6 Care about user friendliness, modularity, security, maintainability, etc? turns out you cant do that without performance. So performance is like currency through which we can buy all the above things performance == scale. Why not just run it? (see running time) \u00b6 Different machines -> Different comparison. Different input -> Different comparison. Big Idea -> Asymptotic analysis (just depends on input) Linear Search running time in seconds on A: 0.2 * n Binary Search running time in seconds on B: 1000*log(n) We ignore constants in Asymptotic Analysis. Also, in Asymptotic analysis, we always talk about input sizes larger than a constant value. So, you may end up choosing an algorithm that is Asymptotically slower but faster for your software. Worst Case \u00b6 Upper bound of running -> should know when. \u0398(n) Average Case (Rarely) \u00b6 For the linear search problem, let us assume that all cases are uniformly distributed (including the case of x not being present in array). So we sum all the cases and divide the sum by (n+1). Following is the value of average case time complexity. Best Case Analysis (Bogus) \u00b6 \u0398(1) Why not average? \u00b6 The average case analysis is not easy to do in most of the practical cases and it is rarely done. In the average case analysis, we must know (or predict) the mathematical distribution of all possible inputs. For some algorithms, all the cases are asymptotically same, i.e., there are no worst and best cases. eg Merge sort - > \u0398(nLogn) Most of the other sorting algorithms have worst and best cases. For example, in the typical implementation of Quick Sort (where pivot is chosen as a corner element), the worst occurs when the input array is already sorted and the best occur when the pivot elements always divide array in two halves. For insertion sort, the worst case occurs when the array is reverse sorted and the best case occurs when the array is sorted in the same order as output. The main idea of asymptotic analysis is to * have a measure of efficiency of algorithms that doesn\u2019t depend on machine specific constants, * and doesn\u2019t require algorithms to be implemented and time taken by programs to be compared. Notations \u00b6 \u0398(g(n)) = {f(n): there exist positive constants c1, c2 and n0 such that 0 <= c1*g(n) <= f(n) <= c2*g(n) for all n >= n0} The theta notation bounds a functions from above and below, so it defines exact asymptotic behavior. A simple way to get Theta notation of an expression is to drop low order terms and ignore leading constants f(n) must be non-negative for values of n greater than n0. Why drop? \u00b6 its fine chill. O(g(n)) = { f(n): there exist positive constants c and n0 such that 0 <= f(n) <= c*g(n) for all n >= n0} Big O notation defines an upper bound of an algorithm, it bounds a function only from above O(n^2) also covers linear time. -> quick sort \u03a9 (g(n)) = {f(n): there exist positive constants c and n0 such that 0 <= c*g(n) <= f(n) for all n >= n0}. \u03a9 notation provides an asymptotic lower bound. Properties \u00b6 General Properties \u00b6 If f(n) is O(g(n)) then a f(n) is also O(g(n)) ; where a is a constant. If f(n) is \u0398(g(n)) then a f(n) is also \u0398(g(n)) ; where a is a constant. If f(n) is \u03a9 (g(n)) then a*f(n) is also \u03a9 (g(n)) ; where a is a constant. Reflexive Properties \u00b6 If f(n) is given then f(n) is O(f(n)). If f(n) is given then f(n) is \u0398(f(n)). If f(n) is given then f(n) is \u03a9 (f(n)). Transitive Properties \u00b6 If f(n) is O(g(n)) and g(n) is O(h(n)) then f(n) = O(h(n)) . If f(n) is \u0398(g(n)) and g(n) is \u0398(h(n)) then f(n) = \u0398(h(n)) . If f(n) is \u03a9 (g(n)) and g(n) is \u03a9 (h(n)) then f(n) = \u03a9 (h(n)) Symmetric Properties \u00b6 If f(n) is \u0398(g(n)) then g(n) is \u0398(f(n)) . This property only satisfies for \u0398 notation. Transpose Symmetric Properties \u00b6 If f(n) is O(g(n)) then g(n) is \u03a9 (f(n)). This property only satisfies for O and \u03a9 notations. Some More Properties \u00b6 If f(n) = O(g(n)) and f(n) = \u03a9(g(n)) then f(n) = \u0398(g(n)) If f(n) = O(g(n)) and d(n)=O(e(n)) then f(n) + d(n) = O( max( g(n), e(n) )) Example: f(n) = n i.e O(n) d(n) = n\u00b2 i.e O(n\u00b2) then f(n) + d(n) = n + n\u00b2 i.e O(n\u00b2) If f(n)=O(g(n)) and d(n)=O(e(n)) then f(n) * d(n) = O( g(n) * e(n) ) Example: f(n) = n i.e O(n) d(n) = n\u00b2 i.e O(n\u00b2) then f(n) * d(n) = n * n\u00b2 = n\u00b3 i.e O(n\u00b3) Time complexity of all computer algorithms can be written as \u03a9(1) Little o provides strict upper bound (equality condition is removed from Big O) and little omega provides strict lower bound (equality condition removed from big omega) Little \u03bf asymptotic notation \u00b6 Let f(n) and g(n) be functions that map positive integers to positive real numbers. We say that f(n) is \u03bf(g(n)) (or f(n) \u0395 \u03bf(g(n))) if for any real constant c > 0, there exists an integer constant n0 \u2265 1 such that 0 \u2264 f(n) < c*g(n). Thus, little o() means loose upper-bound of f(n). Little o is a rough estimate of the maximum order of growth whereas Big-\u039f may be the actual order of growth. In mathematical relation, f(n) = o(g(n)) means lim f(n)/g(n) = 0 n\u2192\u221e lim f(n)/g(n) = lim (7n + 8)/(n2) = lim 7/2n = 0 (l\u2019hospital) n\u2192\u221e n\u2192\u221e n\u2192\u221e hence 7n + 8 \u2208 o(n2) Little \u03c9 asymptotic notation \u00b6 Let f(n) and g(n) be functions that map positive integers to positive real numbers. We say that f(n) is \u03c9(g(n)) (or f(n) \u2208 \u03c9(g(n))) if for any real constant c > 0, there exists an integer constant n0 \u2265 1 such that f(n) > c * g(n) \u2265 0 for every integer n \u2265 n0. Little Omega (\u03c9) is a rough estimate of the order of the growth whereas Big Omega (\u03a9) may represent exact order of growth. We use \u03c9 notation to denote a lower bound that is not asymptotically tight. And, f(n) \u2208 \u03c9(g(n)) if and only if g(n) \u2208 \u03bf((f(n)). if f(n) \u2208 \u03c9(g(n)) then, lim f(n)/g(n) = \u221e n\u2192\u221e Prove that 4n + 6 \u2208 \u03c9(1);","title":"Algorithm Analysis"},{"location":"algo/analysis/intro/#algorithm-analysis","text":"","title":"Algorithm Analysis"},{"location":"algo/analysis/intro/#why","text":"Care about user friendliness, modularity, security, maintainability, etc? turns out you cant do that without performance. So performance is like currency through which we can buy all the above things performance == scale.","title":"Why"},{"location":"algo/analysis/intro/#why-not-just-run-it-see-running-time","text":"Different machines -> Different comparison. Different input -> Different comparison. Big Idea -> Asymptotic analysis (just depends on input) Linear Search running time in seconds on A: 0.2 * n Binary Search running time in seconds on B: 1000*log(n) We ignore constants in Asymptotic Analysis. Also, in Asymptotic analysis, we always talk about input sizes larger than a constant value. So, you may end up choosing an algorithm that is Asymptotically slower but faster for your software.","title":"Why not just run it? (see running time)"},{"location":"algo/analysis/intro/#worst-case","text":"Upper bound of running -> should know when. \u0398(n)","title":"Worst Case"},{"location":"algo/analysis/intro/#average-case-rarely","text":"For the linear search problem, let us assume that all cases are uniformly distributed (including the case of x not being present in array). So we sum all the cases and divide the sum by (n+1). Following is the value of average case time complexity.","title":"Average Case (Rarely)"},{"location":"algo/analysis/intro/#best-case-analysis-bogus","text":"\u0398(1)","title":"Best Case Analysis (Bogus)"},{"location":"algo/analysis/intro/#why-not-average","text":"The average case analysis is not easy to do in most of the practical cases and it is rarely done. In the average case analysis, we must know (or predict) the mathematical distribution of all possible inputs. For some algorithms, all the cases are asymptotically same, i.e., there are no worst and best cases. eg Merge sort - > \u0398(nLogn) Most of the other sorting algorithms have worst and best cases. For example, in the typical implementation of Quick Sort (where pivot is chosen as a corner element), the worst occurs when the input array is already sorted and the best occur when the pivot elements always divide array in two halves. For insertion sort, the worst case occurs when the array is reverse sorted and the best case occurs when the array is sorted in the same order as output. The main idea of asymptotic analysis is to * have a measure of efficiency of algorithms that doesn\u2019t depend on machine specific constants, * and doesn\u2019t require algorithms to be implemented and time taken by programs to be compared.","title":"Why not average?"},{"location":"algo/analysis/intro/#notations","text":"\u0398(g(n)) = {f(n): there exist positive constants c1, c2 and n0 such that 0 <= c1*g(n) <= f(n) <= c2*g(n) for all n >= n0} The theta notation bounds a functions from above and below, so it defines exact asymptotic behavior. A simple way to get Theta notation of an expression is to drop low order terms and ignore leading constants f(n) must be non-negative for values of n greater than n0.","title":"Notations"},{"location":"algo/analysis/intro/#why-drop","text":"its fine chill. O(g(n)) = { f(n): there exist positive constants c and n0 such that 0 <= f(n) <= c*g(n) for all n >= n0} Big O notation defines an upper bound of an algorithm, it bounds a function only from above O(n^2) also covers linear time. -> quick sort \u03a9 (g(n)) = {f(n): there exist positive constants c and n0 such that 0 <= c*g(n) <= f(n) for all n >= n0}. \u03a9 notation provides an asymptotic lower bound.","title":"Why drop?"},{"location":"algo/analysis/intro/#properties","text":"","title":"Properties"},{"location":"algo/analysis/intro/#general-properties","text":"If f(n) is O(g(n)) then a f(n) is also O(g(n)) ; where a is a constant. If f(n) is \u0398(g(n)) then a f(n) is also \u0398(g(n)) ; where a is a constant. If f(n) is \u03a9 (g(n)) then a*f(n) is also \u03a9 (g(n)) ; where a is a constant.","title":"General Properties"},{"location":"algo/analysis/intro/#reflexive-properties","text":"If f(n) is given then f(n) is O(f(n)). If f(n) is given then f(n) is \u0398(f(n)). If f(n) is given then f(n) is \u03a9 (f(n)).","title":"Reflexive Properties"},{"location":"algo/analysis/intro/#transitive-properties","text":"If f(n) is O(g(n)) and g(n) is O(h(n)) then f(n) = O(h(n)) . If f(n) is \u0398(g(n)) and g(n) is \u0398(h(n)) then f(n) = \u0398(h(n)) . If f(n) is \u03a9 (g(n)) and g(n) is \u03a9 (h(n)) then f(n) = \u03a9 (h(n))","title":"Transitive Properties"},{"location":"algo/analysis/intro/#symmetric-properties","text":"If f(n) is \u0398(g(n)) then g(n) is \u0398(f(n)) . This property only satisfies for \u0398 notation.","title":"Symmetric Properties"},{"location":"algo/analysis/intro/#transpose-symmetric-properties","text":"If f(n) is O(g(n)) then g(n) is \u03a9 (f(n)). This property only satisfies for O and \u03a9 notations.","title":"Transpose Symmetric Properties"},{"location":"algo/analysis/intro/#some-more-properties","text":"If f(n) = O(g(n)) and f(n) = \u03a9(g(n)) then f(n) = \u0398(g(n)) If f(n) = O(g(n)) and d(n)=O(e(n)) then f(n) + d(n) = O( max( g(n), e(n) )) Example: f(n) = n i.e O(n) d(n) = n\u00b2 i.e O(n\u00b2) then f(n) + d(n) = n + n\u00b2 i.e O(n\u00b2) If f(n)=O(g(n)) and d(n)=O(e(n)) then f(n) * d(n) = O( g(n) * e(n) ) Example: f(n) = n i.e O(n) d(n) = n\u00b2 i.e O(n\u00b2) then f(n) * d(n) = n * n\u00b2 = n\u00b3 i.e O(n\u00b3) Time complexity of all computer algorithms can be written as \u03a9(1) Little o provides strict upper bound (equality condition is removed from Big O) and little omega provides strict lower bound (equality condition removed from big omega)","title":"Some More Properties"},{"location":"algo/analysis/intro/#little-asymptotic-notation","text":"Let f(n) and g(n) be functions that map positive integers to positive real numbers. We say that f(n) is \u03bf(g(n)) (or f(n) \u0395 \u03bf(g(n))) if for any real constant c > 0, there exists an integer constant n0 \u2265 1 such that 0 \u2264 f(n) < c*g(n). Thus, little o() means loose upper-bound of f(n). Little o is a rough estimate of the maximum order of growth whereas Big-\u039f may be the actual order of growth. In mathematical relation, f(n) = o(g(n)) means lim f(n)/g(n) = 0 n\u2192\u221e lim f(n)/g(n) = lim (7n + 8)/(n2) = lim 7/2n = 0 (l\u2019hospital) n\u2192\u221e n\u2192\u221e n\u2192\u221e hence 7n + 8 \u2208 o(n2)","title":"Little \u03bf asymptotic notation"},{"location":"algo/analysis/intro/#little-asymptotic-notation_1","text":"Let f(n) and g(n) be functions that map positive integers to positive real numbers. We say that f(n) is \u03c9(g(n)) (or f(n) \u2208 \u03c9(g(n))) if for any real constant c > 0, there exists an integer constant n0 \u2265 1 such that f(n) > c * g(n) \u2265 0 for every integer n \u2265 n0. Little Omega (\u03c9) is a rough estimate of the order of the growth whereas Big Omega (\u03a9) may represent exact order of growth. We use \u03c9 notation to denote a lower bound that is not asymptotically tight. And, f(n) \u2208 \u03c9(g(n)) if and only if g(n) \u2208 \u03bf((f(n)). if f(n) \u2208 \u03c9(g(n)) then, lim f(n)/g(n) = \u221e n\u2192\u221e Prove that 4n + 6 \u2208 \u03c9(1);","title":"Little \u03c9 asymptotic notation"},{"location":"algo/analysis/lower-upper-bound-theory/","text":"Lower and Upper Bound Theory \u00b6 Lower Bound \u00b6 Let L(n) be the running time of an algorithm A(say), then g(n) is the Lower Bound of A if there exist two constants C and N such that L(n) >= C*g(n) for n > N. Lower bound of an algorithm is shown by the asymptotic notation called Big Omega (or just Omega). Upper Bound \u00b6 Let U(n) be the running time of an algorithm A(say), then g(n) is the Upper Bound of A if there exist two constants C and N such that U(n) <= C*g(n) for n > N. Upper bound of an algorithm is shown by the asymptotic notation called Big Oh(O) (or just Oh). Lower Bound Theory \u00b6 According to the lower bound theory, for a lower bound L(n) of an algorithm, it is not possible to have any other algorithm (for a common problem) whose time complexity is less than L(n) for random input. Also every algorithm must take at least L(n) time in worst case. Note that L(n) here is the minimum of all the possible algorithm, of maximum complexity. The Lower Bound is a very important for any algorithm. Once we calculated it, then we can compare it with the actual complexity of the algorithm and if their order are same then we can declare our algorithm as optimal. So in this section we will be discussing about techniques for finding the lower bound of an algorithm. Note that our main motive is to get an optimal algorithm, which is the one having its Upper Bound Same as its Lower Bound (U(n)=L(n)). Merge Sort is a common example of an optimal algorithm. Trivial Lower Bound \u00b6 It is the easiest method to find the lower bound. The Lower bounds which can be easily observed on the basis of the number of input taken and the number of output produces are called Trivial Lower Bound. Multiplication of n x n matrix Input: For 2 matrix we will have 2n2 inputs Output: 1 matrix of order n x n, i.e., n2 outputs In the above example its easily predictable that the lower bound is O(n2). Computational Model The method is for all those algorithms that are comparison based. For example in sorting we have to compare the elements of the list among themselves and then sort them accordingly. Similar is the case with searching and thus we can implement the same in this case. Now we will look at some examples to understand its usage. Ordered Searching It is a type of searching in which the list is already sorted. Linear search In linear search we compare the key with first element if it does not match we compare with second element and so on till we check against the nth element. Else we will end up with a failure. Binary search In binary search, we check the middle element against the key, if it is greater we search the first half else we check the second half and repeat the same process. The diagram below there is an illustration of binary search in an array consisting of 4 elements Calculating the lower bound : The max no of comparisons are n. Let there be k levels in the tree. No. of nodes will be 2k-1 The upper bound of no of nodes in any comparison based search of an element in list of size n will be n as there are maximum of n comparisons in worst case scenario 2k-1 Each level will take 1 comparison thus no. of comparisons k\u2265|log2n| Thus the lower bound of any comparison based search from a list of n elements cannot be less than log(n). Therefore we can say that Binary Search is optimal as its complexity is \u0398(log n). Sorting The diagram below is an example of tree formed in sorting combinations with 3 elements. For n elements, finding lower bound using computation model For n elements we have a total on n! combinations (leaf nodes). (Refer the diagram the total combinations are 3! or 6) also it is clear that the tree formed is a binary tree. Each level in the diagram indicates a comparison. Let there be k levels => 2k is the total number of leaf nodes in a full binary tree thus in this case we have n!\u22642k. As the k in the above example is the no of comparisons thus by computational model lower bond = k. n!\u22642T(n) Thus, T(n)>|log n!| => n!<=nn Thus, log n!<=log nn Taking ceiling function on both sides, we get |-log nn-|>=|-log n!-| Thus complexity becomes \u0398(lognn) or \u0398(nlogn) Using Lower bond theory to solve algebraic problem: Straight Line Program The type of programs build without any loops or control structures is called Straight Line Program. For example, summing to nos Sum(a, b) { //no loops and no control structures c:= a+b; return c; } Algebraic Problem Problems related to algebra like solving equations inequalities etc., comes under algebraic problems. For example, solving equation ax2+bx+c with simple programming. Algo_Sol(a, b, c, x) { //1 assignment v:=a*x; //1 assignment v:=v+b; //1 assignment v:=v*x; //1 assignment ans:=v+c; return ans; } Complexity for solving here is 4 (excluding the returning). The above example shows us a simple way to solve an equation for 2 degree polynomial i.e., 4 thus for nth degree polynomial we will have complexity of O(n2). Let us demonstrate via an algorithm. anxn+an-1xn-1+an-2xn-2+\u2026+a1x+a0 is a polynomial of degree n. pow(x, n) { p := 1; //loop from 1 to n for i:=1 to n p := p*x; return p; } polynomial(A, x, n) { int p, v:=0; for i := 0 to n //loop within a loop from 0 to n v := v + A[i]*pow(x, i); return v; } Loop within a loop => complexity = O(n^2); Now to find an optimal algorithm we need to find the lower bound here (as per lower bound theory). As per Lower Bound Theory, The optimal algorithm to solve the above problem is the one having complexity O(n). Lets prove this theorem using lower bounds. To prove that optimal algo of solving a n degree polynomial is O(n) Proof: The best solution for reducing the algo is to make this problem less complex by dividing the polynomial into several straight line problems. => anxn+an-1xn-1+an-2xn-2+...+a1x+a0 can be written as, ((..(anx+an-1)x+..+a2)x+a1)x+a0 Now, algorithm will be as, v=0 v=v+an v=v*x v=v+an-1 v=v*x v=v+a1 v=v*x v=v+a0 polynomial(A, x, n) { int p, v=0; // loop executed n times for i = n to 0 v = (v + A[i])*x; return v; } Clearly, the complexity of this code is O(n). This way of solving such equations is called Horner\u2019s method. Here is were lower bound theory works and give the optimum algorithm\u2019s complexity as O(n). Upper Bound Theory \u00b6 According to the upper bound theory, for an upper bound U(n) of an algorithm, we can always solve the problem in at most U(n) time.Time taken by a known algorithm to solve a problem with worse case input gives us the upper bound.","title":"Lower and Upper Bound Theory"},{"location":"algo/analysis/lower-upper-bound-theory/#lower-and-upper-bound-theory","text":"","title":"Lower and Upper Bound Theory"},{"location":"algo/analysis/lower-upper-bound-theory/#lower-bound","text":"Let L(n) be the running time of an algorithm A(say), then g(n) is the Lower Bound of A if there exist two constants C and N such that L(n) >= C*g(n) for n > N. Lower bound of an algorithm is shown by the asymptotic notation called Big Omega (or just Omega).","title":"Lower Bound"},{"location":"algo/analysis/lower-upper-bound-theory/#upper-bound","text":"Let U(n) be the running time of an algorithm A(say), then g(n) is the Upper Bound of A if there exist two constants C and N such that U(n) <= C*g(n) for n > N. Upper bound of an algorithm is shown by the asymptotic notation called Big Oh(O) (or just Oh).","title":"Upper Bound"},{"location":"algo/analysis/lower-upper-bound-theory/#lower-bound-theory","text":"According to the lower bound theory, for a lower bound L(n) of an algorithm, it is not possible to have any other algorithm (for a common problem) whose time complexity is less than L(n) for random input. Also every algorithm must take at least L(n) time in worst case. Note that L(n) here is the minimum of all the possible algorithm, of maximum complexity. The Lower Bound is a very important for any algorithm. Once we calculated it, then we can compare it with the actual complexity of the algorithm and if their order are same then we can declare our algorithm as optimal. So in this section we will be discussing about techniques for finding the lower bound of an algorithm. Note that our main motive is to get an optimal algorithm, which is the one having its Upper Bound Same as its Lower Bound (U(n)=L(n)). Merge Sort is a common example of an optimal algorithm.","title":"Lower Bound Theory"},{"location":"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound","text":"It is the easiest method to find the lower bound. The Lower bounds which can be easily observed on the basis of the number of input taken and the number of output produces are called Trivial Lower Bound. Multiplication of n x n matrix Input: For 2 matrix we will have 2n2 inputs Output: 1 matrix of order n x n, i.e., n2 outputs In the above example its easily predictable that the lower bound is O(n2). Computational Model The method is for all those algorithms that are comparison based. For example in sorting we have to compare the elements of the list among themselves and then sort them accordingly. Similar is the case with searching and thus we can implement the same in this case. Now we will look at some examples to understand its usage. Ordered Searching It is a type of searching in which the list is already sorted. Linear search In linear search we compare the key with first element if it does not match we compare with second element and so on till we check against the nth element. Else we will end up with a failure. Binary search In binary search, we check the middle element against the key, if it is greater we search the first half else we check the second half and repeat the same process. The diagram below there is an illustration of binary search in an array consisting of 4 elements Calculating the lower bound : The max no of comparisons are n. Let there be k levels in the tree. No. of nodes will be 2k-1 The upper bound of no of nodes in any comparison based search of an element in list of size n will be n as there are maximum of n comparisons in worst case scenario 2k-1 Each level will take 1 comparison thus no. of comparisons k\u2265|log2n| Thus the lower bound of any comparison based search from a list of n elements cannot be less than log(n). Therefore we can say that Binary Search is optimal as its complexity is \u0398(log n). Sorting The diagram below is an example of tree formed in sorting combinations with 3 elements. For n elements, finding lower bound using computation model For n elements we have a total on n! combinations (leaf nodes). (Refer the diagram the total combinations are 3! or 6) also it is clear that the tree formed is a binary tree. Each level in the diagram indicates a comparison. Let there be k levels => 2k is the total number of leaf nodes in a full binary tree thus in this case we have n!\u22642k. As the k in the above example is the no of comparisons thus by computational model lower bond = k. n!\u22642T(n) Thus, T(n)>|log n!| => n!<=nn Thus, log n!<=log nn Taking ceiling function on both sides, we get |-log nn-|>=|-log n!-| Thus complexity becomes \u0398(lognn) or \u0398(nlogn) Using Lower bond theory to solve algebraic problem: Straight Line Program The type of programs build without any loops or control structures is called Straight Line Program. For example, summing to nos Sum(a, b) { //no loops and no control structures c:= a+b; return c; } Algebraic Problem Problems related to algebra like solving equations inequalities etc., comes under algebraic problems. For example, solving equation ax2+bx+c with simple programming. Algo_Sol(a, b, c, x) { //1 assignment v:=a*x; //1 assignment v:=v+b; //1 assignment v:=v*x; //1 assignment ans:=v+c; return ans; } Complexity for solving here is 4 (excluding the returning). The above example shows us a simple way to solve an equation for 2 degree polynomial i.e., 4 thus for nth degree polynomial we will have complexity of O(n2). Let us demonstrate via an algorithm. anxn+an-1xn-1+an-2xn-2+\u2026+a1x+a0 is a polynomial of degree n. pow(x, n) { p := 1; //loop from 1 to n for i:=1 to n p := p*x; return p; } polynomial(A, x, n) { int p, v:=0; for i := 0 to n //loop within a loop from 0 to n v := v + A[i]*pow(x, i); return v; } Loop within a loop => complexity = O(n^2); Now to find an optimal algorithm we need to find the lower bound here (as per lower bound theory). As per Lower Bound Theory, The optimal algorithm to solve the above problem is the one having complexity O(n). Lets prove this theorem using lower bounds. To prove that optimal algo of solving a n degree polynomial is O(n) Proof: The best solution for reducing the algo is to make this problem less complex by dividing the polynomial into several straight line problems. => anxn+an-1xn-1+an-2xn-2+...+a1x+a0 can be written as, ((..(anx+an-1)x+..+a2)x+a1)x+a0 Now, algorithm will be as, v=0 v=v+an v=v*x v=v+an-1 v=v*x v=v+a1 v=v*x v=v+a0 polynomial(A, x, n) { int p, v=0; // loop executed n times for i = n to 0 v = (v + A[i])*x; return v; } Clearly, the complexity of this code is O(n). This way of solving such equations is called Horner\u2019s method. Here is were lower bound theory works and give the optimum algorithm\u2019s complexity as O(n).","title":"Trivial Lower Bound"},{"location":"algo/analysis/lower-upper-bound-theory/#upper-bound-theory","text":"According to the upper bound theory, for an upper bound U(n) of an algorithm, we can always solve the problem in at most U(n) time.Time taken by a known algorithm to solve a problem with worse case input gives us the upper bound.","title":"Upper Bound Theory"},{"location":"algo/analysis/master-theorum/","text":"Master's Theorum \u00b6 Master Method is a direct way to get the solution. The master method works only for following type of recurrences or for recurrences that can be transformed to following type. T(n) = aT(n/b) + f(n) where a >= 1 and b > 1 There are following three cases: If f(n) = \u0398(nc) where c < Logba then T(n) = \u0398(nLogba) If f(n) = \u0398(nc) where c = Logba then T(n) = \u0398(ncLog n) If f(n) = \u0398(nc) where c > Logba then T(n) = \u0398(f(n)) How does this work? \u00b6 Master method is mainly derived from recurrence tree method. If we draw recurrence tree of T(n) = aT(n/b) + f(n), we can see that the work done at root is f(n) and work done at all leaves is \u0398(nc) where c is Logba. And the height of recurrence tree is Logbn Master Theorem In recurrence tree method, we calculate total work done. If the work done at leaves is polynomially more, then leaves are the dominant part, and our result becomes the work done at leaves (Case 1). If work done at leaves and root is asymptotically same, then our result becomes height multiplied by work done at any level (Case 2). If work done at root is asymptotically more, then our result becomes work done at root (Case 3). Examples of some standard algorithms whose time complexity can be evaluated using Master Method Merge Sort: T(n) = 2T(n/2) + \u0398(n). It falls in case 2 as c is 1 and Logba] is also 1. So the solution is \u0398(n Logn) Binary Search: T(n) = T(n/2) + \u0398(1). It also falls in case 2 as c is 0 and Logba is also 0. So the solution is \u0398(Logn) Notes: 1. It is not necessary that a recurrence of the form T(n) = aT(n/b) + f(n) can be solved using Master Theorem. The given three cases have some gaps between them. For example, the recurrence T(n) = 2T(n/2) + n/Logn cannot be solved using master method. 2. Case 2 can be extended for f(n) = \u0398(ncLogkn). If f(n) = \u0398(ncLogkn) for some constant k >= 0 and c = Logba, then T(n) = \u0398(ncLogk+1n) http://www.csd.uwo.ca/~moreno//CS424/Ressources/master.pdf TODO","title":"Master's Theorum"},{"location":"algo/analysis/master-theorum/#masters-theorum","text":"Master Method is a direct way to get the solution. The master method works only for following type of recurrences or for recurrences that can be transformed to following type. T(n) = aT(n/b) + f(n) where a >= 1 and b > 1 There are following three cases: If f(n) = \u0398(nc) where c < Logba then T(n) = \u0398(nLogba) If f(n) = \u0398(nc) where c = Logba then T(n) = \u0398(ncLog n) If f(n) = \u0398(nc) where c > Logba then T(n) = \u0398(f(n))","title":"Master's Theorum"},{"location":"algo/analysis/master-theorum/#how-does-this-work","text":"Master method is mainly derived from recurrence tree method. If we draw recurrence tree of T(n) = aT(n/b) + f(n), we can see that the work done at root is f(n) and work done at all leaves is \u0398(nc) where c is Logba. And the height of recurrence tree is Logbn Master Theorem In recurrence tree method, we calculate total work done. If the work done at leaves is polynomially more, then leaves are the dominant part, and our result becomes the work done at leaves (Case 1). If work done at leaves and root is asymptotically same, then our result becomes height multiplied by work done at any level (Case 2). If work done at root is asymptotically more, then our result becomes work done at root (Case 3). Examples of some standard algorithms whose time complexity can be evaluated using Master Method Merge Sort: T(n) = 2T(n/2) + \u0398(n). It falls in case 2 as c is 1 and Logba] is also 1. So the solution is \u0398(n Logn) Binary Search: T(n) = T(n/2) + \u0398(1). It also falls in case 2 as c is 0 and Logba is also 0. So the solution is \u0398(Logn) Notes: 1. It is not necessary that a recurrence of the form T(n) = aT(n/b) + f(n) can be solved using Master Theorem. The given three cases have some gaps between them. For example, the recurrence T(n) = 2T(n/2) + n/Logn cannot be solved using master method. 2. Case 2 can be extended for f(n) = \u0398(ncLogkn). If f(n) = \u0398(ncLogkn) for some constant k >= 0 and c = Logba, then T(n) = \u0398(ncLogk+1n) http://www.csd.uwo.ca/~moreno//CS424/Ressources/master.pdf TODO","title":"How does this work?"},{"location":"algo/analysis/pseudo-polynomial/","text":"Pseudo-polynomial \u00b6 An algorithm whose worst case time complexity depends on numeric value of input (not number of inputs) is called Pseudo-polynomial algorithm. For example, consider the problem of counting frequencies of all elements in an array of positive numbers. A pseudo-polynomial time solution for this is to first find the maximum value, then iterate from 1 to maximum value and for each value, find its frequency in array. This solution requires time according to maximum value in input array, therefore pseudo-polynomial. On the other hand, an algorithm whose time complexity is only based on number of elements in array (not value) is considered as polynomial time algorithm. Pseudo-polynomial and NP-Completeness \u00b6 Some NP-Complete problems have Pseudo Polynomial time solutions. For example, Dynamic Programming Solutions of 0-1 Knapsack, Subset-Sum and Partition problems are Pseudo-Polynomial. NP complete problems that can be solved using a pseudo-polynomial time algorithms are called weakly NP-complete.","title":"Pseudo-polynomial"},{"location":"algo/analysis/pseudo-polynomial/#pseudo-polynomial","text":"An algorithm whose worst case time complexity depends on numeric value of input (not number of inputs) is called Pseudo-polynomial algorithm. For example, consider the problem of counting frequencies of all elements in an array of positive numbers. A pseudo-polynomial time solution for this is to first find the maximum value, then iterate from 1 to maximum value and for each value, find its frequency in array. This solution requires time according to maximum value in input array, therefore pseudo-polynomial. On the other hand, an algorithm whose time complexity is only based on number of elements in array (not value) is considered as polynomial time algorithm.","title":"Pseudo-polynomial"},{"location":"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness","text":"Some NP-Complete problems have Pseudo Polynomial time solutions. For example, Dynamic Programming Solutions of 0-1 Knapsack, Subset-Sum and Partition problems are Pseudo-Polynomial. NP complete problems that can be solved using a pseudo-polynomial time algorithms are called weakly NP-complete.","title":"Pseudo-polynomial and NP-Completeness"},{"location":"algo/analysis/recursive/","text":"Recursive \u00b6 How to calculate time complexity of recursive functions? Time complexity of a recursive function can be written as a mathematical recurrence relation. To calculate time complexity, we must know how to solve recurrences. We will soon be discussing recurrence solving techniques as a separate post. T(n) = 2T(n/2) + cn (Merge Sort) Substitution Method \u00b6 We make a guess for the solution and then we use mathematical induction to prove the guess is correct or incorrect. For example consider the recurrence T(n) = 2T(n/2) + n We guess the solution as T(n) = O(nLogn). Now we use induction to prove our guess. We need to prove that T(n) <= cnLogn. We can assume that it is true for values smaller than n. T(n) = 2T(n/2) + n <= 2cn/2Log(n/2) + n = cnLogn - cnLog2 + n = cnLogn - cn + n <= cnLogn Recurrence Tree Method \u00b6 In this method, we draw a recurrence tree and calculate the time taken by every level of tree. Finally, we sum the work done at all levels. To draw the recurrence tree, we start from the given recurrence and keep drawing till we find a pattern among levels. The pattern is typically a arithmetic or geometric series. For example consider the recurrence relation T(n) = T(n/4) + T(n/2) + cn2 cn2 / \\ T(n/4) T(n/2) If we further break down the expression T(n/4) and T(n/2), we get following recursion tree. cn2 / \\ c(n2)/16 c(n2)/4 / \\ / \\ T(n/16) T(n/8) T(n/8) T(n/4) Breaking down further gives us following cn2 / \\ c(n2)/16 c(n2)/4 / \\ / \\ c(n2)/256 c(n2)/64 c(n2)/64 c(n2)/16 / \\ / \\ / \\ / \\ To know the value of T(n), we need to calculate sum of tree nodes level by level. If we sum the above tree level by level, we get the following series T(n) = c(n^2 + 5(n^2)/16 + 25(n^2)/256) + .... The above series is geometrical progression with ratio 5/16. To get an upper bound, we can sum the infinite series. We get the sum as (n2)/(1 - 5/16) which is O(n2)","title":"Recursive"},{"location":"algo/analysis/recursive/#recursive","text":"How to calculate time complexity of recursive functions? Time complexity of a recursive function can be written as a mathematical recurrence relation. To calculate time complexity, we must know how to solve recurrences. We will soon be discussing recurrence solving techniques as a separate post. T(n) = 2T(n/2) + cn (Merge Sort)","title":"Recursive"},{"location":"algo/analysis/recursive/#substitution-method","text":"We make a guess for the solution and then we use mathematical induction to prove the guess is correct or incorrect. For example consider the recurrence T(n) = 2T(n/2) + n We guess the solution as T(n) = O(nLogn). Now we use induction to prove our guess. We need to prove that T(n) <= cnLogn. We can assume that it is true for values smaller than n. T(n) = 2T(n/2) + n <= 2cn/2Log(n/2) + n = cnLogn - cnLog2 + n = cnLogn - cn + n <= cnLogn","title":"Substitution Method"},{"location":"algo/analysis/recursive/#recurrence-tree-method","text":"In this method, we draw a recurrence tree and calculate the time taken by every level of tree. Finally, we sum the work done at all levels. To draw the recurrence tree, we start from the given recurrence and keep drawing till we find a pattern among levels. The pattern is typically a arithmetic or geometric series. For example consider the recurrence relation T(n) = T(n/4) + T(n/2) + cn2 cn2 / \\ T(n/4) T(n/2) If we further break down the expression T(n/4) and T(n/2), we get following recursion tree. cn2 / \\ c(n2)/16 c(n2)/4 / \\ / \\ T(n/16) T(n/8) T(n/8) T(n/4) Breaking down further gives us following cn2 / \\ c(n2)/16 c(n2)/4 / \\ / \\ c(n2)/256 c(n2)/64 c(n2)/64 c(n2)/16 / \\ / \\ / \\ / \\ To know the value of T(n), we need to calculate sum of tree nodes level by level. If we sum the above tree level by level, we get the following series T(n) = c(n^2 + 5(n^2)/16 + 25(n^2)/256) + .... The above series is geometrical progression with ratio 5/16. To get an upper bound, we can sum the infinite series. We get the sum as (n2)/(1 - 5/16) which is O(n2)","title":"Recurrence Tree Method"},{"location":"algo/analysis/space/","text":"Space \u00b6 Auxiliary Space \u00b6 Extra or temporary space used by an algorithm. Space Complexity \u00b6 total space taken by the algorithm with respect to the input size. Space complexity includes both Auxiliary space and space used by input. For example, if we want to compare standard sorting algorithms on the basis of space, then Auxiliary Space would be a better criteria than Space Complexity. Merge Sort uses O(n) auxiliary space, Insertion sort and Heap Sort use O(1) auxiliary space. Space complexity of all these sorting algorithms is O(n) though.","title":"Space"},{"location":"algo/analysis/space/#space","text":"","title":"Space"},{"location":"algo/analysis/space/#auxiliary-space","text":"Extra or temporary space used by an algorithm.","title":"Auxiliary Space"},{"location":"algo/analysis/space/#space-complexity","text":"total space taken by the algorithm with respect to the input size. Space complexity includes both Auxiliary space and space used by input. For example, if we want to compare standard sorting algorithms on the basis of space, then Auxiliary Space would be a better criteria than Space Complexity. Merge Sort uses O(n) auxiliary space, Insertion sort and Heap Sort use O(1) auxiliary space. Space complexity of all these sorting algorithms is O(n) though.","title":"Space Complexity"},{"location":"algo/dac/intro/","text":"Divide & Conquer \u00b6 Divide \u00b6 This involves dividing the problem into some sub problem. Conquer \u00b6 Sub problem by calling recursively until sub problem solved. Combine \u00b6 The Sub problem Solved so that we will get find problem solution. DAC(a, i, j) { if(small(a, i, j)) return(Solution(a, i, j)) else m = divide(a, i, j) // f1(n) b = DAC(a, i, mid) // T(n/2) c = DAC(a, mid+1, j) // T(n/2) d = combine(b, c) // f2(n) return(d) } T(n) = f1(n) + 2T(n/2) + f2(n)","title":"Divide & Conquer"},{"location":"algo/dac/intro/#divide-conquer","text":"","title":"Divide &amp; Conquer"},{"location":"algo/dac/intro/#divide","text":"This involves dividing the problem into some sub problem.","title":"Divide"},{"location":"algo/dac/intro/#conquer","text":"Sub problem by calling recursively until sub problem solved.","title":"Conquer"},{"location":"algo/dac/intro/#combine","text":"The Sub problem Solved so that we will get find problem solution. DAC(a, i, j) { if(small(a, i, j)) return(Solution(a, i, j)) else m = divide(a, i, j) // f1(n) b = DAC(a, i, mid) // T(n/2) c = DAC(a, mid+1, j) // T(n/2) d = combine(b, c) // f2(n) return(d) } T(n) = f1(n) + 2T(n/2) + f2(n)","title":"Combine"},{"location":"algo/search/exponential/","text":"Exponential Search \u00b6 Time : O(Log n) Space : O(Log n) / O(1) useful : for unbounded searches, where size of array is infinite. search is closer to the first element Idea : Find range where element is present Do Binary Search in above found range. How to find the range where element may be present? The idea is to start with subarray size 1, compare its last element with x, then try size 2, then 4 and so on until last element of a subarray is not greater. Once we find an index i (after repeated doubling of i), we know that the element must be present between i/2 and i (Why i/2? because we could not find a greater value in previous iteration) int exponentialSearch(int arr[], int n, int x) { if (arr[0] == x) return 0; int i = 1; while (i < n && arr[i] <= x) i = i*2; return binarySearch(arr, i/2, min(i, n-1), x); } Ternery Search \u00b6 The following is recursive formula for counting comparisons in worst case of Binary Search. T(n) = T(n/2) + 2, T(1) = 1 The following is recursive formula for counting comparisons in worst case of Ternary Search. T(n) = T(n/3) + 4, T(1) = 1 In binary search, there are 2Log2n + 1 comparisons in worst case. In ternary search, there are 4Log3n + 1 comparisons in worst case. Time Complexity for Binary search = 2clog2n + O(1) Time Complexity for Ternary search = 4clog3n + O(1) Therefore, the comparison of Ternary and Binary Searches boils down the comparison of expressions 2Log3n and Log2n . The value of 2Log3n can be written as (2 / Log23) * Log2n . Since the value of (2 / Log23) is more than one, Ternary Search does more comparisons than Binary Search in worst case. Exercise: Why Merge Sort divides input array in two halves, why not in three or more parts? int ternarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid1 = l + (r - l)/3; int mid2 = mid1 + (r - l)/3; if (arr[mid1] == x) return mid1; if (arr[mid2] == x) return mid2; if (arr[mid1] > x) return ternarySearch(arr, l, mid1-1, x); if (arr[mid2] < x) return ternarySearch(arr, mid2+1, r, x); return ternarySearch(arr, mid1+1, mid2-1, x); } return -1; }","title":"Exponential"},{"location":"algo/search/exponential/#exponential-search","text":"Time : O(Log n) Space : O(Log n) / O(1) useful : for unbounded searches, where size of array is infinite. search is closer to the first element Idea : Find range where element is present Do Binary Search in above found range. How to find the range where element may be present? The idea is to start with subarray size 1, compare its last element with x, then try size 2, then 4 and so on until last element of a subarray is not greater. Once we find an index i (after repeated doubling of i), we know that the element must be present between i/2 and i (Why i/2? because we could not find a greater value in previous iteration) int exponentialSearch(int arr[], int n, int x) { if (arr[0] == x) return 0; int i = 1; while (i < n && arr[i] <= x) i = i*2; return binarySearch(arr, i/2, min(i, n-1), x); }","title":"Exponential Search"},{"location":"algo/search/exponential/#ternery-search","text":"The following is recursive formula for counting comparisons in worst case of Binary Search. T(n) = T(n/2) + 2, T(1) = 1 The following is recursive formula for counting comparisons in worst case of Ternary Search. T(n) = T(n/3) + 4, T(1) = 1 In binary search, there are 2Log2n + 1 comparisons in worst case. In ternary search, there are 4Log3n + 1 comparisons in worst case. Time Complexity for Binary search = 2clog2n + O(1) Time Complexity for Ternary search = 4clog3n + O(1) Therefore, the comparison of Ternary and Binary Searches boils down the comparison of expressions 2Log3n and Log2n . The value of 2Log3n can be written as (2 / Log23) * Log2n . Since the value of (2 / Log23) is more than one, Ternary Search does more comparisons than Binary Search in worst case. Exercise: Why Merge Sort divides input array in two halves, why not in three or more parts? int ternarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid1 = l + (r - l)/3; int mid2 = mid1 + (r - l)/3; if (arr[mid1] == x) return mid1; if (arr[mid2] == x) return mid2; if (arr[mid1] > x) return ternarySearch(arr, l, mid1-1, x); if (arr[mid2] < x) return ternarySearch(arr, mid2+1, r, x); return ternarySearch(arr, mid1+1, mid2-1, x); } return -1; }","title":"Ternery Search"},{"location":"algo/search/interpolation/","text":"interpolation Search \u00b6 requirements : sorted array time : uniformly distributed -> O (log log n). worst case -> O(n). space : O(1) Improved over binary when the data is uniformaly distributed pos = lo + [ (x-arr[lo])*(hi-lo) / (arr[hi]-arr[Lo]) ] Iterative \u00b6 int interpolationSearch(int arr[], int n, int x) { int lo = 0, hi = (n - 1); while (lo <= hi && x >= arr[lo] && x <= arr[hi]) { if (lo == hi) { if (arr[lo] == x) return lo; return -1; } int pos = lo + (((double)(hi - lo) / (arr[hi] - arr[lo])) * (x - arr[lo])); if (arr[pos] == x) return pos; if (arr[pos] < x) lo = pos + 1; else hi = pos - 1; } return -1; } Reursive \u00b6 int interpolationSearch(int arr[], int lo, int hi, int x) { int pos; if ( lo <= hi && x >= arr[lo] && x <= arr[hi]) { pos = lo + (((double)( hi - lo ) / (arr[hi] - arr[lo])) * (x - arr[lo])); if( arr[pos] == x ) return pos; if( arr[pos] < x ) return interpolationSearch(arr, pos + 1, hi, x); if( arr[pos] > x ) return interpolationSearch(arr, lo, pos - 1, x); } return -1; } Interpolation vs Binary \u00b6 log(log(n)) comparisons -> uniformly distributed In the worst case: (for instance where the numerical values of the keys increase exponentially) It can make up to O(n) comparisons.","title":"Interpolation"},{"location":"algo/search/interpolation/#interpolation-search","text":"requirements : sorted array time : uniformly distributed -> O (log log n). worst case -> O(n). space : O(1) Improved over binary when the data is uniformaly distributed pos = lo + [ (x-arr[lo])*(hi-lo) / (arr[hi]-arr[Lo]) ]","title":"interpolation Search"},{"location":"algo/search/interpolation/#iterative","text":"int interpolationSearch(int arr[], int n, int x) { int lo = 0, hi = (n - 1); while (lo <= hi && x >= arr[lo] && x <= arr[hi]) { if (lo == hi) { if (arr[lo] == x) return lo; return -1; } int pos = lo + (((double)(hi - lo) / (arr[hi] - arr[lo])) * (x - arr[lo])); if (arr[pos] == x) return pos; if (arr[pos] < x) lo = pos + 1; else hi = pos - 1; } return -1; }","title":"Iterative"},{"location":"algo/search/interpolation/#reursive","text":"int interpolationSearch(int arr[], int lo, int hi, int x) { int pos; if ( lo <= hi && x >= arr[lo] && x <= arr[hi]) { pos = lo + (((double)( hi - lo ) / (arr[hi] - arr[lo])) * (x - arr[lo])); if( arr[pos] == x ) return pos; if( arr[pos] < x ) return interpolationSearch(arr, pos + 1, hi, x); if( arr[pos] > x ) return interpolationSearch(arr, lo, pos - 1, x); } return -1; }","title":"Reursive"},{"location":"algo/search/interpolation/#interpolation-vs-binary","text":"log(log(n)) comparisons -> uniformly distributed In the worst case: (for instance where the numerical values of the keys increase exponentially) It can make up to O(n) comparisons.","title":"Interpolation vs Binary"},{"location":"algo/search/intro/","text":"Searching \u00b6 best -> binary and hash tables Linear Search \u00b6 O(n) -> time int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) if (arr[i] == x) return i; return -1; } Improve Linear Search Worst-Case Complexity if element Found at last O(n) to O(1) if element Not found O(n) to O(n/2) by running right and left pointers public static void search(int arr[], int search_Element) { int left = 0; int length = arr.length; int right = length - 1; int position = -1; for (left = 0; left <= right;) { if (arr[left] == search_Element) { position = left; System.out.println( \"Element found in Array at \" + (position + 1) + \" Position with \" + (left + 1) + \" Attempt\"); break; } if (arr[right] == search_Element) { position = right; System.out.println( \"Element found in Array at \" + (position + 1) + \" Position with \" + (length - right) + \" Attempt\"); break; } left++; right--; } if (position == -1) System.out.println(\"Not found in Array with \" + left + \" Attempt\"); } Binary Search \u00b6 requirements : sorted array time : theta(logn) Auxiliary Space : O(1) -> iterative, O(Logn) -> recursion Problem -> m = (l+r)/2 might overflow \u00b6 use -> mid = low + ((high - low) / 2); in java .. faster -> mid = (low + high) >>> 1; in c++ ... -> mid = ((unsigned int)low + (unsigned int)high)) >> 1 http://locklessinc.com/articles/binary_search/ ----> above solutions may not always work. The above problem occurs when array length is 230 or greater and the search repeatedly moves to second half of the array. This much size of array is not likely to appear most of the time. For example, when we try the below program with 32 bit Code Blocks compiler, we get compiler error. int main() { int arr[1<<30]; return 0; } error: size of array 'arr' is too large Even when we try boolean array, the program compiles fine, but crashes when run in Windows 7.0 and Code Blocks 32 bit compiler #include <stdbool.h> int main() { bool arr[1<<30]; return 0; } Output: No compiler error, but crashes at run time. Recursive \u00b6 int binarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; } Iterative \u00b6 int binarySearch(int arr[], int l, int r, int x) { while (l <= r) { int m = l + (r - l) / 2; if (arr[m] == x) return m; if (arr[m] < x) l = m + 1; else r = m - 1; } return -1; }","title":"Searching"},{"location":"algo/search/intro/#searching","text":"best -> binary and hash tables","title":"Searching"},{"location":"algo/search/intro/#linear-search","text":"O(n) -> time int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) if (arr[i] == x) return i; return -1; } Improve Linear Search Worst-Case Complexity if element Found at last O(n) to O(1) if element Not found O(n) to O(n/2) by running right and left pointers public static void search(int arr[], int search_Element) { int left = 0; int length = arr.length; int right = length - 1; int position = -1; for (left = 0; left <= right;) { if (arr[left] == search_Element) { position = left; System.out.println( \"Element found in Array at \" + (position + 1) + \" Position with \" + (left + 1) + \" Attempt\"); break; } if (arr[right] == search_Element) { position = right; System.out.println( \"Element found in Array at \" + (position + 1) + \" Position with \" + (length - right) + \" Attempt\"); break; } left++; right--; } if (position == -1) System.out.println(\"Not found in Array with \" + left + \" Attempt\"); }","title":"Linear Search"},{"location":"algo/search/intro/#binary-search","text":"requirements : sorted array time : theta(logn) Auxiliary Space : O(1) -> iterative, O(Logn) -> recursion","title":"Binary Search"},{"location":"algo/search/intro/#problem-m-lr2-might-overflow","text":"use -> mid = low + ((high - low) / 2); in java .. faster -> mid = (low + high) >>> 1; in c++ ... -> mid = ((unsigned int)low + (unsigned int)high)) >> 1 http://locklessinc.com/articles/binary_search/ ----> above solutions may not always work. The above problem occurs when array length is 230 or greater and the search repeatedly moves to second half of the array. This much size of array is not likely to appear most of the time. For example, when we try the below program with 32 bit Code Blocks compiler, we get compiler error. int main() { int arr[1<<30]; return 0; } error: size of array 'arr' is too large Even when we try boolean array, the program compiles fine, but crashes when run in Windows 7.0 and Code Blocks 32 bit compiler #include <stdbool.h> int main() { bool arr[1<<30]; return 0; } Output: No compiler error, but crashes at run time.","title":"Problem -&gt; m = (l+r)/2 might overflow"},{"location":"algo/search/intro/#recursive","text":"int binarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; }","title":"Recursive"},{"location":"algo/search/intro/#iterative","text":"int binarySearch(int arr[], int l, int r, int x) { while (l <= r) { int m = l + (r - l) / 2; if (arr[m] == x) return m; if (arr[m] < x) l = m + 1; else r = m - 1; } return -1; }","title":"Iterative"},{"location":"algo/search/jump/","text":"Jump Search \u00b6 requirements : sorted array time : O(\u221an) space : O(1) Find arr[km] < x < arr[(k+1)m] then perform linear search Optimal Jump Size -> m = root(n) -> min<(n/m) + m-1)> O(n) > jump > O (Log n) Binary Search > Jump Search element smallest or largest -> jump better we traverse once. int jumpSearch(int arr[], int x, int n) { int step = sqrt(n); int prev = 0; while (arr[min(step, n)-1] < x) { prev = step; step += sqrt(n); if (prev >= n) return -1; } while (arr[prev] < x) { prev++; if (prev == min(step, n)) return -1; } if (arr[prev] == x) return prev; return -1; }","title":"Jump"},{"location":"algo/search/jump/#jump-search","text":"requirements : sorted array time : O(\u221an) space : O(1) Find arr[km] < x < arr[(k+1)m] then perform linear search Optimal Jump Size -> m = root(n) -> min<(n/m) + m-1)> O(n) > jump > O (Log n) Binary Search > Jump Search element smallest or largest -> jump better we traverse once. int jumpSearch(int arr[], int x, int n) { int step = sqrt(n); int prev = 0; while (arr[min(step, n)-1] < x) { prev = step; step += sqrt(n); if (prev >= n) return -1; } while (arr[prev] < x) { prev++; if (prev == min(step, n)) return -1; } if (arr[prev] == x) return prev; return -1; }","title":"Jump Search"},{"location":"algo/sort/intro/","text":"Selection Sort \u00b6 Time : O(n2) Space : O(1) it never makes more than O(n) swap useful when memory write is a costly operation. not stable, in place Input : 4A 5 3 2 4B 1 Output : 1 2 3 4B 4A 5 Swapping might impact in pushing a key(let\u2019s say A) to a position greater than the key(let\u2019s say B) which are equal keys. which makes them out of desired order. if want stable -> Selection sort can be made Stable if instead of swapping, the minimum element is placed in its position without swapping i.e. by placing the number in its position by pushing every element one step forward. void swap(int *xp, int *yp) { int temp = *xp; *xp = *yp; *yp = temp; } void selectionSort(int arr[], int n) { int i, j, min_idx; for (i = 0; i < n-1; i++) { min_idx = i; for (j = i+1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j; swap(&arr[min_idx], &arr[i]); } } Stable \u00b6 void stableSelectionSort(int a[], int n) { for (int i = 0; i < n - 1; i++) { int min = i; for (int j = i + 1; j < n; j++) if (a[min] > a[j]) min = j; int key = a[min]; while (min > i) { a[min] = a[min - 1]; min--; } a[i] = key; } } Bubble sort \u00b6 optimisation : O(n^2) time even if the array is sorted. It can be optimized by stopping the algorithm if inner loop didn\u2019t cause any swap. void bubbleSort(int arr[], int n) { int i, j; for (i = 0; i < n-1; i++) for (j = 0; j < n-i-1; j++) if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); } Worst and Average Case Time Complexity: O(n*n). Worst case occurs when array is reverse sorted. Best Case Time Complexity: O(n). Best case occurs when array is already sorted. Auxiliary Space: O(1) Boundary Cases: Bubble sort takes minimum time (Order of n) when elements are already sorted. Sorting In Place: Yes Stable: Yes In computer graphics it is popular for its capability to detect a very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific scan line (a line parallel to x axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines. Insertion Sort \u00b6 void insertionSort(int arr[], int n) { int i, key, j; for (i = 1; i < n; i++) { key = arr[i]; j = i - 1; while (j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } Time Complexity: O(n*2) Auxiliary Space: O(1) Boundary Cases: Insertion sort takes maximum time to sort if elements are sorted in reverse order. And it takes minimum time (Order of n) when elements are already sorted. Algorithmic Paradigm: Incremental Approach Sorting In Place: Yes Stable: Yes Online: Yes Uses: Insertion sort is used when number of elements is small. It can also be useful when input array is almost sorted, only few elements are misplaced in complete big array. What is Binary Insertion Sort? We can use binary search to reduce the number of comparisons in normal insertion sort. Binary Insertion Sort uses binary search to find the proper location to insert the selected item at each iteration. In normal insertion, sorting takes O(i) (at ith iteration) in worst case. We can reduce it to O(logi) by using binary search. The algorithm, as a whole, still has a running worst case running time of O(n2) because of the series of swaps required for each insertion. Refer this for implementation. How to implement Insertion Sort for Linked List? Below is simple insertion sort algorithm for linked list. 1) Create an empty sorted (or result) list 2) Traverse the given list, do following for every node. ......a) Insert current node in sorted way in sorted or result list. 3) Change head of given linked list to head of sorted (or result) list. Lower bound for comparison based sorting \u00b6 Input: . Output: permutation / reordering -> when a\u20181 <= a\u20182 \u2026.. <= a\u2018n. uses comparison operators decision trees. A decision tree -> full binary tree that represents the comparisons between elements that are performed by a particular sorting algorithm operating on an input of a given size. tracing a path from the root of the decision tree to a leaf. At each internal node, a comparison ai <= aj is made. left subtree -> ai <= aj. right subtree -> ai > aj. When reach leaf, ordering is done. 1) n! permutations on n -> leaves for the sorting algorithm to sort properly. 2) x -> maximum number 3) maximum height of the decison tree_ -> x. 4) A tree with maximum height x has at most 2^x leaves. n! <= 2^x Taking Log on both sides. log2(n!) <= x As log2(n!) = \u0398(nLogn) => x = \u03a9(nLog2n) Hence Heapsort, merge sort -> asymptotically optimal comparison sorts. minimum number of memory writes? \u00b6 Some huge data set is very expensive -> EEPROMs or Flash memory -> each write reduces the lifespan of the memory. Selection Sort makes least number of writes (it makes O(n) swaps). Cycle Sort -> zero times -> correct position or written one time to its correct position. Hence Cycle Sort","title":"Selection Sort"},{"location":"algo/sort/intro/#selection-sort","text":"Time : O(n2) Space : O(1) it never makes more than O(n) swap useful when memory write is a costly operation. not stable, in place Input : 4A 5 3 2 4B 1 Output : 1 2 3 4B 4A 5 Swapping might impact in pushing a key(let\u2019s say A) to a position greater than the key(let\u2019s say B) which are equal keys. which makes them out of desired order. if want stable -> Selection sort can be made Stable if instead of swapping, the minimum element is placed in its position without swapping i.e. by placing the number in its position by pushing every element one step forward. void swap(int *xp, int *yp) { int temp = *xp; *xp = *yp; *yp = temp; } void selectionSort(int arr[], int n) { int i, j, min_idx; for (i = 0; i < n-1; i++) { min_idx = i; for (j = i+1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j; swap(&arr[min_idx], &arr[i]); } }","title":"Selection Sort"},{"location":"algo/sort/intro/#stable","text":"void stableSelectionSort(int a[], int n) { for (int i = 0; i < n - 1; i++) { int min = i; for (int j = i + 1; j < n; j++) if (a[min] > a[j]) min = j; int key = a[min]; while (min > i) { a[min] = a[min - 1]; min--; } a[i] = key; } }","title":"Stable"},{"location":"algo/sort/intro/#bubble-sort","text":"optimisation : O(n^2) time even if the array is sorted. It can be optimized by stopping the algorithm if inner loop didn\u2019t cause any swap. void bubbleSort(int arr[], int n) { int i, j; for (i = 0; i < n-1; i++) for (j = 0; j < n-i-1; j++) if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); } Worst and Average Case Time Complexity: O(n*n). Worst case occurs when array is reverse sorted. Best Case Time Complexity: O(n). Best case occurs when array is already sorted. Auxiliary Space: O(1) Boundary Cases: Bubble sort takes minimum time (Order of n) when elements are already sorted. Sorting In Place: Yes Stable: Yes In computer graphics it is popular for its capability to detect a very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific scan line (a line parallel to x axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines.","title":"Bubble sort"},{"location":"algo/sort/intro/#insertion-sort","text":"void insertionSort(int arr[], int n) { int i, key, j; for (i = 1; i < n; i++) { key = arr[i]; j = i - 1; while (j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } Time Complexity: O(n*2) Auxiliary Space: O(1) Boundary Cases: Insertion sort takes maximum time to sort if elements are sorted in reverse order. And it takes minimum time (Order of n) when elements are already sorted. Algorithmic Paradigm: Incremental Approach Sorting In Place: Yes Stable: Yes Online: Yes Uses: Insertion sort is used when number of elements is small. It can also be useful when input array is almost sorted, only few elements are misplaced in complete big array. What is Binary Insertion Sort? We can use binary search to reduce the number of comparisons in normal insertion sort. Binary Insertion Sort uses binary search to find the proper location to insert the selected item at each iteration. In normal insertion, sorting takes O(i) (at ith iteration) in worst case. We can reduce it to O(logi) by using binary search. The algorithm, as a whole, still has a running worst case running time of O(n2) because of the series of swaps required for each insertion. Refer this for implementation. How to implement Insertion Sort for Linked List? Below is simple insertion sort algorithm for linked list. 1) Create an empty sorted (or result) list 2) Traverse the given list, do following for every node. ......a) Insert current node in sorted way in sorted or result list. 3) Change head of given linked list to head of sorted (or result) list.","title":"Insertion Sort"},{"location":"algo/sort/intro/#lower-bound-for-comparison-based-sorting","text":"Input: . Output: permutation / reordering -> when a\u20181 <= a\u20182 \u2026.. <= a\u2018n. uses comparison operators decision trees. A decision tree -> full binary tree that represents the comparisons between elements that are performed by a particular sorting algorithm operating on an input of a given size. tracing a path from the root of the decision tree to a leaf. At each internal node, a comparison ai <= aj is made. left subtree -> ai <= aj. right subtree -> ai > aj. When reach leaf, ordering is done. 1) n! permutations on n -> leaves for the sorting algorithm to sort properly. 2) x -> maximum number 3) maximum height of the decison tree_ -> x. 4) A tree with maximum height x has at most 2^x leaves. n! <= 2^x Taking Log on both sides. log2(n!) <= x As log2(n!) = \u0398(nLogn) => x = \u03a9(nLog2n) Hence Heapsort, merge sort -> asymptotically optimal comparison sorts.","title":"Lower bound for comparison based sorting"},{"location":"algo/sort/intro/#minimum-number-of-memory-writes","text":"Some huge data set is very expensive -> EEPROMs or Flash memory -> each write reduces the lifespan of the memory. Selection Sort makes least number of writes (it makes O(n) swaps). Cycle Sort -> zero times -> correct position or written one time to its correct position. Hence Cycle Sort","title":"minimum number of memory writes?"},{"location":"algo/sort/merge/","text":"Merge Sort \u00b6 Dummy nodes \u00b6 The strategy here uses a temporary dummy node as the start of the result list. The pointer Tail always points to the last node in the result list, so appending new nodes is easy. The dummy node gives the tail something to point to initially when the result list is empty. This dummy node is efficient, since it is only temporary, and it is allocated in the stack. The loop proceeds, removing one node from either \u2018a\u2019 or \u2018b\u2019, and adding it to the tail. When We are done, the result is in dummy.next. void MergeSort(Node** headRef) { Node* head = *headRef; Node* a; Node* b; if ((head == NULL) || (head->next == NULL)) { return; } FrontBackSplit(head, &a, &b); MergeSort(&a); MergeSort(&b); *headRef = SortedMerge(a, b); } Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; if (a == NULL) return (b); else if (b == NULL) return (a); if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return (result); } void FrontBackSplit(Node* source, Node** frontRef, Node** backRef) { Node* fast; Node* slow; slow = source; fast = source->next; /* Advance 'fast' two nodes, and advance 'slow' one node */ while (fast != NULL) { fast = fast->next; if (fast != NULL) { slow = slow->next; fast = fast->next; } } /* 'slow' is before the midpoint in the list, so split it in two at that point. */ *frontRef = source; *backRef = slow->next; slow->next = NULL; } Local Reference \u00b6 lastPtrRef is same as dummy node (this is tail before was head) Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; Node** lastPtrRef = &result; while(1) { if (a == NULL) { *lastPtrRef = b; break; } else if (b==NULL) { *lastPtrRef = a; break; } if(a->data <= b->data) { MoveNode(lastPtrRef, &a); } else { MoveNode(lastPtrRef, &b); } lastPtrRef = &((*lastPtrRef)->next); } return(result); } Recursive (Space is more... Prodution XXX) \u00b6 Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; if (a == NULL) return(b); else if (b == NULL) return(a); if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return(result); } // O(n Log n) // Merge sort is often preferred for sorting a linked list. The slow random-access performance of a linked list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible. // sorting image // Let head be the first node of the linked list to be sorted and headRef be the pointer to head. Note that we need a reference to head in MergeSort() as the below implementation changes next links to sort the linked lists (not data at the nodes), so head node has to be changed if the data at the original head is not the smallest value in the linked list. #include <bits/stdc++.h> using namespace std; /* Link list node */ class Node { public: int data; Node* next; }; /* function prototypes */ Node* SortedMerge(Node* a, Node* b); void FrontBackSplit(Node* source, Node** frontRef, Node** backRef); /* sorts the linked list by changing next pointers (not data) */ void MergeSort(Node** headRef) { Node* head = *headRef; Node* a; Node* b; /* Base case -- length 0 or 1 */ if ((head == NULL) || (head->next == NULL)) { return; } /* Split head into 'a' and 'b' sublists */ FrontBackSplit(head, &a, &b); /* Recursively sort the sublists */ MergeSort(&a); MergeSort(&b); /* answer = merge the two sorted lists together */ *headRef = SortedMerge(a, b); } /* See https:// www.geeksforgeeks.org/?p=3622 for details of this function */ Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; /* Base cases */ if (a == NULL) return (b); else if (b == NULL) return (a); /* Pick either a or b, and recur */ if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return (result); } /* UTILITY FUNCTIONS */ /* Split the nodes of the given list into front and back halves, and return the two lists using the reference parameters. If the length is odd, the extra node should go in the front list. Uses the fast/slow pointer strategy. */ void FrontBackSplit(Node* source, Node** frontRef, Node** backRef) { Node* fast; Node* slow; slow = source; fast = source->next; /* Advance 'fast' two nodes, and advance 'slow' one node */ while (fast != NULL) { fast = fast->next; if (fast != NULL) { slow = slow->next; fast = fast->next; } } /* 'slow' is before the midpoint in the list, so split it in two at that point. */ *frontRef = source; *backRef = slow->next; slow->next = NULL; } /* Function to print nodes in a given linked list */ void printList(Node* node) { while (node != NULL) { cout << node->data << \" \"; node = node->next; } } /* Function to insert a node at the beginging of the linked list */ void push(Node** head_ref, int new_data) { /* allocate node */ Node* new_node = new Node(); /* put in the data */ new_node->data = new_data; /* link the old list off the new node */ new_node->next = (*head_ref); /* move the head to point to the new node */ (*head_ref) = new_node; } /* Driver program to test above functions*/ int main() { /* Start with the empty list */ Node* res = NULL; Node* a = NULL; /* Let us create a unsorted linked lists to test the functions Created lists shall be a: 2->3->20->5->10->15 */ push(&a, 15); push(&a, 10); push(&a, 5); push(&a, 20); push(&a, 3); push(&a, 2); /* Sort the above created Linked List */ MergeSort(&a); cout << \"Sorted Linked List is: \\n\"; printList(a); return 0; } // This is code is contributed by rathbhupendra","title":"Merge Sort"},{"location":"algo/sort/merge/#merge-sort","text":"","title":"Merge Sort"},{"location":"algo/sort/merge/#dummy-nodes","text":"The strategy here uses a temporary dummy node as the start of the result list. The pointer Tail always points to the last node in the result list, so appending new nodes is easy. The dummy node gives the tail something to point to initially when the result list is empty. This dummy node is efficient, since it is only temporary, and it is allocated in the stack. The loop proceeds, removing one node from either \u2018a\u2019 or \u2018b\u2019, and adding it to the tail. When We are done, the result is in dummy.next. void MergeSort(Node** headRef) { Node* head = *headRef; Node* a; Node* b; if ((head == NULL) || (head->next == NULL)) { return; } FrontBackSplit(head, &a, &b); MergeSort(&a); MergeSort(&b); *headRef = SortedMerge(a, b); } Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; if (a == NULL) return (b); else if (b == NULL) return (a); if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return (result); } void FrontBackSplit(Node* source, Node** frontRef, Node** backRef) { Node* fast; Node* slow; slow = source; fast = source->next; /* Advance 'fast' two nodes, and advance 'slow' one node */ while (fast != NULL) { fast = fast->next; if (fast != NULL) { slow = slow->next; fast = fast->next; } } /* 'slow' is before the midpoint in the list, so split it in two at that point. */ *frontRef = source; *backRef = slow->next; slow->next = NULL; }","title":"Dummy nodes"},{"location":"algo/sort/merge/#local-reference","text":"lastPtrRef is same as dummy node (this is tail before was head) Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; Node** lastPtrRef = &result; while(1) { if (a == NULL) { *lastPtrRef = b; break; } else if (b==NULL) { *lastPtrRef = a; break; } if(a->data <= b->data) { MoveNode(lastPtrRef, &a); } else { MoveNode(lastPtrRef, &b); } lastPtrRef = &((*lastPtrRef)->next); } return(result); }","title":"Local Reference"},{"location":"algo/sort/merge/#recursive-space-is-more-prodution-xxx","text":"Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; if (a == NULL) return(b); else if (b == NULL) return(a); if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return(result); } // O(n Log n) // Merge sort is often preferred for sorting a linked list. The slow random-access performance of a linked list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible. // sorting image // Let head be the first node of the linked list to be sorted and headRef be the pointer to head. Note that we need a reference to head in MergeSort() as the below implementation changes next links to sort the linked lists (not data at the nodes), so head node has to be changed if the data at the original head is not the smallest value in the linked list. #include <bits/stdc++.h> using namespace std; /* Link list node */ class Node { public: int data; Node* next; }; /* function prototypes */ Node* SortedMerge(Node* a, Node* b); void FrontBackSplit(Node* source, Node** frontRef, Node** backRef); /* sorts the linked list by changing next pointers (not data) */ void MergeSort(Node** headRef) { Node* head = *headRef; Node* a; Node* b; /* Base case -- length 0 or 1 */ if ((head == NULL) || (head->next == NULL)) { return; } /* Split head into 'a' and 'b' sublists */ FrontBackSplit(head, &a, &b); /* Recursively sort the sublists */ MergeSort(&a); MergeSort(&b); /* answer = merge the two sorted lists together */ *headRef = SortedMerge(a, b); } /* See https:// www.geeksforgeeks.org/?p=3622 for details of this function */ Node* SortedMerge(Node* a, Node* b) { Node* result = NULL; /* Base cases */ if (a == NULL) return (b); else if (b == NULL) return (a); /* Pick either a or b, and recur */ if (a->data <= b->data) { result = a; result->next = SortedMerge(a->next, b); } else { result = b; result->next = SortedMerge(a, b->next); } return (result); } /* UTILITY FUNCTIONS */ /* Split the nodes of the given list into front and back halves, and return the two lists using the reference parameters. If the length is odd, the extra node should go in the front list. Uses the fast/slow pointer strategy. */ void FrontBackSplit(Node* source, Node** frontRef, Node** backRef) { Node* fast; Node* slow; slow = source; fast = source->next; /* Advance 'fast' two nodes, and advance 'slow' one node */ while (fast != NULL) { fast = fast->next; if (fast != NULL) { slow = slow->next; fast = fast->next; } } /* 'slow' is before the midpoint in the list, so split it in two at that point. */ *frontRef = source; *backRef = slow->next; slow->next = NULL; } /* Function to print nodes in a given linked list */ void printList(Node* node) { while (node != NULL) { cout << node->data << \" \"; node = node->next; } } /* Function to insert a node at the beginging of the linked list */ void push(Node** head_ref, int new_data) { /* allocate node */ Node* new_node = new Node(); /* put in the data */ new_node->data = new_data; /* link the old list off the new node */ new_node->next = (*head_ref); /* move the head to point to the new node */ (*head_ref) = new_node; } /* Driver program to test above functions*/ int main() { /* Start with the empty list */ Node* res = NULL; Node* a = NULL; /* Let us create a unsorted linked lists to test the functions Created lists shall be a: 2->3->20->5->10->15 */ push(&a, 15); push(&a, 10); push(&a, 5); push(&a, 20); push(&a, 3); push(&a, 2); /* Sort the above created Linked List */ MergeSort(&a); cout << \"Sorted Linked List is: \\n\"; printList(a); return 0; } // This is code is contributed by rathbhupendra","title":"Recursive (Space is more... Prodution XXX)"},{"location":"ds/array/decay/","text":"Array Decay \u00b6 Loss of type and dimensions. When we pass the array into function by value or pointer. It sends first address to the array which is a pointer, hence the size of array is not the original one, but the one occupied by the pointer in the memory.","title":"Array Decay"},{"location":"ds/array/decay/#array-decay","text":"Loss of type and dimensions. When we pass the array into function by value or pointer. It sends first address to the array which is a pointer, hence the size of array is not the original one, but the one occupied by the pointer in the memory.","title":"Array Decay"},{"location":"ds/array/frequency/","text":"Frequency of a Number \u00b6 simple \u00b6 void countFreq(int arr[], int n) { vector<bool> visited(n, false); for (int i = 0; i < n; i++) { if (visited[i] == true) continue; int count = 1; for (int j = i + 1; j < n; j++) { if (arr[i] == arr[j]) { visited[j] = true; count++; } } cout << arr[i] << \" \" << count << endl; } } Sort then Binary search \u00b6 Hashing \u00b6 void countFreq(int arr[], int n) { unordered_map<int, int> mp; for (int i = 0; i < n; i++) mp[arr[i]]++; for (auto x : mp) cout << x.first << \" \" << x.second << endl; }","title":"Frequency of a Number"},{"location":"ds/array/frequency/#frequency-of-a-number","text":"","title":"Frequency of a Number"},{"location":"ds/array/frequency/#simple","text":"void countFreq(int arr[], int n) { vector<bool> visited(n, false); for (int i = 0; i < n; i++) { if (visited[i] == true) continue; int count = 1; for (int j = i + 1; j < n; j++) { if (arr[i] == arr[j]) { visited[j] = true; count++; } } cout << arr[i] << \" \" << count << endl; } }","title":"simple"},{"location":"ds/array/frequency/#sort-then-binary-search","text":"","title":"Sort then Binary search"},{"location":"ds/array/frequency/#hashing","text":"void countFreq(int arr[], int n) { unordered_map<int, int> mp; for (int i = 0; i < n; i++) mp[arr[i]]++; for (auto x : mp) cout << x.first << \" \" << x.second << endl; }","title":"Hashing"},{"location":"ds/array/functions/","text":"Passing Arrays to Functions \u00b6 void myFunction(int *param) {} void myFunction(int param[10]) {} void myFunction(int param[]) {} Return Array from Functions \u00b6 int * myFunction() {} Second point to remember is that C++ does not advocate to return the address of a local variable to outside of the function so you would have to define the local variable as static variable. #include <iostream> #include <ctime> using namespace std; // function to generate and retrun random numbers. int * getRandom( ) { static int r[10]; // set the seed srand( (unsigned)time( NULL ) ); for (int i = 0; i < 10; ++i) { r[i] = rand(); cout << r[i] << endl; } return r; } // main function to call above defined function. int main () { // a pointer to an int. int *p; p = getRandom(); for ( int i = 0; i < 10; i++ ) { cout << \"*(p + \" << i << \") : \"; cout << *(p + i) << endl; } return 0; }","title":"Passing Arrays to Functions"},{"location":"ds/array/functions/#passing-arrays-to-functions","text":"void myFunction(int *param) {} void myFunction(int param[10]) {} void myFunction(int param[]) {}","title":"Passing Arrays to Functions"},{"location":"ds/array/functions/#return-array-from-functions","text":"int * myFunction() {} Second point to remember is that C++ does not advocate to return the address of a local variable to outside of the function so you would have to define the local variable as static variable. #include <iostream> #include <ctime> using namespace std; // function to generate and retrun random numbers. int * getRandom( ) { static int r[10]; // set the seed srand( (unsigned)time( NULL ) ); for (int i = 0; i < 10; ++i) { r[i] = rand(); cout << r[i] << endl; } return r; } // main function to call above defined function. int main () { // a pointer to an int. int *p; p = getRandom(); for ( int i = 0; i < 10; i++ ) { cout << \"*(p + \" << i << \") : \"; cout << *(p + i) << endl; } return 0; }","title":"Return Array from Functions"},{"location":"ds/array/intro/","text":"Introduction \u00b6 collection of similar data items stored at contiguous memory locations random access int, float, double, char, objects, structs, etc Why \u00b6 The idea of an array is to represent many instances in one variable. Declaration \u00b6 int arr1[10]; int n = 10; int arr2[n]; int arr[] = { 10, 20, 30, 40 } int arr[6] = { 10, 20, 30, 40 } // same as int arr[] = {10, 20, 30, 40, 0, 0} Advantages \u00b6 Random access less lines of code Easy access easy Traversal easy Sorting Disadvantages \u00b6 fixed number of elements Insertion and deletion of elements costly Accessing \u00b6 int arr[5]; arr[0] = 5; arr[2] = -10; arr[3 / 2] = 2; // this is same as arr[1] = 2 arr[3] = arr[0]; printf(\"%d %d %d %d\", arr[0], arr[1], arr[2], arr[3]); In C, no index out of bound checking \u00b6 int arr[2]; printf(\"%d \", arr[3]); printf(\"%d \", arr[-2]); int arr[2] = { 10, 20, 30, 40, 50 }; // The program won\u2019t compile in C++. If we save the above program as a .cpp, the program generates compiler error \u201cerror: too many initializers for \u2018int [2]'\u201d. Traversal \u00b6 #include<bits/stdc++.h> using namespace std; int main() { int arr[6]={11,12,13,14,15,16}; // Way -1 for(int i=0;i<6;i++) cout<<arr[i]<<\" \"; cout<<endl; // Way 2 cout<<\"By Other Method:\"<<endl; for(int i=0;i<6;i++) cout<<i[arr]<<\" \"; cout<<endl; return 0; }","title":"Introduction"},{"location":"ds/array/intro/#introduction","text":"collection of similar data items stored at contiguous memory locations random access int, float, double, char, objects, structs, etc","title":"Introduction"},{"location":"ds/array/intro/#why","text":"The idea of an array is to represent many instances in one variable.","title":"Why"},{"location":"ds/array/intro/#declaration","text":"int arr1[10]; int n = 10; int arr2[n]; int arr[] = { 10, 20, 30, 40 } int arr[6] = { 10, 20, 30, 40 } // same as int arr[] = {10, 20, 30, 40, 0, 0}","title":"Declaration"},{"location":"ds/array/intro/#advantages","text":"Random access less lines of code Easy access easy Traversal easy Sorting","title":"Advantages"},{"location":"ds/array/intro/#disadvantages","text":"fixed number of elements Insertion and deletion of elements costly","title":"Disadvantages"},{"location":"ds/array/intro/#accessing","text":"int arr[5]; arr[0] = 5; arr[2] = -10; arr[3 / 2] = 2; // this is same as arr[1] = 2 arr[3] = arr[0]; printf(\"%d %d %d %d\", arr[0], arr[1], arr[2], arr[3]);","title":"Accessing"},{"location":"ds/array/intro/#in-c-no-index-out-of-bound-checking","text":"int arr[2]; printf(\"%d \", arr[3]); printf(\"%d \", arr[-2]); int arr[2] = { 10, 20, 30, 40, 50 }; // The program won\u2019t compile in C++. If we save the above program as a .cpp, the program generates compiler error \u201cerror: too many initializers for \u2018int [2]'\u201d.","title":"In C, no index out of bound checking"},{"location":"ds/array/intro/#traversal","text":"#include<bits/stdc++.h> using namespace std; int main() { int arr[6]={11,12,13,14,15,16}; // Way -1 for(int i=0;i<6;i++) cout<<arr[i]<<\" \"; cout<<endl; // Way 2 cout<<\"By Other Method:\"<<endl; for(int i=0;i<6;i++) cout<<i[arr]<<\" \"; cout<<endl; return 0; }","title":"Traversal"},{"location":"ds/array/min-max/","text":"Min Max \u00b6 Recursive \u00b6 int getMin(int arr[], int n) { return (n == 1) ? arr[0] : min(arr[0], getMin(arr + 1, n - 1)); } int getMax(int arr[], int n) { return (n == 1) ? arr[0] : max(arr[0], getMax(arr + 1, n - 1)); } Library Functions \u00b6 int getMin(int arr[], int n) { return *min_element(arr, arr + n); } int getMax(int arr[], int n) { return *max_element(arr, arr + n); }","title":"Min Max"},{"location":"ds/array/min-max/#min-max","text":"","title":"Min Max"},{"location":"ds/array/min-max/#recursive","text":"int getMin(int arr[], int n) { return (n == 1) ? arr[0] : min(arr[0], getMin(arr + 1, n - 1)); } int getMax(int arr[], int n) { return (n == 1) ? arr[0] : max(arr[0], getMax(arr + 1, n - 1)); }","title":"Recursive"},{"location":"ds/array/min-max/#library-functions","text":"int getMin(int arr[], int n) { return *min_element(arr, arr + n); } int getMax(int arr[], int n) { return *max_element(arr, arr + n); }","title":"Library Functions"},{"location":"ds/array/multi-dimensional/","text":"Multidimensional Arrays \u00b6 row major (in c++) \u00b6 data_type array_name[size1][size2]....[sizeN]; x[i][j] where i is the row number and \u2018j\u2019 is the column number. 0 to (x-1), 0 to (y-1) int x[3][4] = {0, 1 ,2 ,3 ,4 , 5 , 6 , 7 , 8 , 9 , 10 , 11} int x[3][4] = {{0,1,2,3}, {4,5,6,7}, {8,9,10,11}}; Three-Dimensional Array \u00b6 int x[2][3][4] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}; int x[2][3][4] = { { {0,1,2,3}, {4,5,6,7}, {8,9,10,11} }, { {12,13,14,15}, {16,17,18,19}, {20,21,22,23} } };","title":"Multidimensional Arrays"},{"location":"ds/array/multi-dimensional/#multidimensional-arrays","text":"","title":"Multidimensional Arrays"},{"location":"ds/array/multi-dimensional/#row-major-in-c","text":"data_type array_name[size1][size2]....[sizeN]; x[i][j] where i is the row number and \u2018j\u2019 is the column number. 0 to (x-1), 0 to (y-1) int x[3][4] = {0, 1 ,2 ,3 ,4 , 5 , 6 , 7 , 8 , 9 , 10 , 11} int x[3][4] = {{0,1,2,3}, {4,5,6,7}, {8,9,10,11}};","title":"row major (in c++)"},{"location":"ds/array/multi-dimensional/#three-dimensional-array","text":"int x[2][3][4] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}; int x[2][3][4] = { { {0,1,2,3}, {4,5,6,7}, {8,9,10,11} }, { {12,13,14,15}, {16,17,18,19}, {20,21,22,23} } };","title":"Three-Dimensional Array"},{"location":"ds/array/reverse/","text":"Reverse Array \u00b6 Iterative \u00b6 void rvereseArray(int arr[], int start, int end) { while (start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } } Recursive \u00b6 void rvereseArray(int arr[], int start, int end) { if (start >= end) return; int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; // Recursive Function calling rvereseArray(arr, start + 1, end - 1); }","title":"Reverse Array"},{"location":"ds/array/reverse/#reverse-array","text":"","title":"Reverse Array"},{"location":"ds/array/reverse/#iterative","text":"void rvereseArray(int arr[], int start, int end) { while (start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } }","title":"Iterative"},{"location":"ds/array/reverse/#recursive","text":"void rvereseArray(int arr[], int start, int end) { if (start >= end) return; int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; // Recursive Function calling rvereseArray(arr, start + 1, end - 1); }","title":"Recursive"},{"location":"ds/array/vectors/","text":"Vectors in cpp \u00b6 Iterators \u00b6 begin -> 1st element end -> last element r -> reverse c -> constant begin() end() rbegin() rend() cbegin() \u2013 constant iterator pointing to 1st element cend() crbegin() crend() \u2013 constant reverse iterator, pointing to theoretical element i.e. preceding the 1st element Capacity \u00b6 size() \u2013 number of elements max_size() \u2013 maximum number of elements capacity() \u2013 space currently allocated expressed as number of elements. resize(n) \u2013 Resizes the container to n elements. empty() \u2013 whether is empty. shrink_to_fit() \u2013 Reduces the capacity to fit its size and destroys all elements beyond the capacity. reserve() \u2013 Requests that the vector capacity be at least enough to contain n elements. Element access: \u00b6 reference operator [g] \u2013 reference to the element at position \u2018g\u2019 in the vector at(g) \u2013 reference to the element at position \u2018g\u2019 in the vector front() \u2013 reference to the first element in the vector back() \u2013 reference to the last element in the vector data() \u2013 direct pointer to the memory array used internally by the vector to store its owned elements. Modifiers: \u00b6 assign() \u2013 assigns new value to the elements by replacing old ones push_back() \u2013 push the elements from the back pop_back() \u2013 pop elements from the back. insert() \u2013 inserts new elements before specified position erase() \u2013 remove element at position or range. swap() \u2013 swap one vector with another (size may differ). clear() \u2013 remove all elements. emplace() \u2013 extends the container by inserting new element at position. emplace_back() \u2013 insert new element to the end.","title":"Vectors in cpp"},{"location":"ds/array/vectors/#vectors-in-cpp","text":"","title":"Vectors in cpp"},{"location":"ds/array/vectors/#iterators","text":"begin -> 1st element end -> last element r -> reverse c -> constant begin() end() rbegin() rend() cbegin() \u2013 constant iterator pointing to 1st element cend() crbegin() crend() \u2013 constant reverse iterator, pointing to theoretical element i.e. preceding the 1st element","title":"Iterators"},{"location":"ds/array/vectors/#capacity","text":"size() \u2013 number of elements max_size() \u2013 maximum number of elements capacity() \u2013 space currently allocated expressed as number of elements. resize(n) \u2013 Resizes the container to n elements. empty() \u2013 whether is empty. shrink_to_fit() \u2013 Reduces the capacity to fit its size and destroys all elements beyond the capacity. reserve() \u2013 Requests that the vector capacity be at least enough to contain n elements.","title":"Capacity"},{"location":"ds/array/vectors/#element-access","text":"reference operator [g] \u2013 reference to the element at position \u2018g\u2019 in the vector at(g) \u2013 reference to the element at position \u2018g\u2019 in the vector front() \u2013 reference to the first element in the vector back() \u2013 reference to the last element in the vector data() \u2013 direct pointer to the memory array used internally by the vector to store its owned elements.","title":"Element access:"},{"location":"ds/array/vectors/#modifiers","text":"assign() \u2013 assigns new value to the elements by replacing old ones push_back() \u2013 push the elements from the back pop_back() \u2013 pop elements from the back. insert() \u2013 inserts new elements before specified position erase() \u2013 remove element at position or range. swap() \u2013 swap one vector with another (size may differ). clear() \u2013 remove all elements. emplace() \u2013 extends the container by inserting new element at position. emplace_back() \u2013 insert new element to the end.","title":"Modifiers:"},{"location":"ds/array/vs-pointers/","text":"Array vs Pointers \u00b6 Difference \u00b6 #include <iostream> using namespace std; int main() { int arr[] = { 10, 20, 30, 40, 50, 60 }; int* ptr = arr; // sizof(int) * (number of element in arr[]) is printed cout << \"Size of arr[] \" << sizeof(arr) << \"\\n\"; // sizeof a pointer is printed which is same for all // type of pointers (char *, void *, etc) cout << \"Size of ptr \" << sizeof(ptr); return 0; } Output Size of arr[] 24 Size of ptr 8 Assignment \u00b6 #include <stdio.h> int main() { int arr[] = {10, 20}, x = 10; int *ptr = &x; // This is fine arr = &x; // Compiler Error return 0; } Similarities \u00b6 Array name -> address of 1st element. Members are accessed using pointer arithmetic. ( \u201carr[i]\u201d <=> *(arr + i)) Array parameters are always passed as pointers, even when we use square brackets.","title":"Array vs Pointers"},{"location":"ds/array/vs-pointers/#array-vs-pointers","text":"","title":"Array vs Pointers"},{"location":"ds/array/vs-pointers/#difference","text":"#include <iostream> using namespace std; int main() { int arr[] = { 10, 20, 30, 40, 50, 60 }; int* ptr = arr; // sizof(int) * (number of element in arr[]) is printed cout << \"Size of arr[] \" << sizeof(arr) << \"\\n\"; // sizeof a pointer is printed which is same for all // type of pointers (char *, void *, etc) cout << \"Size of ptr \" << sizeof(ptr); return 0; } Output Size of arr[] 24 Size of ptr 8","title":"Difference"},{"location":"ds/array/vs-pointers/#assignment","text":"#include <stdio.h> int main() { int arr[] = {10, 20}, x = 10; int *ptr = &x; // This is fine arr = &x; // Compiler Error return 0; }","title":"Assignment"},{"location":"ds/array/vs-pointers/#similarities","text":"Array name -> address of 1st element. Members are accessed using pointer arithmetic. ( \u201carr[i]\u201d <=> *(arr + i)) Array parameters are always passed as pointers, even when we use square brackets.","title":"Similarities"},{"location":"ds/graph/bfs/","text":"BFS \u00b6 Application: \u00b6 shortest path / mst PSP networks Crawlers social netowwrking sites GPS navigation Broadcasting network In Garbage Collection: Cheney\u2019s algorithm. It is preferred over DFS because of better locality of reference: cycle detection Ford\u2013Fulkerson algorithm bipartite PAth Finding Finding all nodes within one connected component: To print all the vertices, we can modify the BFS function to do traversal starting from all nodes one by one (Like the DFS modified version). O(V+E) O(E*V) void BFS(int s) { bool *visited = new bool[V]; for(int i = 0; i < V; i++) visited[i] = false; list<int> queue; visited[s] = true; queue.push_back(s); list<int>::iterator i; while(!queue.empty()) { s = queue.front(); cout << s << \" \"; queue.pop_front(); for (i = adj[s].begin(); i != adj[s].end(); ++i) { if (!visited[*i]) { visited[*i] = true; queue.push_back(*i); } } } }","title":"BFS"},{"location":"ds/graph/bfs/#bfs","text":"","title":"BFS"},{"location":"ds/graph/bfs/#application","text":"shortest path / mst PSP networks Crawlers social netowwrking sites GPS navigation Broadcasting network In Garbage Collection: Cheney\u2019s algorithm. It is preferred over DFS because of better locality of reference: cycle detection Ford\u2013Fulkerson algorithm bipartite PAth Finding Finding all nodes within one connected component: To print all the vertices, we can modify the BFS function to do traversal starting from all nodes one by one (Like the DFS modified version). O(V+E) O(E*V) void BFS(int s) { bool *visited = new bool[V]; for(int i = 0; i < V; i++) visited[i] = false; list<int> queue; visited[s] = true; queue.push_back(s); list<int>::iterator i; while(!queue.empty()) { s = queue.front(); cout << s << \" \"; queue.pop_front(); for (i = adj[s].begin(); i != adj[s].end(); ++i) { if (!visited[*i]) { visited[*i] = true; queue.push_back(*i); } } } }","title":"Application:"},{"location":"ds/graph/dfs-disconnected/","text":"Disconnected DFS \u00b6 Create a recursive function that takes the index of node and a visited array. Mark the current node as visited and print the node. Traverse all the adjacent and unmarked nodes and call the recursive function with index of adjacent node. Run a loop from 0 to number of vertices and check if the node is unvisited in previous DFS then call the recursive function with current node. O(V + E) , O(V). void Graph::DFSUtil(int v, bool visited[]) { visited[v] = true; cout << v << \" \"; list<int>::iterator i; for(i = adj[v].begin(); i != adj[v].end(); ++i) if(!visited[*i]) DFSUtil(*i, visited); } void Graph::DFS() { bool *visited = new bool[V]; for (int i = 0; i < V; i++) visited[i] = false; for (int i = 0; i < V; i++) if (visited[i] == false) DFSUtil(i, visited); }","title":"Disconnected DFS"},{"location":"ds/graph/dfs-disconnected/#disconnected-dfs","text":"Create a recursive function that takes the index of node and a visited array. Mark the current node as visited and print the node. Traverse all the adjacent and unmarked nodes and call the recursive function with index of adjacent node. Run a loop from 0 to number of vertices and check if the node is unvisited in previous DFS then call the recursive function with current node. O(V + E) , O(V). void Graph::DFSUtil(int v, bool visited[]) { visited[v] = true; cout << v << \" \"; list<int>::iterator i; for(i = adj[v].begin(); i != adj[v].end(); ++i) if(!visited[*i]) DFSUtil(*i, visited); } void Graph::DFS() { bool *visited = new bool[V]; for (int i = 0; i < V; i++) visited[i] = false; for (int i = 0; i < V; i++) if (visited[i] == false) DFSUtil(i, visited); }","title":"Disconnected DFS"},{"location":"ds/graph/dfs/","text":"DFS \u00b6 Create a recursive function that takes the index of node and a visited array. Mark the current node as visited and print the node. Traverse all the adjacent and unmarked nodes and call the recursive function with index of adjacent node. Application: \u00b6 mst, shortest path tree detect cycle, if there is back egde in dfs then there is cycle Pth finding: prepare stack when v detect pop it. topological sorting: scheduling jobs from the given dependencies among jobs. bipartite graph test strongly connected graph solving puzzles wiht only one solutiion such as mazes O(V + E) , O(V). void DFSUtil(int v, bool visited[]) { visited[v] = true; cout << v << \" \"; list<int>::iterator i; for (i = adj[v].begin(); i != adj[v].end(); ++i) if (!visited[*i]) DFSUtil(*i, visited); } void DFS(int v) { bool *visited = new bool[V]; for (int i = 0; i < V; i++) visited[i] = false; DFSUtil(v, visited); }","title":"DFS"},{"location":"ds/graph/dfs/#dfs","text":"Create a recursive function that takes the index of node and a visited array. Mark the current node as visited and print the node. Traverse all the adjacent and unmarked nodes and call the recursive function with index of adjacent node.","title":"DFS"},{"location":"ds/graph/dfs/#application","text":"mst, shortest path tree detect cycle, if there is back egde in dfs then there is cycle Pth finding: prepare stack when v detect pop it. topological sorting: scheduling jobs from the given dependencies among jobs. bipartite graph test strongly connected graph solving puzzles wiht only one solutiion such as mazes O(V + E) , O(V). void DFSUtil(int v, bool visited[]) { visited[v] = true; cout << v << \" \"; list<int>::iterator i; for (i = adj[v].begin(); i != adj[v].end(); ++i) if (!visited[*i]) DFSUtil(*i, visited); } void DFS(int v) { bool *visited = new bool[V]; for (int i = 0; i < V; i++) visited[i] = false; DFSUtil(v, visited); }","title":"Application:"},{"location":"ds/graph/intro/","text":"Graph \u00b6 Properties \u00b6 finite set of vertices -> nodes set of ordered pair (u,v) telling aedge bw vertex v and u. f(u,v) weight/value/cost. Applications \u00b6 networks -> facebook, node has person info. Representation \u00b6 Adjacency List Adjacency Matrix Incidence Matrix Incidence List Depends on use case -> type of operations Adjacency matrix \u00b6 2D array of size V x V adj[i][j] = 1, adj[i][j] = w Pros \u00b6 deletion, isThereAnEdge -> O(1) Cons \u00b6 space -> O(V^2) even matrix is sparse inserting an edge -> O(V^2) Adjacency List \u00b6 array[i] -> list of vertices adjacent to ith vertex. Weights -> as lists of pairs Pros \u00b6 Saves space O(|V|+|E|) worst case -> O(V^2) Adding a vertex is easier Cons \u00b6 isThereAnEdge -> O(V) #include <iostream> #include <vector> using namespace std; void addEdge(vector<int> adj[], int u, int v) { adj[u].push_back(v); adj[v].push_back(u); } void printGraph(vector<int> adj[], int V){ for (int v = 0; v < V; ++v) { cout << \"\\n Adjacency list of vertex \" << v << \"\\n head \"; for (auto x : adj[v]) cout << \"-> \" << x; printf(\"\\n\"); } } int main(){ int V = 5; vector<int> adj[V]; addEdge(adj, 0, 1); addEdge(adj, 0, 4); addEdge(adj, 1, 2); addEdge(adj, 1, 3); addEdge(adj, 1, 4); addEdge(adj, 2, 3); addEdge(adj, 3, 4); printGraph(adj, V); return 0; }","title":"Graph"},{"location":"ds/graph/intro/#graph","text":"","title":"Graph"},{"location":"ds/graph/intro/#properties","text":"finite set of vertices -> nodes set of ordered pair (u,v) telling aedge bw vertex v and u. f(u,v) weight/value/cost.","title":"Properties"},{"location":"ds/graph/intro/#applications","text":"networks -> facebook, node has person info.","title":"Applications"},{"location":"ds/graph/intro/#representation","text":"Adjacency List Adjacency Matrix Incidence Matrix Incidence List Depends on use case -> type of operations","title":"Representation"},{"location":"ds/graph/intro/#adjacency-matrix","text":"2D array of size V x V adj[i][j] = 1, adj[i][j] = w","title":"Adjacency matrix"},{"location":"ds/graph/intro/#pros","text":"deletion, isThereAnEdge -> O(1)","title":"Pros"},{"location":"ds/graph/intro/#cons","text":"space -> O(V^2) even matrix is sparse inserting an edge -> O(V^2)","title":"Cons"},{"location":"ds/graph/intro/#adjacency-list","text":"array[i] -> list of vertices adjacent to ith vertex. Weights -> as lists of pairs","title":"Adjacency List"},{"location":"ds/graph/intro/#pros_1","text":"Saves space O(|V|+|E|) worst case -> O(V^2) Adding a vertex is easier","title":"Pros"},{"location":"ds/graph/intro/#cons_1","text":"isThereAnEdge -> O(V) #include <iostream> #include <vector> using namespace std; void addEdge(vector<int> adj[], int u, int v) { adj[u].push_back(v); adj[v].push_back(u); } void printGraph(vector<int> adj[], int V){ for (int v = 0; v < V; ++v) { cout << \"\\n Adjacency list of vertex \" << v << \"\\n head \"; for (auto x : adj[v]) cout << \"-> \" << x; printf(\"\\n\"); } } int main(){ int V = 5; vector<int> adj[V]; addEdge(adj, 0, 1); addEdge(adj, 0, 4); addEdge(adj, 1, 2); addEdge(adj, 1, 3); addEdge(adj, 1, 4); addEdge(adj, 2, 3); addEdge(adj, 3, 4); printGraph(adj, V); return 0; }","title":"Cons"},{"location":"ds/heap/fibonacci-heap/","text":"Fibonacci Heap \u00b6 Find Min: \u0398(1) [Same as both Binary and Binomial] Delete Min: O(Log n) [\u0398(Log n) in both Binary and Binomial] Insert: \u0398(1) [\u0398(Log n) in Binary and \u0398(1) in Binomial] Decrease-Key: \u0398(1) [\u0398(Log n) in both Binary and Binomial] Merge: \u0398(1) [\u0398(m Log n) or \u0398(m+n) in Binary and \u0398(Log n) in Binomial] Like Binomial Heap, Fibonacci Heap is a collection of trees with min-heap or max-heap property. In Fibonacci Heap, trees can can have any shape even all trees can be single nodes (This is unlike Binomial Heap where every tree has to be Binomial Tree). Fibonacci Heap maintains a pointer to minimum value (which is root of a tree). All tree roots are connected using circular doubly linked list, so all of them can be accessed using single \u2018min\u2019 pointer. The main idea is to execute operations in \u201clazy\u201d way. For example merge operation simply links two heaps, insert operation simply adds a new tree with single node. The operation extract minimum is the most complicated operation. It does delayed work of consolidating trees. This makes delete also complicated as delete first decreases key to minus infinite, then calls extract minimum. Below are some interesting facts about Fibonacci Heap The reduced time complexity of Decrease-Key has importance in Dijkstra and Prim algorithms. With Binary Heap, time complexity of these algorithms is O(VLogV + ELogV). If Fibonacci Heap is used, then time complexity is improved to O(VLogV + E) Although Fibonacci Heap looks promising time complexity wise, it has been found slow in practice as hidden constants are high (Source Wiki). Fibonacci heap are mainly called so because Fibonacci numbers are used in the running time analysis. Also, every node in Fibonacci Heap has degree at most O(log n) and the size of a subtree rooted in a node of degree k is at least F^k+2, where F^k is the kth Fibonacci number.","title":"Fibonacci Heap"},{"location":"ds/heap/fibonacci-heap/#fibonacci-heap","text":"Find Min: \u0398(1) [Same as both Binary and Binomial] Delete Min: O(Log n) [\u0398(Log n) in both Binary and Binomial] Insert: \u0398(1) [\u0398(Log n) in Binary and \u0398(1) in Binomial] Decrease-Key: \u0398(1) [\u0398(Log n) in both Binary and Binomial] Merge: \u0398(1) [\u0398(m Log n) or \u0398(m+n) in Binary and \u0398(Log n) in Binomial] Like Binomial Heap, Fibonacci Heap is a collection of trees with min-heap or max-heap property. In Fibonacci Heap, trees can can have any shape even all trees can be single nodes (This is unlike Binomial Heap where every tree has to be Binomial Tree). Fibonacci Heap maintains a pointer to minimum value (which is root of a tree). All tree roots are connected using circular doubly linked list, so all of them can be accessed using single \u2018min\u2019 pointer. The main idea is to execute operations in \u201clazy\u201d way. For example merge operation simply links two heaps, insert operation simply adds a new tree with single node. The operation extract minimum is the most complicated operation. It does delayed work of consolidating trees. This makes delete also complicated as delete first decreases key to minus infinite, then calls extract minimum. Below are some interesting facts about Fibonacci Heap The reduced time complexity of Decrease-Key has importance in Dijkstra and Prim algorithms. With Binary Heap, time complexity of these algorithms is O(VLogV + ELogV). If Fibonacci Heap is used, then time complexity is improved to O(VLogV + E) Although Fibonacci Heap looks promising time complexity wise, it has been found slow in practice as hidden constants are high (Source Wiki). Fibonacci heap are mainly called so because Fibonacci numbers are used in the running time analysis. Also, every node in Fibonacci Heap has degree at most O(log n) and the size of a subtree rooted in a node of degree k is at least F^k+2, where F^k is the kth Fibonacci number.","title":"Fibonacci Heap"},{"location":"ds/heap/heap-sort/","text":"TODO","title":"Heap sort"},{"location":"ds/heap/intro/","text":"Binary Heap \u00b6 Complete Binary Tree Max Heap AND Min Heap Representaion \u00b6 Arrays \u00b6 root -> Arr[0]. For Arr[i]: Arr[(i-1)/2] -> parent node Arr[(2 i)+1] -> left child node Arr[(2 i)+2] -> right child node Traversal \u00b6 Level order aka Breadth First as storage is same. Operations \u00b6 getMin(): returns root. extractMin(): Removes minimum. as it calls heapify() after removing root. decreaseKey(): Decreases value of key. IF key value > parent THEN do anything. ELSE, traverse up to fix the violated heap property. insert() : New key Add a new key at the end of the tree. IF new key is greater than its parent, do nothing. Otherwise, traverse up to maintain heap property. delete(): Deleting a key We replace the key to be deleted with minum infinite by calling decreaseKey(). After decreaseKey(), the minus infinite value must reach root, so we call extractMin() to remove the key. Application \u00b6 Heap Sort : Heap Sort uses Binary Heap to sort an array in O(nLogn) time. Priority Queue : Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(logn) time. Binomoial Heap and Fibonacci Heap are variations of Binary Heap. These variations perform union also efficiently. Graph Algorithms : priority queues -> Dijkstra\u2019s Shortest Path, Prim\u2019s Minimum Spanning Tree. 5. a. K\u2019th Largest Element in an array. b. Sort an almost sorted array / Merge K Sorted Arrays. Why is Binary Heap Preferred over BST for Priority Queue? \u00b6 A typical Priority Queue requires following operations to be efficient. Get Top Priority Element (Get minimum or maximum) Insert an element Remove top priority element Decrease Key A Binary Heap supports above operations with following time complexities: O(1) O(Logn) O(Logn) O(Logn) A Self Balancing Binary Search Tree like AVL Tree, Red-Black Tree, etc can also support above operations with same time complexities. Finding minimum and maximum are not naturally O(1), but can be easily implemented in O(1) by keeping an extra pointer to minimum or maximum and updating the pointer with insertion and deletion if required. With deletion we can update by finding inorder predecessor or successor. Inserting an element is naturally O(Logn) Removing maximum or minimum are also O(Logn) Decrease key can be done in O(Logn) by doing a deletion followed by insertion. So why is Binary Heap Preferred for Priority Queue? arrays-> locallity of refernence -> cache friendliness constants in Binary Search Tree are higher. constructing Binary Heap -> O(n) Self Balancing BSTs -> O(nLogn) Binary Heap doesn\u2019t require extra space for pointers. Binary Heap is easier to implement. TFibonacci Heap -> insert and decrease-key -> \u0398(1) time Is Binary Heap always better? Although Binary Heap is for Priority Queue, BSTs have their own advantages and the list of advantages is in-fact bigger compared to binary heap. Searching an element in self-balancing BST is O(Logn) which is O(n) in Binary Heap. We can print all elements of BST in sorted order in O(n) time, but Binary Heap requires O(nLogn) time. Floor and ceil can be found in O(Logn) time. K\u2019th largest/smallest element be found in O(Logn) time by augmenting tree with an additional field. // 0(logn) , O(n) #include<iostream> #include<climits> using namespace std; void swap(int *x, int *y); class MinHeap { int *harr; int capacity; int heap_size; public: MinHeap(int capacity); void MinHeapify(int ); int parent(int i) { return (i-1)/2; } int left(int i) { return (2*i + 1); } int right(int i) { return (2*i + 2); } int extractMin(); void decreaseKey(int i, int new_val); int getMin() { return harr[0]; } void deleteKey(int i); void insertKey(int k); }; MinHeap::MinHeap(int cap) { heap_size = 0; capacity = cap; harr = new int[cap]; } void MinHeap::insertKey(int k) // O(logn) { if (heap_size == capacity) { cout << \"\\nOverflow: Could not insertKey\\n\"; return; } heap_size++; int i = heap_size - 1; harr[i] = k; while (i != 0 && harr[parent(i)] > harr[i]) { swap(&harr[i], &harr[parent(i)]); i = parent(i); } } void MinHeap::decreaseKey(int i, int new_val) // O(logn) { harr[i] = new_val; while (i != 0 && harr[parent(i)] > harr[i]) { swap(&harr[i], &harr[parent(i)]); i = parent(i); } } int MinHeap::extractMin() // O(logn) { if (heap_size <= 0) return INT_MAX; if (heap_size == 1) { heap_size--; return harr[0]; } int root = harr[0]; harr[0] = harr[heap_size-1]; heap_size--; MinHeapify(0); return root; } void MinHeap::deleteKey(int i) // O(logn) { decreaseKey(i, INT_MIN); extractMin(); } void MinHeap::MinHeapify(int i) // O(logn) { int l = left(i); int r = right(i); int smallest = i; if (l < heap_size && harr[l] < harr[i]) smallest = l; if (r < heap_size && harr[r] < harr[smallest]) smallest = r; if (smallest != i) { swap(&harr[i], &harr[smallest]); MinHeapify(smallest); } } void swap(int *x, int *y) { int temp = *x; *x = *y; *y = temp; } int main() { MinHeap h(11); h.insertKey(3); h.insertKey(2); h.deleteKey(1); h.insertKey(15); h.insertKey(5); h.insertKey(4); h.insertKey(45); cout << h.extractMin() << \" \"; cout << h.getMin() << \" \"; h.decreaseKey(2, 1); cout << h.getMin(); return 0; }","title":"Binary Heap"},{"location":"ds/heap/intro/#binary-heap","text":"Complete Binary Tree Max Heap AND Min Heap","title":"Binary Heap"},{"location":"ds/heap/intro/#representaion","text":"","title":"Representaion"},{"location":"ds/heap/intro/#arrays","text":"root -> Arr[0]. For Arr[i]: Arr[(i-1)/2] -> parent node Arr[(2 i)+1] -> left child node Arr[(2 i)+2] -> right child node","title":"Arrays"},{"location":"ds/heap/intro/#traversal","text":"Level order aka Breadth First as storage is same.","title":"Traversal"},{"location":"ds/heap/intro/#operations","text":"getMin(): returns root. extractMin(): Removes minimum. as it calls heapify() after removing root. decreaseKey(): Decreases value of key. IF key value > parent THEN do anything. ELSE, traverse up to fix the violated heap property. insert() : New key Add a new key at the end of the tree. IF new key is greater than its parent, do nothing. Otherwise, traverse up to maintain heap property. delete(): Deleting a key We replace the key to be deleted with minum infinite by calling decreaseKey(). After decreaseKey(), the minus infinite value must reach root, so we call extractMin() to remove the key.","title":"Operations"},{"location":"ds/heap/intro/#application","text":"Heap Sort : Heap Sort uses Binary Heap to sort an array in O(nLogn) time. Priority Queue : Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(logn) time. Binomoial Heap and Fibonacci Heap are variations of Binary Heap. These variations perform union also efficiently. Graph Algorithms : priority queues -> Dijkstra\u2019s Shortest Path, Prim\u2019s Minimum Spanning Tree. 5. a. K\u2019th Largest Element in an array. b. Sort an almost sorted array / Merge K Sorted Arrays.","title":"Application"},{"location":"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue","text":"A typical Priority Queue requires following operations to be efficient. Get Top Priority Element (Get minimum or maximum) Insert an element Remove top priority element Decrease Key A Binary Heap supports above operations with following time complexities: O(1) O(Logn) O(Logn) O(Logn) A Self Balancing Binary Search Tree like AVL Tree, Red-Black Tree, etc can also support above operations with same time complexities. Finding minimum and maximum are not naturally O(1), but can be easily implemented in O(1) by keeping an extra pointer to minimum or maximum and updating the pointer with insertion and deletion if required. With deletion we can update by finding inorder predecessor or successor. Inserting an element is naturally O(Logn) Removing maximum or minimum are also O(Logn) Decrease key can be done in O(Logn) by doing a deletion followed by insertion. So why is Binary Heap Preferred for Priority Queue? arrays-> locallity of refernence -> cache friendliness constants in Binary Search Tree are higher. constructing Binary Heap -> O(n) Self Balancing BSTs -> O(nLogn) Binary Heap doesn\u2019t require extra space for pointers. Binary Heap is easier to implement. TFibonacci Heap -> insert and decrease-key -> \u0398(1) time Is Binary Heap always better? Although Binary Heap is for Priority Queue, BSTs have their own advantages and the list of advantages is in-fact bigger compared to binary heap. Searching an element in self-balancing BST is O(Logn) which is O(n) in Binary Heap. We can print all elements of BST in sorted order in O(n) time, but Binary Heap requires O(nLogn) time. Floor and ceil can be found in O(Logn) time. K\u2019th largest/smallest element be found in O(Logn) time by augmenting tree with an additional field. // 0(logn) , O(n) #include<iostream> #include<climits> using namespace std; void swap(int *x, int *y); class MinHeap { int *harr; int capacity; int heap_size; public: MinHeap(int capacity); void MinHeapify(int ); int parent(int i) { return (i-1)/2; } int left(int i) { return (2*i + 1); } int right(int i) { return (2*i + 2); } int extractMin(); void decreaseKey(int i, int new_val); int getMin() { return harr[0]; } void deleteKey(int i); void insertKey(int k); }; MinHeap::MinHeap(int cap) { heap_size = 0; capacity = cap; harr = new int[cap]; } void MinHeap::insertKey(int k) // O(logn) { if (heap_size == capacity) { cout << \"\\nOverflow: Could not insertKey\\n\"; return; } heap_size++; int i = heap_size - 1; harr[i] = k; while (i != 0 && harr[parent(i)] > harr[i]) { swap(&harr[i], &harr[parent(i)]); i = parent(i); } } void MinHeap::decreaseKey(int i, int new_val) // O(logn) { harr[i] = new_val; while (i != 0 && harr[parent(i)] > harr[i]) { swap(&harr[i], &harr[parent(i)]); i = parent(i); } } int MinHeap::extractMin() // O(logn) { if (heap_size <= 0) return INT_MAX; if (heap_size == 1) { heap_size--; return harr[0]; } int root = harr[0]; harr[0] = harr[heap_size-1]; heap_size--; MinHeapify(0); return root; } void MinHeap::deleteKey(int i) // O(logn) { decreaseKey(i, INT_MIN); extractMin(); } void MinHeap::MinHeapify(int i) // O(logn) { int l = left(i); int r = right(i); int smallest = i; if (l < heap_size && harr[l] < harr[i]) smallest = l; if (r < heap_size && harr[r] < harr[smallest]) smallest = r; if (smallest != i) { swap(&harr[i], &harr[smallest]); MinHeapify(smallest); } } void swap(int *x, int *y) { int temp = *x; *x = *y; *y = temp; } int main() { MinHeap h(11); h.insertKey(3); h.insertKey(2); h.deleteKey(1); h.insertKey(15); h.insertKey(5); h.insertKey(4); h.insertKey(45); cout << h.extractMin() << \" \"; cout << h.getMin() << \" \"; h.decreaseKey(2, 1); cout << h.getMin(); return 0; }","title":"Why is Binary Heap Preferred over BST for Priority Queue?"},{"location":"ds/linked-list/bin-tree-cdll/","text":"Binary Tree to Circular DLL \u00b6 (In Place) CDLL \u00b6 struct Node { struct Node *left, *right; int data; }; Concatenate two CDLL's \u00b6 Node *concatenate(Node *leftList, Node *rightList) { if (leftList == NULL) return rightList; if (rightList == NULL) return leftList; Node *leftLast = leftList->left; Node *rightLast = rightList->left; leftLast->right = rightList; rightList->left = leftLast; leftList->left = rightLast; rightLast->right = leftList; return leftList; } Main Function \u00b6 Node *bTreeToCList(Node *root) { if (root == NULL) return NULL; Node *left = bTreeToCList(root->left); Node *right = bTreeToCList(root->right); root->left = root->right = root; return concatenate(concatenate(left, root), right); } Output: Circular Linked List is : 25 12 30 10 36 15","title":"Binary Tree to Circular DLL"},{"location":"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll","text":"(In Place)","title":"Binary Tree to Circular DLL"},{"location":"ds/linked-list/bin-tree-cdll/#cdll","text":"struct Node { struct Node *left, *right; int data; };","title":"CDLL"},{"location":"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls","text":"Node *concatenate(Node *leftList, Node *rightList) { if (leftList == NULL) return rightList; if (rightList == NULL) return leftList; Node *leftLast = leftList->left; Node *rightLast = rightList->left; leftLast->right = rightList; rightList->left = leftLast; leftList->left = rightLast; rightLast->right = leftList; return leftList; }","title":"Concatenate two CDLL's"},{"location":"ds/linked-list/bin-tree-cdll/#main-function","text":"Node *bTreeToCList(Node *root) { if (root == NULL) return NULL; Node *left = bTreeToCList(root->left); Node *right = bTreeToCList(root->right); root->left = root->right = root; return concatenate(concatenate(left, root), right); } Output: Circular Linked List is : 25 12 30 10 36 15","title":"Main Function"},{"location":"ds/linked-list/cll/","text":"Circular LL \u00b6 end node points to start single or doubly you can traverse from anywhere, take note of starting node good for queues. usefl for cyclation. eg cpu shceduling fibonici heap Representation \u00b6 class Node { public: int data; Node *next; }; Traversal \u00b6 void printList(struct Node *first) { struct Node *temp = first; if (first != NULL) { do { printf(\"%d \", temp->data); temp = temp->next; } while (temp != first); } } Insertion \u00b6 have ext pointer pointing at end empty list beginning end in between struct Node *addToEmpty(struct Node *last, int data) { if (last != NULL) return last; struct Node *temp = (struct Node*)malloc(sizeof(struct Node)); temp -> data = data; last = temp; last -> next = last; return last; } struct Node *addBegin(struct Node *last, int data) { if (last == NULL) return addToEmpty(last, data); struct Node *temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = last -> next; last -> next = temp; return last; } struct Node *addEnd(struct Node *last, int data) { if (last == NULL) return addToEmpty(last, data); struct Node *temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = last -> next; last -> next = temp; last = temp; return last; } struct Node *addAfter(struct Node *last, int data, int item) { if (last == NULL) return NULL; struct Node *temp, *p; p = last -> next; do { if (p ->data == item) { temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = p -> next; p -> next = temp; if (p == last) last = temp; return last; } p = p -> next; } while(p != last -> next); cout << item << \" not present in the list.\" << endl; return last; } Problems: \u00b6 split in halve -> tortoise and haire cll sorted insert -> find and insert cases Case 2 of the above algorithm/code can be optimized. To implement the suggested change we need to modify the case 2 to following. // Case 2 of the above algo else if (current->data >= new_node->data) { // swap the data part of head node and new node // assuming that we have a function swap(int *, int *) swap(&(current->data), &(new_node->data)); new_node->next = (*head_ref)->next; (*head_ref)->next = new_node; } CLL Sorted Insert \u00b6 void sortedInsert(Node** head_ref, Node* new_node) { Node* current = *head_ref; if (current == NULL) { new_node->next = new_node; *head_ref = new_node; } else if (current->data >= new_node->data) { while(current->next != *head_ref) current = current->next; current->next = new_node; new_node->next = *head_ref; *head_ref = new_node; } else { while (current->next!= *head_ref && current->next->data < new_node->data) current = current->next; new_node->next = current->next; current->next = new_node; } }","title":"Circular LL"},{"location":"ds/linked-list/cll/#circular-ll","text":"end node points to start single or doubly you can traverse from anywhere, take note of starting node good for queues. usefl for cyclation. eg cpu shceduling fibonici heap","title":"Circular LL"},{"location":"ds/linked-list/cll/#representation","text":"class Node { public: int data; Node *next; };","title":"Representation"},{"location":"ds/linked-list/cll/#traversal","text":"void printList(struct Node *first) { struct Node *temp = first; if (first != NULL) { do { printf(\"%d \", temp->data); temp = temp->next; } while (temp != first); } }","title":"Traversal"},{"location":"ds/linked-list/cll/#insertion","text":"have ext pointer pointing at end empty list beginning end in between struct Node *addToEmpty(struct Node *last, int data) { if (last != NULL) return last; struct Node *temp = (struct Node*)malloc(sizeof(struct Node)); temp -> data = data; last = temp; last -> next = last; return last; } struct Node *addBegin(struct Node *last, int data) { if (last == NULL) return addToEmpty(last, data); struct Node *temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = last -> next; last -> next = temp; return last; } struct Node *addEnd(struct Node *last, int data) { if (last == NULL) return addToEmpty(last, data); struct Node *temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = last -> next; last -> next = temp; last = temp; return last; } struct Node *addAfter(struct Node *last, int data, int item) { if (last == NULL) return NULL; struct Node *temp, *p; p = last -> next; do { if (p ->data == item) { temp = (struct Node *)malloc(sizeof(struct Node)); temp -> data = data; temp -> next = p -> next; p -> next = temp; if (p == last) last = temp; return last; } p = p -> next; } while(p != last -> next); cout << item << \" not present in the list.\" << endl; return last; }","title":"Insertion"},{"location":"ds/linked-list/cll/#problems","text":"split in halve -> tortoise and haire cll sorted insert -> find and insert cases Case 2 of the above algorithm/code can be optimized. To implement the suggested change we need to modify the case 2 to following. // Case 2 of the above algo else if (current->data >= new_node->data) { // swap the data part of head node and new node // assuming that we have a function swap(int *, int *) swap(&(current->data), &(new_node->data)); new_node->next = (*head_ref)->next; (*head_ref)->next = new_node; }","title":"Problems:"},{"location":"ds/linked-list/cll/#cll-sorted-insert","text":"void sortedInsert(Node** head_ref, Node* new_node) { Node* current = *head_ref; if (current == NULL) { new_node->next = new_node; *head_ref = new_node; } else if (current->data >= new_node->data) { while(current->next != *head_ref) current = current->next; current->next = new_node; new_node->next = *head_ref; *head_ref = new_node; } else { while (current->next!= *head_ref && current->next->data < new_node->data) current = current->next; new_node->next = current->next; current->next = new_node; } }","title":"CLL Sorted Insert"},{"location":"ds/linked-list/count/","text":"Counting \u00b6 O(n) Iterative \u00b6 int getCount(Node* head) { int count = 0; Node* current = head; while (current != NULL) { count++; current = current->next; } return count; } Recursive \u00b6 int getCount(struct Node* head) { if (head == NULL) return 0; return 1 + getCount(head->next); }","title":"Counting"},{"location":"ds/linked-list/count/#counting","text":"O(n)","title":"Counting"},{"location":"ds/linked-list/count/#iterative","text":"int getCount(Node* head) { int count = 0; Node* current = head; while (current != NULL) { count++; current = current->next; } return count; }","title":"Iterative"},{"location":"ds/linked-list/count/#recursive","text":"int getCount(struct Node* head) { if (head == NULL) return 0; return 1 + getCount(head->next); }","title":"Recursive"},{"location":"ds/linked-list/deletion/","text":"Deletion \u00b6 First \u00b6 void deleteFirst(struct Node **head_ref) { if(*head_ref != NULL) { struct Node *temp = *head_ref; *head_ref = (*head_ref)->next; free(temp); } } Any \u00b6 void deleteNode(struct Node **head_ref, int key) { struct Node* temp = *head_ref, *prev; if (temp != NULL && temp->data == key) { *head_ref = temp->next; free(temp); return; } while (temp != NULL && temp->data != key) { prev = temp; temp = temp->next; } if (temp == NULL) return; prev->next = temp->next; free(temp); }","title":"Deletion"},{"location":"ds/linked-list/deletion/#deletion","text":"","title":"Deletion"},{"location":"ds/linked-list/deletion/#first","text":"void deleteFirst(struct Node **head_ref) { if(*head_ref != NULL) { struct Node *temp = *head_ref; *head_ref = (*head_ref)->next; free(temp); } }","title":"First"},{"location":"ds/linked-list/deletion/#any","text":"void deleteNode(struct Node **head_ref, int key) { struct Node* temp = *head_ref, *prev; if (temp != NULL && temp->data == key) { *head_ref = temp->next; free(temp); return; } while (temp != NULL && temp->data != key) { prev = temp; temp = temp->next; } if (temp == NULL) return; prev->next = temp->next; free(temp); }","title":"Any"},{"location":"ds/linked-list/dll/","text":"Doubly LL \u00b6 struct Node { int data; struct Node* next; struct Node* prev; }; Advantages \u00b6 traversal -> both directions deletion is easy as prev pointer is easily available quickly insert Disadvantages \u00b6 more mem -> mem efficient is XOR XOR linked list: data npx = addr(next) ^ addr(prev) to trverse we need prev addr then prev XOR npx == next addr every manipulation -> more steps Insertion \u00b6 At the front of the DLL After a given node. At the end of the DLL Before a given node. void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); new_node->prev = NULL; if ((*head_ref) != NULL) (*head_ref)->prev = new_node; (*head_ref) = new_node; } void insertAfter(Node* prev_node, int new_data) { if (prev_node == NULL) { cout<<\"the given previous node cannot be NULL\"; return; } Node* new_node = new Node(); new_node->data = new_data; new_node->next = prev_node->next; prev_node->next = new_node; new_node->prev = prev_node; if (new_node->next != NULL) new_node->next->prev = new_node; } void append(Node** head_ref, int new_data) { Node* new_node = new Node(); Node* last = *head_ref; new_node->data = new_data; new_node->next = NULL; if (*head_ref == NULL) { new_node->prev = NULL; *head_ref = new_node; return; } while (last->next != NULL) last = last->next; last->next = new_node; new_node->prev = last; return; } Deletion \u00b6 Time Complexity: O(1). Space Complexity: O(1). void deleteNode(Node** head_ref, Node* del) { if (*head_ref == NULL || del == NULL) return; if (*head_ref == del) *head_ref = del->next; if (del->next != NULL) del->next->prev = del->prev; if (del->prev != NULL) del->prev->next = del->next; free(del); return; } reverse \u00b6 void reverse(Node **head_ref) { Node *temp = NULL; Node *current = *head_ref; while (current != NULL) { temp = current->prev; current->prev = current->next; current->next = temp; current = current->prev; } if(temp != NULL ) *head_ref = temp->prev; } TODO Swapping","title":"Doubly LL"},{"location":"ds/linked-list/dll/#doubly-ll","text":"struct Node { int data; struct Node* next; struct Node* prev; };","title":"Doubly LL"},{"location":"ds/linked-list/dll/#advantages","text":"traversal -> both directions deletion is easy as prev pointer is easily available quickly insert","title":"Advantages"},{"location":"ds/linked-list/dll/#disadvantages","text":"more mem -> mem efficient is XOR XOR linked list: data npx = addr(next) ^ addr(prev) to trverse we need prev addr then prev XOR npx == next addr every manipulation -> more steps","title":"Disadvantages"},{"location":"ds/linked-list/dll/#insertion","text":"At the front of the DLL After a given node. At the end of the DLL Before a given node. void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); new_node->prev = NULL; if ((*head_ref) != NULL) (*head_ref)->prev = new_node; (*head_ref) = new_node; } void insertAfter(Node* prev_node, int new_data) { if (prev_node == NULL) { cout<<\"the given previous node cannot be NULL\"; return; } Node* new_node = new Node(); new_node->data = new_data; new_node->next = prev_node->next; prev_node->next = new_node; new_node->prev = prev_node; if (new_node->next != NULL) new_node->next->prev = new_node; } void append(Node** head_ref, int new_data) { Node* new_node = new Node(); Node* last = *head_ref; new_node->data = new_data; new_node->next = NULL; if (*head_ref == NULL) { new_node->prev = NULL; *head_ref = new_node; return; } while (last->next != NULL) last = last->next; last->next = new_node; new_node->prev = last; return; }","title":"Insertion"},{"location":"ds/linked-list/dll/#deletion","text":"Time Complexity: O(1). Space Complexity: O(1). void deleteNode(Node** head_ref, Node* del) { if (*head_ref == NULL || del == NULL) return; if (*head_ref == del) *head_ref = del->next; if (del->next != NULL) del->next->prev = del->prev; if (del->prev != NULL) del->prev->next = del->next; free(del); return; }","title":"Deletion"},{"location":"ds/linked-list/dll/#reverse","text":"void reverse(Node **head_ref) { Node *temp = NULL; Node *current = *head_ref; while (current != NULL) { temp = current->prev; current->prev = current->next; current->next = temp; current = current->prev; } if(temp != NULL ) *head_ref = temp->prev; } TODO Swapping","title":"reverse"},{"location":"ds/linked-list/functions/","text":"Functional Passing \u00b6 modify head global head multiple linked lists? unpredictable behaviour http://wiki.c2.com/?GlobalVariablesAreBad return head forgets about assigning it to head? double pointer","title":"Functional Passing"},{"location":"ds/linked-list/functions/#functional-passing","text":"modify head global head multiple linked lists? unpredictable behaviour http://wiki.c2.com/?GlobalVariablesAreBad return head forgets about assigning it to head? double pointer","title":"Functional Passing"},{"location":"ds/linked-list/generic/","text":"Generic Implementation in c \u00b6 Unlike C++ and Java, C doesn\u2019t support generics. Hence we use void pointer. struct Node { void *data; struct Node *next; }; void push(struct Node** head_ref, void *new_data, size_t data_size) { struct Node* new_node = (struct Node*)malloc(sizeof(struct Node)); new_node->data = malloc(data_size); new_node->next = (*head_ref); int i; for (i=0; i<data_size; i++) *(char *)(new_node->data + i) = *(char *)(new_data + i); (*head_ref) = new_node; } void printList(struct Node *node, void (*fptr)(void *)) { while (node != NULL) { (*fptr)(node->data); node = node->next; } }","title":"Generic Implementation in c"},{"location":"ds/linked-list/generic/#generic-implementation-in-c","text":"Unlike C++ and Java, C doesn\u2019t support generics. Hence we use void pointer. struct Node { void *data; struct Node *next; }; void push(struct Node** head_ref, void *new_data, size_t data_size) { struct Node* new_node = (struct Node*)malloc(sizeof(struct Node)); new_node->data = malloc(data_size); new_node->next = (*head_ref); int i; for (i=0; i<data_size; i++) *(char *)(new_node->data + i) = *(char *)(new_data + i); (*head_ref) = new_node; } void printList(struct Node *node, void (*fptr)(void *)) { while (node != NULL) { (*fptr)(node->data); node = node->next; } }","title":"Generic Implementation in c"},{"location":"ds/linked-list/insertion/","text":"Insertion \u00b6 does not modify head Front (O(1)) \u00b6 void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); (*head_ref) = new_node; } After Node (O(1)) \u00b6 void insertAfter(Node* prev_node, int new_data) { if (prev_node == NULL) { cout << \"the given previous node cannot be NULL\"; return; } Node* new_node = new Node(); new_node->data = new_data; new_node->next = prev_node->next; prev_node->next = new_node; } Last (O(n)) \u00b6 void append(Node** head_ref, int new_data) { Node* new_node = new Node(); Node *last = *head_ref; new_node->data = new_data; new_node->next = NULL; if (*head_ref == NULL) { *head_ref = new_node; return; } while (last->next != NULL) last = last->next; last->next = new_node; return; }","title":"Insertion"},{"location":"ds/linked-list/insertion/#insertion","text":"does not modify head","title":"Insertion"},{"location":"ds/linked-list/insertion/#front-o1","text":"void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); (*head_ref) = new_node; }","title":"Front (O(1))"},{"location":"ds/linked-list/insertion/#after-node-o1","text":"void insertAfter(Node* prev_node, int new_data) { if (prev_node == NULL) { cout << \"the given previous node cannot be NULL\"; return; } Node* new_node = new Node(); new_node->data = new_data; new_node->next = prev_node->next; prev_node->next = new_node; }","title":"After Node (O(1))"},{"location":"ds/linked-list/insertion/#last-on","text":"void append(Node** head_ref, int new_data) { Node* new_node = new Node(); Node *last = *head_ref; new_node->data = new_data; new_node->next = NULL; if (*head_ref == NULL) { *head_ref = new_node; return; } while (last->next != NULL) last = last->next; last->next = new_node; return; }","title":"Last (O(n))"},{"location":"ds/linked-list/intro/","text":"Linked List \u00b6 Linear DS Non-contagious Pointers Why ? \u00b6 dynamic size inserting / deleting -> less expensive Drawbacks \u00b6 Random Access not allowed extra memory for pointer not cache friendly -> no locallity of refernce -> non contagious Representation \u00b6 Data + next pointer -> node Linked List -> Meta data + Start class Node { public: int data; Node* next; }; Traversal \u00b6 void printList(Node* n) { while (n != NULL) { cout << n->data << \" \"; n = n->next; } }","title":"Linked List"},{"location":"ds/linked-list/intro/#linked-list","text":"Linear DS Non-contagious Pointers","title":"Linked List"},{"location":"ds/linked-list/intro/#why","text":"dynamic size inserting / deleting -> less expensive","title":"Why ?"},{"location":"ds/linked-list/intro/#drawbacks","text":"Random Access not allowed extra memory for pointer not cache friendly -> no locallity of refernce -> non contagious","title":"Drawbacks"},{"location":"ds/linked-list/intro/#representation","text":"Data + next pointer -> node Linked List -> Meta data + Start class Node { public: int data; Node* next; };","title":"Representation"},{"location":"ds/linked-list/intro/#traversal","text":"void printList(Node* n) { while (n != NULL) { cout << n->data << \" \"; n = n->next; } }","title":"Traversal"},{"location":"ds/linked-list/reverse/","text":"Reverse LL \u00b6 Iterative \u00b6 Time O(n) Space O(1) void reverse() { Node* current = head; Node *prev = NULL, *next = NULL; while (current != NULL) { next = current->next; current->next = prev; prev = current; current = next; } head = prev; } Recursive \u00b6 Time O(n) Space O(1) Node* reverse(Node* head) { if (head == NULL || head->next == NULL) return head; Node* rest = reverse(head->next); head->next->next = head; head->next = NULL; return rest; } Tail Recursive method \u00b6 void reverse(Node** head) { if (!head) return; reverseUtil(*head, NULL, head); } void reverseUtil(Node* curr, Node* prev, Node** head) { if (!curr->next) { *head = curr; curr->next = prev; return; } Node* next = curr->next; curr->next = prev; reverseUtil(next, curr, head); } Stack \u00b6 void reverseLL(Node** head) { stack<Node*> s; Node* temp = *head; while (temp->next != NULL) { s.push(temp); temp = temp->next; } *head = temp; while (!s.empty()) { temp->next = s.top(); s.pop(); temp = temp->next; } temp->next = NULL; }","title":"Reverse LL"},{"location":"ds/linked-list/reverse/#reverse-ll","text":"","title":"Reverse LL"},{"location":"ds/linked-list/reverse/#iterative","text":"Time O(n) Space O(1) void reverse() { Node* current = head; Node *prev = NULL, *next = NULL; while (current != NULL) { next = current->next; current->next = prev; prev = current; current = next; } head = prev; }","title":"Iterative"},{"location":"ds/linked-list/reverse/#recursive","text":"Time O(n) Space O(1) Node* reverse(Node* head) { if (head == NULL || head->next == NULL) return head; Node* rest = reverse(head->next); head->next->next = head; head->next = NULL; return rest; }","title":"Recursive"},{"location":"ds/linked-list/reverse/#tail-recursive-method","text":"void reverse(Node** head) { if (!head) return; reverseUtil(*head, NULL, head); } void reverseUtil(Node* curr, Node* prev, Node** head) { if (!curr->next) { *head = curr; curr->next = prev; return; } Node* next = curr->next; curr->next = prev; reverseUtil(next, curr, head); }","title":"Tail Recursive method"},{"location":"ds/linked-list/reverse/#stack","text":"void reverseLL(Node** head) { stack<Node*> s; Node* temp = *head; while (temp->next != NULL) { s.push(temp); temp = temp->next; } *head = temp; while (!s.empty()) { temp->next = s.top(); s.pop(); temp = temp->next; } temp->next = NULL; }","title":"Stack"},{"location":"ds/linked-list/search/","text":"Search \u00b6 LinkedListNode* search(LinkedListNode* head, int val){ LinkedListNode* temp = head; while(temp!=NULL){ if(temp->value==val){ cout << \"Found it\"; return temp; } temp = temp->next; } cout << \"Not Found\"; return NULL; }","title":"Search"},{"location":"ds/linked-list/search/#search","text":"LinkedListNode* search(LinkedListNode* head, int val){ LinkedListNode* temp = head; while(temp!=NULL){ if(temp->value==val){ cout << \"Found it\"; return temp; } temp = temp->next; } cout << \"Not Found\"; return NULL; }","title":"Search"},{"location":"ds/linked-list/swap/","text":"Swapping \u00b6 Possibilities x and y may or may not be adjacent. Either x or y may be a head node. Either x or y may be the last node. x and/or y may not be present in the linked list. void swap(Node*& a, Node*& b) { Node* temp = a; a = b; b = temp; } void swapNodes(Node** head_ref, int x, int y) { if (x == y) return; Node **a = NULL, **b = NULL; while (*head_ref) { if ((*head_ref)->data == x) { a = head_ref; } else if ((*head_ref)->data == y) { b = head_ref; } head_ref = &((*head_ref)->next); } if (a && b) { swap(*a, *b); swap(((*a)->next), ((*b)->next)); } }","title":"Swapping"},{"location":"ds/linked-list/swap/#swapping","text":"Possibilities x and y may or may not be adjacent. Either x or y may be a head node. Either x or y may be the last node. x and/or y may not be present in the linked list. void swap(Node*& a, Node*& b) { Node* temp = a; a = b; b = temp; } void swapNodes(Node** head_ref, int x, int y) { if (x == y) return; Node **a = NULL, **b = NULL; while (*head_ref) { if ((*head_ref)->data == x) { a = head_ref; } else if ((*head_ref)->data == y) { b = head_ref; } head_ref = &((*head_ref)->next); } if (a && b) { swap(*a, *b); swap(((*a)->next), ((*b)->next)); } }","title":"Swapping"},{"location":"ds/linked-list/vs-array/","text":"Linked list vs Arrays \u00b6 Array \u00b6 contagious linear colection of similar datatype indexes -> direct retrival (O(1)) mem aloc -> compile time FROM Data section (e.g. global array) or Stack section (e.g. local array). static wastage of memory For dynamic alloc(FROM heap) random access of array + runtime alloc of linked list int * dynArr = (int *)malloc(sizeof(int)*arrSize); __advantage__ -> reduce code-size!! (but other factors e.g. program format etc.) Assuming we aren't allowed to get mem. from heap (eg. embedded systems) due to performance, malloc is costly we have to do module specific memory management. (not system provided API's) How to do it? struct sllNode { int dataInt; int nextIndex; }; struct sllNode arrayLL[5]; //__this__ 0x500 -> 0x508 -> 0x510 -> 0x518. [(1),1] [(2),2] [(3),3] [(4),-2] [(0),-1] 0x500 0x508 0x510 0x518 0x520 -2 -> end of linked list delete 2nd node 0x500 -> 0x510 -> 0x518 [(1),2] [(0),-1] [(3),3] [(4),-2] [(0),-1] 0x500 0x508 0x510 0x518 0x520 2nd node's mem still there inserting \u00b6 0x500 -> 0x508 -> 0x518 -> 0x520 [(1),1] [(2),3] [(0),-1] [(4),4] [(5),-2] 0x500 0x508 0x510 0x518 0x520 insert a new node with data 8 [(1),1] [(2),3] [(8),0] [(4),4] [(5),-2] 0x500 0x508 0x510 0x518 0x520 0x510 -> 0x500 -> 0x508 -> 0x518 -> 0x520 How to optimise \u00b6 Maintain to linked lists (with data and other that is empty) Linked List \u00b6 non-primitive , unordered linked elements (Nodes) traversal from head (O(n)) mem aloc -> runtime FROM Heap section (e.g. using malloc() etc.) dynamic","title":"Linked list vs Arrays"},{"location":"ds/linked-list/vs-array/#linked-list-vs-arrays","text":"","title":"Linked list vs Arrays"},{"location":"ds/linked-list/vs-array/#array","text":"contagious linear colection of similar datatype indexes -> direct retrival (O(1)) mem aloc -> compile time FROM Data section (e.g. global array) or Stack section (e.g. local array). static wastage of memory For dynamic alloc(FROM heap) random access of array + runtime alloc of linked list int * dynArr = (int *)malloc(sizeof(int)*arrSize); __advantage__ -> reduce code-size!! (but other factors e.g. program format etc.) Assuming we aren't allowed to get mem. from heap (eg. embedded systems) due to performance, malloc is costly we have to do module specific memory management. (not system provided API's) How to do it? struct sllNode { int dataInt; int nextIndex; }; struct sllNode arrayLL[5]; //__this__ 0x500 -> 0x508 -> 0x510 -> 0x518. [(1),1] [(2),2] [(3),3] [(4),-2] [(0),-1] 0x500 0x508 0x510 0x518 0x520 -2 -> end of linked list delete 2nd node 0x500 -> 0x510 -> 0x518 [(1),2] [(0),-1] [(3),3] [(4),-2] [(0),-1] 0x500 0x508 0x510 0x518 0x520 2nd node's mem still there","title":"Array"},{"location":"ds/linked-list/vs-array/#inserting","text":"0x500 -> 0x508 -> 0x518 -> 0x520 [(1),1] [(2),3] [(0),-1] [(4),4] [(5),-2] 0x500 0x508 0x510 0x518 0x520 insert a new node with data 8 [(1),1] [(2),3] [(8),0] [(4),4] [(5),-2] 0x500 0x508 0x510 0x518 0x520 0x510 -> 0x500 -> 0x508 -> 0x518 -> 0x520","title":"inserting"},{"location":"ds/linked-list/vs-array/#how-to-optimise","text":"Maintain to linked lists (with data and other that is empty)","title":"How to optimise"},{"location":"ds/linked-list/vs-array/#linked-list","text":"non-primitive , unordered linked elements (Nodes) traversal from head (O(n)) mem aloc -> runtime FROM Heap section (e.g. using malloc() etc.) dynamic","title":"Linked List"},{"location":"ds/linked-list/xor-dll/","text":"XOR DLL \u00b6 Representation \u00b6 class Node { public: int data; Node* npx; /* XOR of next and previous node */ }; XOR Utility \u00b6 Node* XOR (Node *a, Node *b) { return reinterpret_cast<Node *>( reinterpret_cast<uintptr_t>(a) ^ reinterpret_cast<uintptr_t>(b)); } Insert \u00b6 void insert(Node **head_ref, int data) { Node *new_node = new Node(); new_node->data = data; new_node->npx = *head_ref; if (*head_ref != NULL) { (*head_ref)->npx = XOR(new_node, (*head_ref)->npx); } *head_ref = new_node; } Print \u00b6 void printList (Node *head) { Node *curr = head; Node *prev = NULL; Node *next; cout << \"Following are the nodes of Linked List: \\n\"; while (curr != NULL) { cout<<curr->data<<\" \"; next = XOR (prev, curr->npx); prev = curr; curr = next; } }","title":"XOR DLL"},{"location":"ds/linked-list/xor-dll/#xor-dll","text":"","title":"XOR DLL"},{"location":"ds/linked-list/xor-dll/#representation","text":"class Node { public: int data; Node* npx; /* XOR of next and previous node */ };","title":"Representation"},{"location":"ds/linked-list/xor-dll/#xor-utility","text":"Node* XOR (Node *a, Node *b) { return reinterpret_cast<Node *>( reinterpret_cast<uintptr_t>(a) ^ reinterpret_cast<uintptr_t>(b)); }","title":"XOR Utility"},{"location":"ds/linked-list/xor-dll/#insert","text":"void insert(Node **head_ref, int data) { Node *new_node = new Node(); new_node->data = data; new_node->npx = *head_ref; if (*head_ref != NULL) { (*head_ref)->npx = XOR(new_node, (*head_ref)->npx); } *head_ref = new_node; }","title":"Insert"},{"location":"ds/linked-list/xor-dll/#print","text":"void printList (Node *head) { Node *curr = head; Node *prev = NULL; Node *next; cout << \"Following are the nodes of Linked List: \\n\"; while (curr != NULL) { cout<<curr->data<<\" \"; next = XOR (prev, curr->npx); prev = curr; curr = next; } }","title":"Print"},{"location":"ds/queue/dequeue/","text":"Dequeue \u00b6 generalised version of queue -> insert and delete at both ends Operations \u00b6 insertFront deleteFront insertRear deleteRear isFull isEmpty getFront getRear Application \u00b6 used as stack and queues. clockwise and anticlockwise rotations in O(1) time Also, the problems where elements need to be removed and or added both ends can be efficiently solved using Deque. For example see Maximum of all subarrays of size k problem., 0-1 BFS and Find the first circular tour that visits all petrol pumps. A-Steal job scheduling algorithm where Deque is used as deletions operation is required at both ends. Implementation \u00b6 all ops -> O(1) doubly linked list \u00b6 TODO circular array. \u00b6 #define MAX 100 class Deque { int arr[MAX]; int front; int rear; int size; public : Deque(int size) { front = -1; rear = 0; this->size = size; } void insertfront(int key); void insertrear(int key); void deletefront(); void deleterear(); bool isFull(); bool isEmpty(); int getFront(); int getRear(); }; bool Deque::isFull() { return ((front == 0 && rear == size-1)|| front == rear+1); } bool Deque::isEmpty () { return (front == -1); } void Deque::insertfront(int key) { if (isFull()) { cout << \"Overflow\\n\" << endl; return; } if (front == -1) { front = 0; rear = 0; } else if (front == 0) front = size - 1 ; else front = front-1; arr[front] = key ; } void Deque ::insertrear(int key) { if (isFull()) { cout << \" Overflow\\n \" << endl; return; } if (front == -1) { front = 0; rear = 0; } else if (rear == size-1) rear = 0; else rear = rear+1; arr[rear] = key ; } void Deque ::deletefront() { if (isEmpty()) { cout << \"Queue Underflow\\n\" << endl; return ; } if (front == rear) { front = -1; rear = -1; } else if (front == size -1) front = 0; else front = front+1; } void Deque::deleterear() { if (isEmpty()) { cout << \" Underflow\\n\" << endl ; return ; } if (front == rear) { front = -1; rear = -1; } else if (rear == 0) rear = size-1; else rear = rear-1; } int Deque::getFront() { if (isEmpty()) { cout << \" Underflow\\n\" << endl; return -1 ; } return arr[front]; } int Deque::getRear() { if(isEmpty() || rear < 0) { cout << \" Underflow\\n\" << endl; return -1 ; } return arr[rear]; }","title":"Dequeue"},{"location":"ds/queue/dequeue/#dequeue","text":"generalised version of queue -> insert and delete at both ends","title":"Dequeue"},{"location":"ds/queue/dequeue/#operations","text":"insertFront deleteFront insertRear deleteRear isFull isEmpty getFront getRear","title":"Operations"},{"location":"ds/queue/dequeue/#application","text":"used as stack and queues. clockwise and anticlockwise rotations in O(1) time Also, the problems where elements need to be removed and or added both ends can be efficiently solved using Deque. For example see Maximum of all subarrays of size k problem., 0-1 BFS and Find the first circular tour that visits all petrol pumps. A-Steal job scheduling algorithm where Deque is used as deletions operation is required at both ends.","title":"Application"},{"location":"ds/queue/dequeue/#implementation","text":"all ops -> O(1)","title":"Implementation"},{"location":"ds/queue/dequeue/#doubly-linked-list","text":"TODO","title":"doubly linked list"},{"location":"ds/queue/dequeue/#circular-array","text":"#define MAX 100 class Deque { int arr[MAX]; int front; int rear; int size; public : Deque(int size) { front = -1; rear = 0; this->size = size; } void insertfront(int key); void insertrear(int key); void deletefront(); void deleterear(); bool isFull(); bool isEmpty(); int getFront(); int getRear(); }; bool Deque::isFull() { return ((front == 0 && rear == size-1)|| front == rear+1); } bool Deque::isEmpty () { return (front == -1); } void Deque::insertfront(int key) { if (isFull()) { cout << \"Overflow\\n\" << endl; return; } if (front == -1) { front = 0; rear = 0; } else if (front == 0) front = size - 1 ; else front = front-1; arr[front] = key ; } void Deque ::insertrear(int key) { if (isFull()) { cout << \" Overflow\\n \" << endl; return; } if (front == -1) { front = 0; rear = 0; } else if (rear == size-1) rear = 0; else rear = rear+1; arr[rear] = key ; } void Deque ::deletefront() { if (isEmpty()) { cout << \"Queue Underflow\\n\" << endl; return ; } if (front == rear) { front = -1; rear = -1; } else if (front == size -1) front = 0; else front = front+1; } void Deque::deleterear() { if (isEmpty()) { cout << \" Underflow\\n\" << endl ; return ; } if (front == rear) { front = -1; rear = -1; } else if (rear == 0) rear = size-1; else rear = rear-1; } int Deque::getFront() { if (isEmpty()) { cout << \" Underflow\\n\" << endl; return -1 ; } return arr[front]; } int Deque::getRear() { if(isEmpty() || rear < 0) { cout << \" Underflow\\n\" << endl; return -1 ; } return arr[rear]; }","title":"circular array."},{"location":"ds/queue/intro/","text":"Queue \u00b6 FIFO Operations \u00b6 Enqueue: Adds or overflow. Dequeue: Removes or underflow. Front Rear Application \u00b6 Used when elements does not have to be processed immediately When a resource is shared among multiple consumers. Examples include CPU scheduling, Disk Scheduling. When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc. Implementation \u00b6 Array \u00b6 Complexity Analysis: Time Complexity: Operations Complexity Enque(insertion) O(1) Deque(deletion) O(1) Front(Get front) O(1) Rear(Get Rear) O(1) Auxiliary Space: O(N). N is the size of array for storing elements. Pros of Array Implementation: Easy to implement. Cons of Array Implementation: Static Data Structure, fixed size. If the queue has a large number of enqueue and dequeue operations, at some point we may not we able to insert elements in the queue even if the queue is empty (this problem is avoided by using circular queue). class Queue { public: int front, rear, size; unsigned capacity; int* array; }; Queue* createQueue(unsigned capacity) { Queue* queue = new Queue(); queue->capacity = capacity; queue->front = queue->size = 0; queue->rear = capacity - 1; queue->array = new int[( queue->capacity * sizeof(int))]; return queue; } int isFull(Queue* queue) { return (queue->size == queue->capacity); } int isEmpty(Queue* queue) { return (queue->size == 0); } void enqueue(Queue* queue, int item) { if (isFull(queue)) return; queue->rear = (queue->rear + 1) % queue->capacity; queue->array[queue->rear] = item; queue->size = queue->size + 1; cout << item << \" enqueued to queue\\n\"; } int dequeue(Queue* queue) { if (isEmpty(queue)) return INT_MIN; int item = queue->array[queue->front]; queue->front = (queue->front + 1) % queue->capacity; queue->size = queue->size - 1; return item; } int front(Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->front]; } int rear(Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->rear]; } Linked List \u00b6 Time Complexity: Time complexity of both operations enqueue() and dequeue() is O(1) as we only change few pointers in both operations. There is no loop in any of the operations. struct QNode { int data; QNode* next; QNode(int d) { data = d; next = NULL; } }; struct Queue { QNode *front, *rear; Queue() { front = rear = NULL; } void enQueue(int x) { QNode* temp = new QNode(x); if (rear == NULL) { front = rear = temp; return; } rear->next = temp; rear = temp; } void deQueue() { if (front == NULL) return; QNode* temp = front; front = front->next; if (front == NULL) rear = NULL; delete (temp); } };","title":"Queue"},{"location":"ds/queue/intro/#queue","text":"FIFO","title":"Queue"},{"location":"ds/queue/intro/#operations","text":"Enqueue: Adds or overflow. Dequeue: Removes or underflow. Front Rear","title":"Operations"},{"location":"ds/queue/intro/#application","text":"Used when elements does not have to be processed immediately When a resource is shared among multiple consumers. Examples include CPU scheduling, Disk Scheduling. When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc.","title":"Application"},{"location":"ds/queue/intro/#implementation","text":"","title":"Implementation"},{"location":"ds/queue/intro/#array","text":"Complexity Analysis: Time Complexity: Operations Complexity Enque(insertion) O(1) Deque(deletion) O(1) Front(Get front) O(1) Rear(Get Rear) O(1) Auxiliary Space: O(N). N is the size of array for storing elements. Pros of Array Implementation: Easy to implement. Cons of Array Implementation: Static Data Structure, fixed size. If the queue has a large number of enqueue and dequeue operations, at some point we may not we able to insert elements in the queue even if the queue is empty (this problem is avoided by using circular queue). class Queue { public: int front, rear, size; unsigned capacity; int* array; }; Queue* createQueue(unsigned capacity) { Queue* queue = new Queue(); queue->capacity = capacity; queue->front = queue->size = 0; queue->rear = capacity - 1; queue->array = new int[( queue->capacity * sizeof(int))]; return queue; } int isFull(Queue* queue) { return (queue->size == queue->capacity); } int isEmpty(Queue* queue) { return (queue->size == 0); } void enqueue(Queue* queue, int item) { if (isFull(queue)) return; queue->rear = (queue->rear + 1) % queue->capacity; queue->array[queue->rear] = item; queue->size = queue->size + 1; cout << item << \" enqueued to queue\\n\"; } int dequeue(Queue* queue) { if (isEmpty(queue)) return INT_MIN; int item = queue->array[queue->front]; queue->front = (queue->front + 1) % queue->capacity; queue->size = queue->size - 1; return item; } int front(Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->front]; } int rear(Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->rear]; }","title":"Array"},{"location":"ds/queue/intro/#linked-list","text":"Time Complexity: Time complexity of both operations enqueue() and dequeue() is O(1) as we only change few pointers in both operations. There is no loop in any of the operations. struct QNode { int data; QNode* next; QNode(int d) { data = d; next = NULL; } }; struct Queue { QNode *front, *rear; Queue() { front = rear = NULL; } void enQueue(int x) { QNode* temp = new QNode(x); if (rear == NULL) { front = rear = temp; return; } rear->next = temp; rear = temp; } void deQueue() { if (front == NULL) return; QNode* temp = front; front = front->next; if (front == NULL) rear = NULL; delete (temp); } };","title":"Linked List"},{"location":"ds/queue/print-binary/","text":"Print Binary \u00b6 simple \u00b6 loop from 1 to n.. then call toBin() Using Queues \u00b6 O(n * logn) void generatePrintBinary(int n) { queue<string> q; q.push(\"1\"); // BFS while (n--) { string s1 = q.front(); q.pop(); cout << s1 << \"\\n\"; string s2 = s1; q.push(s1.append(\"0\")); q.push(s2.append(\"1\")); } }","title":"Print Binary"},{"location":"ds/queue/print-binary/#print-binary","text":"","title":"Print Binary"},{"location":"ds/queue/print-binary/#simple","text":"loop from 1 to n.. then call toBin()","title":"simple"},{"location":"ds/queue/print-binary/#using-queues","text":"O(n * logn) void generatePrintBinary(int n) { queue<string> q; q.push(\"1\"); // BFS while (n--) { string s1 = q.front(); q.pop(); cout << s1 << \"\\n\"; string s2 = s1; q.push(s1.append(\"0\")); q.push(s2.append(\"1\")); } }","title":"Using Queues"},{"location":"ds/queue/priority-queue/","text":"Priority Queue \u00b6 Queue with properties: \u00b6 every element has apriority dequeue removes element with highest priority 2 elements with same priority... deletes in the order of queueing Operations \u00b6 insert(item, priority) getHighestPriority(): deleteHighestPriority() Implementation \u00b6 struct item { int item; int priority; } Arrays \u00b6 insert -> O(1) getHighest -> linear traversal (O(n)) deleteHighestPriority -> need to move elements O(n) Linked List \u00b6 delete is efficient as no need to move Heap \u00b6 best insert, delete -> O(logn) highest -> O(1) Applications \u00b6 CPU Scheduling Graph algorithms like Dijkstra\u2019s shortest path algorithm, Prim\u2019s Minimum Spanning Tree, etc All queue applications where priority is involved.","title":"Priority Queue"},{"location":"ds/queue/priority-queue/#priority-queue","text":"","title":"Priority Queue"},{"location":"ds/queue/priority-queue/#queue-with-properties","text":"every element has apriority dequeue removes element with highest priority 2 elements with same priority... deletes in the order of queueing","title":"Queue with properties:"},{"location":"ds/queue/priority-queue/#operations","text":"insert(item, priority) getHighestPriority(): deleteHighestPriority()","title":"Operations"},{"location":"ds/queue/priority-queue/#implementation","text":"struct item { int item; int priority; }","title":"Implementation"},{"location":"ds/queue/priority-queue/#arrays","text":"insert -> O(1) getHighest -> linear traversal (O(n)) deleteHighestPriority -> need to move elements O(n)","title":"Arrays"},{"location":"ds/queue/priority-queue/#linked-list","text":"delete is efficient as no need to move","title":"Linked List"},{"location":"ds/queue/priority-queue/#heap","text":"best insert, delete -> O(logn) highest -> O(1)","title":"Heap"},{"location":"ds/queue/priority-queue/#applications","text":"CPU Scheduling Graph algorithms like Dijkstra\u2019s shortest path algorithm, Prim\u2019s Minimum Spanning Tree, etc All queue applications where priority is involved.","title":"Applications"},{"location":"ds/queue/using-stack/","text":"Queue using Stack \u00b6 Costly Enqueue \u00b6 Push O(N): In the worst case we have empty whole of stack 1 into stack 2. Pop operation: O(1). Auxiliary Space: O(N). struct Queue { stack<int> s1, s2; void enQueue(int x) { while (!s1.empty()) { s2.push(s1.top()); s1.pop(); } s1.push(x); while (!s2.empty()) { s1.push(s2.top()); s2.pop(); } } int deQueue() { if (s1.empty()) { cout << \"Q is Empty\"; exit(0); } int x = s1.top(); s1.pop(); return x; } }; Costly Dequeue \u00b6 Push operation: O(1). Pop operation: O(N): In the worst case we have empty whole of stack 1 into stack 2 Auxiliary Space: O(N). Method 2 is definitely better than method 1. Method 1 moves all the elements twice in enQueue operation, while method 2 (in deQueue operation) moves the elements once and moves elements only if stack2 empty. So, the amortized complexity of the dequeue operation becomes \\Theta (1) . struct Queue { stack<int> s1, s2; void enQueue(int x) { s1.push(x); } int deQueue() { if (s1.empty() && s2.empty()) { cout << \"Q is empty\"; exit(0); } if (s2.empty()) { while (!s1.empty()) { s2.push(s1.top()); s1.pop(); } } int x = s2.top(); s2.pop(); return x; } }; Using one user stack and function call stack (recurion) \u00b6 Push operation : O(1). Pop operation : O(N). The difference from above method is that in this method element is returned and all elements are restored back in a single call. Auxiliary Space: O(N). struct Queue { stack<int> s; void enQueue(int x) { s.push(x); } int deQueue() { if (s.empty()) { cout << \"Q is empty\"; exit(0); } int x = s.top(); s.pop(); if (s.empty()) return x; int item = deQueue(); s.push(x); return item; } };","title":"Queue using Stack"},{"location":"ds/queue/using-stack/#queue-using-stack","text":"","title":"Queue using Stack"},{"location":"ds/queue/using-stack/#costly-enqueue","text":"Push O(N): In the worst case we have empty whole of stack 1 into stack 2. Pop operation: O(1). Auxiliary Space: O(N). struct Queue { stack<int> s1, s2; void enQueue(int x) { while (!s1.empty()) { s2.push(s1.top()); s1.pop(); } s1.push(x); while (!s2.empty()) { s1.push(s2.top()); s2.pop(); } } int deQueue() { if (s1.empty()) { cout << \"Q is Empty\"; exit(0); } int x = s1.top(); s1.pop(); return x; } };","title":"Costly Enqueue"},{"location":"ds/queue/using-stack/#costly-dequeue","text":"Push operation: O(1). Pop operation: O(N): In the worst case we have empty whole of stack 1 into stack 2 Auxiliary Space: O(N). Method 2 is definitely better than method 1. Method 1 moves all the elements twice in enQueue operation, while method 2 (in deQueue operation) moves the elements once and moves elements only if stack2 empty. So, the amortized complexity of the dequeue operation becomes \\Theta (1) . struct Queue { stack<int> s1, s2; void enQueue(int x) { s1.push(x); } int deQueue() { if (s1.empty() && s2.empty()) { cout << \"Q is empty\"; exit(0); } if (s2.empty()) { while (!s1.empty()) { s2.push(s1.top()); s1.pop(); } } int x = s2.top(); s2.pop(); return x; } };","title":"Costly Dequeue"},{"location":"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion","text":"Push operation : O(1). Pop operation : O(N). The difference from above method is that in this method element is returned and all elements are restored back in a single call. Auxiliary Space: O(N). struct Queue { stack<int> s; void enQueue(int x) { s.push(x); } int deQueue() { if (s.empty()) { cout << \"Q is empty\"; exit(0); } int x = s.top(); s.pop(); if (s.empty()) return x; int item = deQueue(); s.push(x); return item; } };","title":"Using one user stack and function call stack (recurion)"},{"location":"ds/set-map/map/","text":"Maps \u00b6 key-value pairs can't have duplicate keys pair insert(keyvalue, mapvalue): Adds a new element to the map MultiMap \u00b6 can have same keys. key-value not unique sorted order pair<int,int> insert(keyvalue,multimapvalue) \u2013 Adds a new element to the multimap multimap key_comp(): Returns the object that determines how the elements in the multimap are ordered (\u2018<\u2018 by default).","title":"Maps"},{"location":"ds/set-map/map/#maps","text":"key-value pairs can't have duplicate keys pair insert(keyvalue, mapvalue): Adds a new element to the map","title":"Maps"},{"location":"ds/set-map/map/#multimap","text":"can have same keys. key-value not unique sorted order pair<int,int> insert(keyvalue,multimapvalue) \u2013 Adds a new element to the multimap multimap key_comp(): Returns the object that determines how the elements in the multimap are ordered (\u2018<\u2018 by default).","title":"MultiMap"},{"location":"ds/set-map/multiset/","text":"MultiSet \u00b6 non-unique values Functions \u00b6 In adition to set's operations it has: a.erase(): Remove all instance of element from multiset having same value a.erase(a.find()): Remove only one instance of element from multiset having same value erase(const g): Removes the value \u2018g\u2019 from the multiset. find(const g): Returns an iterator to the element \u2018g\u2019 in the multiset if found, else returns the iterator to end. count(const g): Returns the number of matches to element \u2018g\u2019 in the multiset. swap(): This function is used to exchange the contents of two multisets but the sets must be of same type, although sizes may differ.","title":"MultiSet"},{"location":"ds/set-map/multiset/#multiset","text":"non-unique values","title":"MultiSet"},{"location":"ds/set-map/multiset/#functions","text":"In adition to set's operations it has: a.erase(): Remove all instance of element from multiset having same value a.erase(a.find()): Remove only one instance of element from multiset having same value erase(const g): Removes the value \u2018g\u2019 from the multiset. find(const g): Returns an iterator to the element \u2018g\u2019 in the multiset if found, else returns the iterator to end. count(const g): Returns the number of matches to element \u2018g\u2019 in the multiset. swap(): This function is used to exchange the contents of two multisets but the sets must be of same type, although sizes may differ.","title":"Functions"},{"location":"ds/set-map/set-types/","text":"Set Types \u00b6 set multiset unordered_set unordered_multiset sorted order sorted any order any order unique vallues non-unique unique non-unique start-end erase start-end erase only 1 erase only 1 erase BST BST hash-table hash-table Conclusion \u00b6 set is a container that stores sorted and unique elements. If unordered is added means elements are not sorted. If multiset is added means duplicate elements storage is allowed.","title":"Set Types"},{"location":"ds/set-map/set-types/#set-types","text":"set multiset unordered_set unordered_multiset sorted order sorted any order any order unique vallues non-unique unique non-unique start-end erase start-end erase only 1 erase only 1 erase BST BST hash-table hash-table","title":"Set Types"},{"location":"ds/set-map/set-types/#conclusion","text":"set is a container that stores sorted and unique elements. If unordered is added means elements are not sorted. If multiset is added means duplicate elements storage is allowed.","title":"Conclusion"},{"location":"ds/set-map/set/","text":"Set \u00b6 unique elements immutable though can be deleted and added Functions \u00b6 r -> reverse c -> constant begin() end() size() max_size() empty() rbegin() rend(): Returns a reverse iterator pointing to the theoretical element right before the first element in the set container. crbegin() crend(): Returns a constant iterator pointing to the position just before the first element in the container. cbegin() cend() Manipulation \u00b6 insert(const g) iterator insert (iterator position, const g) \u2013 \u2018g\u2019 at the position pointed by iterator. erase(iterator position) \u2013 Removes the element at the position pointed by the iterator. erase(const g)\u2013 Removes the value \u2018g\u2019 from the set. clear() \u2013 Removes all the elements from the set. key_comp() / value_comp() \u2013 Returns the object that determines how the elements in the set are ordered (\u2018<\u2018 by default). find(const g) \u2013 Returns an iterator to the element \u2018g\u2019 in the set if found, else returns the iterator to end. count(const g) \u2013 Returns 1 or 0 based on the element \u2018g\u2019 is present in the set or not. lower_bound(const g) \u2013 Returns an iterator to the first element that is equivalent to \u2018g\u2019 or definitely will not go before the element \u2018g\u2019 in the set. upper_bound(const g) \u2013 Returns an iterator to the first element that will go after the element \u2018g\u2019 in the set. equal_range()\u2013 The function returns an iterator of pairs. (key_comp). The pair refers to the range that includes all the elements in the container which have a key equivalent to k. emplace()\u2013 This function is used to insert a new element into the set container, only if the element to be inserted is unique and does not already exists in the set. emplace_hint()\u2013 Returns an iterator pointing to the position where the insertion is done. If the element passed in the parameter already exists, then it returns an iterator pointing to the position where the existing element is. swap()\u2013 This function is used to exchange the contents of two sets but the sets must be of same type, although sizes may differ. operator= \u2013 The \u2018=\u2019 is an operator in C++ STL which copies (or moves) a set to another set and set::operator= is the corresponding operator function. get_allocator()\u2013 Returns the copy of the allocator object associated with the set.","title":"Set"},{"location":"ds/set-map/set/#set","text":"unique elements immutable though can be deleted and added","title":"Set"},{"location":"ds/set-map/set/#functions","text":"r -> reverse c -> constant begin() end() size() max_size() empty() rbegin() rend(): Returns a reverse iterator pointing to the theoretical element right before the first element in the set container. crbegin() crend(): Returns a constant iterator pointing to the position just before the first element in the container. cbegin() cend()","title":"Functions"},{"location":"ds/set-map/set/#manipulation","text":"insert(const g) iterator insert (iterator position, const g) \u2013 \u2018g\u2019 at the position pointed by iterator. erase(iterator position) \u2013 Removes the element at the position pointed by the iterator. erase(const g)\u2013 Removes the value \u2018g\u2019 from the set. clear() \u2013 Removes all the elements from the set. key_comp() / value_comp() \u2013 Returns the object that determines how the elements in the set are ordered (\u2018<\u2018 by default). find(const g) \u2013 Returns an iterator to the element \u2018g\u2019 in the set if found, else returns the iterator to end. count(const g) \u2013 Returns 1 or 0 based on the element \u2018g\u2019 is present in the set or not. lower_bound(const g) \u2013 Returns an iterator to the first element that is equivalent to \u2018g\u2019 or definitely will not go before the element \u2018g\u2019 in the set. upper_bound(const g) \u2013 Returns an iterator to the first element that will go after the element \u2018g\u2019 in the set. equal_range()\u2013 The function returns an iterator of pairs. (key_comp). The pair refers to the range that includes all the elements in the container which have a key equivalent to k. emplace()\u2013 This function is used to insert a new element into the set container, only if the element to be inserted is unique and does not already exists in the set. emplace_hint()\u2013 Returns an iterator pointing to the position where the insertion is done. If the element passed in the parameter already exists, then it returns an iterator pointing to the position where the existing element is. swap()\u2013 This function is used to exchange the contents of two sets but the sets must be of same type, although sizes may differ. operator= \u2013 The \u2018=\u2019 is an operator in C++ STL which copies (or moves) a set to another set and set::operator= is the corresponding operator function. get_allocator()\u2013 Returns the copy of the allocator object associated with the set.","title":"Manipulation"},{"location":"ds/stack/intro/","text":"Stack \u00b6 push(), pop(), isEmpty() and peek() all take O(1) follow LIFO/FILO order. real life -> stack of plates Applications of stack: \u00b6 Balancing of symbols Infix to Postfix / Prefix conversion Redo-undo Forward and backward feature in web browsers Used in many algorithms like Tower of Hanoi, tree traversals, stock span problem, histogram problem. Other applications can be Backtracking, Knight tour problem, rat in a maze, N queen problem and sudoku solver In Graph Algorithms like Topological Sorting and Strongly Connected Components Implementation \u00b6 Array \u00b6 Pros: Easy to implement. Memory is saved as pointers are not involved. Cons: It is not dynamic. It doesn\u2019t grow and shrink depending on needs at runtime. #define MAX 1000 class Stack { int top; public: int a[MAX]; // Maximum size of Stack Stack() { top = -1; } bool push(int x); int pop(); int peek(); bool isEmpty(); }; bool Stack::push(int x) { if (top >= (MAX - 1)) { cout << \"Stack Overflow\"; return false; } else { a[++top] = x; cout << x << \" pushed into stack\\n\"; return true; } } int Stack::pop() { if (top < 0) { cout << \"Stack Underflow\"; return 0; } else { int x = a[top--]; return x; } } int Stack::peek() { if (top < 0) { cout << \"Stack is Empty\"; return 0; } else { int x = a[top]; return x; } } bool Stack::isEmpty() { return (top < 0); } int main() { class Stack s; s.push(10); s.push(20); s.push(30); cout << s.pop() << \" Popped from stack\\n\"; return 0; } Linked List \u00b6 Pros: The linked list implementation of stack can grow and shrink according to the needs at runtime. Cons: Requires extra memory due to involvement of pointers. class StackNode { public: int data; StackNode* next; }; StackNode* newNode(int data) { StackNode* stackNode = new StackNode(); stackNode->data = data; stackNode->next = NULL; return stackNode; } int isEmpty(StackNode* root) { return !root; } void push(StackNode** root, int data) { StackNode* stackNode = newNode(data); stackNode->next = *root; *root = stackNode; cout << data << \" pushed to stack\\n\"; } int pop(StackNode** root) { if (isEmpty(*root)) return INT_MIN; StackNode* temp = *root; *root = (*root)->next; int popped = temp->data; free(temp); return popped; } int peek(StackNode* root) { if (isEmpty(root)) return INT_MIN; return root->data; } int main() { StackNode* root = NULL; push(&root, 10); push(&root, 20); push(&root, 30); cout << pop(&root) << \" popped from stack\\n\"; cout << \"Top element is \" << peek(root) << endl; return 0; } Problems \u00b6 reverse a string -> push push... pop pop (better -> just swap the pointers) 2 stacks in an array: divide space into two (space inefficient) start from extremes check for balanced parenthesis -> push if open the pop if closed and check the equality next grater element two loops (o(n^2)) using stacks (O(n)) Push the first element to stack. Pick rest of the elements one by one and follow the following steps in loop. Mark the current element as next. If stack is not empty, compare top element of stack with next. If next is greater than the top element,Pop element from stack. next is the next greater element for the popped element. Keep popping from the stack while the popped element is smaller than next. next becomes the next greater element for all such popped elements Finally, push the next in the stack. After the loop in step 2 is over, pop all the elements from stack and print -1 as next element for them. Time Complexity: O(n). The worst case occurs when all elements are sorted in decreasing order. If elements are sorted in decreasing order, then every element is processed at most 4 times. Initially pushed to the stack. Popped from the stack when next element is being processed. Pushed back to the stack because the next element is smaller. Popped from the stack in step 3 of algorithm. in the same order : void printNGE(int arr[], int n) { stack<int> s; int arr1[n]; for (int i = n - 1; i >= 0; i--) { while (!s.empty() && s.top() <= arr[i]) s.pop(); if (s.empty()) arr1[i] = -1; else arr1[i] = s.top(); s.push(arr[i]); } for (int i = 0; i < n; i++) cout << arr[i] << \" ---> \" << arr1[i] << endl; }","title":"Stack"},{"location":"ds/stack/intro/#stack","text":"push(), pop(), isEmpty() and peek() all take O(1) follow LIFO/FILO order. real life -> stack of plates","title":"Stack"},{"location":"ds/stack/intro/#applications-of-stack","text":"Balancing of symbols Infix to Postfix / Prefix conversion Redo-undo Forward and backward feature in web browsers Used in many algorithms like Tower of Hanoi, tree traversals, stock span problem, histogram problem. Other applications can be Backtracking, Knight tour problem, rat in a maze, N queen problem and sudoku solver In Graph Algorithms like Topological Sorting and Strongly Connected Components","title":"Applications of stack:"},{"location":"ds/stack/intro/#implementation","text":"","title":"Implementation"},{"location":"ds/stack/intro/#array","text":"Pros: Easy to implement. Memory is saved as pointers are not involved. Cons: It is not dynamic. It doesn\u2019t grow and shrink depending on needs at runtime. #define MAX 1000 class Stack { int top; public: int a[MAX]; // Maximum size of Stack Stack() { top = -1; } bool push(int x); int pop(); int peek(); bool isEmpty(); }; bool Stack::push(int x) { if (top >= (MAX - 1)) { cout << \"Stack Overflow\"; return false; } else { a[++top] = x; cout << x << \" pushed into stack\\n\"; return true; } } int Stack::pop() { if (top < 0) { cout << \"Stack Underflow\"; return 0; } else { int x = a[top--]; return x; } } int Stack::peek() { if (top < 0) { cout << \"Stack is Empty\"; return 0; } else { int x = a[top]; return x; } } bool Stack::isEmpty() { return (top < 0); } int main() { class Stack s; s.push(10); s.push(20); s.push(30); cout << s.pop() << \" Popped from stack\\n\"; return 0; }","title":"Array"},{"location":"ds/stack/intro/#linked-list","text":"Pros: The linked list implementation of stack can grow and shrink according to the needs at runtime. Cons: Requires extra memory due to involvement of pointers. class StackNode { public: int data; StackNode* next; }; StackNode* newNode(int data) { StackNode* stackNode = new StackNode(); stackNode->data = data; stackNode->next = NULL; return stackNode; } int isEmpty(StackNode* root) { return !root; } void push(StackNode** root, int data) { StackNode* stackNode = newNode(data); stackNode->next = *root; *root = stackNode; cout << data << \" pushed to stack\\n\"; } int pop(StackNode** root) { if (isEmpty(*root)) return INT_MIN; StackNode* temp = *root; *root = (*root)->next; int popped = temp->data; free(temp); return popped; } int peek(StackNode* root) { if (isEmpty(root)) return INT_MIN; return root->data; } int main() { StackNode* root = NULL; push(&root, 10); push(&root, 20); push(&root, 30); cout << pop(&root) << \" popped from stack\\n\"; cout << \"Top element is \" << peek(root) << endl; return 0; }","title":"Linked List"},{"location":"ds/stack/intro/#problems","text":"reverse a string -> push push... pop pop (better -> just swap the pointers) 2 stacks in an array: divide space into two (space inefficient) start from extremes check for balanced parenthesis -> push if open the pop if closed and check the equality next grater element two loops (o(n^2)) using stacks (O(n)) Push the first element to stack. Pick rest of the elements one by one and follow the following steps in loop. Mark the current element as next. If stack is not empty, compare top element of stack with next. If next is greater than the top element,Pop element from stack. next is the next greater element for the popped element. Keep popping from the stack while the popped element is smaller than next. next becomes the next greater element for all such popped elements Finally, push the next in the stack. After the loop in step 2 is over, pop all the elements from stack and print -1 as next element for them. Time Complexity: O(n). The worst case occurs when all elements are sorted in decreasing order. If elements are sorted in decreasing order, then every element is processed at most 4 times. Initially pushed to the stack. Popped from the stack when next element is being processed. Pushed back to the stack because the next element is smaller. Popped from the stack in step 3 of algorithm. in the same order : void printNGE(int arr[], int n) { stack<int> s; int arr1[n]; for (int i = n - 1; i >= 0; i--) { while (!s.empty() && s.top() <= arr[i]) s.pop(); if (s.empty()) arr1[i] = -1; else arr1[i] = s.top(); s.push(arr[i]); } for (int i = 0; i < n; i++) cout << arr[i] << \" ---> \" << arr1[i] << endl; }","title":"Problems"},{"location":"ds/stack/k-stacks/","text":"K Stacks \u00b6 simple \u00b6 divide array into n/k stack overflow even if space is available extra 2 integer arrays \u00b6 1) top[k] -> top elements of stacks 2) next[] -> class kStacks { int *arr; int *top; int *next; int n, k; int free; public: kStacks(int k, int n); bool isFull() { return (free == -1); } void push(int item, int sn); int pop(int sn); bool isEmpty(int sn) { return (top[sn] == -1); } }; kStacks::kStacks(int k1, int n1) { k = k1, n = n1; arr = new int[n]; top = new int[k]; next = new int[n]; for (int i = 0; i < k; i++) top[i] = -1; free = 0; for (int i=0; i<n-1; i++) next[i] = i+1; next[n-1] = -1; } void kStacks::push(int item, int sn) { if (isFull()) { cout << \"\\nStack Overflow\\n\"; return; } int i = free; free = next[i]; next[i] = top[sn]; top[sn] = i; arr[i] = item; } int kStacks::pop(int sn) { if (isEmpty(sn)) { cout << \"\\nStack Underflow\\n\"; return INT_MAX; } int i = top[sn]; top[sn] = next[i]; next[i] = free; free = i; return arr[i]; }","title":"K Stacks"},{"location":"ds/stack/k-stacks/#k-stacks","text":"","title":"K Stacks"},{"location":"ds/stack/k-stacks/#simple","text":"divide array into n/k stack overflow even if space is available","title":"simple"},{"location":"ds/stack/k-stacks/#extra-2-integer-arrays","text":"1) top[k] -> top elements of stacks 2) next[] -> class kStacks { int *arr; int *top; int *next; int n, k; int free; public: kStacks(int k, int n); bool isFull() { return (free == -1); } void push(int item, int sn); int pop(int sn); bool isEmpty(int sn) { return (top[sn] == -1); } }; kStacks::kStacks(int k1, int n1) { k = k1, n = n1; arr = new int[n]; top = new int[k]; next = new int[n]; for (int i = 0; i < k; i++) top[i] = -1; free = 0; for (int i=0; i<n-1; i++) next[i] = i+1; next[n-1] = -1; } void kStacks::push(int item, int sn) { if (isFull()) { cout << \"\\nStack Overflow\\n\"; return; } int i = free; free = next[i]; next[i] = top[sn]; top[sn] = i; arr[i] = item; } int kStacks::pop(int sn) { if (isEmpty(sn)) { cout << \"\\nStack Underflow\\n\"; return INT_MAX; } int i = top[sn]; top[sn] = next[i]; next[i] = free; free = i; return arr[i]; }","title":"extra 2 integer arrays"},{"location":"ds/stack/medium-special/","text":"Medium Special \u00b6 findMiddle() which will return middle element of the stack. deleteMiddle() which will delete the middle element. void push(myStack *ms, int new_data) { DLLNode* new_DLLNode = new DLLNode(); new_DLLNode->data = new_data; new_DLLNode->prev = NULL; new_DLLNode->next = ms->head; ms->count += 1; if (ms->count == 1) { ms->mid = new_DLLNode; } else { ms->head->prev = new_DLLNode; if(!(ms->count & 1)) // Update mid if ms->count is even ms->mid = ms->mid->prev; } ms->head = new_DLLNode; } int pop(myStack *ms) { if (ms->count == 0) { cout<<\"Stack is empty\\n\"; return -1; } DLLNode *head = ms->head; int item = head->data; ms->head = head->next; if (ms->head != NULL) ms->head->prev = NULL; ms->count -= 1; if ((ms->count) & 1 ) ms->mid = ms->mid->next; free(head); return item; }","title":"Medium Special"},{"location":"ds/stack/medium-special/#medium-special","text":"findMiddle() which will return middle element of the stack. deleteMiddle() which will delete the middle element. void push(myStack *ms, int new_data) { DLLNode* new_DLLNode = new DLLNode(); new_DLLNode->data = new_data; new_DLLNode->prev = NULL; new_DLLNode->next = ms->head; ms->count += 1; if (ms->count == 1) { ms->mid = new_DLLNode; } else { ms->head->prev = new_DLLNode; if(!(ms->count & 1)) // Update mid if ms->count is even ms->mid = ms->mid->prev; } ms->head = new_DLLNode; } int pop(myStack *ms) { if (ms->count == 0) { cout<<\"Stack is empty\\n\"; return -1; } DLLNode *head = ms->head; int item = head->data; ms->head = head->next; if (ms->head != NULL) ms->head->prev = NULL; ms->count -= 1; if ((ms->count) & 1 ) ms->mid = ms->mid->next; free(head); return item; }","title":"Medium Special"},{"location":"ds/stack/min-special/","text":"Min Special \u00b6 void SpecialStack::push(int x) { if (isEmpty() == true) { Stack::push(x); min.push(x); } else { Stack::push(x); int y = min.pop(); min.push(y); if (x < y) min.push(x); else min.push(y); } } /* SpecialStack's member method to remove an element from it. This method removes top element from min stack also. */ int SpecialStack::pop() { int x = Stack::pop(); min.pop(); return x; } operations -> push, pop, isempty, getMin -> O(1) aux. space -> O(n) Optimised space for 2 stacks: \u00b6 void SpecialStack::push(int x) { if (isEmpty() == true) { Stack::push(x); min.push(x); } else { Stack::push(x); int y = min.pop(); min.push(y); if (x <= y) min.push(x); } } int SpecialStack::pop() { int x = Stack::pop(); int y = min.pop(); if (y != x) min.push(y); return x; } operations -> push, pop, isempty, getMin -> O(1) aux. space -> O(n) (Worst case -> decreasing order)","title":"Min Special"},{"location":"ds/stack/min-special/#min-special","text":"void SpecialStack::push(int x) { if (isEmpty() == true) { Stack::push(x); min.push(x); } else { Stack::push(x); int y = min.pop(); min.push(y); if (x < y) min.push(x); else min.push(y); } } /* SpecialStack's member method to remove an element from it. This method removes top element from min stack also. */ int SpecialStack::pop() { int x = Stack::pop(); min.pop(); return x; } operations -> push, pop, isempty, getMin -> O(1) aux. space -> O(n)","title":"Min Special"},{"location":"ds/stack/min-special/#optimised-space-for-2-stacks","text":"void SpecialStack::push(int x) { if (isEmpty() == true) { Stack::push(x); min.push(x); } else { Stack::push(x); int y = min.pop(); min.push(y); if (x <= y) min.push(x); } } int SpecialStack::pop() { int x = Stack::pop(); int y = min.pop(); if (y != x) min.push(y); return x; } operations -> push, pop, isempty, getMin -> O(1) aux. space -> O(n) (Worst case -> decreasing order)","title":"Optimised space for 2 stacks:"},{"location":"ds/stack/reverse/","text":"Reverse \u00b6 Recursion char insert_at_bottom(char x) { if(st.size() == 0) st.push(x); else { char a = st.top(); st.pop(); insert_at_bottom(x); st.push(a); } } char reverse() { if(st.size()>0) { char x = st.top(); st.pop(); reverse(); insert_at_bottom(x); } }","title":"Reverse"},{"location":"ds/stack/reverse/#reverse","text":"Recursion char insert_at_bottom(char x) { if(st.size() == 0) st.push(x); else { char a = st.top(); st.pop(); insert_at_bottom(x); st.push(a); } } char reverse() { if(st.size()>0) { char x = st.top(); st.pop(); reverse(); insert_at_bottom(x); } }","title":"Reverse"},{"location":"ds/stack/sort/","text":"Sort \u00b6 Recursion Time Complexity: O(n2). In the worst case for every sortstack(), sortedinsert() is called for \u2018N\u2019 times recursively for putting element to the right place Auxiliary Space: O(N) void sortedInsert(struct stack** s, int x) { if (isEmpty(*s) or x > top(*s)) { push(s, x); return; } int temp = pop(s); sortedInsert(s, x); push(s, temp); } void sortStack(struct stack** s) { if (!isEmpty(*s)) { int x = pop(s); sortStack(s); sortedInsert(s, x); } }","title":"Sort"},{"location":"ds/stack/sort/#sort","text":"Recursion Time Complexity: O(n2). In the worst case for every sortstack(), sortedinsert() is called for \u2018N\u2019 times recursively for putting element to the right place Auxiliary Space: O(N) void sortedInsert(struct stack** s, int x) { if (isEmpty(*s) or x > top(*s)) { push(s, x); return; } int temp = pop(s); sortedInsert(s, x); push(s, temp); } void sortStack(struct stack** s) { if (!isEmpty(*s)) { int x = pop(s); sortStack(s); sortedInsert(s, x); } }","title":"Sort"},{"location":"ds/stack/stock-span/","text":"Stock Span \u00b6 Naive \u00b6 void calculateSpan(int price[], int n, int S[]) { S[0] = 1; for (int i = 1; i < n; i++) { S[i] = 1; for (int j = i - 1; (j >= 0) && (price[i] >= price[j]); j--) S[i]++; } } O(n^2), O(n) using Stack \u00b6 void calculateSpan(int price[], int n, int S[]) { stack<int> st; st.push(0); S[0] = 1; for (int i = 1; i < n; i++) { while (!st.empty() && price[st.top()] <= price[i]) st.pop(); S[i] = (st.empty()) ? (i + 1) : (i - st.top()); st.push(i); } } O(2n), O(n) Without stack \u00b6 void calculateSpan(int A[], int n, int ans[]) { ans[0] = 1; for (int i = 1; i < n; i++) { int counter = 1; while ((i - counter) >= 0 && A[i] >= A[i - counter]) { counter += ans[i - counter]; } ans[i] = counter; } }","title":"Stock Span"},{"location":"ds/stack/stock-span/#stock-span","text":"","title":"Stock Span"},{"location":"ds/stack/stock-span/#naive","text":"void calculateSpan(int price[], int n, int S[]) { S[0] = 1; for (int i = 1; i < n; i++) { S[i] = 1; for (int j = i - 1; (j >= 0) && (price[i] >= price[j]); j--) S[i]++; } } O(n^2), O(n)","title":"Naive"},{"location":"ds/stack/stock-span/#using-stack","text":"void calculateSpan(int price[], int n, int S[]) { stack<int> st; st.push(0); S[0] = 1; for (int i = 1; i < n; i++) { while (!st.empty() && price[st.top()] <= price[i]) st.pop(); S[i] = (st.empty()) ? (i + 1) : (i - st.top()); st.push(i); } } O(2n), O(n)","title":"using Stack"},{"location":"ds/stack/stock-span/#without-stack","text":"void calculateSpan(int A[], int n, int ans[]) { ans[0] = 1; for (int i = 1; i < n; i++) { int counter = 1; while ((i - counter) >= 0 && A[i] >= A[i - counter]) { counter += ans[i - counter]; } ans[i] = counter; } }","title":"Without stack"},{"location":"ds/stack/using-queue/","text":"Stack using Queue \u00b6 Costly Push \u00b6 void push(int x) { curr_size++; q2.push(x); while (!q1.empty()) { q2.push(q1.front()); q1.pop(); } queue<int> q = q1; q1 = q2; q2 = q; } void pop() { if (q1.empty()) return; q1.pop(); curr_size--; } Costly Pop \u00b6 void pop() { if (q1.empty()) return; while (q1.size() != 1) { q2.push(q1.front()); q1.pop(); } q1.pop(); curr_size--; queue<int> q = q1; q1 = q2; q2 = q; } void push(int x) { q1.push(x); curr_size++; }","title":"Stack using Queue"},{"location":"ds/stack/using-queue/#stack-using-queue","text":"","title":"Stack using Queue"},{"location":"ds/stack/using-queue/#costly-push","text":"void push(int x) { curr_size++; q2.push(x); while (!q1.empty()) { q2.push(q1.front()); q1.pop(); } queue<int> q = q1; q1 = q2; q2 = q; } void pop() { if (q1.empty()) return; q1.pop(); curr_size--; }","title":"Costly Push"},{"location":"ds/stack/using-queue/#costly-pop","text":"void pop() { if (q1.empty()) return; while (q1.size() != 1) { q2.push(q1.front()); q1.pop(); } q1.pop(); curr_size--; queue<int> q = q1; q1 = q2; q2 = q; } void push(int x) { q1.push(x); curr_size++; }","title":"Costly Pop"},{"location":"ds/string/duplicate/","text":"Duplicate \u00b6 string s = \"abca\"; int count[26]; memset(count, 0, sizeof(count)); for(int i =0;i<s.size();i++){ count[s[i]-'a']++; } for(int i = 0; i<26;i++){ if(count[i]>1) cout << char('a'+i) << endl; }","title":"Duplicate"},{"location":"ds/string/duplicate/#duplicate","text":"string s = \"abca\"; int count[26]; memset(count, 0, sizeof(count)); for(int i =0;i<s.size();i++){ count[s[i]-'a']++; } for(int i = 0; i<26;i++){ if(count[i]>1) cout << char('a'+i) << endl; }","title":"Duplicate"},{"location":"ds/string/frequency/","text":"Frequency \u00b6 string s = \"abcdddssod\"; int count[26]; memset(count, 0, sizeof(count)); for(int i = 0; i<s.size();i++) count[s[i]-'a']++; for(int i =0; i<26; i++) if(count[i]>0){ cout << char('a' + i) << count[i] << endl; }","title":"Frequency"},{"location":"ds/string/frequency/#frequency","text":"string s = \"abcdddssod\"; int count[26]; memset(count, 0, sizeof(count)); for(int i = 0; i<s.size();i++) count[s[i]-'a']++; for(int i =0; i<26; i++) if(count[i]>0){ cout << char('a' + i) << count[i] << endl; }","title":"Frequency"},{"location":"ds/string/intro/","text":"String \u00b6 characters as a sequence of bytes allowing access to single byte character. std::string vs Character Array \u00b6 array of characters terminated by a null character, static allocation -> array class which defines objects, dynamic alocation -> string threat of array decay. As strings are represented as objects, no array decay occurs. Strings are slower when compared to implementation than character array. string has many inbuilt operations. Operations on strings \u00b6 Input \u00b6 getline() : store a stream of characters by the user in the object memory. push_back() : input a character at the end of the string. pop_back() : delete the last character from the string. Capacity \u00b6 capacity() : which can be equal to or more than the size. resize() : size can be increased or decreased. length(): length of the string. shrink_to_fit(): decreases the capacity of the string and makes it equal to the minimum capacity of the string. Iterator \u00b6 begin(): iterator to beginning of the string. end(): iterator to end of the string. rbegin(): reverse iterator pointing at the end of string. rend(): reverse iterator pointing at beginning of string. Manipulating \u00b6 copy(\u201cchar array\u201d, len, pos) :- This function copies the substring in target character array mentioned in its arguments. It takes 3 arguments, target char array, length to be copied and starting position in string to start copying. swap() strcpy(s1, s2): Copies string s2 into string s1. strcat(s1, s2): Concatenates string s2 onto the end of string s1. strlen(s1) strcmp(s1, s2): 0 if s1 == s2; less than 0 if s1<s2; greater than 0 if s1>s2. strchr(s1, ch): pointer to the first occurrence of character ch in string s1. strstr(s1, s2): pointer to the first occurrence of string s2 in string s1.","title":"String"},{"location":"ds/string/intro/#string","text":"characters as a sequence of bytes allowing access to single byte character.","title":"String"},{"location":"ds/string/intro/#stdstring-vs-character-array","text":"array of characters terminated by a null character, static allocation -> array class which defines objects, dynamic alocation -> string threat of array decay. As strings are represented as objects, no array decay occurs. Strings are slower when compared to implementation than character array. string has many inbuilt operations.","title":"std::string vs Character Array"},{"location":"ds/string/intro/#operations-on-strings","text":"","title":"Operations on strings"},{"location":"ds/string/intro/#input","text":"getline() : store a stream of characters by the user in the object memory. push_back() : input a character at the end of the string. pop_back() : delete the last character from the string.","title":"Input"},{"location":"ds/string/intro/#capacity","text":"capacity() : which can be equal to or more than the size. resize() : size can be increased or decreased. length(): length of the string. shrink_to_fit(): decreases the capacity of the string and makes it equal to the minimum capacity of the string.","title":"Capacity"},{"location":"ds/string/intro/#iterator","text":"begin(): iterator to beginning of the string. end(): iterator to end of the string. rbegin(): reverse iterator pointing at the end of string. rend(): reverse iterator pointing at beginning of string.","title":"Iterator"},{"location":"ds/string/intro/#manipulating","text":"copy(\u201cchar array\u201d, len, pos) :- This function copies the substring in target character array mentioned in its arguments. It takes 3 arguments, target char array, length to be copied and starting position in string to start copying. swap() strcpy(s1, s2): Copies string s2 into string s1. strcat(s1, s2): Concatenates string s2 onto the end of string s1. strlen(s1) strcmp(s1, s2): 0 if s1 == s2; less than 0 if s1<s2; greater than 0 if s1>s2. strchr(s1, ch): pointer to the first occurrence of character ch in string s1. strstr(s1, s2): pointer to the first occurrence of string s2 in string s1.","title":"Manipulating"},{"location":"ds/string/remove-duplicates/","text":"Remove Duplicates \u00b6 char * removeDuplicate(char str[], int n){ int index = 0; for(int i = 0; i< n ; i++){ int j; for(j = 0; j<n; j++) if(str[i]==str[j]) break; if(i==j) str[index++] = str[i]; } return str; }","title":"Remove Duplicates"},{"location":"ds/string/remove-duplicates/#remove-duplicates","text":"char * removeDuplicate(char str[], int n){ int index = 0; for(int i = 0; i< n ; i++){ int j; for(j = 0; j<n; j++) if(str[i]==str[j]) break; if(i==j) str[index++] = str[i]; } return str; }","title":"Remove Duplicates"},{"location":"ds/string/reverse/","text":"Reverse \u00b6 void reverseStr(string& str) { int n = str.length(); for (int i = 0; i < n / 2; i++) swap(str[i], str[n - i - 1]); }","title":"Reverse"},{"location":"ds/string/reverse/#reverse","text":"void reverseStr(string& str) { int n = str.length(); for (int i = 0; i < n / 2; i++) swap(str[i], str[n - i - 1]); }","title":"Reverse"},{"location":"ds/string/rotation/","text":"Rotation \u00b6 if 2 strings are rotation of each other. string s = \"ABCDE\"; string temp = s + s; string str2 = \"BCDEA\"; cout << (temp.find(str2) != string::npos);","title":"Rotation"},{"location":"ds/string/rotation/#rotation","text":"if 2 strings are rotation of each other. string s = \"ABCDE\"; string temp = s + s; string str2 = \"BCDEA\"; cout << (temp.find(str2) != string::npos);","title":"Rotation"},{"location":"ds/string/string-to-no/","text":"Strings to Numbers \u00b6 Using stringstream class \u00b6 #include <iostream> #include <sstream> using namespace std; int main() { string s = \"12345\"; stringstream geek(s); int x = 0; geek >> x; cout << \"Value of x : \" << x; return 0; } sscanf() \u00b6 sscanf() is a C style function similar to scanf(). It reads input from a string rather that standard input. const char *str = \"12345\"; int x; sscanf(str, \"%d\", &x); printf(\"\\nThe value of x : %d\", x); Functions \u00b6 int stoi (const string& str, size_t* index = 0, int base = 10): string to value int atoi (const char * str) : character array or string literal tp value. stoi() vs atoi() \u00b6 atoi stoi legacy c style function c++11 c char and string literal c++ string 1 parameter 3 parameters: string, start index, base String to Double \u00b6 atof(): the converted integral number as an int value. If no valid conversion could be performed, it returns zero.","title":"Strings to Numbers"},{"location":"ds/string/string-to-no/#strings-to-numbers","text":"","title":"Strings to Numbers"},{"location":"ds/string/string-to-no/#using-stringstream-class","text":"#include <iostream> #include <sstream> using namespace std; int main() { string s = \"12345\"; stringstream geek(s); int x = 0; geek >> x; cout << \"Value of x : \" << x; return 0; }","title":"Using stringstream class"},{"location":"ds/string/string-to-no/#sscanf","text":"sscanf() is a C style function similar to scanf(). It reads input from a string rather that standard input. const char *str = \"12345\"; int x; sscanf(str, \"%d\", &x); printf(\"\\nThe value of x : %d\", x);","title":"sscanf()"},{"location":"ds/string/string-to-no/#functions","text":"int stoi (const string& str, size_t* index = 0, int base = 10): string to value int atoi (const char * str) : character array or string literal tp value.","title":"Functions"},{"location":"ds/string/string-to-no/#stoi-vs-atoi","text":"atoi stoi legacy c style function c++11 c char and string literal c++ string 1 parameter 3 parameters: string, start index, base","title":"stoi() vs atoi()"},{"location":"ds/string/string-to-no/#string-to-double","text":"atof(): the converted integral number as an int value. If no valid conversion could be performed, it returns zero.","title":"String to Double"},{"location":"ds/string/white-space/","text":"White Space \u00b6 void removeSpaces(string &str) { int n = str.length(); int i = 0, j = -1; bool spaceFound = false; while (++j < n && str[j] == ' '); while (j < n) { if (str[j] != ' ') { if ((str[j] == '.' || str[j] == ',' || str[j] == '?') && i - 1 >= 0 && str[i - 1] == ' ') str[i - 1] = str[j++]; else str[i++] = str[j++]; spaceFound = false; } else if (str[j++] == ' ') { if (!spaceFound) { str[i++] = ' '; spaceFound = true; } } } if (i <= 1) str.erase(str.begin() + i, str.end()); else str.erase(str.begin() + i - 1, str.end()); }","title":"White Space"},{"location":"ds/string/white-space/#white-space","text":"void removeSpaces(string &str) { int n = str.length(); int i = 0, j = -1; bool spaceFound = false; while (++j < n && str[j] == ' '); while (j < n) { if (str[j] != ' ') { if ((str[j] == '.' || str[j] == ',' || str[j] == '?') && i - 1 >= 0 && str[i - 1] == ' ') str[i - 1] = str[j++]; else str[i++] = str[j++]; spaceFound = false; } else if (str[j++] == ' ') { if (!spaceFound) { str[i++] = ' '; spaceFound = true; } } } if (i <= 1) str.erase(str.begin() + i, str.end()); else str.erase(str.begin() + i - 1, str.end()); }","title":"White Space"},{"location":"ds/tree/binary-tree/","text":"Binary Tree \u00b6 Each node -> 2 children -> left and right Representaion \u00b6 A node have: Data Pointer to left child Pointer to right child struct node { int data; struct node *left; struct node *right; }; Example \u00b6 #include<stdio.h> #include<stdlib.h> struct node { int data; struct node *left; struct node *right; }; struct node* newNode(int data) { struct node* node = (struct node*)malloc(sizeof(struct node)); node->data = data; node->left = NULL; node->right = NULL; return(node); } int main() { struct node *root = newNode(1); /* 1 / \\ NULL NULL */ root->left = newNode(2); root->right = newNode(3); /* 1 / \\ 2 3 / \\ / \\ NULL NULL NULL NULL */ root->left->left = newNode(4); /* 1 / \\ 2 3 / \\ / \\ 4 NULL NULL NULL / \\ NULL NULL */ getchar(); return 0; } Properties \u00b6 Nomenclature l -> level h -> height n -> nodes L -> Levels max n at l is 2^l max n at h -> 2^h -1 (when root's h = 1) as 1 + 2 + 4 + .. + 2^(h-1) , 2^(h+1) -1 (when root's h = 0) min h in Binary tree = Log2(N+1) reverse of point 2 A Binary Tree with L leaves has at least Log2L + 1 levels L <= 2^l-1 [From Point 1] l = Log2L + 1 where l is the minimum number of levels. Full Binary Tree \u00b6 Only 0 or 2 children i.e. only leaf nodes have 0 children. L = I + 1 Where L = Number of leaf nodes, I = Number of internal nodes PROOF: https://www.geeksforgeeks.org/handshaking-lemma-and-interesting-tree-properties/ Complete Binary Tree \u00b6 All levels filled except last level -> all nodes are as left as possible APPLICATION: binary-heap Perfect Binary Tree \u00b6 all nodes have 2 children except leaf -> 0 All levels filled n -> 2^h - 1 n with root's h = 1 Balanced Binary Tree \u00b6 h = log2n AVL - h(left sub tree) - h(right sub tree) \u2248 1 Red-Black trees - Black nodes on every root to leaf paths is the same and there are no adjacent red nodes // TODO don't know O(log n) time for search, insert and delete. A degenerate (or pathological) tree \u00b6 internal node -> 1 child Performance = Linked List Full \u00b6 18 / \\ 15 20 / \\ 40 50 / \\ 30 50 Complete \u00b6 18 / \\ 15 30 / \\ / \\ 40 50 100 40 / \\ / 8 7 9 Perfect \u00b6 18 / \\ 15 30 / \\ / \\ 40 50 100 40 Balanced \u00b6 // TODO example Degenerate \u00b6 10 / 20 \\ 30 \\ 40 Applications \u00b6 Store hierarchical data, like folder structure, organization structure, XML/HTML data. Binary Search Tree is a tree that allows fast search, insert, delete on a sorted data. It also allows finding closest item Heap is a tree data structure which is implemented using arrays and used to implement priority queues. B-Tree and B+ Tree : They are used to implement indexing in databases. Syntax Tree: Used in Compilers. K-D Tree: A space partitioning tree used to organize points in K dimensional space. Trie : Used to implement dictionaries with prefix lookup. Suffix Tree : For quick pattern searching in a fixed text. Spanning Trees and shortest path trees are used in routers and bridges respectively in computer networks As a workflow for compositing digital images for visual effects.","title":"Binary Tree"},{"location":"ds/tree/binary-tree/#binary-tree","text":"Each node -> 2 children -> left and right","title":"Binary Tree"},{"location":"ds/tree/binary-tree/#representaion","text":"A node have: Data Pointer to left child Pointer to right child struct node { int data; struct node *left; struct node *right; };","title":"Representaion"},{"location":"ds/tree/binary-tree/#example","text":"#include<stdio.h> #include<stdlib.h> struct node { int data; struct node *left; struct node *right; }; struct node* newNode(int data) { struct node* node = (struct node*)malloc(sizeof(struct node)); node->data = data; node->left = NULL; node->right = NULL; return(node); } int main() { struct node *root = newNode(1); /* 1 / \\ NULL NULL */ root->left = newNode(2); root->right = newNode(3); /* 1 / \\ 2 3 / \\ / \\ NULL NULL NULL NULL */ root->left->left = newNode(4); /* 1 / \\ 2 3 / \\ / \\ 4 NULL NULL NULL / \\ NULL NULL */ getchar(); return 0; }","title":"Example"},{"location":"ds/tree/binary-tree/#properties","text":"Nomenclature l -> level h -> height n -> nodes L -> Levels max n at l is 2^l max n at h -> 2^h -1 (when root's h = 1) as 1 + 2 + 4 + .. + 2^(h-1) , 2^(h+1) -1 (when root's h = 0) min h in Binary tree = Log2(N+1) reverse of point 2 A Binary Tree with L leaves has at least Log2L + 1 levels L <= 2^l-1 [From Point 1] l = Log2L + 1 where l is the minimum number of levels.","title":"Properties"},{"location":"ds/tree/binary-tree/#full-binary-tree","text":"Only 0 or 2 children i.e. only leaf nodes have 0 children. L = I + 1 Where L = Number of leaf nodes, I = Number of internal nodes PROOF: https://www.geeksforgeeks.org/handshaking-lemma-and-interesting-tree-properties/","title":"Full Binary Tree"},{"location":"ds/tree/binary-tree/#complete-binary-tree","text":"All levels filled except last level -> all nodes are as left as possible APPLICATION: binary-heap","title":"Complete Binary Tree"},{"location":"ds/tree/binary-tree/#perfect-binary-tree","text":"all nodes have 2 children except leaf -> 0 All levels filled n -> 2^h - 1 n with root's h = 1","title":"Perfect Binary Tree"},{"location":"ds/tree/binary-tree/#balanced-binary-tree","text":"h = log2n AVL - h(left sub tree) - h(right sub tree) \u2248 1 Red-Black trees - Black nodes on every root to leaf paths is the same and there are no adjacent red nodes // TODO don't know O(log n) time for search, insert and delete.","title":"Balanced Binary Tree"},{"location":"ds/tree/binary-tree/#a-degenerate-or-pathological-tree","text":"internal node -> 1 child Performance = Linked List","title":"A degenerate (or pathological) tree"},{"location":"ds/tree/binary-tree/#full","text":"18 / \\ 15 20 / \\ 40 50 / \\ 30 50","title":"Full"},{"location":"ds/tree/binary-tree/#complete","text":"18 / \\ 15 30 / \\ / \\ 40 50 100 40 / \\ / 8 7 9","title":"Complete"},{"location":"ds/tree/binary-tree/#perfect","text":"18 / \\ 15 30 / \\ / \\ 40 50 100 40","title":"Perfect"},{"location":"ds/tree/binary-tree/#balanced","text":"// TODO example","title":"Balanced"},{"location":"ds/tree/binary-tree/#degenerate","text":"10 / 20 \\ 30 \\ 40","title":"Degenerate"},{"location":"ds/tree/binary-tree/#applications","text":"Store hierarchical data, like folder structure, organization structure, XML/HTML data. Binary Search Tree is a tree that allows fast search, insert, delete on a sorted data. It also allows finding closest item Heap is a tree data structure which is implemented using arrays and used to implement priority queues. B-Tree and B+ Tree : They are used to implement indexing in databases. Syntax Tree: Used in Compilers. K-D Tree: A space partitioning tree used to organize points in K dimensional space. Trie : Used to implement dictionaries with prefix lookup. Suffix Tree : For quick pattern searching in a fixed text. Spanning Trees and shortest path trees are used in routers and bridges respectively in computer networks As a workflow for compositing digital images for visual effects.","title":"Applications"},{"location":"ds/tree/bst-check/","text":"Checking BST \u00b6 METHOD 1 (Simple but Wrong) \u00b6 int isBST(struct node* node) { if (node == NULL) return 1; if (node->left != NULL && node->left->data > node->data) return 0; if (node->right != NULL && node->right->data < node->data) return 0; if (!isBST(node->left) || !isBST(node->right)) return 0; return 1; } But it returns true if a node is grater than root but is present in left most leaf METHOD 2 (Correct but not efficient) \u00b6 int isBST(struct node* node) { if (node == NULL) return 1; if (node->left!=NULL && maxValue(node->left) > node->data) return 0; if (node->right!=NULL && minValue(node->right) < node->data) return 0; if (!isBST(node->left) || !isBST(node->right)) return 0; return 1; } METHOD 3 (Correct and Efficient): \u00b6 int isBST(node* node) { return(isBSTUtil(node, INT_MIN, INT_MAX)); } int isBSTUtil(node* node, int min, int max) { if (node==NULL) return 1; if (node->data < min || node->data > max) return 0; return isBSTUtil(node->left, min, node->data-1) && isBSTUtil(node->right, node->data+1, max); } Time Complexity: O(n) Auxiliary Space : O(1) if Function Call Stack size is not considered, otherwise O(n) Simplified Method 3 \u00b6 bool isBST(Node* root, Node* l=NULL, Node* r=NULL) { if (root == NULL) return true; if (l != NULL and root->data <= l->data) return false; if (r != NULL and root->data >= r->data) return false; return isBST(root->left, l, root) and isBST(root->right, root, r); } METHOD 4(Using In-Order Traversal) \u00b6 Do In-Order Traversal of the given tree and store the result in a temp array. Check if the temp array is sorted in ascending order, if it is, then the tree is BST. bool isBST(node* root) { static node *prev = NULL; if (root) { if (!isBST(root->left)) return false; if (prev != NULL && root->data <= prev->data) return false; prev = root; return isBST(root->right); } return true; }","title":"Checking BST"},{"location":"ds/tree/bst-check/#checking-bst","text":"","title":"Checking BST"},{"location":"ds/tree/bst-check/#method-1-simple-but-wrong","text":"int isBST(struct node* node) { if (node == NULL) return 1; if (node->left != NULL && node->left->data > node->data) return 0; if (node->right != NULL && node->right->data < node->data) return 0; if (!isBST(node->left) || !isBST(node->right)) return 0; return 1; } But it returns true if a node is grater than root but is present in left most leaf","title":"METHOD 1 (Simple but Wrong)"},{"location":"ds/tree/bst-check/#method-2-correct-but-not-efficient","text":"int isBST(struct node* node) { if (node == NULL) return 1; if (node->left!=NULL && maxValue(node->left) > node->data) return 0; if (node->right!=NULL && minValue(node->right) < node->data) return 0; if (!isBST(node->left) || !isBST(node->right)) return 0; return 1; }","title":"METHOD 2 (Correct but not efficient)"},{"location":"ds/tree/bst-check/#method-3-correct-and-efficient","text":"int isBST(node* node) { return(isBSTUtil(node, INT_MIN, INT_MAX)); } int isBSTUtil(node* node, int min, int max) { if (node==NULL) return 1; if (node->data < min || node->data > max) return 0; return isBSTUtil(node->left, min, node->data-1) && isBSTUtil(node->right, node->data+1, max); } Time Complexity: O(n) Auxiliary Space : O(1) if Function Call Stack size is not considered, otherwise O(n)","title":"METHOD 3 (Correct and Efficient):"},{"location":"ds/tree/bst-check/#simplified-method-3","text":"bool isBST(Node* root, Node* l=NULL, Node* r=NULL) { if (root == NULL) return true; if (l != NULL and root->data <= l->data) return false; if (r != NULL and root->data >= r->data) return false; return isBST(root->left, l, root) and isBST(root->right, root, r); }","title":"Simplified Method 3"},{"location":"ds/tree/bst-check/#method-4using-in-order-traversal","text":"Do In-Order Traversal of the given tree and store the result in a temp array. Check if the temp array is sorted in ascending order, if it is, then the tree is BST. bool isBST(node* root) { static node *prev = NULL; if (root) { if (!isBST(root->left)) return false; if (prev != NULL && root->data <= prev->data) return false; prev = root; return isBST(root->right); } return true; }","title":"METHOD 4(Using In-Order Traversal)"},{"location":"ds/tree/bst-merge/","text":"Merge BST \u00b6 Stack Related Stuff \u00b6 class snode { public: node *t; snode *next; }; void push(snode **s, node *k) { snode *tmp = new snode(); tmp->t = k; tmp->next = *s; (*s) = tmp; } node *pop(snode **s) { node *t; snode *st; st=*s; (*s) = (*s)->next; t = st->t; free(st); return t; } int isEmpty(snode *s) { if (s == NULL ) return 1; return 0; } Merge \u00b6 void merge(node *root1, node *root2) { snode *s1 = NULL; node *current1 = root1; snode *s2 = NULL; node *current2 = root2; if (root1 == NULL) { inorder(root2); return; } if (root2 == NULL) { inorder(root1); return ; } while (current1 != NULL || !isEmpty(s1) || current2 != NULL || !isEmpty(s2)) { if (current1 != NULL || current2 != NULL ) { if (current1 != NULL) { push(&s1, current1); current1 = current1->left; } if (current2 != NULL) { push(&s2, current2); current2 = current2->left; } } else { if (isEmpty(s1)) { while (!isEmpty(s2)) { current2 = pop (&s2); current2->left = NULL; inorder(current2); } return ; } if (isEmpty(s2)) { while (!isEmpty(s1)) { current1 = pop (&s1); current1->left = NULL; inorder(current1); } return ; } current1 = pop(&s1); current2 = pop(&s2); if (current1->data < current2->data) { cout<<current1->data<<\" \"; current1 = current1->right; push(&s2, current2); current2 = NULL; } else { cout<<current2->data<<\" \"; current2 = current2->right; push(&s1, current1); current1 = NULL; } } } }","title":"Merge BST"},{"location":"ds/tree/bst-merge/#merge-bst","text":"","title":"Merge BST"},{"location":"ds/tree/bst-merge/#stack-related-stuff","text":"class snode { public: node *t; snode *next; }; void push(snode **s, node *k) { snode *tmp = new snode(); tmp->t = k; tmp->next = *s; (*s) = tmp; } node *pop(snode **s) { node *t; snode *st; st=*s; (*s) = (*s)->next; t = st->t; free(st); return t; } int isEmpty(snode *s) { if (s == NULL ) return 1; return 0; }","title":"Stack Related Stuff"},{"location":"ds/tree/bst-merge/#merge","text":"void merge(node *root1, node *root2) { snode *s1 = NULL; node *current1 = root1; snode *s2 = NULL; node *current2 = root2; if (root1 == NULL) { inorder(root2); return; } if (root2 == NULL) { inorder(root1); return ; } while (current1 != NULL || !isEmpty(s1) || current2 != NULL || !isEmpty(s2)) { if (current1 != NULL || current2 != NULL ) { if (current1 != NULL) { push(&s1, current1); current1 = current1->left; } if (current2 != NULL) { push(&s2, current2); current2 = current2->left; } } else { if (isEmpty(s1)) { while (!isEmpty(s2)) { current2 = pop (&s2); current2->left = NULL; inorder(current2); } return ; } if (isEmpty(s2)) { while (!isEmpty(s1)) { current1 = pop (&s1); current1->left = NULL; inorder(current1); } return ; } current1 = pop(&s1); current2 = pop(&s2); if (current1->data < current2->data) { cout<<current1->data<<\" \"; current1 = current1->right; push(&s2, current2); current2 = NULL; } else { cout<<current2->data<<\" \"; current2 = current2->right; push(&s1, current1); current1 = NULL; } } } }","title":"Merge"},{"location":"ds/tree/bst/","text":"Binary Search Tree \u00b6 Insertion \u00b6 struct node* insert(struct node* node, int key) { if (node == NULL) return newNode(key); if (key < node->key) node->left = insert(node->left, key); else node->right = insert(node->right, key); return node; } Min Value \u00b6 struct node* minValueNode(struct node* node) { struct node* current = node; while (current && current->left != NULL) current = current->left; return current; } Deletion \u00b6 struct node* deleteNode(struct node* root, int key) { if (root == NULL) return root; if (key < root->key) root->left = deleteNode(root->left, key); else if (key > root->key) root->right = deleteNode(root->right, key); else { if (root.left==NULL and root.right==NULL): return NULL elif (root->left == NULL) { struct node* temp = root->right; free(root); return temp; } else if (root->right == NULL) { struct node* temp = root->left; free(root); return temp; } struct node* temp = minValueNode(root->right); root->key = temp->key; root->right = deleteNode(root->right, temp->key); } return root; } node-based binary tree data structure The left subtree of a node contains only nodes with keys lesser than the node\u2019s key. The right subtree of a node contains only nodes with keys greater than the node\u2019s key. The left and right subtree -> binary search tree. no duplicate nodes. Facts \u00b6 Inorder traversal -> sorted output. We can construct a BST with only Preorder or Postorder or Level Order traversal. Note that we can always get inorder traversal by sorting the only given traversal. Number of unique BSTs with n distinct keys is Catalan Number Each node (item in the tree) has a distinct key. Search \u00b6 struct node* search(struct node* root, int key) { if (root == NULL || root->key == key) return root; if (root->key < key) return search(root->right, key); return search(root->left, key); } Insert \u00b6 BST* BST ::Insert(BST* root, int value) { if (!root) { return new BST(value); } if (value > root->data) { root->right = Insert(root->right, value); } else { root->left = Insert(root->left, value); } return root; } Deletion \u00b6 leaf -> simply delete one child -> put it in the deleted place two child -> place the inorder successor or predeccesor in its place The important thing to note is, inorder successor is needed only when right child is not empty. In this particular case, inorder successor can be obtained by finding the minimum value in right child of the node. struct node* deleteNode(struct node* root, int key) { if (root == NULL) return root; if (key < root->key) root->left = deleteNode(root->left, key); else if (key > root->key) root->right = deleteNode(root->right, key); else { if (root->left == NULL) { struct node *temp = root->right; free(root); return temp; } else if (root->right == NULL) { struct node *temp = root->left; free(root); return temp; } struct node* temp = minValueNode(root->right); root->key = temp->key; root->right = deleteNode(root->right, temp->key); } return root; } Time Complexity: O(h)... skewed tree -> O(n) Optimization In the above recursive code, we recursively call delete() for successor. We can avoid recursive call by keeping track of parent node of successor so that we can simply remove the successor by making child of parent as NULL. We know that successor would always be a leaf node. Node* deleteNode(Node* root, int k) { if (root == NULL) return root; if (root->key > k) { root->left = deleteNode(root->left, k); return root; } else if (root->key < k) { root->right = deleteNode(root->right, k); return root; } if (root->left == NULL) { Node* temp = root->right; delete root; return temp; } else if (root->right == NULL) { Node* temp = root->left; delete root; return temp; } else { Node* succParent = root; Node *succ = root->right; while (succ->left != NULL) { succParent = succ; succ = succ->left; } if (succParent != root) succParent->left = succ->right; else succParent->right = succ->right; root->key = succ->key; delete succ; return root; } } MinValue \u00b6 O(n) Worst case happens for left skewed trees. Similarly we can get the maximum value by recursively traversing the right node of a binary search tree. struct node * minValueNode(struct node* node) { struct node* current = node; while (current && current->left != NULL) current = current->left; return current; } Inorder predecessor and successor for a given key in BST \u00b6 void findPreSuc(Node* root, Node*& pre, Node*& suc, int key) { if (root == NULL) return ; if (root->key == key) { if (root->left != NULL) { Node* tmp = root->left; while (tmp->right) tmp = tmp->right; pre = tmp ; } if (root->right != NULL) { Node* tmp = root->right ; while (tmp->left) tmp = tmp->left ; suc = tmp ; } return ; } if (root->key > key) { suc = root ; findPreSuc(root->left, pre, suc, key) ; } else // go to right subtree { pre = root ; findPreSuc(root->right, pre, suc, key) ; } } Another Approach : We can also find the inorder successor and inorder predecessor using inorder traversal . Check if the current node is smaller than the given key for predecessor and for successor, check if it is greater than the given key . If it is greater than the given key then, check if it is smaller than the already stored value in successor then, update it . At last, get the predecessor and successor stored in q(successor) and p(predecessor). void find_p_s(Node* root,int a, Node** p, Node** q) { if(!root) return ; find_p_s(root->left, a, p, q); if(root&&root->data > a) { if((!*q) || (*q) && (*q)->data > root->data) *q = root; } else if(root && root->data < a) { *p = root; } find_p_s(root->right, a, p, q); }","title":"Binary Search Tree"},{"location":"ds/tree/bst/#binary-search-tree","text":"","title":"Binary Search Tree"},{"location":"ds/tree/bst/#insertion","text":"struct node* insert(struct node* node, int key) { if (node == NULL) return newNode(key); if (key < node->key) node->left = insert(node->left, key); else node->right = insert(node->right, key); return node; }","title":"Insertion"},{"location":"ds/tree/bst/#min-value","text":"struct node* minValueNode(struct node* node) { struct node* current = node; while (current && current->left != NULL) current = current->left; return current; }","title":"Min Value"},{"location":"ds/tree/bst/#deletion","text":"struct node* deleteNode(struct node* root, int key) { if (root == NULL) return root; if (key < root->key) root->left = deleteNode(root->left, key); else if (key > root->key) root->right = deleteNode(root->right, key); else { if (root.left==NULL and root.right==NULL): return NULL elif (root->left == NULL) { struct node* temp = root->right; free(root); return temp; } else if (root->right == NULL) { struct node* temp = root->left; free(root); return temp; } struct node* temp = minValueNode(root->right); root->key = temp->key; root->right = deleteNode(root->right, temp->key); } return root; } node-based binary tree data structure The left subtree of a node contains only nodes with keys lesser than the node\u2019s key. The right subtree of a node contains only nodes with keys greater than the node\u2019s key. The left and right subtree -> binary search tree. no duplicate nodes.","title":"Deletion"},{"location":"ds/tree/bst/#facts","text":"Inorder traversal -> sorted output. We can construct a BST with only Preorder or Postorder or Level Order traversal. Note that we can always get inorder traversal by sorting the only given traversal. Number of unique BSTs with n distinct keys is Catalan Number Each node (item in the tree) has a distinct key.","title":"Facts"},{"location":"ds/tree/bst/#search","text":"struct node* search(struct node* root, int key) { if (root == NULL || root->key == key) return root; if (root->key < key) return search(root->right, key); return search(root->left, key); }","title":"Search"},{"location":"ds/tree/bst/#insert","text":"BST* BST ::Insert(BST* root, int value) { if (!root) { return new BST(value); } if (value > root->data) { root->right = Insert(root->right, value); } else { root->left = Insert(root->left, value); } return root; }","title":"Insert"},{"location":"ds/tree/bst/#deletion_1","text":"leaf -> simply delete one child -> put it in the deleted place two child -> place the inorder successor or predeccesor in its place The important thing to note is, inorder successor is needed only when right child is not empty. In this particular case, inorder successor can be obtained by finding the minimum value in right child of the node. struct node* deleteNode(struct node* root, int key) { if (root == NULL) return root; if (key < root->key) root->left = deleteNode(root->left, key); else if (key > root->key) root->right = deleteNode(root->right, key); else { if (root->left == NULL) { struct node *temp = root->right; free(root); return temp; } else if (root->right == NULL) { struct node *temp = root->left; free(root); return temp; } struct node* temp = minValueNode(root->right); root->key = temp->key; root->right = deleteNode(root->right, temp->key); } return root; } Time Complexity: O(h)... skewed tree -> O(n) Optimization In the above recursive code, we recursively call delete() for successor. We can avoid recursive call by keeping track of parent node of successor so that we can simply remove the successor by making child of parent as NULL. We know that successor would always be a leaf node. Node* deleteNode(Node* root, int k) { if (root == NULL) return root; if (root->key > k) { root->left = deleteNode(root->left, k); return root; } else if (root->key < k) { root->right = deleteNode(root->right, k); return root; } if (root->left == NULL) { Node* temp = root->right; delete root; return temp; } else if (root->right == NULL) { Node* temp = root->left; delete root; return temp; } else { Node* succParent = root; Node *succ = root->right; while (succ->left != NULL) { succParent = succ; succ = succ->left; } if (succParent != root) succParent->left = succ->right; else succParent->right = succ->right; root->key = succ->key; delete succ; return root; } }","title":"Deletion"},{"location":"ds/tree/bst/#minvalue","text":"O(n) Worst case happens for left skewed trees. Similarly we can get the maximum value by recursively traversing the right node of a binary search tree. struct node * minValueNode(struct node* node) { struct node* current = node; while (current && current->left != NULL) current = current->left; return current; }","title":"MinValue"},{"location":"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst","text":"void findPreSuc(Node* root, Node*& pre, Node*& suc, int key) { if (root == NULL) return ; if (root->key == key) { if (root->left != NULL) { Node* tmp = root->left; while (tmp->right) tmp = tmp->right; pre = tmp ; } if (root->right != NULL) { Node* tmp = root->right ; while (tmp->left) tmp = tmp->left ; suc = tmp ; } return ; } if (root->key > key) { suc = root ; findPreSuc(root->left, pre, suc, key) ; } else // go to right subtree { pre = root ; findPreSuc(root->right, pre, suc, key) ; } } Another Approach : We can also find the inorder successor and inorder predecessor using inorder traversal . Check if the current node is smaller than the given key for predecessor and for successor, check if it is greater than the given key . If it is greater than the given key then, check if it is smaller than the already stored value in successor then, update it . At last, get the predecessor and successor stored in q(successor) and p(predecessor). void find_p_s(Node* root,int a, Node** p, Node** q) { if(!root) return ; find_p_s(root->left, a, p, q); if(root&&root->data > a) { if((!*q) || (*q) && (*q)->data > root->data) *q = root; } else if(root && root->data < a) { *p = root; } find_p_s(root->right, a, p, q); }","title":"Inorder predecessor and successor for a given key in BST"},{"location":"ds/tree/bt-deletion/","text":"Deletion \u00b6 void deletDeepest(struct Node* root, struct Node* d_node) { queue<struct Node*> q; q.push(root); struct Node* temp; while (!q.empty()) { temp = q.front(); q.pop(); if (temp == d_node) { temp = NULL; delete (d_node); return; } if (temp->right) { if (temp->right == d_node) { temp->right = NULL; delete (d_node); return; } else q.push(temp->right); } if (temp->left) { if (temp->left == d_node) { temp->left = NULL; delete (d_node); return; } else q.push(temp->left); } } } Node* deletion(struct Node* root, int key) { if (root == NULL) return NULL; if (root->left == NULL && root->right == NULL) { if (root->key == key) return NULL; else return root; } queue<struct Node*> q; q.push(root); struct Node* temp; struct Node* key_node = NULL; while (!q.empty()) { temp = q.front(); q.pop(); if (temp->key == key) key_node = temp; if (temp->left) q.push(temp->left); if (temp->right) q.push(temp->right); } if (key_node != NULL) { int x = temp->key; deletDeepest(root, temp); key_node->key = x; } return root; }","title":"Deletion"},{"location":"ds/tree/bt-deletion/#deletion","text":"void deletDeepest(struct Node* root, struct Node* d_node) { queue<struct Node*> q; q.push(root); struct Node* temp; while (!q.empty()) { temp = q.front(); q.pop(); if (temp == d_node) { temp = NULL; delete (d_node); return; } if (temp->right) { if (temp->right == d_node) { temp->right = NULL; delete (d_node); return; } else q.push(temp->right); } if (temp->left) { if (temp->left == d_node) { temp->left = NULL; delete (d_node); return; } else q.push(temp->left); } } } Node* deletion(struct Node* root, int key) { if (root == NULL) return NULL; if (root->left == NULL && root->right == NULL) { if (root->key == key) return NULL; else return root; } queue<struct Node*> q; q.push(root); struct Node* temp; struct Node* key_node = NULL; while (!q.empty()) { temp = q.front(); q.pop(); if (temp->key == key) key_node = temp; if (temp->left) q.push(temp->left); if (temp->right) q.push(temp->right); } if (key_node != NULL) { int x = temp->key; deletDeepest(root, temp); key_node->key = x; } return root; }","title":"Deletion"},{"location":"ds/tree/bt-enumeration/","text":"Binary Tree Enumeration \u00b6 unlabeled trees \u00b6 o o / \\ / \\ o o o o n\u2019th Catalan Numbers For example, let T(n) be count for n nodes. T(0) = 1 [There is only 1 empty tree] T(1) = 1 T(2) = 2 T(3) = T(0)*T(2) + T(1)*T(1) + T(2)*T(0) = 1*2 + 1*1 + 2*1 = 5 T(4) = T(0)*T(3) + T(1)*T(2) + T(2)*T(1) + T(3)*T(0) = 1*5 + 1*2 + 2*1 + 5*1 = 14 T(n) = sum(T(i-1) * T(n-i)) = sum(T(n-i-1) * T(i)) = Cn T(i-1) represents number of nodes on the left-sub-tree T(n\u2212i-1) represents number of nodes on the right-sub-tree T(n) = (2n)! / (n+1)!n! labeled trees \u00b6 A C / \\ / \\ B C A B T(n) = (Number of unlabeled trees) * n! = [(2n)! / (n+1)!n!] \u00d7 n!","title":"Binary Tree Enumeration"},{"location":"ds/tree/bt-enumeration/#binary-tree-enumeration","text":"","title":"Binary Tree Enumeration"},{"location":"ds/tree/bt-enumeration/#unlabeled-trees","text":"o o / \\ / \\ o o o o n\u2019th Catalan Numbers For example, let T(n) be count for n nodes. T(0) = 1 [There is only 1 empty tree] T(1) = 1 T(2) = 2 T(3) = T(0)*T(2) + T(1)*T(1) + T(2)*T(0) = 1*2 + 1*1 + 2*1 = 5 T(4) = T(0)*T(3) + T(1)*T(2) + T(2)*T(1) + T(3)*T(0) = 1*5 + 1*2 + 2*1 + 5*1 = 14 T(n) = sum(T(i-1) * T(n-i)) = sum(T(n-i-1) * T(i)) = Cn T(i-1) represents number of nodes on the left-sub-tree T(n\u2212i-1) represents number of nodes on the right-sub-tree T(n) = (2n)! / (n+1)!n!","title":"unlabeled trees"},{"location":"ds/tree/bt-enumeration/#labeled-trees","text":"A C / \\ / \\ B C A B T(n) = (Number of unlabeled trees) * n! = [(2n)! / (n+1)!n!] \u00d7 n!","title":"labeled trees"},{"location":"ds/tree/bt-height/","text":"Height \u00b6 int height(node* node) { if (node == NULL) return 0; else { int lheight = height(node->left); int rheight = height(node->right); if (lheight > rheight) return(lheight + 1); else return(rheight + 1); } }","title":"Height"},{"location":"ds/tree/bt-height/#height","text":"int height(node* node) { if (node == NULL) return 0; else { int lheight = height(node->left); int rheight = height(node->right); if (lheight > rheight) return(lheight + 1); else return(rheight + 1); } }","title":"Height"},{"location":"ds/tree/bt-insertion/","text":"Insertion \u00b6 Node* InsertNode(Node* root, int data) { if (root == NULL) { root = CreateNode(data); return root; } queue<Node*> q; q.push(root); while (!q.empty()) { Node* temp = q.front(); q.pop(); if (temp->left != NULL) q.push(temp->left); else { temp->left = CreateNode(data); return root; } if (temp->right != NULL) q.push(temp->right); else { temp->right = CreateNode(data); return root; } } }","title":"Insertion"},{"location":"ds/tree/bt-insertion/#insertion","text":"Node* InsertNode(Node* root, int data) { if (root == NULL) { root = CreateNode(data); return root; } queue<Node*> q; q.push(root); while (!q.empty()) { Node* temp = q.front(); q.pop(); if (temp->left != NULL) q.push(temp->left); else { temp->left = CreateNode(data); return root; } if (temp->right != NULL) q.push(temp->right); else { temp->right = CreateNode(data); return root; } } }","title":"Insertion"},{"location":"ds/tree/bt-level-order/","text":"Level Order \u00b6 Queue \u00b6 void printLevelOrderWithQueue(Node *root) { if (root == NULL) return; queue<Node *> q; q.push(root); while (q.empty() == false) { Node *node = q.front(); cout << node->data << \" \"; q.pop(); if (node->left != NULL) q.push(node->left); if (node->right != NULL) q.push(node->right); } } Reverse \u00b6 void reverseLevelOrder(node* root) { int h = height(root); int i; for (i=h; i>=1; i--) //THE ONLY LINE DIFFERENT FROM NORMAL LEVEL ORDER printGivenLevel(root, i); } void reverseLevelOrderWithStack(node* root) { stack <node *> S; queue <node *> Q; Q.push(root); while (Q.empty() == false) { root = Q.front(); Q.pop(); S.push(root); if (root->right) Q.push(root->right); if (root->left) Q.push(root->left); } while (S.empty() == false) { root = S.top(); cout << root->data << \" \"; S.pop(); } } Given Level \u00b6 void printLevelOrder(node* root) { int h = height(root); int i; for (i = 1; i <= h; i++) printGivenLevel(root, i); } void printGivenLevel(node* root, int level) { if (root == NULL) return; if (level == 1) cout << root->data << \" \"; else if (level > 1) { printGivenLevel(root->left, level-1); printGivenLevel(root->right, level-1); } }","title":"Level Order"},{"location":"ds/tree/bt-level-order/#level-order","text":"","title":"Level Order"},{"location":"ds/tree/bt-level-order/#queue","text":"void printLevelOrderWithQueue(Node *root) { if (root == NULL) return; queue<Node *> q; q.push(root); while (q.empty() == false) { Node *node = q.front(); cout << node->data << \" \"; q.pop(); if (node->left != NULL) q.push(node->left); if (node->right != NULL) q.push(node->right); } }","title":"Queue"},{"location":"ds/tree/bt-level-order/#reverse","text":"void reverseLevelOrder(node* root) { int h = height(root); int i; for (i=h; i>=1; i--) //THE ONLY LINE DIFFERENT FROM NORMAL LEVEL ORDER printGivenLevel(root, i); } void reverseLevelOrderWithStack(node* root) { stack <node *> S; queue <node *> Q; Q.push(root); while (Q.empty() == false) { root = Q.front(); Q.pop(); S.push(root); if (root->right) Q.push(root->right); if (root->left) Q.push(root->left); } while (S.empty() == false) { root = S.top(); cout << root->data << \" \"; S.pop(); } }","title":"Reverse"},{"location":"ds/tree/bt-level-order/#given-level","text":"void printLevelOrder(node* root) { int h = height(root); int i; for (i = 1; i <= h; i++) printGivenLevel(root, i); } void printGivenLevel(node* root, int level) { if (root == NULL) return; if (level == 1) cout << root->data << \" \"; else if (level > 1) { printGivenLevel(root->left, level-1); printGivenLevel(root->right, level-1); } }","title":"Given Level"},{"location":"ds/tree/bt-search/","text":"Search \u00b6 bool iterativeSearch(node *root, int x) { if (root == NULL) return false; queue<node *> q; q.push(root); while (q.empty() == false) { node *node = q.front(); if (node->data == x) return true; q.pop(); if (node->left != NULL) q.push(node->left); if (node->right != NULL) q.push(node->right); } return false; }","title":"Search"},{"location":"ds/tree/bt-search/#search","text":"bool iterativeSearch(node *root, int x) { if (root == NULL) return false; queue<node *> q; q.push(root); while (q.empty() == false) { node *node = q.front(); if (node->data == x) return true; q.pop(); if (node->left != NULL) q.push(node->left); if (node->right != NULL) q.push(node->right); } return false; }","title":"Search"},{"location":"ds/tree/bt-swap-nodes/","text":"Binary Tree Swapping \u00b6 Store inorder of BST in auxiliary array. (will be sorted) Sort the auxiliary array. Finally, insert the auxiliary array elements back to the BST, keeping the structure of the BST same. The time complexity of this method is O(nLogn) and the auxiliary space needed is O(n). We can solve this in O(n) time and with a single traversal of the given BST. Since inorder traversal of BST is always a sorted array, the problem can be reduced to a problem where two elements of a sorted array are swapped. There are two cases that we need to handle: The swapped nodes are not adjacent in the inorder traversal of the BST. For example, Nodes 5 and 25 are swapped in {3 5 7 8 10 15 20 25}. The inorder traversal of the given tree is 3 25 7 8 10 15 20 5 If we observe carefully, during inorder traversal, we find node 7 is smaller than the previous visited node 25. Here save the context of node 25 (previous node). Again, we find that node 5 is smaller than the previous node 20. This time, we save the context of node 5 (the current node ). Finally, swap the two node\u2019s values. The swapped nodes are adjacent in the inorder traversal of BST. For example, Nodes 7 and 8 are swapped in {3 5 7 8 10 15 20 25}. The inorder traversal of the given tree is 3 5 8 7 10 15 20 25 Unlike case #1, here only one point exists where a node value is smaller than the previous node value. e.g. node 7 is smaller than node 8. How to Solve? We will maintain three-pointers, first, middle, and last. When we find the first point where the current node value is smaller than the previous node value, we update the first with the previous node & the middle with the current node. When we find the second point where the current node value is smaller than the previous node value, we update the last with the current node. In the case of #2, we will never find the second point. So, the last pointer will not be updated. After processing, if the last node value is null, then two swapped nodes of BST are adjacent.","title":"Binary Tree Swapping"},{"location":"ds/tree/bt-swap-nodes/#binary-tree-swapping","text":"Store inorder of BST in auxiliary array. (will be sorted) Sort the auxiliary array. Finally, insert the auxiliary array elements back to the BST, keeping the structure of the BST same. The time complexity of this method is O(nLogn) and the auxiliary space needed is O(n). We can solve this in O(n) time and with a single traversal of the given BST. Since inorder traversal of BST is always a sorted array, the problem can be reduced to a problem where two elements of a sorted array are swapped. There are two cases that we need to handle: The swapped nodes are not adjacent in the inorder traversal of the BST. For example, Nodes 5 and 25 are swapped in {3 5 7 8 10 15 20 25}. The inorder traversal of the given tree is 3 25 7 8 10 15 20 5 If we observe carefully, during inorder traversal, we find node 7 is smaller than the previous visited node 25. Here save the context of node 25 (previous node). Again, we find that node 5 is smaller than the previous node 20. This time, we save the context of node 5 (the current node ). Finally, swap the two node\u2019s values. The swapped nodes are adjacent in the inorder traversal of BST. For example, Nodes 7 and 8 are swapped in {3 5 7 8 10 15 20 25}. The inorder traversal of the given tree is 3 5 8 7 10 15 20 25 Unlike case #1, here only one point exists where a node value is smaller than the previous node value. e.g. node 7 is smaller than node 8. How to Solve? We will maintain three-pointers, first, middle, and last. When we find the first point where the current node value is smaller than the previous node value, we update the first with the previous node & the middle with the current node. When we find the second point where the current node value is smaller than the previous node value, we update the last with the current node. In the case of #2, we will never find the second point. So, the last pointer will not be updated. After processing, if the last node value is null, then two swapped nodes of BST are adjacent.","title":"Binary Tree Swapping"},{"location":"ds/tree/handshaking-lemma/","text":"In every finite undirected graph, an even number of vertices will always have odd degree : The handshaking lemma is a consequence of the degree sum formula (also sometimes called the handshaking lemma): sum(deg(V)) = 2(E) k-ary tree where every node has either 0 or k children \u00b6 L = (k - 1)*I + 1 Where L = Number of leaf nodes I = Number of internal nodes Proof \u00b6 With handshaking lemma \u00b6 Proof can be divided in two cases. Case 1 (Root is Leaf):There is only one node in tree. The above formula is true for single node as L = 1, I = 0. Case 2 (Root is Internal Node): For trees with more than 1 nodes, root is always internal node. The above formula can be proved using Handshaking Lemma for this case. A tree is an undirected acyclic graph. Total number of edges in Tree is number of nodes minus 1, i.e., |E| = L + I \u2013 1. All internal nodes except root in the given type of tree have degree k + 1. Root has degree k. All leaves have degree 1. Applying the Handshaking lemma to such trees, we get following relation. Sum of all degrees = 2 * (Sum of Edges) Sum of degrees of leaves + Sum of degrees for Internal Node except root + Root's degree = 2 * (No. of nodes - 1) Putting values of above terms, L + (I-1)*(k+1) + k = 2 * (L + I - 1) L + k*I - k + I -1 + k = 2*L + 2I - 2 L + K*I + I - 1 = 2*L + 2*I - 2 K*I + 1 - I = L (K-1)*I + 1 = L So the above property is proved using Handshaking Lemma, let us discuss one more interesting property. Without it \u00b6 Since there are I internal nodes, each having K children, therefore total children in the tree = K * I. There are I-1 internal nodes which are children of some other node (root has been excluded hence one less than the total number of internal nodes) That is, out of these K I children, I-1 are internal nodes and therefore the rest (K I \u2013 (I-1)) are leaves. Hence L = (K-1)*I + 1. In Binary tree, \u00b6 L = T + 1 Where L = Number of leaf nodes T = Number of internal nodes with two children Proof \u00b6 Case 1 \u00b6 T = 0 L = 1 Case 2 \u00b6 Root has two children, i.e., degree of root is 2. Sum of degrees of nodes with two children except root + Sum of degrees of nodes with one child + Sum of degrees of leaves + Root's degree = 2 * (No. of Nodes - 1) Putting values of above terms, (T-1)*3 + S*2 + L + 2 = (S + T + L - 1)*2 Cancelling 2S from both sides. (T-1)*3 + L + 2 = (T + L - 1)*2 T - 1 = L - 2 T = L - 1 Case 3: \u00b6 Root has one child, i.e., degree of root is 1. Sum of degrees of nodes with two children + Sum of degrees of nodes with one child except root + Sum of degrees of leaves + Root's degree = 2 * (No. of Nodes - 1) Putting values of above terms, T*3 + (S-1)*2 + L + 1 = (S + T + L - 1)*2 Cancelling 2S from both sides. 3*T + L -1 = 2*T + 2*L - 2 T - 1 = L - 2 T = L - 1","title":"Handshaking lemma"},{"location":"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children","text":"L = (k - 1)*I + 1 Where L = Number of leaf nodes I = Number of internal nodes","title":"k-ary tree where every node has either 0 or k children"},{"location":"ds/tree/handshaking-lemma/#proof","text":"","title":"Proof"},{"location":"ds/tree/handshaking-lemma/#with-handshaking-lemma","text":"Proof can be divided in two cases. Case 1 (Root is Leaf):There is only one node in tree. The above formula is true for single node as L = 1, I = 0. Case 2 (Root is Internal Node): For trees with more than 1 nodes, root is always internal node. The above formula can be proved using Handshaking Lemma for this case. A tree is an undirected acyclic graph. Total number of edges in Tree is number of nodes minus 1, i.e., |E| = L + I \u2013 1. All internal nodes except root in the given type of tree have degree k + 1. Root has degree k. All leaves have degree 1. Applying the Handshaking lemma to such trees, we get following relation. Sum of all degrees = 2 * (Sum of Edges) Sum of degrees of leaves + Sum of degrees for Internal Node except root + Root's degree = 2 * (No. of nodes - 1) Putting values of above terms, L + (I-1)*(k+1) + k = 2 * (L + I - 1) L + k*I - k + I -1 + k = 2*L + 2I - 2 L + K*I + I - 1 = 2*L + 2*I - 2 K*I + 1 - I = L (K-1)*I + 1 = L So the above property is proved using Handshaking Lemma, let us discuss one more interesting property.","title":"With handshaking lemma"},{"location":"ds/tree/handshaking-lemma/#without-it","text":"Since there are I internal nodes, each having K children, therefore total children in the tree = K * I. There are I-1 internal nodes which are children of some other node (root has been excluded hence one less than the total number of internal nodes) That is, out of these K I children, I-1 are internal nodes and therefore the rest (K I \u2013 (I-1)) are leaves. Hence L = (K-1)*I + 1.","title":"Without it"},{"location":"ds/tree/handshaking-lemma/#in-binary-tree","text":"L = T + 1 Where L = Number of leaf nodes T = Number of internal nodes with two children","title":"In Binary tree,"},{"location":"ds/tree/handshaking-lemma/#proof_1","text":"","title":"Proof"},{"location":"ds/tree/handshaking-lemma/#case-1","text":"T = 0 L = 1","title":"Case 1"},{"location":"ds/tree/handshaking-lemma/#case-2","text":"Root has two children, i.e., degree of root is 2. Sum of degrees of nodes with two children except root + Sum of degrees of nodes with one child + Sum of degrees of leaves + Root's degree = 2 * (No. of Nodes - 1) Putting values of above terms, (T-1)*3 + S*2 + L + 2 = (S + T + L - 1)*2 Cancelling 2S from both sides. (T-1)*3 + L + 2 = (T + L - 1)*2 T - 1 = L - 2 T = L - 1","title":"Case 2"},{"location":"ds/tree/handshaking-lemma/#case-3","text":"Root has one child, i.e., degree of root is 1. Sum of degrees of nodes with two children + Sum of degrees of nodes with one child except root + Sum of degrees of leaves + Root's degree = 2 * (No. of Nodes - 1) Putting values of above terms, T*3 + (S-1)*2 + L + 1 = (S + T + L - 1)*2 Cancelling 2S from both sides. 3*T + L -1 = 2*T + 2*L - 2 T - 1 = L - 2 T = L - 1","title":"Case 3:"},{"location":"ds/tree/intro/","text":"Tree \u00b6 Hierarchal DS ---- j <-- root / \\ f k / \\ \\ a h z <-- leaves f, k -> siblings. k is parent of z, z is child of k. why? \u00b6 need hierarchal structure! eg - file system. moderate access/search (quicker than Linked List and slower than arrays) moderate insertion/deletion (quicker than Arrays and slower than Unordered Linked Lists). no limit like linked list. Applications \u00b6 Manipulate hierarchical data. Make information easy to search aka tree traversal. Manipulate sorted lists of data. As a workflow for compositing digital images for visual effects. Router algorithms Form of a multi-stage decision-making (see business chess).","title":"Tree"},{"location":"ds/tree/intro/#tree","text":"Hierarchal DS ---- j <-- root / \\ f k / \\ \\ a h z <-- leaves f, k -> siblings. k is parent of z, z is child of k.","title":"Tree"},{"location":"ds/tree/intro/#why","text":"need hierarchal structure! eg - file system. moderate access/search (quicker than Linked List and slower than arrays) moderate insertion/deletion (quicker than Arrays and slower than Unordered Linked Lists). no limit like linked list.","title":"why?"},{"location":"ds/tree/intro/#applications","text":"Manipulate hierarchical data. Make information easy to search aka tree traversal. Manipulate sorted lists of data. As a workflow for compositing digital images for visual effects. Router algorithms Form of a multi-stage decision-making (see business chess).","title":"Applications"},{"location":"ds/tree/k-smallest/","text":"K Smallest \u00b6 Method 1: Using Inorder Traversal (O(n) time and O(h) auxiliary space) \u00b6 Node* kthSmallest(Node* root, int& k) { if (root == NULL) return NULL; Node* left = kthSmallest(root->left, k); if (left != NULL) return left; k--; if (k == 0) return root; return kthSmallest(root->right, k); } Method 2: Augmented Tree Data Structure (O(h) Time Complexity and O(h) auxiliary space) \u00b6 Time complexity: O(h) where h is the height of the tree. struct Node { int data; Node *left, *right; int lCount; Node(int x) { data = x; left = right = NULL; lCount = 0; } }; Node* insert(Node* root, int x) { if (root == NULL) return new Node(x); if (x < root->data) { root->left = insert(root->left, x); root->lCount++; } else if (x > root->data) root->right = insert(root->right, x); return root; } Node* kthSmallest(Node* root, int k) { if (root == NULL) return NULL; int count = root->lCount + 1; if (count == k) return root; if (count > k) return kthSmallest(root->left, k); return kthSmallest(root->right, k - count); }","title":"K Smallest"},{"location":"ds/tree/k-smallest/#k-smallest","text":"","title":"K Smallest"},{"location":"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space","text":"Node* kthSmallest(Node* root, int& k) { if (root == NULL) return NULL; Node* left = kthSmallest(root->left, k); if (left != NULL) return left; k--; if (k == 0) return root; return kthSmallest(root->right, k); }","title":"Method 1: Using Inorder Traversal (O(n) time and O(h) auxiliary space)"},{"location":"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space","text":"Time complexity: O(h) where h is the height of the tree. struct Node { int data; Node *left, *right; int lCount; Node(int x) { data = x; left = right = NULL; lCount = 0; } }; Node* insert(Node* root, int x) { if (root == NULL) return new Node(x); if (x < root->data) { root->left = insert(root->left, x); root->lCount++; } else if (x > root->data) root->right = insert(root->right, x); return root; } Node* kthSmallest(Node* root, int k) { if (root == NULL) return NULL; int count = root->lCount + 1; if (count == k) return root; if (count > k) return kthSmallest(root->left, k); return kthSmallest(root->right, k - count); }","title":"Method 2: Augmented Tree Data Structure (O(h) Time Complexity and O(h) auxiliary space)"},{"location":"ds/tree/lowest-common-ancestor/","text":"Lowest Common Ancestor \u00b6 BST in, if node's value is greater than both n1 and n2 then our LCA lies in the left side of the node, if it's is smaller than both n1 and n2, then LCA lies on the right side. Otherwise, the root is LCA (assuming that both n1 and n2 are present in BST). Time Complexity: O(h). Space Complexity: O(1). node *lca(node* root, int n1, int n2) { if (root == NULL) return NULL; if (root->data > n1 && root->data > n2) return lca(root->left, n1, n2); if (root->data < n1 && root->data < n2) return lca(root->right, n1, n2); return root; } Iterative Implementation: \u00b6 The above solution uses recursion. The recursive solution requires extra space in the form of the function call stack. So an iterative solution can be implemented which does not occupy space in the form of the function call stack. Time Complexity: O(h). Space Complexity: O(1). struct node *lca(struct node* root, int n1, int n2) { while (root != NULL) { if (root->data > n1 && root->data > n2) root = root->left; else if (root->data < n1 && root->data < n2) root = root->right; else break; } return root; } Exercise The above functions assume that n1 and n2 both are in BST. If n1 and n2 are not present, then they may return an incorrect result. Extend the above solutions to return NULL if n1 or n2 or both not present in BST.","title":"Lowest Common Ancestor"},{"location":"ds/tree/lowest-common-ancestor/#lowest-common-ancestor","text":"BST in, if node's value is greater than both n1 and n2 then our LCA lies in the left side of the node, if it's is smaller than both n1 and n2, then LCA lies on the right side. Otherwise, the root is LCA (assuming that both n1 and n2 are present in BST). Time Complexity: O(h). Space Complexity: O(1). node *lca(node* root, int n1, int n2) { if (root == NULL) return NULL; if (root->data > n1 && root->data > n2) return lca(root->left, n1, n2); if (root->data < n1 && root->data < n2) return lca(root->right, n1, n2); return root; }","title":"Lowest Common Ancestor"},{"location":"ds/tree/lowest-common-ancestor/#iterative-implementation","text":"The above solution uses recursion. The recursive solution requires extra space in the form of the function call stack. So an iterative solution can be implemented which does not occupy space in the form of the function call stack. Time Complexity: O(h). Space Complexity: O(1). struct node *lca(struct node* root, int n1, int n2) { while (root != NULL) { if (root->data > n1 && root->data > n2) root = root->left; else if (root->data < n1 && root->data < n2) root = root->right; else break; } return root; } Exercise The above functions assume that n1 and n2 both are in BST. If n1 and n2 are not present, then they may return an incorrect result. Extend the above solutions to return NULL if n1 or n2 or both not present in BST.","title":"Iterative Implementation:"},{"location":"ds/tree/segment-tree/","text":"TODO","title":"Segment tree"},{"location":"ds/tree/traversal/","text":"Traversal \u00b6 linear data structure -> only one logical way to traverse them, trees can be traversed in different ways 1 / \\ 2 3 / \\ 4 5 Depth First Traversals: Inorder (Left, Root, Right) : 4 2 5 1 3 Preorder (Root, Left, Right) : 1 2 4 5 3 Postorder (Left, Right, Root) : 4 5 2 3 1 Breadth First or Level Order Traversal : 1 2 3 4 5 Depth First Traversals \u00b6 Time Complexity(O(n)): T(n) = T(k) + T(n \u2013 k \u2013 1) + c k -> number of nodes on one side of root n-k-1 on the other side Analysis of boundary conditions: Case 1: Skewed tree (One of the subtrees is empty and other subtree is non-empty) k is 0 in this case. T(n) = T(0) + T(n-1) + c T(n) = 2T(0) + T(n-2) + 2c T(n) = 3T(0) + T(n-3) + 3c T(n) = 4T(0) + T(n-4) + 4c T(n) = (n-1)T(0) + T(1) + (n-1)c T(n) = nT(0) + (n)c Value of T(0) will be some constant say d. (traversing a empty tree will take some constants time) T(n) = n(c+d) T(n) = \u0398(n) Case 2: Both left and right subtrees have equal number of nodes. T(n) = 2T(n/2) + c This recursive function is in the standard form (T(n) = aT(n/b) + \u0398(n)) for master method Auxiliary Space: size of stack -> O(n). Inorder \u00b6 void inorder(Node* temp) { if (temp == NULL) return; inorder(temp->left); cout << temp->data << ' '; inorder(temp->right); } Application: To get nodes of BST in non-increasing order Preorder \u00b6 Application: to create a copy of the tree. to get prefix expression on of an expression tree. void preorder(Node* temp) { if (temp == NULL) return; cout << temp->data << ' '; preorder(temp->left); preorder(temp->right); } Postorder \u00b6 void postorder(Node* temp) { if (temp == NULL) return; postorder(temp->left); postorder(temp->right); cout << temp->data << ' '; } Application: delete the tree. the postfix expression of an expression tree. BFS \u00b6 using call stack \u00b6 void printLevelOrder(node* root) { int h = height(root); int i; for (i = 1; i <= h; i++) printGivenLevel(root, i); } void printGivenLevel(node* root, int level) { if (root == NULL) return; if (level == 1) cout << root->data << \" \"; else if (level > 1) { printGivenLevel(root->left, level-1); printGivenLevel(root->right, level-1); } } Time Complexity: O(n^2) in worst case. For a skewed tree, printGivenLevel() takes O(n) time where n is the number of nodes in the skewed tree. So time complexity of printLevelOrder() is O(n) + O(n-1) + O(n-2) + .. + O(1) which is O(n^2). Space Complexity: O(n) in worst case. For a skewed tree, printGivenLevel() uses O(n) space for call stack. For a Balanced tree, call stack uses O(log n) space, (i.e., height of the balanced tree). using queues \u00b6 void printLevelOrder(Node *root) { if (root == NULL) return; queue<Node *> q; q.push(root); while (q.empty() == false) { Node *node = q.front(); cout << node->data << \" \"; q.pop(); if (node->left != NULL) q.push(node->left); if (node->right != NULL) q.push(node->right); } } Time Complexity: O(n) where n is number of nodes in the binary tree Space Complexity: O(n) where n is number of nodes in the binary tree BFS vs DFS \u00b6 Time complexity \u00b6 same -> O(n) Space Complexity \u00b6 Level Order Traversal is O(w) where w is maximum width of Binary Tree -> coz using queues Depth First Traversals is O(h) where h is maximum height of Binary Tree -> coz using stack (or function call stack) stores all ancestors of a node. Maximum Width of BT -> 2^h where h starts from 0. (height/width) worst case -> perfect binry tree -> Ceil(n/2). Height of BT is O(Log n). Worst case occurs -> skewed tree == O(n). worst case for both -> O(n) But, if(more balanced) -> DFS is better than BFS else BFS is better than DFS How to Pick One? \u00b6 Extra Space DFS -> recursive thus function call overheads. Find closer to root -> BFS ... Find closer to leaves -> DFS","title":"Traversal"},{"location":"ds/tree/traversal/#traversal","text":"linear data structure -> only one logical way to traverse them, trees can be traversed in different ways 1 / \\ 2 3 / \\ 4 5 Depth First Traversals: Inorder (Left, Root, Right) : 4 2 5 1 3 Preorder (Root, Left, Right) : 1 2 4 5 3 Postorder (Left, Right, Root) : 4 5 2 3 1 Breadth First or Level Order Traversal : 1 2 3 4 5","title":"Traversal"},{"location":"ds/tree/traversal/#depth-first-traversals","text":"Time Complexity(O(n)): T(n) = T(k) + T(n \u2013 k \u2013 1) + c k -> number of nodes on one side of root n-k-1 on the other side Analysis of boundary conditions: Case 1: Skewed tree (One of the subtrees is empty and other subtree is non-empty) k is 0 in this case. T(n) = T(0) + T(n-1) + c T(n) = 2T(0) + T(n-2) + 2c T(n) = 3T(0) + T(n-3) + 3c T(n) = 4T(0) + T(n-4) + 4c T(n) = (n-1)T(0) + T(1) + (n-1)c T(n) = nT(0) + (n)c Value of T(0) will be some constant say d. (traversing a empty tree will take some constants time) T(n) = n(c+d) T(n) = \u0398(n) Case 2: Both left and right subtrees have equal number of nodes. T(n) = 2T(n/2) + c This recursive function is in the standard form (T(n) = aT(n/b) + \u0398(n)) for master method Auxiliary Space: size of stack -> O(n).","title":"Depth First Traversals"},{"location":"ds/tree/traversal/#inorder","text":"void inorder(Node* temp) { if (temp == NULL) return; inorder(temp->left); cout << temp->data << ' '; inorder(temp->right); } Application: To get nodes of BST in non-increasing order","title":"Inorder"},{"location":"ds/tree/traversal/#preorder","text":"Application: to create a copy of the tree. to get prefix expression on of an expression tree. void preorder(Node* temp) { if (temp == NULL) return; cout << temp->data << ' '; preorder(temp->left); preorder(temp->right); }","title":"Preorder"},{"location":"ds/tree/traversal/#postorder","text":"void postorder(Node* temp) { if (temp == NULL) return; postorder(temp->left); postorder(temp->right); cout << temp->data << ' '; } Application: delete the tree. the postfix expression of an expression tree.","title":"Postorder"},{"location":"ds/tree/traversal/#bfs","text":"","title":"BFS"},{"location":"ds/tree/traversal/#using-call-stack","text":"void printLevelOrder(node* root) { int h = height(root); int i; for (i = 1; i <= h; i++) printGivenLevel(root, i); } void printGivenLevel(node* root, int level) { if (root == NULL) return; if (level == 1) cout << root->data << \" \"; else if (level > 1) { printGivenLevel(root->left, level-1); printGivenLevel(root->right, level-1); } } Time Complexity: O(n^2) in worst case. For a skewed tree, printGivenLevel() takes O(n) time where n is the number of nodes in the skewed tree. So time complexity of printLevelOrder() is O(n) + O(n-1) + O(n-2) + .. + O(1) which is O(n^2). Space Complexity: O(n) in worst case. For a skewed tree, printGivenLevel() uses O(n) space for call stack. For a Balanced tree, call stack uses O(log n) space, (i.e., height of the balanced tree).","title":"using call stack"},{"location":"ds/tree/traversal/#using-queues","text":"void printLevelOrder(Node *root) { if (root == NULL) return; queue<Node *> q; q.push(root); while (q.empty() == false) { Node *node = q.front(); cout << node->data << \" \"; q.pop(); if (node->left != NULL) q.push(node->left); if (node->right != NULL) q.push(node->right); } } Time Complexity: O(n) where n is number of nodes in the binary tree Space Complexity: O(n) where n is number of nodes in the binary tree","title":"using queues"},{"location":"ds/tree/traversal/#bfs-vs-dfs","text":"","title":"BFS vs DFS"},{"location":"ds/tree/traversal/#time-complexity","text":"same -> O(n)","title":"Time complexity"},{"location":"ds/tree/traversal/#space-complexity","text":"Level Order Traversal is O(w) where w is maximum width of Binary Tree -> coz using queues Depth First Traversals is O(h) where h is maximum height of Binary Tree -> coz using stack (or function call stack) stores all ancestors of a node. Maximum Width of BT -> 2^h where h starts from 0. (height/width) worst case -> perfect binry tree -> Ceil(n/2). Height of BT is O(Log n). Worst case occurs -> skewed tree == O(n). worst case for both -> O(n) But, if(more balanced) -> DFS is better than BFS else BFS is better than DFS","title":"Space Complexity"},{"location":"ds/tree/traversal/#how-to-pick-one","text":"Extra Space DFS -> recursive thus function call overheads. Find closer to root -> BFS ... Find closer to leaves -> DFS","title":"How to Pick One?"},{"location":"java/IO/","text":"","title":"IO"},{"location":"java/annotations/","text":"A form of metadata, provide data about a program that is not part of the program itself. Information for the compiler \u2014 Annotations can be used by the compiler to detect errors or suppress warnings. Compile-time and deployment-time processing \u2014 Software tools can process annotation information to generate code, XML files, and so forth. Runtime processing \u2014 Some annotations are available to be examined at runtime. stronger type checking extend java.lang.annotation to form your own annotations repeated are allowed Annotations can be applied to declarations: declarations of classes, fields, methods, and other program elements. @Entity @Override void mySuperMethod() { ... } @Author( name = \"Benjamin Franklin\", date = \"3/27/2003\" ) class MyClass { ... } @SuppressWarnings(value = \"unchecked\") void myMethod() { ... } @Author(name = \"Jane Doe\") @EBook class MyClass { ... } @Author(name = \"Jane Doe\") @Author(name = \"John Smith\") class MyClass { ... } Class instance creation expression: new @Interned MyObject(); Type cast: myString = (@NonNull String) str; implements clause: class UnmodifiableList<T> implements @Readonly List<@Readonly T> { ... } Thrown exception declaration: void monitorTemperature() throws @Critical TemperatureException { ... } Annotation Type \u00b6 Many annotations replace comments in code. @Documented @interface ClassPreamble { String author(); String date(); int currentRevision() default 1; String lastModified() default \"N/A\"; String lastModifiedBy() default \"N/A\"; // Note use of array String[] reviewers(); } @ClassPreamble ( author = \"John Doe\", date = \"3/17/2002\", currentRevision = 6, lastModified = \"4/12/2004\", lastModifiedBy = \"Jane Doe\", // Note array notation reviewers = {\"Alice\", \"Bob\", \"Cindy\"} ) public class Generation3List extends Generation2List { // class code goes here } java inbuilt \u00b6 @Deprecated @Override @SuppressWarnings({\"unchecked\", \"deprecation\"}) @SafeVarargs - avoid unsafe operations // TODO @FunctionalInterface Meta annotations \u00b6 @Retention: specifies how the marked annotation is stored: RetentionPolicy.SOURCE \u2013 The marked annotation is retained only in the source level and is ignored by the compiler. RetentionPolicy.CLASS \u2013 The marked annotation is retained by the compiler at compile time, but is ignored by the Java Virtual Machine (JVM). RetentionPolicy.RUNTIME \u2013 The marked annotation is retained by the JVM so it can be used by the runtime environment. @Documented - included in javadoc @Target - on which it is allowed @Inherited - sub class inherets super class's annotion. @Repeatable - more than once Type Annotations and Pluggable Type Systems \u00b6 expressions (new), casts, implements clauses, and throws clauses. @NonNull String str; Checker Framework Repeating Annotations \u00b6 @Schedule(dayOfMonth=\"last\") @Schedule(dayOfWeek=\"Fri\", hour=\"23\") public void doPeriodicCleanup() { ... } @Alert(role=\"Manager\") @Alert(role=\"Administrator\") public class UnauthorizedAccessException extends SecurityException { ... } For compatibility reasons, repeating annotations are stored in a container annotation that is automatically generated by the Java compiler. In order for the compiler to do this, two declarations are required in your code: Declare a Repeatable Annotation Type import java.lang.annotation.Repeatable; @Repeatable(Schedules.class) public @interface Schedule { String dayOfMonth() default \"first\"; String dayOfWeek() default \"Mon\"; int hour() default 12; } Declare the Containing Annotation Type public @interface Schedules { Schedule[] value(); } Retrieving Annotations \u00b6 AnnotatedElement.getAnnotation(Class<T>) AnnotatedElement.getAnnotationsByType(Class<T>) Design Considerations \u00b6 you must consider the cardinality of annotations of that type. to be as flexible and powerful as possible.","title":"Annotations"},{"location":"java/annotations/#annotation-type","text":"Many annotations replace comments in code. @Documented @interface ClassPreamble { String author(); String date(); int currentRevision() default 1; String lastModified() default \"N/A\"; String lastModifiedBy() default \"N/A\"; // Note use of array String[] reviewers(); } @ClassPreamble ( author = \"John Doe\", date = \"3/17/2002\", currentRevision = 6, lastModified = \"4/12/2004\", lastModifiedBy = \"Jane Doe\", // Note array notation reviewers = {\"Alice\", \"Bob\", \"Cindy\"} ) public class Generation3List extends Generation2List { // class code goes here }","title":"Annotation Type"},{"location":"java/annotations/#java-inbuilt","text":"@Deprecated @Override @SuppressWarnings({\"unchecked\", \"deprecation\"}) @SafeVarargs - avoid unsafe operations // TODO @FunctionalInterface","title":"java inbuilt"},{"location":"java/annotations/#meta-annotations","text":"@Retention: specifies how the marked annotation is stored: RetentionPolicy.SOURCE \u2013 The marked annotation is retained only in the source level and is ignored by the compiler. RetentionPolicy.CLASS \u2013 The marked annotation is retained by the compiler at compile time, but is ignored by the Java Virtual Machine (JVM). RetentionPolicy.RUNTIME \u2013 The marked annotation is retained by the JVM so it can be used by the runtime environment. @Documented - included in javadoc @Target - on which it is allowed @Inherited - sub class inherets super class's annotion. @Repeatable - more than once","title":"Meta annotations"},{"location":"java/annotations/#type-annotations-and-pluggable-type-systems","text":"expressions (new), casts, implements clauses, and throws clauses. @NonNull String str; Checker Framework","title":"Type Annotations and Pluggable Type Systems"},{"location":"java/annotations/#repeating-annotations","text":"@Schedule(dayOfMonth=\"last\") @Schedule(dayOfWeek=\"Fri\", hour=\"23\") public void doPeriodicCleanup() { ... } @Alert(role=\"Manager\") @Alert(role=\"Administrator\") public class UnauthorizedAccessException extends SecurityException { ... } For compatibility reasons, repeating annotations are stored in a container annotation that is automatically generated by the Java compiler. In order for the compiler to do this, two declarations are required in your code: Declare a Repeatable Annotation Type import java.lang.annotation.Repeatable; @Repeatable(Schedules.class) public @interface Schedule { String dayOfMonth() default \"first\"; String dayOfWeek() default \"Mon\"; int hour() default 12; } Declare the Containing Annotation Type public @interface Schedules { Schedule[] value(); }","title":"Repeating Annotations"},{"location":"java/annotations/#retrieving-annotations","text":"AnnotatedElement.getAnnotation(Class<T>) AnnotatedElement.getAnnotationsByType(Class<T>)","title":"Retrieving Annotations"},{"location":"java/annotations/#design-considerations","text":"you must consider the cardinality of annotations of that type. to be as flexible and powerful as possible.","title":"Design Considerations"},{"location":"java/basics/","text":"Variables \u00b6 Instance Variables (Non-Static Fields) Class Variables (Static Fields) Local Variables: bw {}. Parameters: always classified as \"variables\" not \"fields\" long creditCardNumber = 1234_5678_9012_3456L; primitive data types are: byte, short, int, long, float, double, boolean, and char. java.lang.String class Naming \u00b6 case sensitive unlimited-length sequence of Unicode letters and digits (avoid _ and $ in start) not keyword or reserved word gearRatio NUM_GEARS = 6 Arrays \u00b6 its length is fixed. int[] anArray = new int[10]; String[][] names = { {\"Mr. \", \"Mrs. \", \"Ms. \"}, {\"Smith\", \"Jones\"} }; System.arraycopy(copyFrom, 2, copyTo, 0, 7); java.util.Arrays.copyOfRange(copyFrom, 2, 9); java.util.Arrays \u00b6 binarySearch equals fill parallelSort java.util.Arrays.stream(copyTo).map(coffee -> coffee + \" \").forEach(System.out::print) System.out.println(java.util.Arrays.toString(copyTo)) Operators \u00b6 specific operations on one, two, or three operands, and then return a result. Simple Assignment Operator = Arithmetic Operators Additive operator (also used for String concatenation) Subtraction operator Multiplication operator / Division operator % Remainder operator Unary Operators Unary plus operator; indicates positive value (numbers are positive without this, however) Unary minus operator; negates an expression ++ Increment operator; increments a value by 1 -- Decrement operator; decrements a value by 1 ! Logical complement operator; inverts the value of a boolean Equality and Relational Operators == Equal to != Not equal to Greater than = Greater than or equal to < Less than <= Less than or equal to Conditional Operators && Conditional-AND || Conditional-OR ?: Ternary (shorthand for if-then-else statement) Type Comparison Operator instanceof Compares an object to a specified type Bitwise and Bit Shift Operators ~ Unary bitwise complement << Signed left shift Signed right shift Unsigned right shift & Bitwise AND ^ Bitwise exclusive OR | Bitwise inclusive OR Expressions (result=9), blocks({}), statements ;->; \u00b6 Control flow \u00b6 program runs in top-down decision-making statements if-then-else if (testscore >= 90) { grade = 'A'; } else if (testscore >= 60) { grade = 'D'; } else { grade = 'F'; } switch switch (month) { case 1: monthString = \"January\"; break; default: monthString = \"Invalid month\"; break; } the looping statements (for, while, do-while) while (expression) { statement(s) } do { statement(s) } while (expression); for (initialization; termination; increment) { statement(s) } branching statements (break, continue, return) search: for (i = 0; i < arrayOfInts.length; i++) { for (j = 0; j < arrayOfInts[i].length; j++) { if (arrayOfInts[i][j] == searchfor) { foundIt = true; break search; } } } if (foundIt) { System.out.println(\"Found \" + searchfor + \" at \" + i + \", \" + j); } else { System.out.println(searchfor + \" not in the array\"); } access modifiers \u00b6 public field is accessible from all classes. private field is accessible only within its own class.","title":"Variables"},{"location":"java/basics/#variables","text":"Instance Variables (Non-Static Fields) Class Variables (Static Fields) Local Variables: bw {}. Parameters: always classified as \"variables\" not \"fields\" long creditCardNumber = 1234_5678_9012_3456L; primitive data types are: byte, short, int, long, float, double, boolean, and char. java.lang.String class","title":"Variables"},{"location":"java/basics/#naming","text":"case sensitive unlimited-length sequence of Unicode letters and digits (avoid _ and $ in start) not keyword or reserved word gearRatio NUM_GEARS = 6","title":"Naming"},{"location":"java/basics/#arrays","text":"its length is fixed. int[] anArray = new int[10]; String[][] names = { {\"Mr. \", \"Mrs. \", \"Ms. \"}, {\"Smith\", \"Jones\"} }; System.arraycopy(copyFrom, 2, copyTo, 0, 7); java.util.Arrays.copyOfRange(copyFrom, 2, 9);","title":"Arrays"},{"location":"java/basics/#javautilarrays","text":"binarySearch equals fill parallelSort java.util.Arrays.stream(copyTo).map(coffee -> coffee + \" \").forEach(System.out::print) System.out.println(java.util.Arrays.toString(copyTo))","title":"java.util.Arrays"},{"location":"java/basics/#operators","text":"specific operations on one, two, or three operands, and then return a result. Simple Assignment Operator = Arithmetic Operators Additive operator (also used for String concatenation) Subtraction operator Multiplication operator / Division operator % Remainder operator Unary Operators Unary plus operator; indicates positive value (numbers are positive without this, however) Unary minus operator; negates an expression ++ Increment operator; increments a value by 1 -- Decrement operator; decrements a value by 1 ! Logical complement operator; inverts the value of a boolean Equality and Relational Operators == Equal to != Not equal to Greater than = Greater than or equal to < Less than <= Less than or equal to Conditional Operators && Conditional-AND || Conditional-OR ?: Ternary (shorthand for if-then-else statement) Type Comparison Operator instanceof Compares an object to a specified type Bitwise and Bit Shift Operators ~ Unary bitwise complement << Signed left shift Signed right shift Unsigned right shift & Bitwise AND ^ Bitwise exclusive OR | Bitwise inclusive OR","title":"Operators"},{"location":"java/basics/#expressions-result9-blocks-statements-","text":"","title":"Expressions (result=9), blocks({}), statements ;-&gt;;"},{"location":"java/basics/#control-flow","text":"program runs in top-down decision-making statements if-then-else if (testscore >= 90) { grade = 'A'; } else if (testscore >= 60) { grade = 'D'; } else { grade = 'F'; } switch switch (month) { case 1: monthString = \"January\"; break; default: monthString = \"Invalid month\"; break; } the looping statements (for, while, do-while) while (expression) { statement(s) } do { statement(s) } while (expression); for (initialization; termination; increment) { statement(s) } branching statements (break, continue, return) search: for (i = 0; i < arrayOfInts.length; i++) { for (j = 0; j < arrayOfInts[i].length; j++) { if (arrayOfInts[i][j] == searchfor) { foundIt = true; break search; } } } if (foundIt) { System.out.println(\"Found \" + searchfor + \" at \" + i + \", \" + j); } else { System.out.println(searchfor + \" not in the array\"); }","title":"Control flow"},{"location":"java/basics/#access-modifiers","text":"public field is accessible from all classes. private field is accessible only within its own class.","title":"access modifiers"},{"location":"java/classes/","text":"varargs","title":"Classes"},{"location":"java/collections/","text":"A collection \u2014 sometimes called a container \u2014 is simply an object that groups multiple elements into a single unit. Collections are used to store, retrieve, manipulate, and communicate aggregate data. collections framework is a unified architecture for representing and manipulating collections. eg c++ STL Interfaces: These are abstract data types that represent collections. form a hierarchy. Implementations: These are the concrete implementations of the collection interfaces. reusable DS. Algorithms: These are the methods that perform useful computations, polymorphic, reusable functionality. Why? \u00b6 Reduces programming effort Increases program speed and quality Allows interoperability among unrelated APIs Reduces effort to learn and to use new APIs Reduces effort to design new APIs Fosters software reuse interoperability among unrelated APIs Collections: * Set * SortedSet * List * Queue * Dequeue Map * SortedMap Interfaces \u00b6 These interfaces allow collections to be manipulated independently of the details of their representation. public interface Collection<E> Collection \u2014 the root of the collection hierarchy. A collection represents a group of objects known as its elements. Set \u2014 a collection that cannot contain duplicate elements. List \u2014 an ordered collection (sometimes called a sequence). Lists can contain duplicate elements. eg Vector Queue \u2014 a collection used to hold multiple elements prior to processing. Queues typically, but do not necessarily, order elements in a FIFO (first-in, first-out) manner. priority queues. ordering properties. Deque \u2014 a collection used to hold multiple elements prior to processing. both ends-> insertion, deletion, removed. Map \u2014 an object that maps keys to values. SortedSet \u2014 a Set that maintains its elements in ascending order. SortedMap \u2014 a Map that maintains its mappings in ascending key order. Traversing Collections \u00b6 1) using aggregate operations 2) with the for-each construct 3) by using Iterators. myShapesCollection.stream() .filter(e -> e.getColor() == Color.RED) .forEach(e -> System.out.println(e.getName())); String joined = elements.stream() .map(Object::toString) .collect(Collectors.joining(\", \")); int total = employees.stream() .collect(Collectors.summingInt(Employee::getSalary))); The key difference between the new aggregate operations and the existing bulk operations (containsAll, addAll, etc.) is that the old versions are all mutative, meaning that they all modify the underlying collection. for (Object o : collection) System.out.println(o); public interface Iterator<E> { boolean hasNext(); E next(); void remove(); //optional } polymorphic: static void filter(Collection<?> c) { for (Iterator<?> it = c.iterator(); it.hasNext(); ) if (!cond(it.next())) it.remove(); } c.removeAll(Collections.singleton(e)); import java.util.*; import java.io.*; public class Anagrams { public static void main(String[] args) { int minGroupSize = Integer.parseInt(args[1]); // Read words from file and put into a simulated multimap Map<String, List<String>> m = new HashMap<String, List<String>>(); try { Scanner s = new Scanner(new File(args[0])); while (s.hasNext()) { String word = s.next(); String alpha = alphabetize(word); List<String> l = m.get(alpha); if (l == null) m.put(alpha, l=new ArrayList<String>()); l.add(word); } } catch (IOException e) { System.err.println(e); System.exit(1); } // Print all permutation groups above size threshold for (List<String> l : m.values()) if (l.size() >= minGroupSize) System.out.println(l.size() + \": \" + l); } private static String alphabetize(String s) { char[] a = s.toCharArray(); Arrays.sort(a); return new String(a); } } Aggregate Operations \u00b6 double average = roster .stream() .filter(p -> p.getGender() == Person.Sex.MALE) .mapToInt(Person::getAge) .average() .getAsDouble(); Aggregate Operations vs Iterators \u00b6 They use internal iteration: It can more easily take advantage of parallel computing, which involves dividing a problem into subproblems, solving those problems simultaneously, and then combining the results of the solutions to the subproblems. Parallelism They process elements from a stream. They support behavior as parameters: lambda expressions Reduction \u00b6 Integer totalAgeReduce = roster .stream() .map(Person::getAge) .reduce( 0, // identity (a, b) -> a + b // accumulator ); Stream.collect Method \u00b6 Unlike the reduce method, which always creates a new value when it processes an element, the collect method modifies, or mutates, an existing value. Averager averageCollect = roster.stream() .filter(p -> p.getGender() == Person.Sex.MALE) .map(Person::getAge) .collect(Averager::new, // supplier Averager::accept, // accumulator Averager::combine // combiner ); System.out.println(\"Average age of male members: \" + averageCollect.average()); Map<Person.Sex, Integer> totalAgeByGender = roster .stream() .collect( Collectors.groupingBy( Person::getGender, Collectors.reducing( 0, // identity Person::getAge, // mapper Integer::sum))); // operation Algorithms \u00b6 Custom implementation \u00b6 Interoperability \u00b6","title":"Collections"},{"location":"java/collections/#why","text":"Reduces programming effort Increases program speed and quality Allows interoperability among unrelated APIs Reduces effort to learn and to use new APIs Reduces effort to design new APIs Fosters software reuse interoperability among unrelated APIs Collections: * Set * SortedSet * List * Queue * Dequeue Map * SortedMap","title":"Why?"},{"location":"java/collections/#interfaces","text":"These interfaces allow collections to be manipulated independently of the details of their representation. public interface Collection<E> Collection \u2014 the root of the collection hierarchy. A collection represents a group of objects known as its elements. Set \u2014 a collection that cannot contain duplicate elements. List \u2014 an ordered collection (sometimes called a sequence). Lists can contain duplicate elements. eg Vector Queue \u2014 a collection used to hold multiple elements prior to processing. Queues typically, but do not necessarily, order elements in a FIFO (first-in, first-out) manner. priority queues. ordering properties. Deque \u2014 a collection used to hold multiple elements prior to processing. both ends-> insertion, deletion, removed. Map \u2014 an object that maps keys to values. SortedSet \u2014 a Set that maintains its elements in ascending order. SortedMap \u2014 a Map that maintains its mappings in ascending key order.","title":"Interfaces"},{"location":"java/collections/#traversing-collections","text":"1) using aggregate operations 2) with the for-each construct 3) by using Iterators. myShapesCollection.stream() .filter(e -> e.getColor() == Color.RED) .forEach(e -> System.out.println(e.getName())); String joined = elements.stream() .map(Object::toString) .collect(Collectors.joining(\", \")); int total = employees.stream() .collect(Collectors.summingInt(Employee::getSalary))); The key difference between the new aggregate operations and the existing bulk operations (containsAll, addAll, etc.) is that the old versions are all mutative, meaning that they all modify the underlying collection. for (Object o : collection) System.out.println(o); public interface Iterator<E> { boolean hasNext(); E next(); void remove(); //optional } polymorphic: static void filter(Collection<?> c) { for (Iterator<?> it = c.iterator(); it.hasNext(); ) if (!cond(it.next())) it.remove(); } c.removeAll(Collections.singleton(e)); import java.util.*; import java.io.*; public class Anagrams { public static void main(String[] args) { int minGroupSize = Integer.parseInt(args[1]); // Read words from file and put into a simulated multimap Map<String, List<String>> m = new HashMap<String, List<String>>(); try { Scanner s = new Scanner(new File(args[0])); while (s.hasNext()) { String word = s.next(); String alpha = alphabetize(word); List<String> l = m.get(alpha); if (l == null) m.put(alpha, l=new ArrayList<String>()); l.add(word); } } catch (IOException e) { System.err.println(e); System.exit(1); } // Print all permutation groups above size threshold for (List<String> l : m.values()) if (l.size() >= minGroupSize) System.out.println(l.size() + \": \" + l); } private static String alphabetize(String s) { char[] a = s.toCharArray(); Arrays.sort(a); return new String(a); } }","title":"Traversing Collections"},{"location":"java/collections/#aggregate-operations","text":"double average = roster .stream() .filter(p -> p.getGender() == Person.Sex.MALE) .mapToInt(Person::getAge) .average() .getAsDouble();","title":"Aggregate Operations"},{"location":"java/collections/#aggregate-operations-vs-iterators","text":"They use internal iteration: It can more easily take advantage of parallel computing, which involves dividing a problem into subproblems, solving those problems simultaneously, and then combining the results of the solutions to the subproblems. Parallelism They process elements from a stream. They support behavior as parameters: lambda expressions","title":"Aggregate Operations vs Iterators"},{"location":"java/collections/#reduction","text":"Integer totalAgeReduce = roster .stream() .map(Person::getAge) .reduce( 0, // identity (a, b) -> a + b // accumulator );","title":"Reduction"},{"location":"java/collections/#streamcollect-method","text":"Unlike the reduce method, which always creates a new value when it processes an element, the collect method modifies, or mutates, an existing value. Averager averageCollect = roster.stream() .filter(p -> p.getGender() == Person.Sex.MALE) .map(Person::getAge) .collect(Averager::new, // supplier Averager::accept, // accumulator Averager::combine // combiner ); System.out.println(\"Average age of male members: \" + averageCollect.average()); Map<Person.Sex, Integer> totalAgeByGender = roster .stream() .collect( Collectors.groupingBy( Person::getGender, Collectors.reducing( 0, // identity Person::getAge, // mapper Integer::sum))); // operation","title":"Stream.collect Method"},{"location":"java/collections/#algorithms","text":"","title":"Algorithms"},{"location":"java/collections/#custom-implementation","text":"","title":"Custom implementation"},{"location":"java/collections/#interoperability","text":"","title":"Interoperability"},{"location":"java/concurrency/","text":"","title":"Concurrency"},{"location":"java/debugging/","text":"","title":"Debugging"},{"location":"java/deployment/","text":"","title":"Deployment"},{"location":"java/exceptions/","text":"exceptional event disrupts the normal flow of the program's instructions. exception object throwing an exception call stack exception handler catch the exception","title":"Exceptions"},{"location":"java/generics/","text":"bugs are difficult to find. with generics you can detect some runtime bugs at compile time. generics enable types to be parameters when defining classes, interfaces and methods. Why? \u00b6 Stronger type checks at compile time. Elimination of casts Enabling programmers to implement generic algorithms.","title":"Generics"},{"location":"java/generics/#why","text":"Stronger type checks at compile time. Elimination of casts Enabling programmers to implement generic algorithms.","title":"Why?"},{"location":"java/helloworld/","text":"class HelloWorldApp { public static void main(String[] args) { System.out.println(\"Hello World!\"); // Display the string. } } multiline - / / javadoc - /* / single line - //","title":"Helloworld"},{"location":"java/inheritance/","text":"subclass (also a derived class, extended class, or child class). superclass (also a base class or a parent class). the topmost class, Object. Such a class is said to be descended from all the classes in the inheritance chain stretching back to Object. Constructors are not members, so they are not inherited by subclasses A subclass inherits all of the public and protected members of its parent, no matter what package the subclass is in. If the subclass is in the same package as its parent, it also inherits the package-private members of the parent. You can use the inherited members as is, replace them, hide them, or supplement them with new members: You can declare a field in the subclass with the same name as the one in the superclass, thus hiding it (not recommended). You can write a new instance method in the subclass that has the same signature as the one in the superclass, thus overriding it. You can write a new static method in the subclass that has the same signature as the one in the superclass, thus hiding it. You can write a subclass constructor that invokes the constructor of the superclass, either implicitly or by using the keyword super. A nested class has access to all the private members of its enclosing class\u2014both fields and methods. Therefore, a public or protected nested class inherited by a subclass has indirect access to all of the private members of the superclass. Casting Objects \u00b6 // implicit casting Object obj = new MountainBike(); // explicit casting MountainBike myBike = (MountainBike)obj; instanceof Multiple Inheritance of State, Implementation, and Type \u00b6 multiple inheritance of state problem: name conflicts and ambiguity. Because interfaces do not contain fields, you do not have to worry about problems that result from multiple inheritance of state. As with multiple inheritance of implementation, a class can inherit different implementations of a method defined (as default or static) in the interfaces that it extends. In this case, the compiler or the user must decide which one to use. Polymorphism \u00b6 principle in biology in which an organism or species can have many different forms or stages. Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class. virtual method invocation \u00b6 It does not call the method that is defined by the variable's type super keyword \u00b6 Note: If a constructor does not explicitly invoke a superclass constructor, the Java compiler automatically inserts a call to the no-argument constructor of the superclass. If the super class does not have a no-argument constructor, you will get a compile-time error. Object does have such a constructor, so if Object is the only superclass, there is no problem. super(parameter list) -> constructor of super class. constructor chaining \u00b6 a whole chain of constructors called, all the way back to the constructor of Object. Object as superclass \u00b6 protected Object clone() throws CloneNotSupportedException Creates and returns a copy of this object. public boolean equals(Object obj) Indicates whether some other object is \"equal to\" this one. check only refernece / symbol not values protected void finalize() throws Throwable Called by the garbage collector on an object when garbage collection determines that there are no more references to the object public final Class getClass() Returns the runtime class of an object. public int hashCode() Returns a hash code value for the object. public String toString() Returns a string representation of the object. public final void notify() public final void notifyAll() public final void wait() public final void wait(long timeout) public final void wait(long timeout, int nanos) If you override equals(), you must override hashCode() as well. The Class class, in the java.lang package, has a large number of methods (more than 50). For example, you can test to see if the class is an annotation (isAnnotation()), an interface (isInterface()), or an enumeration (isEnum()). You can see what the object's fields are (getFields()) or what its methods are (getMethods()), and so on. You can declare some or all of a class's methods final Methods called from constructors should generally be declared finaal. A class that is declared final cannot be subclassed. Abstract Methods and Classes \u00b6 Abstract classes cannot be instantiated, but they can be subclassed. Abstract classes vs interface \u00b6 Abstract classes are similar to interfaces. You cannot instantiate them, and they may contain a mix of methods declared with or without an implementation. However, with abstract classes, you can declare fields that are not static and final, and define public, protected, and private concrete methods. With interfaces, all fields are automatically public, static, and final, and all methods that you declare or define (as default methods) are public. In addition, you can extend only one class, whether or not it is abstract, whereas you can implement any number of interfaces. Which should you use, abstract classes or interfaces? Consider using abstract classes if any of these statements apply to your situation: You want to share code among several closely related classes. You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private). You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong. Consider using interfaces if any of these statements apply to your situation: You expect that unrelated classes would implement your interface. For example, the interfaces Comparable and Cloneable are implemented by many unrelated classes. You want to specify the behavior of a particular data type, but not concerned about who implements its behavior. You want to take advantage of multiple inheritance of type. overriding and hiding methods \u00b6 same signature (name, plus the number and the type of its parameters) and return type @Override If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass. The version of the overridden instance method that gets invoked is the one in the subclass. The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass. public class Animal { public static void testClassMethod() { System.out.println(\"The static method in Animal\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Animal\"); } } public class Cat extends Animal { public static void testClassMethod() { System.out.println(\"The static method in Cat\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Cat\"); } public static void main(String[] args) { Cat myCat = new Cat(); Animal myAnimal = myCat; Animal.testClassMethod(); myAnimal.testInstanceMethod(); } } The static method in Animal The instance method in Cat","title":"Inheritance"},{"location":"java/inheritance/#casting-objects","text":"// implicit casting Object obj = new MountainBike(); // explicit casting MountainBike myBike = (MountainBike)obj; instanceof","title":"Casting Objects"},{"location":"java/inheritance/#multiple-inheritance-of-state-implementation-and-type","text":"multiple inheritance of state problem: name conflicts and ambiguity. Because interfaces do not contain fields, you do not have to worry about problems that result from multiple inheritance of state. As with multiple inheritance of implementation, a class can inherit different implementations of a method defined (as default or static) in the interfaces that it extends. In this case, the compiler or the user must decide which one to use.","title":"Multiple Inheritance of State, Implementation, and Type"},{"location":"java/inheritance/#polymorphism","text":"principle in biology in which an organism or species can have many different forms or stages. Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class.","title":"Polymorphism"},{"location":"java/inheritance/#virtual-method-invocation","text":"It does not call the method that is defined by the variable's type","title":"virtual method invocation"},{"location":"java/inheritance/#super-keyword","text":"Note: If a constructor does not explicitly invoke a superclass constructor, the Java compiler automatically inserts a call to the no-argument constructor of the superclass. If the super class does not have a no-argument constructor, you will get a compile-time error. Object does have such a constructor, so if Object is the only superclass, there is no problem. super(parameter list) -> constructor of super class.","title":"super keyword"},{"location":"java/inheritance/#constructor-chaining","text":"a whole chain of constructors called, all the way back to the constructor of Object.","title":"constructor chaining"},{"location":"java/inheritance/#object-as-superclass","text":"protected Object clone() throws CloneNotSupportedException Creates and returns a copy of this object. public boolean equals(Object obj) Indicates whether some other object is \"equal to\" this one. check only refernece / symbol not values protected void finalize() throws Throwable Called by the garbage collector on an object when garbage collection determines that there are no more references to the object public final Class getClass() Returns the runtime class of an object. public int hashCode() Returns a hash code value for the object. public String toString() Returns a string representation of the object. public final void notify() public final void notifyAll() public final void wait() public final void wait(long timeout) public final void wait(long timeout, int nanos) If you override equals(), you must override hashCode() as well. The Class class, in the java.lang package, has a large number of methods (more than 50). For example, you can test to see if the class is an annotation (isAnnotation()), an interface (isInterface()), or an enumeration (isEnum()). You can see what the object's fields are (getFields()) or what its methods are (getMethods()), and so on. You can declare some or all of a class's methods final Methods called from constructors should generally be declared finaal. A class that is declared final cannot be subclassed.","title":"Object as superclass"},{"location":"java/inheritance/#abstract-methods-and-classes","text":"Abstract classes cannot be instantiated, but they can be subclassed.","title":"Abstract Methods and Classes"},{"location":"java/inheritance/#abstract-classes-vs-interface","text":"Abstract classes are similar to interfaces. You cannot instantiate them, and they may contain a mix of methods declared with or without an implementation. However, with abstract classes, you can declare fields that are not static and final, and define public, protected, and private concrete methods. With interfaces, all fields are automatically public, static, and final, and all methods that you declare or define (as default methods) are public. In addition, you can extend only one class, whether or not it is abstract, whereas you can implement any number of interfaces. Which should you use, abstract classes or interfaces? Consider using abstract classes if any of these statements apply to your situation: You want to share code among several closely related classes. You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private). You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong. Consider using interfaces if any of these statements apply to your situation: You expect that unrelated classes would implement your interface. For example, the interfaces Comparable and Cloneable are implemented by many unrelated classes. You want to specify the behavior of a particular data type, but not concerned about who implements its behavior. You want to take advantage of multiple inheritance of type.","title":"Abstract classes vs interface"},{"location":"java/inheritance/#overriding-and-hiding-methods","text":"same signature (name, plus the number and the type of its parameters) and return type @Override If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass. The version of the overridden instance method that gets invoked is the one in the subclass. The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass. public class Animal { public static void testClassMethod() { System.out.println(\"The static method in Animal\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Animal\"); } } public class Cat extends Animal { public static void testClassMethod() { System.out.println(\"The static method in Cat\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Cat\"); } public static void main(String[] args) { Cat myCat = new Cat(); Animal myAnimal = myCat; Animal.testClassMethod(); myAnimal.testInstanceMethod(); } } The static method in Animal The instance method in Cat","title":"overriding and hiding methods"},{"location":"java/interfaces/","text":"A contract that other people adhere to and people know the API but not the implementation public interface OperateCar { // constant declarations, if any // method signatures // An enum with values RIGHT, LEFT int turn(Direction direction, double radius, double startSpeed, double endSpeed); int changeLanes(Direction direction, double startSpeed, double endSpeed); int signalTurn(Direction direction, boolean signalOn); int getRadarFront(double distanceToCar, double speedOfCar); int getRadarRear(double distanceToCar, double speedOfCar); ...... // more method signatures } public interface GroupedInterface extends Interface1, Interface2, Interface3 { // constant declarations // base of natural logarithms double E = 2.718282; // method signatures void doSomething (int i, double x); int doSomethingElse(String s); } abstract methods, default methods, and static methods -> default public , can omit. All constant values defined in an interface are implicitly public, static, and final. public interface Relatable { // this (object calling isLargerThan) // and other must be instances of // the same class returns 1, 0, -1 // if this is greater than, // equal to, or less than other public int isLargerThan(Relatable other); } public class RectanglePlus implements Relatable { public int isLargerThan(Relatable other) { RectanglePlus otherRect = (RectanglePlus)other; if (this.getArea() < otherRect.getArea()) return -1; else if (this.getArea() > otherRect.getArea()) return 1; else return 0; } } Evolving Interfaces \u00b6 making changes in historic interfaces make devs angry. either extend it, or define static and default methods. default boolean didItWork(int i, double x, String s) { // Method body } Extending Interfaces That Contain Default Methods \u00b6 Not mention the default method at all, which lets your extended interface inherit the default method. Redeclare the default method, which makes it abstract. Redefine the default method, which overrides it. Static Methods \u00b6 A static method is a method that is associated with the class in which it is defined rather than with any object. Every instance of the class shares its static methods myDeck.sort( Comparator.comparing(Card::getRank) .reversed() .thenComparing(Comparator.comparing(Card::getSuit)));","title":"Interfaces"},{"location":"java/interfaces/#evolving-interfaces","text":"making changes in historic interfaces make devs angry. either extend it, or define static and default methods. default boolean didItWork(int i, double x, String s) { // Method body }","title":"Evolving Interfaces"},{"location":"java/interfaces/#extending-interfaces-that-contain-default-methods","text":"Not mention the default method at all, which lets your extended interface inherit the default method. Redeclare the default method, which makes it abstract. Redefine the default method, which overrides it.","title":"Extending Interfaces That Contain Default Methods"},{"location":"java/interfaces/#static-methods","text":"A static method is a method that is associated with the class in which it is defined rather than with any object. Every instance of the class shares its static methods myDeck.sort( Comparator.comparing(Card::getRank) .reversed() .thenComparing(Comparator.comparing(Card::getSuit)));","title":"Static Methods"},{"location":"java/intro/","text":"what is java? \u00b6 javase/tutorial programming language \u00b6 general-purpose high-level .java -> compiler -> .class (byte code) -> JVM -> machine code perform additional steps at runtime to give your application a performance boost. finding performance bottlenecks and recompiling (to native code) frequently used sections of code. Simple Object oriented Distributed Multithreaded Dynamic Architecture neutral Portable High performance Robust Secure learn more at whitepaper Platform \u00b6 A platform is the hardware or software environment in which a program runs. Java platform a software-only platform that runs on top of other hardware-based platforms. JVM Java API Development Tools - javac, java, javadoc etc API - basic objects, networking, security, XML generation, database access etc Deployment Technologies - Java Web Start and Java Plug-In for deploying your applications to end users. User Interface Toolkits - JavaFX, Swing, and Java 2D (GUI) Integration Libraries - database access and manipulation of remote objects. (IDL, JDBC, JNDI, RMI, RMI-IIOP) docs platform-independent environment Why? \u00b6 Get started quickly : powerful object-oriented language, it's easy to learn. less code : 4 times smaller than the same program written in C++. (based on methods, classes count etc) better code : good coding practices, automatic garbage collection, object orientation, JavaBeans\u2122 component architecture, API Develop more quickly : 2x c++ portable Write once, run anywhere Distribute software easily : With Java Web Start software.","title":"what is java?"},{"location":"java/intro/#what-is-java","text":"javase/tutorial","title":"what is java?"},{"location":"java/intro/#programming-language","text":"general-purpose high-level .java -> compiler -> .class (byte code) -> JVM -> machine code perform additional steps at runtime to give your application a performance boost. finding performance bottlenecks and recompiling (to native code) frequently used sections of code. Simple Object oriented Distributed Multithreaded Dynamic Architecture neutral Portable High performance Robust Secure learn more at whitepaper","title":"programming language"},{"location":"java/intro/#platform","text":"A platform is the hardware or software environment in which a program runs. Java platform a software-only platform that runs on top of other hardware-based platforms. JVM Java API Development Tools - javac, java, javadoc etc API - basic objects, networking, security, XML generation, database access etc Deployment Technologies - Java Web Start and Java Plug-In for deploying your applications to end users. User Interface Toolkits - JavaFX, Swing, and Java 2D (GUI) Integration Libraries - database access and manipulation of remote objects. (IDL, JDBC, JNDI, RMI, RMI-IIOP) docs platform-independent environment","title":"Platform"},{"location":"java/intro/#why","text":"Get started quickly : powerful object-oriented language, it's easy to learn. less code : 4 times smaller than the same program written in C++. (based on methods, classes count etc) better code : good coding practices, automatic garbage collection, object orientation, JavaBeans\u2122 component architecture, API Develop more quickly : 2x c++ portable Write once, run anywhere Distribute software easily : With Java Web Start software.","title":"Why?"},{"location":"java/java9%26beyond/","text":"TODO https://dev.to/awwsmm/20-reasons-to-move-on-from-java-8-1dio https://4comprehension.com/keeping-up-with-java-9-10-11-and-beyond/ https://codete.com/blog/java-8-java-11-quick-guide https://www.javatpoint.com/java-8-vs-java-11 https://www.infoworld.com/article/3606833/jdk-17-the-new-features-in-java-17.html https://www.marcobehler.com/guides/a-guide-to-java-versions-and-features","title":"Java9&beyond"},{"location":"java/jdbc/","text":"","title":"Jdbc"},{"location":"java/jsp/","text":"","title":"Jsp"},{"location":"java/networking/","text":"","title":"Networking"},{"location":"java/numbers/","text":"reasons to use objects in place of primitives, and the Java platform provides wrapper classes for each of the primitive data types. These classes \"wrap\" the primitive in an object. Often, the wrapping is done by the compiler As an argument of a method that expects an object (often used when manipulating collections of numbers). To use constants defined by the class, such as MIN_VALUE and MAX_VALUE, that provide the upper and lower bounds of the data type. To use class methods for converting values to and from other primitive types, for converting to and from strings, and for converting between number systems (decimal, octal, hexadecimal, binary). BigDecimal and BigInteger are used for high-precision calculations. AtomicInteger and AtomicLong are used for multi-threaded applications. Byte Short Integer Long Float Double System.out.printf(...) System.out.format(\"The value of \" + \"the float variable is \" + \"%f%n, while the value of the \" + \"integer variable is %d, \" + \"and the string is %s\", floatVar, intVar, stringVar); public PrintStream format(Locale l, String format, Object... args) the java.text.DecimalFormat(...) DecimalFormat myFormatter = new DecimalFormat(pattern); String output = myFormatter.format(value); System.out.println(value + \" \" + pattern + \" \" + output); number pattern output 123456.789 ###,###.### 123,456.789 123456.789 ###.## 123456.79 123.78 000000.000 000123.780 12345.67 $###,###.### $12,345.67 Advanced math \u00b6 import static java.lang.Math.*; E PI abs ceil floor rint round min max exp log pow sqrt sin random() java.util.Random","title":"Numbers"},{"location":"java/numbers/#advanced-math","text":"import static java.lang.Math.*; E PI abs ceil floor rint round min max exp log pow sqrt sin random() java.util.Random","title":"Advanced math"},{"location":"java/oops/","text":"Objects \u00b6 real world mapping of obbjects state / fields / variables behaviour / methods / functions - primary mechanism for object-to-object communication Why? \u00b6 Modularity : an object can be easily passed around inside the system. Information- hiding Code re-use Pluggability and debugging ease : If a bolt breaks, you replace it, not the entire machine. data encapsulation \u00b6 Hiding internal state and requiring all interaction to be performed through an object's methods. Class \u00b6 bicycle is an instance of the class of objects known as bicycles A class is the blueprint from which individual objects are created. (instances) Inheritance \u00b6 organizing and structuring your software subclass has superclass's fields and methods. class MountainBike extends Bicycle { // new fields and methods defining // a mountain bike would go here } Interface \u00b6 form a contract between the class and the outside world. interface Bicycle { // wheel revolutions per minute void changeCadence(int newValue); void changeGear(int newValue); void speedUp(int increment); void applyBrakes(int decrement); } class ACMEBicycle implements Bicycle { int cadence = 0; int speed = 0; int gear = 1; void changeCadence(int newValue) { cadence = newValue; } void changeGear(int newValue) { gear = newValue; } void speedUp(int increment) { speed = speed + increment; } void applyBrakes(int decrement) { speed = speed - decrement; } void printStates() { System.out.println(\"cadence:\" + cadence + \" speed:\" + speed + \" gear:\" + gear); } } Package \u00b6 namespace that organizes a set of related classes and interfaces. Library \u00b6 a set of packages","title":"Objects"},{"location":"java/oops/#objects","text":"real world mapping of obbjects state / fields / variables behaviour / methods / functions - primary mechanism for object-to-object communication","title":"Objects"},{"location":"java/oops/#why","text":"Modularity : an object can be easily passed around inside the system. Information- hiding Code re-use Pluggability and debugging ease : If a bolt breaks, you replace it, not the entire machine.","title":"Why?"},{"location":"java/oops/#data-encapsulation","text":"Hiding internal state and requiring all interaction to be performed through an object's methods.","title":"data encapsulation"},{"location":"java/oops/#class","text":"bicycle is an instance of the class of objects known as bicycles A class is the blueprint from which individual objects are created. (instances)","title":"Class"},{"location":"java/oops/#inheritance","text":"organizing and structuring your software subclass has superclass's fields and methods. class MountainBike extends Bicycle { // new fields and methods defining // a mountain bike would go here }","title":"Inheritance"},{"location":"java/oops/#interface","text":"form a contract between the class and the outside world. interface Bicycle { // wheel revolutions per minute void changeCadence(int newValue); void changeGear(int newValue); void speedUp(int increment); void applyBrakes(int decrement); } class ACMEBicycle implements Bicycle { int cadence = 0; int speed = 0; int gear = 1; void changeCadence(int newValue) { cadence = newValue; } void changeGear(int newValue) { gear = newValue; } void speedUp(int increment) { speed = speed + increment; } void applyBrakes(int decrement) { speed = speed - decrement; } void printStates() { System.out.println(\"cadence:\" + cadence + \" speed:\" + speed + \" gear:\" + gear); } }","title":"Interface"},{"location":"java/oops/#package","text":"namespace that organizes a set of related classes and interfaces.","title":"Package"},{"location":"java/oops/#library","text":"a set of packages","title":"Library"},{"location":"java/packages/","text":"A package is a grouping of related types (classes, interfaces, enumerations (classes), and annotation types (interfaces)) providing access protection and name space management. Why? \u00b6 types are related. easy to find types that can provide particular functions. The names won't conflict with the type names in other packages because the package creates a new namespace. unrestricted access to one another yet still restrict access for types outside the package. At top: package <name>; only one public type in one source file. You can include non-public types in the same file as a public type (this is strongly discouraged, unless the non-public types are small and closely related to the public type). All the top-level, non-public types will be package private. Naming \u00b6 The fully qualified name -> library.package.class lower case reversed Internet domain name region specific -> com.example.region.mypackage Packages in the Java language itself begin with java. or javax. add an underscore for reserved keywords and hyphens adn starting with numbers Usage \u00b6 by Its Qualified Name \u00b6 all right for infrequent use You can use a package member's simple name if the code you are writing is in the same package as that member or if that member has been imported. Importing a Package Member \u00b6 import graphics.Rectangle; Importing an Entire Package \u00b6 if you use many types from a package, you should import the entire package. It cannot be used to match a subset of the classes in a package. import graphics.*; import the public nested classes of an enclosing class. \u00b6 import graphics.Rectangle; import graphics.Rectangle.*; Be aware that the second import statement will not import Rectangle. static import \u00b6 when you need frequent access to static final fields (constants) and static methods from one or two classes. import static java.lang.Math.*; Java compiler automatically imports: 1) the java.lang package 2) the package for the current file Apparent Hierarchies of Packages \u00b6 java.awt.xxxx packages are not included in the java.awt package. java.awt is used for a number of related packages to make the relationship evident, but not to show inclusion. Name Ambiguities \u00b6 if a type in 2 packages have same name and both packagesare included -> use member's fully qualified name. Managing Source and Class Files \u00b6 hierarchical file systems to manage source and class files, although The Java Language Specification does not require this. <path_one>\\sources\\com\\example\\graphics\\Rectangle.java <path_two>\\classes\\com\\example\\graphics\\Rectangle.class The full path to the classes directory, \\classes, is called the class path, and is set with the CLASSPATH system variable. Both the compiler and the JVM construct the path to your .class files by adding the package name to the class path. For example, if <path_two>\\classes is your class path, and the package name is com.example.graphics, then the compiler and JVM look for .class files in <path_two>\\classes\\com\\example\\graphics. By default, the compiler and the JVM search the current directory and the JAR file containing the Java platform classes so that these directories are automatically in your class path.","title":"Packages"},{"location":"java/packages/#why","text":"types are related. easy to find types that can provide particular functions. The names won't conflict with the type names in other packages because the package creates a new namespace. unrestricted access to one another yet still restrict access for types outside the package. At top: package <name>; only one public type in one source file. You can include non-public types in the same file as a public type (this is strongly discouraged, unless the non-public types are small and closely related to the public type). All the top-level, non-public types will be package private.","title":"Why?"},{"location":"java/packages/#naming","text":"The fully qualified name -> library.package.class lower case reversed Internet domain name region specific -> com.example.region.mypackage Packages in the Java language itself begin with java. or javax. add an underscore for reserved keywords and hyphens adn starting with numbers","title":"Naming"},{"location":"java/packages/#usage","text":"","title":"Usage"},{"location":"java/packages/#by-its-qualified-name","text":"all right for infrequent use You can use a package member's simple name if the code you are writing is in the same package as that member or if that member has been imported.","title":"by Its Qualified Name"},{"location":"java/packages/#importing-a-package-member","text":"import graphics.Rectangle;","title":"Importing a Package Member"},{"location":"java/packages/#importing-an-entire-package","text":"if you use many types from a package, you should import the entire package. It cannot be used to match a subset of the classes in a package. import graphics.*;","title":"Importing an Entire Package"},{"location":"java/packages/#import-the-public-nested-classes-of-an-enclosing-class","text":"import graphics.Rectangle; import graphics.Rectangle.*; Be aware that the second import statement will not import Rectangle.","title":"import the public nested classes of an enclosing class."},{"location":"java/packages/#static-import","text":"when you need frequent access to static final fields (constants) and static methods from one or two classes. import static java.lang.Math.*; Java compiler automatically imports: 1) the java.lang package 2) the package for the current file","title":"static import"},{"location":"java/packages/#apparent-hierarchies-of-packages","text":"java.awt.xxxx packages are not included in the java.awt package. java.awt is used for a number of related packages to make the relationship evident, but not to show inclusion.","title":"Apparent Hierarchies of Packages"},{"location":"java/packages/#name-ambiguities","text":"if a type in 2 packages have same name and both packagesare included -> use member's fully qualified name.","title":"Name Ambiguities"},{"location":"java/packages/#managing-source-and-class-files","text":"hierarchical file systems to manage source and class files, although The Java Language Specification does not require this. <path_one>\\sources\\com\\example\\graphics\\Rectangle.java <path_two>\\classes\\com\\example\\graphics\\Rectangle.class The full path to the classes directory, \\classes, is called the class path, and is set with the CLASSPATH system variable. Both the compiler and the JVM construct the path to your .class files by adding the package name to the class path. For example, if <path_two>\\classes is your class path, and the package name is com.example.graphics, then the compiler and JVM look for .class files in <path_two>\\classes\\com\\example\\graphics. By default, the compiler and the JVM search the current directory and the JAR file containing the Java platform classes so that these directories are automatically in your class path.","title":"Managing Source and Class Files"},{"location":"java/re/","text":"","title":"Re"},{"location":"java/security/","text":"","title":"Security"},{"location":"java/strings/","text":"Character class is immutable String class is immutable The Java programming language does not permit literal strings to span lines in source files Breaking strings between lines using the + concatenation operator is, once again, very common in print statements. int i; String s1 = \"\" + i; public class Filename { private String fullPath; private char pathSeparator, extensionSeparator; public Filename(String str, char sep, char ext) { fullPath = str; pathSeparator = sep; extensionSeparator = ext; } public String extension() { int dot = fullPath.lastIndexOf(extensionSeparator); return fullPath.substring(dot + 1); } // gets filename without extension public String filename() { int dot = fullPath.lastIndexOf(extensionSeparator); int sep = fullPath.lastIndexOf(pathSeparator); return fullPath.substring(sep + 1, dot); } public String path() { int sep = fullPath.lastIndexOf(pathSeparator); return fullPath.substring(0, sep); } } public class RegionMatchesDemo { public static void main(String[] args) { String searchMe = \"Green Eggs and Ham\"; String findMe = \"Eggs\"; int searchMeLength = searchMe.length(); int findMeLength = findMe.length(); boolean foundIt = false; for (int i = 0; i <= (searchMeLength - findMeLength); i++) { if (searchMe.regionMatches(i, findMe, 0, findMeLength)) { foundIt = true; System.out.println(searchMe.substring(i, i + findMeLength)); break; } } if (!foundIt) System.out.println(\"No match found.\"); } } public class StringDemo { public static void main(String[] args) { String palindrome = \"Dot saw I was Tod\"; int len = palindrome.length(); char[] tempCharArray = new char[len]; char[] charArray = new char[len]; // put original string in an // array of chars for (int i = 0; i < len; i++) { tempCharArray[i] = palindrome.charAt(i); } // reverse array of chars for (int j = 0; j < len; j++) { charArray[j] = tempCharArray[len - 1 - j]; } String reversePalindrome = new String(charArray); System.out.println(reversePalindrome); } } Why? \u00b6 String is immutable while stringbuilder ain't Note also that there is StringBuffer in addition to StringBuilder. The difference is that the former has synchronized methods. If you use it as a local variable, use StringBuilder. If it happens that it's possible for it to be accessed by multiple threads, use StringBuffer (that's rarer) autoboxing and unboxing \u00b6 autoboxing -> primitive to object unboxing -> object to primitive","title":"Strings"},{"location":"java/strings/#why","text":"String is immutable while stringbuilder ain't Note also that there is StringBuffer in addition to StringBuilder. The difference is that the former has synchronized methods. If you use it as a local variable, use StringBuilder. If it happens that it's possible for it to be accessed by multiple threads, use StringBuffer (that's rarer)","title":"Why?"},{"location":"java/strings/#autoboxing-and-unboxing","text":"autoboxing -> primitive to object unboxing -> object to primitive","title":"autoboxing and unboxing"},{"location":"php/atttributes/","text":"<?php interface ActionHandler { public function execute(); } #[Attribute] class SetUp {} class CopyFile implements ActionHandler { public string $fileName; public string $targetDirectory; #[SetUp] public function fileExists() { if (!file_exists($this->fileName)) { throw new RuntimeException(\"File does not exist\"); } } #[SetUp] public function targetDirectoryExists() { if (!file_exists($this->targetDirectory)) { mkdir($this->targetDirectory); } elseif (!is_dir($this->targetDirectory)) { throw new RuntimeException(\"Target directory $this->targetDirectory is not a directory\"); } } public function execute() { copy($this->fileName, $this->targetDirectory . '/' . basename($this->fileName)); } } function executeAction(ActionHandler $actionHandler) { $reflection = new ReflectionObject($actionHandler); foreach ($reflection->getMethods() as $method) { $attributes = $method->getAttributes(SetUp::class); if (count($attributes) > 0) { $methodName = $method->getName(); $actionHandler->$methodName(); } } $actionHandler->execute(); } $copyAction = new CopyFile(); $copyAction->fileName = \"/tmp/foo.jpg\"; $copyAction->targetDirectory = \"/home/user\"; executeAction($copyAction);","title":"Atttributes"},{"location":"php/basics/","text":"<?= which is a short-hand to the more verbose <?php echo. If a file contains only PHP code, it is preferable to omit the PHP closing tag at the end of the file. which may cause unwanted effects because PHP will start output buffering Html Escaping \u00b6 <?php if ($expression == true): ?> This will show if the expression is true. <?php else: ?> Otherwise this will show. <?php endif; ?> Comments \u00b6 Notes can come in all sorts of shapes and sizes. They vary, and their uses are completely up to the person writing the code. However, I try to keep things consistent in my code that way it's easy for the next person to read. So something like this might help <?php //====================================================================== // CATEGORY LARGE FONT //====================================================================== //----------------------------------------------------- // Sub-Category Smaller Font //----------------------------------------------------- /* Title Here Notice the First Letters are Capitalized */ # Option 1 # Option 2 # Option 3 /* * This is a detailed explanation * of something that should require * several paragraphs of information. */ // This is a single line quote. ?> HTML comments have no meaning in PHP parser (php-doc)[http://www.phpdoc.org/] types \u00b6 PHP supports 10 primitive types. scalar types: bool int float (floating-point number, aka double) string compound types: array object callable iterable special types: resource NULL double doesn't exist now. php compiler decides type not programmer var_dump() -> type and value gettype() -> human readable is_type functions -> to check type <?php $a_bool = TRUE; // a boolean $a_str = \"foo\"; // a string $a_str2 = 'foo'; // a string $an_int = 12; // an integer echo gettype($a_bool); // prints out: boolean echo gettype($a_str); // prints out: string // If this is an integer, increment it by four if (is_int($an_int)) { $an_int += 4; } // If $a_bool is a string, print it out // (does not print out anything) if (is_string($a_bool)) { echo \"String: $a_bool\"; } ?> boolean \u00b6 <?php var_dump((bool) \"\"); // bool(false) var_dump((bool) \"0\"); // bool(false) var_dump((bool) 1); // bool(true) var_dump((bool) -2); // bool(true) var_dump((bool) \"foo\"); // bool(true) var_dump((bool) 2.3e5); // bool(true) var_dump((bool) array(12)); // bool(true) var_dump((bool) array()); // bool(false) var_dump((bool) \"false\"); // bool(true) ?> $z=TRUE OR FALSE; // FALSE $z=TRUE || FALSE; // TRUE // precedence of operators <?php $var1 = TRUE; $var2 = FALSE; echo $var1; // Will display the number 1 echo $var2; //Will display nothing /* To get it to display the number 0 for a false value you have to typecast it: */ echo (int)$var2; //This will display the number 0 for false. ?> Integers \u00b6 <?php $a = 1234; // decimal number $a = 0123; // octal number (equivalent to 83 decimal) $a = 0x1A; // hexadecimal number (equivalent to 26 decimal) $a = 0b11111111; // binary number (equivalent to 255 decimal) $a = 1_234_567; // decimal number (as of PHP 7.4.0) ?> Float \u00b6 <?php $a = 1.234; $b = 1.2e3; $c = 7E-10; $d = 1_234.567; // as of PHP 7.4.0 ?> Warning Floating point precision Floating point numbers have limited precision. Although it depends on the system, PHP typically uses the IEEE 754 double precision format, which will give a maximum relative error due to rounding in the order of 1.11e-16. Non elementary arithmetic operations may give larger errors, and, of course, error propagation must be considered when several operations are compounded. Additionally, rational numbers that are exactly representable as floating point numbers in base 10, like 0.1 or 0.7, do not have an exact representation as floating point numbers in base 2, which is used internally, no matter the size of the mantissa. Hence, they cannot be converted into their internal binary counterparts without a small loss of precision. This can lead to confusing results: for example, floor((0.1+0.7)*10) will usually return 7 instead of the expected 8, since the internal representation will be something like 7.9999999999999991118.... So never trust floating number results to the last digit, and do not compare floating point numbers directly for equality. If higher precision is necessary, the arbitrary precision math functions and gmp functions are available. For a \"simple\" explanation, see the \u00bb floating point guide that's also titled \"Why don\u2019t my numbers add up?\" String \u00b6 <?php $foo = 1 + \"10.5\"; // $foo is float (11.5) $foo = 1 + \"-1.3e3\"; // $foo is float (-1299) $foo = 1 + \"bob-1.3e3\"; // TypeError as of PHP 8.0.0, $foo is integer (1) previously $foo = 1 + \"bob3\"; // TypeError as of PHP 8.0.0, $foo is integer (1) previously $foo = 1 + \"10 Small Pigs\"; // $foo is integer (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = 4 + \"10.2 Little Piggies\"; // $foo is float (14.2) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = \"10.0 pigs \" + 1; // $foo is float (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = \"10.0 pigs \" + 1.0; // $foo is float (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously ?> Arrays \u00b6 <?php $array = array( \"foo\" => \"bar\", \"bar\" => \"foo\", ); // Using the short array syntax $array = [ \"foo\" => \"bar\", \"bar\" => \"foo\", ]; ?> Iterable \u00b6 <?php function foo(iterable $iterable) { foreach ($iterable as $value) { // ... } } ?> Object \u00b6 <?php class foo { function do_foo() { echo \"Doing foo.\"; } } $bar = new foo; $bar->do_foo(); ?> Reources \u00b6 get_resource_type() Callable \u00b6 // An example callback function function my_callback_function() { echo 'hello world!'; } // An example callback method class MyClass { static function myCallbackMethod() { echo 'Hello World!'; } } // Type 1: Simple callback call_user_func('my_callback_function'); // Type 2: Static class method call call_user_func(array('MyClass', 'myCallbackMethod')); // Type 3: Object method call $obj = new MyClass(); call_user_func(array($obj, 'myCallbackMethod')); // Type 4: Static class method call call_user_func('MyClass::myCallbackMethod'); // Type 5: Relative static class method call class A { public static function who() { echo \"A\\n\"; } } class B extends A { public static function who() { echo \"B\\n\"; } } call_user_func(array('B', 'parent::who')); // A // Type 6: Objects implementing __invoke can be used as callables class C { public function __invoke($name) { echo 'Hello ', $name, \"\\n\"; } } $c = new C(); call_user_func($c, 'PHP!'); ?> Type Juggling and declartion \u00b6 TODO","title":"Basics"},{"location":"php/basics/#html-escaping","text":"<?php if ($expression == true): ?> This will show if the expression is true. <?php else: ?> Otherwise this will show. <?php endif; ?>","title":"Html Escaping"},{"location":"php/basics/#comments","text":"Notes can come in all sorts of shapes and sizes. They vary, and their uses are completely up to the person writing the code. However, I try to keep things consistent in my code that way it's easy for the next person to read. So something like this might help <?php //====================================================================== // CATEGORY LARGE FONT //====================================================================== //----------------------------------------------------- // Sub-Category Smaller Font //----------------------------------------------------- /* Title Here Notice the First Letters are Capitalized */ # Option 1 # Option 2 # Option 3 /* * This is a detailed explanation * of something that should require * several paragraphs of information. */ // This is a single line quote. ?> HTML comments have no meaning in PHP parser (php-doc)[http://www.phpdoc.org/]","title":"Comments"},{"location":"php/basics/#types","text":"PHP supports 10 primitive types. scalar types: bool int float (floating-point number, aka double) string compound types: array object callable iterable special types: resource NULL double doesn't exist now. php compiler decides type not programmer var_dump() -> type and value gettype() -> human readable is_type functions -> to check type <?php $a_bool = TRUE; // a boolean $a_str = \"foo\"; // a string $a_str2 = 'foo'; // a string $an_int = 12; // an integer echo gettype($a_bool); // prints out: boolean echo gettype($a_str); // prints out: string // If this is an integer, increment it by four if (is_int($an_int)) { $an_int += 4; } // If $a_bool is a string, print it out // (does not print out anything) if (is_string($a_bool)) { echo \"String: $a_bool\"; } ?>","title":"types"},{"location":"php/basics/#boolean","text":"<?php var_dump((bool) \"\"); // bool(false) var_dump((bool) \"0\"); // bool(false) var_dump((bool) 1); // bool(true) var_dump((bool) -2); // bool(true) var_dump((bool) \"foo\"); // bool(true) var_dump((bool) 2.3e5); // bool(true) var_dump((bool) array(12)); // bool(true) var_dump((bool) array()); // bool(false) var_dump((bool) \"false\"); // bool(true) ?> $z=TRUE OR FALSE; // FALSE $z=TRUE || FALSE; // TRUE // precedence of operators <?php $var1 = TRUE; $var2 = FALSE; echo $var1; // Will display the number 1 echo $var2; //Will display nothing /* To get it to display the number 0 for a false value you have to typecast it: */ echo (int)$var2; //This will display the number 0 for false. ?>","title":"boolean"},{"location":"php/basics/#integers","text":"<?php $a = 1234; // decimal number $a = 0123; // octal number (equivalent to 83 decimal) $a = 0x1A; // hexadecimal number (equivalent to 26 decimal) $a = 0b11111111; // binary number (equivalent to 255 decimal) $a = 1_234_567; // decimal number (as of PHP 7.4.0) ?>","title":"Integers"},{"location":"php/basics/#float","text":"<?php $a = 1.234; $b = 1.2e3; $c = 7E-10; $d = 1_234.567; // as of PHP 7.4.0 ?> Warning Floating point precision Floating point numbers have limited precision. Although it depends on the system, PHP typically uses the IEEE 754 double precision format, which will give a maximum relative error due to rounding in the order of 1.11e-16. Non elementary arithmetic operations may give larger errors, and, of course, error propagation must be considered when several operations are compounded. Additionally, rational numbers that are exactly representable as floating point numbers in base 10, like 0.1 or 0.7, do not have an exact representation as floating point numbers in base 2, which is used internally, no matter the size of the mantissa. Hence, they cannot be converted into their internal binary counterparts without a small loss of precision. This can lead to confusing results: for example, floor((0.1+0.7)*10) will usually return 7 instead of the expected 8, since the internal representation will be something like 7.9999999999999991118.... So never trust floating number results to the last digit, and do not compare floating point numbers directly for equality. If higher precision is necessary, the arbitrary precision math functions and gmp functions are available. For a \"simple\" explanation, see the \u00bb floating point guide that's also titled \"Why don\u2019t my numbers add up?\"","title":"Float"},{"location":"php/basics/#string","text":"<?php $foo = 1 + \"10.5\"; // $foo is float (11.5) $foo = 1 + \"-1.3e3\"; // $foo is float (-1299) $foo = 1 + \"bob-1.3e3\"; // TypeError as of PHP 8.0.0, $foo is integer (1) previously $foo = 1 + \"bob3\"; // TypeError as of PHP 8.0.0, $foo is integer (1) previously $foo = 1 + \"10 Small Pigs\"; // $foo is integer (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = 4 + \"10.2 Little Piggies\"; // $foo is float (14.2) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = \"10.0 pigs \" + 1; // $foo is float (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously $foo = \"10.0 pigs \" + 1.0; // $foo is float (11) and an E_WARNING is raised in PHP 8.0.0, E_NOTICE previously ?>","title":"String"},{"location":"php/basics/#arrays","text":"<?php $array = array( \"foo\" => \"bar\", \"bar\" => \"foo\", ); // Using the short array syntax $array = [ \"foo\" => \"bar\", \"bar\" => \"foo\", ]; ?>","title":"Arrays"},{"location":"php/basics/#iterable","text":"<?php function foo(iterable $iterable) { foreach ($iterable as $value) { // ... } } ?>","title":"Iterable"},{"location":"php/basics/#object","text":"<?php class foo { function do_foo() { echo \"Doing foo.\"; } } $bar = new foo; $bar->do_foo(); ?>","title":"Object"},{"location":"php/basics/#reources","text":"get_resource_type()","title":"Reources"},{"location":"php/basics/#callable","text":"// An example callback function function my_callback_function() { echo 'hello world!'; } // An example callback method class MyClass { static function myCallbackMethod() { echo 'Hello World!'; } } // Type 1: Simple callback call_user_func('my_callback_function'); // Type 2: Static class method call call_user_func(array('MyClass', 'myCallbackMethod')); // Type 3: Object method call $obj = new MyClass(); call_user_func(array($obj, 'myCallbackMethod')); // Type 4: Static class method call call_user_func('MyClass::myCallbackMethod'); // Type 5: Relative static class method call class A { public static function who() { echo \"A\\n\"; } } class B extends A { public static function who() { echo \"B\\n\"; } } call_user_func(array('B', 'parent::who')); // A // Type 6: Objects implementing __invoke can be used as callables class C { public function __invoke($name) { echo 'Hello ', $name, \"\\n\"; } } $c = new C(); call_user_func($c, 'PHP!'); ?>","title":"Callable"},{"location":"php/basics/#type-juggling-and-declartion","text":"TODO","title":"Type Juggling and declartion"},{"location":"php/intro/","text":"In computing, Common Gateway Interface (CGI) is an interface specification that enables web servers to execute an external program, typically to process user requests. PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. <!DOCTYPE html> <html> <head> <title>Example</title> </head> <body> <?php echo \"Hi, I'm a PHP script!\"; ?> </body> </html> What it can do? \u00b6 server-side scripting Command line scripting Writing desktop applications","title":"Intro"},{"location":"php/intro/#what-it-can-do","text":"server-side scripting Command line scripting Writing desktop applications","title":"What it can do?"},{"location":"php/security/","text":"A system is only as good as the weakest link in a chain.","title":"Security"}],"index":{"fieldVectors":[["title/",[0,7.426]],["text/",[1,8.814,2,5.603,3,2.76,4,5.401]],["title/#abhinavs-notes",[1,5.379,2,2.97]],["text/#abhinavs-notes",[2,4.992,4,5.54]],["title/algo/bits/",[5,3.869,6,5.046]],["text/algo/bits/",[3,2.814,5,4.05,6,1.696,7,1.01,8,3.064,9,2.685,10,1.195,11,2.685,12,1.49,13,1.868,14,1.592,15,1.867,16,1.558,17,3.14,18,1.755,19,2.264,20,3.14,21,1.706,22,3.713,23,2.994,24,1.363,25,1.807,26,1.807,27,1.18,28,1.807,29,1.807,30,1.807,31,1.33,32,1.817,33,1.953,34,1.807,35,1.3,36,2.247,37,3.713,38,3.614,39,1.837,40,5.665,41,1.428,42,1.849,43,3.431,44,1.689,45,1.456,46,1.612,47,0.857,48,1.49,49,1.807,50,1.897,51,1.201,52,1.591,53,1.66,54,1.01,55,1.035,56,1.035,57,1.755,58,1.048,59,1.807,60,4.164,61,1.167,62,1.381,63,1.201,64,1.807,65,1.807,66,1.363,67,0.882,68,3.141,69,1.698,70,0.901,71,1.807,72,2.043,73,1.953,74,1.845,75,1.33,76,2.28,77,0.843,78,2.946,79,0.661,80,2.801,81,2.766,82,1.203,83,0.821,84,1.247,85,1.247,86,1.18,87,1.504,88,1.33,89,1.612,90,3.713,91,5.776,92,1.802,93,1.439,94,2.326,95,0.998,96,3.14,97,1.108,98,1.807,99,1.807,100,0.843,101,1.807,102,1.807,103,0.821,104,2.433,105,0.706,106,0.77,107,1.16,108,1.557,109,1.612,110,1.022,111,0.89,112,2.189,113,1.363,114,0.679,115,1.124,116,0.935,117,0.965,118,2.125,119,1.695,120,1.612,121,0.77,122,1.16,123,4.164,124,1.223,125,1.612,126,1.545,127,1.807,128,1.048,129,1.33,130,1.807,131,1.612,132,1.223,133,1.368,134,4.974,135,4.974,136,4.164,137,5.023,138,3.14,139,1.49,140,1.807,141,3.14,142,1.807,143,1.807,144,0.954,145,1.807,146,1.807,147,1.807,148,0.711,149,1.612,150,1.807]],["title/algo/bits/#bits-tricks",[5,3.869,6,5.046]],["text/algo/bits/#bits-tricks",[]],["title/algo/bits/#java",[7,3.793]],["text/algo/bits/#java",[]],["title/algo/bits/#signed-right-shift",[9,3.25,10,1.446,11,3.25,151,4.159]],["text/algo/bits/#signed-right-shift",[12,6.554,13,3.168,14,2.549,15,1.707,16,2.409,17,9.551,18,4.443,19,1.908,20,9.551,21,2.893]],["title/algo/bits/#unsigned-right-shift",[10,1.446,11,3.25,23,2.734,152,4.159]],["text/algo/bits/#unsigned-right-shift",[14,2.481,15,2.078,19,1.952,22,8.635,24,6.137,25,8.136,26,8.136,27,5.311,28,8.136,29,8.136,30,8.136]],["title/algo/bits/#detect-if-two-integers-have-opposite-signs",[9,2.834,31,2.44,32,1.446,33,2.062,34,3.315]],["text/algo/bits/#detect-if-two-integers-have-opposite-signs",[]],["title/algo/bits/#xor",[35,4.882]],["text/algo/bits/#xor",[19,1.983,36,4.46,37,7.369,38,3.507,39,1.515,40,5.527,41,1.295,42,1.756,43,5.699,44,2.806,45,1.32]],["title/algo/bits/#ternery",[46,6.054]],["text/algo/bits/#ternery",[19,2.465,36,4.324,37,7.146,38,3.443,39,1.469,40,5.809,41,1.256,42,1.703,44,3.258,45,1.28,47,3.801]],["title/algo/bits/#32-bit-ints",[5,3.204,39,0.817,48,3.672]],["text/algo/bits/#32-bit-ints",[8,6.081,36,4.46,37,7.369,38,3.507,39,1.515,40,5.527,41,1.295,42,1.756,43,5.699,45,1.32,49,8.263]],["title/algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n",[5,1.899,13,0.875,15,0.567,50,1.595,51,1.754,52,1.338,53,0.778]],["text/algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n",[5,4.346,13,2.004,15,2.062,19,2.4,21,2.431,23,5.774,38,3.235,39,1.885,41,1.258,42,1.916,45,1.283,50,3.65,52,3.062,53,2.831,54,3.377,55,3.461,56,3.461,57,3.377,58,3.505,59,6.043,60,9.016,61,1.098,62,3.531,63,4.014,64,6.043,65,6.043,66,4.559,67,1.697,68,4.559,69,2.464,70,1.734,71,6.043,72,2.482]],["title/algo/bits/#add-two-numbers-without-using-arithmetic-operators",[13,0.875,16,0.666,32,1.152,73,1.642,74,1.551,75,1.943,76,1.069]],["text/algo/bits/#add-two-numbers-without-using-arithmetic-operators",[]],["title/algo/bits/#iterative",[77,3.164]],["text/algo/bits/#iterative",[15,1.565,19,1.75,38,3.804,39,1.808,40,5.996,41,1.42,42,1.55,43,5.03,45,1.447,61,1.348,78,6.842,79,2.668,80,8.08,81,4.845,82,2.793]],["title/algo/bits/#recursive",[83,3.084]],["text/algo/bits/#recursive",[15,1.657,19,1.853,38,3.773,39,1.721,40,5.946,41,1.21,42,1.994,43,5.324,45,1.233,67,2.168,73,4.802,78,7.242,81,5.128,82,2.956]],["title/algo/bits/#smallest-of-three-integers-without-comparison-operators",[33,1.828,74,1.727,76,1.19,84,2.027,85,2.027,86,1.919]],["text/algo/bits/#smallest-of-three-integers-without-comparison-operators",[]],["title/algo/bits/#method-1-repeated-subtraction",[15,0.816,87,1.373,88,2.798,89,3.39]],["text/algo/bits/#method-1-repeated-subtraction",[19,1.763,38,3.548,39,1.895,40,5.592,41,1.426,42,1.561,45,1.454,61,1.004,90,6.55,91,7.458,92,4.28,93,4.169,94,5.524]],["title/algo/bits/#method-2-use-bit-operations",[5,2.384,16,0.836,21,1.004,76,1.342,87,1.197]],["text/algo/bits/#method-2-use-bit-operations",[8,5.154,15,1.503,38,3.646,39,1.921,40,5.924,41,1.384,42,1.878,45,1.411,70,2.009,81,4.652,90,6.246,91,6.663,95,3.867,96,8.833,97,4.292,98,7.004,99,7.004,100,3.265,101,7.004,102,7.004]],["title/algo/bits/#method-3-use-division-operator",[16,0.836,76,1.342,87,1.197,103,1.506,104,2.569]],["text/algo/bits/#method-3-use-division-operator",[38,3.782,39,1.791,40,5.96,41,1.12,42,1.901,44,2.427,45,1.142,68,6.748,69,3.647,72,4.01,90,6.373,91,7.949,105,2.793,106,3.046]],["title/algo/bits/#a-boolean-array-puzzle",[107,2.86,108,1.395,109,3.973]],["text/algo/bits/#a-boolean-array-puzzle",[15,1.707,16,1.201,18,2.662,19,2.36,32,2.078,39,1.249,41,1.439,42,1.013,45,1.467,57,2.662,61,1.376,76,1.928,104,3.691,108,2.49,110,2.694,111,2.344,112,3.385,113,3.593,114,1.788,115,2.963,116,2.463,117,2.543,118,4.609,119,3.677,120,4.248,121,2.031,122,3.058,123,7.953,124,3.223,125,4.248,126,4.072,127,4.763,128,2.763,129,3.506,130,4.763,131,4.248,132,3.223,133,2.388,134,8.68,135,8.68,136,7.953,137,8.19,138,6.813,139,3.926,140,4.763,141,6.813,142,4.763,143,4.763,144,2.515,145,4.763,146,4.763,147,4.763,148,1.875,149,4.248,150,4.763]],["title/algo/maths/",[153,5.416]],["text/algo/maths/",[2,1.085,3,2.169,8,1.02,13,2.534,14,0.987,15,1.905,16,1.388,18,0.411,19,2.091,21,2.098,23,0.997,32,0.605,33,0.862,36,0.748,38,2.323,39,1.723,40,3.112,41,1.327,42,1.77,43,0.507,44,0.844,45,1.353,47,1.952,53,2.78,57,1.388,58,1.712,61,1.371,62,1.952,63,0.921,66,1.046,67,1.479,69,0.3,70,2.616,72,1.386,73,1.545,74,0.815,76,1.006,79,0.507,80,2.633,81,1.306,82,0.531,83,1.129,87,1.901,91,1.874,92,1.921,93,1.138,100,2.068,103,1.341,104,1.074,105,1.154,106,1.258,112,0.491,114,0.933,119,1.061,124,0.498,133,0.812,148,0.29,153,0.587,154,2.834,155,0.541,156,1.439,157,0.905,158,1.298,159,0.61,160,2.915,161,2.524,162,0.656,163,0.531,164,1.061,165,0.438,166,1.982,167,2.173,168,1.155,169,1.386,170,0.465,171,1.236,172,1.386,173,4.101,174,3.165,175,1.386,176,1.386,177,1.386,178,1.298,179,0.57,180,1.236,181,1.386,182,1.523,183,1.386,184,1.386,185,1.802,186,0.606,187,1.185,188,0.416,189,0.736,190,1.386,191,1.965,192,0.736,193,2.484,194,0.938,195,0.656,196,0.736,197,0.736,198,1.545,199,0.555,200,1.414,201,0.656,202,0.736,203,1.246,204,1.753,205,0.736,206,0.736,207,1.753,208,0.736,209,1.691,210,0.956,211,1.568,212,1.46,213,0.736,214,0.736,215,0.736,216,1.236,217,0.736,218,1.236,219,0.736,220,3.882,221,1.965,222,1.965,223,1.965,224,0.736,225,1.325,226,1.185,227,0.529,228,0.595,229,0.956,230,0.57,231,0.411,232,0.57,233,0.905,234,0.373,235,0.606,236,1.965,237,0.273,238,0.736,239,1.982,240,0.736,241,0.736,242,0.736,243,1.62,244,0.736,245,0.736,246,0.736,247,0.736,248,0.736,249,3.762,250,1.326,251,0.736,252,3.355,253,0.57,254,0.57,255,0.326,256,0.518,257,0.432,258,0.402,259,0.656,260,0.3,261,2.328,262,0.736,263,1.143,264,0.997,265,0.656,266,0.57,267,0.57,268,1.306,269,1.306,270,0.736,271,1.283,272,0.57,273,0.736,274,0.389,275,1.185,276,0.337,277,2.124,278,1.965,279,1.844,280,0.736,281,0.736,282,0.736,283,1.423,284,1.33,285,1.749,286,0.635,287,0.438,288,0.541,289,0.736,290,1.33,291,0.736,292,0.938,293,0.427,294,0.905,295,1.446,296,0.736,297,0.416,298,0.529,299,0.411,300,0.736,301,0.362,302,0.736,303,0.736,304,0.736,305,1.918,306,0.736,307,0.736,308,0.736,309,0.736,310,0.465,311,0.587,312,1.3,313,2.216,314,1.33,315,1.085,316,0.656,317,0.736,318,0.736,319,0.736,320,0.736,321,0.736,322,0.736,323,0.656,324,0.736,325,1.359,326,1.162,327,0.465,328,1.143,329,0.541,330,1.759,331,1.219,332,1.319,333,0.815,334,0.796,335,0.578,336,0.578,337,0.976,338,2.433,339,1.386,340,0.736,341,0.736,342,0.736,343,0.736,344,0.736,345,1.386,346,0.736,347,0.332,348,0.57,349,0.736,350,0.62,351,0.956,352,2.227,353,1.3,354,0.736,355,0.57,356,1.33,357,0.606,358,0.507,359,1.3,360,0.736,361,0.736,362,1.074,363,0.555,364,0.48,365,0.555,366,0.421,367,1.3,368,1.386,369,1.844,370,1.3,371,2.331,372,1.3,373,0.736,374,0.736,375,0.736,376,0.736,377,0.736,378,0.736,379,1.982,380,0.736,381,0.736,382,2.331,383,2.331,384,2.331,385,2.331,386,1.3,387,1.3,388,0.736,389,1.844,390,1.085,391,1.155,392,1.414,393,0.736,394,0.416,395,0.57,396,1.386,397,1.386,398,1.386,399,1.386,400,0.489,401,0.736,402,0.736,403,0.905,404,0.736,405,0.736,406,0.736,407,0.736,408,0.736,409,0.736,410,0.57,411,0.736,412,0.656,413,0.921,414,1.02,415,0.736,416,1.965,417,0.736,418,0.489,419,0.541,420,0.444,421,0.507,422,0.736,423,0.529,424,0.736,425,0.736,426,0.736]],["title/algo/maths/#maths",[153,5.416]],["text/algo/maths/#maths",[]],["title/algo/maths/#multiple-of-3",[103,2.444,154,3.043]],["text/algo/maths/#multiple-of-3",[8,2.611,13,3.139,15,1.434,19,1.947,21,2.023,39,1.225,41,0.858,42,1.42,44,1.205,45,0.874,53,2.899,58,2.058,61,1.322,67,1.537,70,3.011,81,3.635,92,3.711,103,3.035,106,2.333,154,4.588,155,2.611,156,2.668,157,3.572,158,3.923,159,2.407,160,6.921,161,6.935,162,3.165,163,2.096,164,1.915,165,2.114,166,2.831,167,5.97,168,2.085,169,5.473,170,2.242,171,4.881,172,5.473,173,4.844,174,6.214,175,5.473,176,5.473,177,5.473,178,1.854,179,2.749,180,4.881,181,5.473,182,4.094,183,5.473,184,5.473,185,1.894,186,2.925,187,3.034,188,2.007,189,3.548,190,5.473,191,6.68,192,3.548]],["title/algo/maths/#multiply-by-7",[193,3.959,194,3.639]],["text/algo/maths/#multiply-by-7",[2,4.424,13,2.657,16,2.021,18,4.477,33,4.984,53,2.828,61,1.096,106,3.415,154,4.532,187,6.85,195,7.146,196,8.012,197,8.012,198,4.984,199,6.044,200,5.762]],["title/algo/maths/#lucky-number",[13,1.784,201,4.798]],["text/algo/maths/#lucky-number",[14,1.763,15,1.576,19,2.184,21,2.224,36,3.964,39,1.669,41,1.151,42,2.101,45,1.173,53,2.914,61,1.244,66,5.54,67,2.063,202,7.344,203,3.685,204,8.817,205,7.344,206,7.344,207,6.55,208,7.344]],["title/algo/maths/#base-n-addition",[53,1.313,209,2.551,210,3.072]],["text/algo/maths/#base-n-addition",[2,1.884,13,2.642,14,1.564,15,1.709,16,0.86,19,2.185,36,1.841,39,1.461,41,1.38,42,1.793,45,1.407,47,4.001,58,3.079,61,1.371,62,3.233,67,0.958,70,2.526,73,3.302,76,1.381,79,1.248,80,7.104,82,1.306,93,3.369,148,1.342,156,2.588,164,2.865,182,2.09,185,1.821,200,3.817,209,4.21,210,2.353,211,4.235,212,4.321,213,3.411,214,3.411,215,3.411,216,4.734,217,3.411,218,4.734,219,3.411,220,5.696,221,6.516,222,6.516,223,6.516,224,3.411,225,1.201,226,2.916,227,2.453,228,2.28,229,3.661,230,2.643,231,1.906,232,2.643,233,3.465,234,1.728,235,2.811,236,6.516,237,1.264,238,3.411,239,2.722,240,3.411,241,3.411,242,3.411,243,5.37,244,3.411,245,3.411,246,3.411,247,3.411,248,3.411,249,8.805,250,3.924,251,3.411,252,7.853,253,2.643,254,2.643,255,1.512,256,2.401,257,2.005,258,1.862]],["title/algo/maths/#square-root",[259,4.798,260,2.193]],["text/algo/maths/#square-root",[14,1.538,15,1.375,16,1.617,21,1.941,38,3.75,40,5.559,41,1.308,42,1.362,45,1.333,53,2.897,61,1.394,70,1.839,72,3.427,261,6.779,262,6.409,263,5.282,264,4.61,265,5.716,266,4.966,267,4.966,268,4.258,269,6.164,270,6.409,271,4.184,272,4.966,273,6.409,274,3.384]],["title/algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops",[16,0.51,32,0.882,33,1.258,57,1.13,74,1.188,76,0.818,104,1.567,154,1.144,193,1.488,275,1.729]],["text/algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops",[14,1.738,15,1.555,19,2.468,38,3.238,39,1.654,40,5.557,41,1.135,42,2.088,44,2.46,45,1.157,67,2.035,69,2.953,70,2.078,185,4.816,276,3.319,277,6.193,278,9.825,279,8.463]],["title/algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators",[13,0.795,16,0.604,32,1.045,76,0.97,193,1.763,275,2.048,280,2.396,281,2.396]],["text/algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators",[2,2.666,8,3.554,13,3.061,14,1.159,15,1.981,19,1.923,21,2.645,23,4.947,39,1.602,41,1.078,42,1.026,45,1.099,57,3.844,61,1.194,70,2.299,73,4.279,81,3.208,82,1.849,105,3.413,106,2.932,114,3.278,154,2.731,166,5.489,168,2.838,173,5.395,193,3.554,198,3.004,220,7.651,226,4.128,264,3.473,282,4.829,283,4.589,284,5.421,285,6.147,286,3.152,287,2.876,288,3.554,289,4.829,290,3.267,291,4.829,292,4.654,293,2.801,294,3.152,295,3.554,296,4.829]],["title/algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number",[13,0.975,297,1.662,298,2.114,299,1.642,300,2.939,301,1.447]],["text/algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number",[14,1.681,15,1.503,19,2.12,39,1.774,41,1.592,45,1.623,53,2.603,61,0.958,62,3.08,67,1.967,133,1.927,203,3.514,207,6.246,302,7.004,303,7.004,304,7.004,305,4.985,306,7.004,307,7.004,308,7.004,309,7.004]],["title/algo/maths/#write-you-own-power-without-using-multiplication-and-division-operators",[16,0.666,74,1.551,76,1.069,104,2.045,154,1.493,295,1.943,310,1.668]],["text/algo/maths/#write-you-own-power-without-using-multiplication-and-division-operators",[]],["title/algo/maths/#method-1-using-nested-loops",[15,0.711,16,0.836,57,1.852,87,1.197,311,2.645]],["text/algo/maths/#method-1-using-nested-loops",[15,2.039,19,1.617,39,1.898,41,1.489,42,1.832,44,2.926,45,1.518,61,1.416,63,4.475,67,1.892,173,4.863,239,5.374,312,6.319,313,8.932,314,6.428,315,5.247,316,6.008]],["title/algo/maths/#method-2-using-recursion",[16,0.959,21,1.151,83,1.727,87,1.373]],["text/algo/maths/#method-2-using-recursion",[15,2.015,19,2.253,38,3.043,39,1.82,40,4.796,41,1.329,42,2.109,45,1.355,47,4.022,70,1.885,83,3.853,173,4.805,198,4.086,225,2.986,268,5.632,271,5.535,277,5.616,279,6.162,312,6.162,317,6.569,318,6.569,319,6.569,320,6.569,321,6.569,322,6.569]],["title/algo/maths/#fibonici",[323,6.054]],["text/algo/maths/#fibonici",[]],["title/algo/maths/#method-1-recurssion",[15,0.956,87,1.609,324,4.455]],["text/algo/maths/#method-1-recurssion",[15,2.076,21,2.675,39,1.284,41,1.098,42,1.878,45,1.119,53,2.851,61,0.958,62,3.08,70,2.534,225,2.467,290,4.738,325,2.145,326,2.756,327,4.424,328,7.28,329,5.154,330,4.172,331,2.529,332,3.13,333,4.116,334,2.835,335,2.919,336,2.919,337,4.93,338,5.772,339,8.833]],["title/algo/maths/#method-2-dp",[21,1.349,87,1.609,340,4.455]],["text/algo/maths/#method-2-dp",[15,1.872,19,1.648,21,2.904,39,1.758,41,1.367,42,1.46,45,1.394,53,2.571,61,1.38,62,3.02,70,2.503,239,5.479,325,2.103,326,2.703,330,4.091,331,2.48,332,3.899,338,5.66,341,6.867,342,6.867,343,6.867,344,6.867,345,8.724,346,6.867,347,3.095]],["title/algo/maths/#method-3-space-optimised-2",[21,1.004,87,1.197,103,1.506,331,1.197,348,2.569]],["text/algo/maths/#method-3-space-optimised-2",[15,1.474,19,2.094,21,2.08,39,1.6,41,1.367,42,1.854,45,1.394,53,2.826,61,1.455,62,3.02,67,1.929,70,1.97,92,4.151,173,5.329,239,5.479,325,2.103,330,4.091,331,2.48,338,5.66,349,6.867,350,3.069]],["title/algo/maths/#method-4-using-power-of-the-matrix-1110",[16,0.604,87,0.865,178,1.252,185,1.279,295,1.763,351,1.652,352,1.807,353,2.248]],["text/algo/maths/#method-4-using-power-of-the-matrix-1110",[13,2.116,15,1.369,19,1.997,21,1.318,38,2.29,39,1.866,40,3.609,41,1.184,42,1.356,45,1.207,53,2.892,61,1.427,62,1.914,67,1.222,70,2.387,91,4.813,105,1.701,112,1.542,119,2.349,124,2.944,133,1.755,193,4.696,211,3.472,263,3.587,277,3.72,283,2.492,294,2.841,325,2.314,326,1.713,330,2.592,331,1.572,332,2.852,338,3.587,350,1.945,352,6.277,353,4.082,354,4.352,355,3.372,356,4.317,357,3.587,358,3.001,359,4.082,360,4.352,361,4.352,362,4.944,363,3.283,364,2.841,365,3.283,366,2.492,367,4.082,368,6.381,369,4.082,370,4.082,371,5.986,372,4.082,373,4.352,374,4.352,375,4.352,376,4.352,377,4.352,378,4.352,379,5.091,380,4.352,381,4.352,382,4.082,383,4.082,384,4.082,385,4.082,386,4.082,387,4.082,388,4.352,389,4.082]],["title/algo/maths/#method-5-optimized-method-4",[87,1.562,178,1.379,185,1.409,351,1.821,390,1.458,391,1.551]],["text/algo/maths/#method-5-optimized-method-4",[15,2.072,19,2.178,21,1.854,38,2.197,39,1.809,40,3.463,41,1.146,42,1.554,45,1.168,53,2.846,61,1.373,66,3.104,67,2.054,70,2.323,72,1.69,79,1.505,83,1.87,87,2.211,91,4.618,100,4.501,133,1.684,154,2.327,178,2.15,198,2.559,207,3.67,225,1.449,277,3.518,290,2.784,325,1.875,326,2.409,330,2.451,331,1.486,333,2.418,334,1.666,335,1.715,336,1.715,337,2.896,338,3.391,356,2.784,359,3.86,367,3.86,369,5.743,370,3.86,371,5.743,372,3.86,379,4.885,382,6.859,383,6.859,384,6.859,385,6.859,386,3.86,387,3.86,389,5.743,391,2.418,392,5.258,393,4.115,394,2.327,395,3.188,396,6.122,397,6.122,398,6.122,399,6.122]],["title/algo/maths/#method-6-olog-n-time",[53,0.977,87,1.197,325,1.015,400,2.202,401,3.315]],["text/algo/maths/#method-6-olog-n-time",[15,1.987,53,2.95,61,1.427,70,2.872,166,6.027,168,4.44,305,4.316,402,7.554,403,6.044,404,7.554,405,7.554,406,7.554,407,7.554,408,7.554,409,7.554]],["title/algo/maths/#method-7-using-formula",[16,0.959,87,1.373,194,2.572,410,2.945]],["text/algo/maths/#method-7-using-formula",[43,5.883,53,2.514,61,1.166,70,2.447,72,3.503,390,5.498,411,8.529,412,7.607]],["title/algo/maths/#average-of-stream-of-numbers",[13,1.477,413,2.959,414,3.278]],["text/algo/maths/#average-of-stream-of-numbers",[13,2.016,15,1.304,16,2.28,38,3.455,39,1.658,41,1.263,42,1.713,45,1.287,53,2.952,58,4.674,63,4.037,70,2.312,72,3.31,100,2.833,112,2.154,119,4.35,156,2.963,203,4.043,225,2.838,261,5.558,334,2.46,391,3.572,413,4.037,414,4.473,415,6.078,416,9.041,417,6.078,418,4.037,419,4.473,420,3.671,421,4.192,422,6.078,423,4.371,424,6.078,425,6.078,426,6.078]],["title/algo/analysis/amortised/",[427,4.434,428,3.511]],["text/algo/analysis/amortised/",[2,1.286,3,0.729,7,1.301,12,1.92,15,0.837,16,2.192,21,1.181,32,1.701,51,1.547,52,1.975,53,1.733,54,2.178,55,1.334,56,2.879,76,3.191,87,2.557,92,1.008,95,2.153,100,1.086,103,1.771,108,1.221,114,0.874,116,2.016,119,3.174,120,2.077,124,1.576,156,1.901,157,1.52,158,1.217,159,2.586,164,2.104,165,1.387,187,1.991,188,1.317,199,1.757,225,1.373,234,1.18,237,1.445,254,1.805,272,1.805,283,2.233,285,4.139,294,1.52,295,1.714,325,2.59,326,0.917,331,2.123,332,1.041,333,1.369,334,1.578,336,2.451,350,1.041,390,1.286,413,3.34,418,1.547,427,7.163,428,5.922,429,2.879,430,2.329,431,1.714,432,1.858,433,4.144,434,5.028,435,3.021,436,3.252,437,2.805,438,1.387,439,2.869,440,4.846,441,1.228,442,2.389,443,1.805,444,4.817,445,7.362,446,2.329,447,2.329,448,1.816,449,3.4,450,3.899,451,1.547,452,1.0,453,1.757,454,4.348,455,1.076,456,1.576,457,1.639,458,2.329,459,2.804,460,1.639,461,1.547,462,1.369,463,1.92,464,1.547,465,2.077,466,3.896,467,1.714,468,1.805,469,2.077,470,2.941,471,1.858,472,1.387,473,3.899,474,5.88,475,2.355,476,1.606,477,1.92,478,2.355,479,2.059,480,2.077,481,1.92,482,2.329,483,1.639,484,2.329,485,1.92,486,1.301,487,2.329,488,3.899,489,4.144,490,2.329,491,1.471,492,1.351,493,2.329,494,2.128,495,3.899,496,4.484,497,2.077,498,2.329,499,1.858,500,1.639,501,1.449,502,1.92,503,2.329,504,6.545,505,1.714,506,2.077,507,3.477,508,1.714,509,1.675,510,2.329,511,2.329,512,3.775,513,1.757,514,3.021,515,0.88,516,1.805,517,2.077,518,1.92,519,1.369,520,3.213,521,3.213,522,2.329,523,2.329,524,3.899,525,1.52,526,1.317,527,1.757,528,2.077,529,2.329,530,1.991,531,1.757]],["title/algo/analysis/amortised/#amortized-analysis",[427,4.434,428,3.511]],["text/algo/analysis/amortised/#amortized-analysis",[2,1.295,7,1.31,12,1.932,15,0.841,16,2.197,21,1.187,32,1.711,51,1.557,52,1.986,53,1.74,54,2.191,55,1.343,56,2.893,76,3.2,87,2.565,92,1.015,95,2.165,100,1.093,103,1.781,108,1.228,114,0.88,116,2.027,119,3.187,120,2.091,124,1.586,156,1.911,157,1.53,158,1.225,159,2.597,164,2.116,165,1.397,187,2.004,188,1.326,199,1.769,225,1.381,234,1.188,237,1.453,254,1.817,272,1.817,283,2.245,285,4.156,294,1.53,295,1.725,325,2.597,326,0.923,331,2.132,332,1.048,333,1.378,334,1.587,336,2.461,350,1.048,390,1.295,413,3.356,418,1.557,427,6.989,428,5.817,429,2.889,430,2.345,431,1.725,432,1.871,433,4.164,434,5.052,435,3.038,436,3.264,437,2.815,438,1.397,439,2.885,440,4.866,441,1.234,442,2.402,443,1.817,444,4.835,445,7.374,446,2.345,447,2.345,448,1.825,449,3.408,450,3.92,451,1.557,452,1.007,453,1.769,454,4.364,455,1.083,456,1.586,457,1.65,458,2.345,459,2.819,460,1.65,461,1.557,462,1.378,463,1.932,464,1.557,465,2.091,466,3.915,467,1.725,468,1.817,469,2.091,470,2.957,471,1.871,472,1.397,473,3.92,474,5.905,475,2.368,476,1.617,477,1.932,478,2.368,479,2.07,480,2.091,481,1.932,482,2.345,483,1.65,484,2.345,485,1.932,486,1.31,487,2.345,488,3.92,489,4.164,490,2.345,491,1.481,492,1.36,493,2.345,494,2.14,495,3.92,496,4.506,497,2.091,498,2.345,499,1.871,500,1.65,501,1.458,502,1.932,503,2.345,504,6.57,505,1.725,506,2.091,507,3.496,508,1.725,509,1.686,510,2.345,511,2.345,512,3.79,513,1.769,514,3.038,515,0.886,516,1.817,517,2.091,518,1.932,519,1.378,520,3.231,521,3.231,522,2.345,523,2.345,524,3.92,525,1.53,526,1.326,527,1.769,528,2.091,529,2.345,530,2.004,531,1.769]],["title/algo/analysis/caching/",[532,5.416]],["text/algo/analysis/caching/",[3,1.771,19,1.843,32,2.467,39,1.925,41,1.203,45,1.227,58,5.671,61,1.05,63,5.101,77,3.579,108,1.771,112,2.004,286,3.518,315,4.24,363,4.266,391,3.324,462,3.324,476,3.9,532,4.512,533,4.067,534,3.052,535,4.851,536,3.834,537,5.655,538,7.678,539,6.848,540,7.678,541,7.678,542,7.678,543,7.678,544,5.655,545,5.655,546,3.199,547,5.044,548,2.487,549,5.655,550,3.572,551,5.655,552,4.382,553,5.655,554,5.655,555,3.087,556,4.162,557,4.835]],["title/algo/analysis/caching/#caching",[532,5.416]],["text/algo/analysis/caching/#caching",[19,1.856,32,2.494,39,1.929,41,1.212,45,1.236,58,5.692,61,1.058,63,5.138,77,3.605,108,1.79,112,2.026,286,3.544,315,4.271,363,4.312,391,3.359,462,3.359,476,3.943,533,4.111,534,3.085,535,4.886,536,3.855,537,5.716,538,7.735,539,6.898,540,7.735,541,7.735,542,7.735,543,7.735,544,5.716,545,5.716,546,3.233,547,5.098,548,2.514,549,5.716,550,3.611,551,5.716,552,4.429,553,5.716,554,5.716,555,3.12,556,4.207,557,4.887]],["title/algo/analysis/classes/",[325,1.364,326,1.753,558,1.683]],["text/algo/analysis/classes/",[3,2.036,10,0.59,13,0.91,14,0.886,15,1.095,16,0.932,21,1.119,39,0.503,41,0.43,45,0.438,52,3.093,53,1.088,55,2.923,57,4.406,58,0.899,61,0.835,72,1.517,92,1.599,105,1.443,110,0.877,112,0.549,116,0.802,119,0.837,121,0.661,122,2.371,154,0.877,157,3.332,158,1.434,159,1.964,163,0.594,168,0.911,170,0.979,188,0.877,193,1.141,201,1.383,216,3.982,218,3.294,225,0.967,231,0.866,234,0.786,237,1.017,253,1.201,254,1.201,256,1.091,260,0.632,266,2.127,286,0.71,293,0.899,298,1.115,301,3.2,305,1.722,310,1.734,311,1.237,314,1.049,325,2.834,326,2.922,329,2.718,333,3.821,334,0.628,336,1.144,350,1.651,358,1.893,366,1.572,391,3.0,392,1.974,395,1.201,420,2.697,429,2.859,431,1.141,436,0.77,437,1.464,451,1.03,452,0.666,455,4.591,456,1.857,457,1.091,478,0.937,479,0.819,486,1.534,492,1.592,500,1.091,505,2.02,513,1.17,518,3.044,526,0.877,533,1.115,555,1.498,558,0.586,559,3.08,560,0.856,561,1.325,562,1.278,563,3.693,564,1.55,565,1.55,566,2.6,567,1.201,568,1.383,569,1.55,570,1.383,571,1.55,572,1.03,573,1.55,574,1.55,575,2.745,576,3.636,577,1.823,578,0.877,579,1.383,580,1.383,581,1.383,582,1.55,583,1.55,584,1.201,585,1.201,586,1.55,587,1.55,588,1.325,589,2.575,590,1.383,591,1.762,592,1.383,593,1.55,594,1.141,595,1.55,596,1.55,597,0.911,598,1.762,599,0.756,600,1.993,601,1.278,602,1.893,603,4.337,604,2.575,605,2.575,606,1.932,607,5.147,608,6.779,609,5.265,610,2.262,611,1.383,612,1.55,613,1.383,614,1.55,615,4.2,616,1.55,617,5.088,618,1.55,619,1.55,620,1.278,621,2.297,622,2.071,623,2.745,624,1.534,625,1.55,626,0.937,627,1.237,628,1.012,629,1.55,630,1.278,631,0.911,632,3.693,633,1.55,634,1.278,635,1.278,636,1.454,637,2.448,638,1.55,639,1.278,640,2.656,641,2.231,642,2.359,643,1.012,644,2.089,645,2.02,646,1.383,647,1.141,648,3.68,649,4.465,650,2.127,651,2.745,652,1.55,653,1.55,654,3.693,655,2.745,656,1.55,657,1.55,658,1.55,659,1.55,660,1.55,661,1.55,662,1.17,663,1.237,664,0.911,665,1.201,666,1.383,667,2.347,668,3.693,669,3.224,670,1.115,671,2.448,672,1.55,673,2.262,674,1.091,675,0.979,676,1.55,677,1.383,678,1.383,679,1.201,680,1.55,681,1.55,682,1.823,683,1.383,684,1.55,685,1.325,686,1.55,687,1.55,688,1.55,689,1.383,690,1.55,691,1.55,692,2.262,693,1.049,694,1.55,695,1.55,696,1.141,697,0.95,698,1.069,699,1.55,700,1.55,701,1.55]],["title/algo/analysis/classes/#time-complexity-classes",[325,1.364,326,1.753,558,1.683]],["text/algo/analysis/classes/#time-complexity-classes",[13,1.552,14,1.614,15,1.69,21,1.417,39,1.233,41,1.054,45,1.074,53,2.321,57,5.696,61,1.177,72,3.234,92,3.409,105,3.078,163,1.792,170,2.956,193,3.444,260,1.908,293,2.714,305,2.181,311,3.733,314,3.166,325,2.636,326,3.388,329,4.95,333,3.953,350,3.519,366,3.852,392,4.837,420,5.2,457,3.293,492,3.901,559,5.183,560,2.584,561,4.0,562,3.856,563,7.874,564,4.679,565,4.679,566,3.293,567,3.625,568,4.173,569,4.679,570,4.173,571,4.679,572,3.108,573,4.679,574,4.679,575,6.726,576,2.787,577,4.468,578,2.646,579,4.173,580,4.173,581,4.173,582,4.679,583,4.679,584,3.625,585,3.625,586,4.679,587,4.679,588,4.0]],["title/algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops",[57,1.852,298,2.384,325,1.015,326,1.305,589,3.11]],["text/algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops",[57,5.246,58,3.81,112,2.328,159,2.889,225,2.314,325,2.875,326,4.042,333,5.831,358,5.848,436,3.264,437,3.721,452,2.822,478,3.968,479,3.468,513,4.955,533,4.724,566,5.968,589,6.162,590,5.858,591,4.217,592,5.858,593,6.569,594,4.834,595,6.569,596,6.569,597,3.86,598,5.443,599,3.202,600,3.545,601,5.414]],["title/algo/analysis/classes/#p",[602,4.682]],["text/algo/analysis/classes/#p",[325,2.677,603,4.944,604,8.2,605,8.2,606,6.152,607,5.706]],["title/algo/analysis/classes/#np",[608,4.882]],["text/algo/analysis/classes/#np",[10,2.052,14,1.295,15,1.596,21,2.252,52,5.037,55,4.258,116,2.79,119,2.912,201,4.812,301,3.659,325,2.605,429,3.27,455,4.444,526,3.052,555,2.945,576,3.214,602,3.721,603,4.205,604,5.061,605,5.061,606,3.798,607,5.554,608,7.743,609,6.261,610,6.128,611,4.812,612,5.395,613,4.812,614,5.395,615,5.439,616,5.395,617,5.539,618,5.395,619,5.395,620,4.447,621,3.356,622,4.07,623,7.435,624,4.155,625,5.395]],["title/algo/analysis/classes/#decision-vs-optimization-problems",[391,2.234,455,1.757,609,2.798,626,2.296]],["text/algo/analysis/classes/#decision-vs-optimization-problems",[13,1.856,16,1.411,52,2.835,159,2.461,301,3.752,305,3.553,325,2.334,333,3.288,334,2.265,336,3.177,391,5.472,455,5.008,505,5.61,518,7.146,603,4.312,607,5.66,608,4.024,609,7.397,617,3.38,627,4.464,628,3.652,629,5.595,630,4.612,631,3.288,632,8.671,633,5.595,634,4.612,635,4.612,636,5.249,637,6.799,638,5.595,639,4.612,640,6.236,641,4.605,642,2.586,643,3.652,644,3.165,645,4.118,646,4.99,647,4.118]],["title/algo/analysis/classes/#reduction",[648,5.595]],["text/algo/analysis/classes/#reduction",[16,1.229,61,1.101,110,2.756,121,2.077,154,2.756,158,2.546,159,3.045,216,7.821,218,7.183,225,1.716,231,2.723,237,2.566,301,3.964,310,3.078,325,1.492,333,2.864,395,3.776,429,3.857,431,3.586,455,4.281,456,3.297,486,2.723,500,3.43,576,2.903,600,3.737,603,5.239,641,2.944,642,4.053,644,3.916,645,3.586,648,4.016,649,8.77,650,5.365,651,6.924,652,4.873,653,4.873,654,8.054,655,6.924,656,4.873,657,4.873,658,4.873,659,4.873,660,4.873,661,4.873,662,3.676,663,3.888,664,2.864,665,3.776,666,4.346,667,4.166,668,8.054,669,5.852,670,3.505,671,6.175,672,4.873,673,5.707,674,3.43,675,3.078,676,4.873]],["title/algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete",[157,2.164,301,1.632,455,1.532,608,2.384,617,2.003]],["text/algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete",[157,6.005,158,3.289,188,3.56,234,3.189,266,6.39,325,2.989,455,4.683,456,4.259,576,5.815,607,6.372,608,7.478,615,5.881,617,6.121,622,4.749,648,6.797,677,5.614,678,5.614,679,4.877,680,6.295,681,6.295,682,4.182,683,5.614]],["title/algo/analysis/classes/#first-problem-as-np-complete",[286,1.742,455,1.757,608,2.734,617,2.296]],["text/algo/analysis/classes/#first-problem-as-np-complete",[16,1.507,55,5.134,122,5.755,157,3.9,168,3.511,253,4.629,254,4.629,256,4.205,310,3.774,325,2.745,329,4.397,429,3.504,451,3.969,455,4.419,486,3.339,555,3.261,591,3.835,603,4.507,607,5.201,608,6.878,617,5.777,621,4.956,667,5.108,682,3.969,684,5.975,685,5.108,686,5.975,687,5.975,688,5.975,689,5.329,690,5.975,691,5.975,692,6.567,693,4.042,694,5.975,695,5.975,696,4.397,697,3.661,698,4.121,699,5.975,700,5.975,701,5.975]],["title/algo/analysis/examples/",[159,2.985]],["text/algo/analysis/examples/",[3,1.122,15,1.443,19,0.86,21,1.67,38,1.286,39,1.578,41,1.349,44,1.873,45,1.375,48,2.954,53,2.987,58,3.899,61,1.401,70,3.114,72,1.472,77,1.671,103,2.506,105,2.156,133,1.849,159,1.576,198,2.23,265,3.197,305,2.571,315,4.752,350,2.465,410,2.777,438,2.135,533,2.578,570,3.197,579,3.197,580,3.197,602,2.472,628,4.928,675,4.769,702,3.585,703,5.516,704,3.585,705,3.585,706,3.585,707,6.221,708,3.197,709,3.197,710,3.197,711,2.523,712,3.585,713,5.516,714,3.585,715,5.516,716,3.585,717,5.516,718,3.585,719,3.585,720,3.585,721,3.585,722,3.585,723,3.585,724,3.197,725,3.585,726,3.585,727,3.585,728,4.947,729,3.585,730,5.516,731,3.585,732,3.585,733,2.638,734,3.197,735,3.585,736,3.585,737,3.585,738,3.585,739,3.585,740,3.197,741,3.197,742,3.585,743,3.585,744,3.585,745,3.585,746,3.585,747,3.585,748,3.585,749,3.585,750,3.585,751,3.585,752,2.777]],["title/algo/analysis/examples/#examples",[159,2.985]],["text/algo/analysis/examples/#examples",[15,1.449,19,0.866,21,1.679,38,1.295,39,1.583,41,1.352,44,1.883,45,1.379,48,2.974,53,2.991,58,3.916,61,1.403,70,3.117,72,1.482,77,1.682,103,2.519,105,2.167,133,1.857,198,2.245,265,3.219,305,2.584,315,4.765,350,2.478,410,2.796,438,2.15,533,2.596,570,3.219,579,3.219,580,3.219,602,2.489,628,4.945,675,4.786,702,3.609,703,5.544,704,3.609,705,3.609,706,3.609,707,6.244,708,3.219,709,3.219,710,3.219,711,2.54,712,3.609,713,5.544,714,3.609,715,5.544,716,3.609,717,5.544,718,3.609,719,3.609,720,3.609,721,3.609,722,3.609,723,3.609,724,3.219,725,3.609,726,3.609,727,3.609,728,4.968,729,3.609,730,5.544,731,3.609,732,3.609,733,2.656,734,3.219,735,3.609,736,3.609,737,3.609,738,3.609,739,3.609,740,3.219,741,3.219,742,3.609,743,3.609,744,3.609,745,3.609,746,3.609,747,3.609,748,3.609,749,3.609,750,3.609,751,3.609,752,2.796]],["title/algo/analysis/graph-coloring/",[641,3.249,753,4.434]],["text/algo/analysis/graph-coloring/",[3,2.088,13,2.839,14,1.395,16,1.166,21,0.868,32,3.412,52,1.452,84,1.976,97,2.833,106,3.507,112,1.016,116,1.482,121,1.222,132,5.566,158,1.497,164,1.547,165,3.462,188,1.621,211,2.286,225,1.009,231,1.601,258,1.564,290,1.939,301,2.275,325,2.24,334,1.16,356,1.939,363,2.162,391,1.684,420,1.731,445,2.22,455,4.195,461,3.071,464,1.904,468,2.22,492,1.662,501,1.783,525,3.793,534,1.547,552,2.22,640,5.261,641,6.086,642,1.324,643,1.871,644,2.615,645,4.907,647,2.109,666,5.183,667,2.45,711,2.017,753,8.818,754,4.623,755,4.623,756,4.796,757,2.876,758,2.866,759,2.556,760,5.183,761,2.495,762,2.342,763,3.254,764,4.511,765,2.109,766,2.061,767,2.866,768,2.866,769,2.866,770,2.866,771,5.383,772,5.947,773,1.84,774,2.22,775,1.731,776,4.123,777,2.556,778,2.866,779,2.362,780,5.811,781,1.871,782,2.362,783,2.556,784,2.109,785,2.22,786,4.789,787,1.684,788,2.866,789,2.866,790,2.866,791,2.866,792,2.162,793,2.866,794,4.123,795,2.866,796,2.362,797,2.866,798,5.383,799,5.947,800,2.061,801,2.556,802,2.866,803,2.556,804,3.325,805,3.582,806,4.623,807,2.556,808,2.688,809,2.556,810,2.286,811,2.556,812,2.866,813,0.753,814,1.871,815,2.866,816,2.866,817,1.81]],["title/algo/analysis/graph-coloring/#vertex-coloring",[640,3.869,753,4.434]],["text/algo/analysis/graph-coloring/#vertex-coloring",[16,1.919,32,3.32,106,3.243,188,4.303,231,4.251,301,3.745,356,5.148,455,3.516,640,5.472,641,4.596,642,3.516,645,5.599,753,9.11,756,6.688,757,4.733,758,7.609,759,6.786]],["title/algo/analysis/graph-coloring/#chromatic-number",[13,1.784,760,4.798]],["text/algo/analysis/graph-coloring/#chromatic-number",[13,3.286,84,5.835,334,3.425,641,5.111,647,6.227,753,8.167,760,7.546,761,4.567]],["title/algo/analysis/graph-coloring/#applications",[762,3.439]],["text/algo/analysis/graph-coloring/#applications",[13,2.634,14,1.557,16,0.855,21,1.026,32,3.465,52,1.717,97,3.237,106,3.586,116,1.752,121,1.445,132,5.691,158,1.771,164,1.829,165,3.865,211,2.704,225,1.194,258,1.85,290,2.293,301,1.668,325,2.432,363,2.557,391,1.992,420,2.047,445,2.626,455,4.199,461,3.508,464,2.251,468,2.626,492,1.966,501,2.108,525,4.236,534,1.829,552,2.626,640,4.667,641,6.047,643,2.212,644,2.987,645,4.775,666,3.023,667,2.898,711,2.386,753,8.433,754,3.389,755,3.389,756,3.798,757,2.108,760,3.023,761,1.829,762,1.717,763,3.717,764,4.957,765,2.494,766,2.438,767,3.389,768,3.389,769,3.389,770,3.389,771,5.844,772,6.534,773,2.176,774,2.626,775,2.047,776,4.71,777,3.023,778,3.389,779,2.793,780,6.489,781,2.212,782,2.793,783,3.023,784,2.494,785,2.626,786,5.348,787,1.992,788,3.389,789,3.389,790,3.389,791,3.389,792,2.557,793,3.389,794,4.71,795,3.389,796,2.793,797,3.389,798,5.844,799,6.534,800,2.438,801,3.023,802,3.389,803,3.023,804,3.798,805,4.092,806,5.281,807,3.023,808,3.179,809,3.023,810,2.704,811,3.023,812,3.389,813,0.89,814,2.212]],["title/algo/analysis/graph-coloring/#greedy-aproach",[815,5.379,816,5.379]],["text/algo/analysis/graph-coloring/#greedy-aproach",[817,5.76]],["title/algo/analysis/intro/",[428,3.511,429,2.366]],["text/algo/analysis/intro/",[3,2.553,12,1.049,13,0.763,14,1.484,15,0.494,16,0.321,18,3.037,19,1.484,32,0.555,33,2.776,38,0.457,41,0.199,44,0.432,47,1.493,53,2.259,54,0.711,56,2.555,58,1.334,61,1.224,62,2.391,67,0.357,70,1.43,74,0.748,86,1.501,92,1.932,94,1.759,95,1.27,97,0.78,100,2.719,106,0.98,108,1.397,110,2.524,112,0.815,114,1.181,115,0.791,118,0.861,119,0.687,122,1.476,128,0.738,144,0.672,156,1.534,157,0.831,159,1.384,163,0.487,164,2.082,170,0.804,173,0.651,185,0.679,188,0.72,195,2.051,225,1.359,231,2.493,234,0.645,258,0.695,284,1.556,288,0.936,293,1.334,301,1.549,325,1.665,326,0.905,332,1.028,336,0.53,366,0.729,400,0.845,403,6.554,413,2.964,421,0.878,428,3.808,429,2.565,433,1.049,436,2.217,437,3.038,438,1.875,449,0.511,451,3.31,452,1.352,455,0.588,456,1.556,463,1.049,464,0.845,478,2.33,479,3.266,480,1.135,481,1.049,492,1.334,494,0.695,497,1.135,501,0.791,508,1.693,514,1.782,515,2.204,518,1.049,519,1.85,525,1.501,526,0.72,527,2.91,531,0.96,533,1.654,536,1.012,548,2.191,555,1.255,559,4.08,568,1.135,578,0.72,584,1.782,594,4.0,597,1.85,598,0.817,599,0.62,606,1.619,621,0.791,624,3.456,628,2.054,631,0.748,635,1.049,643,0.831,664,0.748,682,0.845,683,1.135,685,1.966,693,0.861,697,2.735,698,0.878,708,1.135,752,0.986,764,0.861,765,1.693,800,1.654,804,0.915,809,1.135,818,1.272,819,0.915,820,1.049,821,1.135,822,1.015,823,0.896,824,1.272,825,1.272,826,1.135,827,1.049,828,1.272,829,4.504,830,1.528,831,1.272,832,1.272,833,1.272,834,1.272,835,1.049,836,0.936,837,2.158,838,1.088,839,0.711,840,1.272,841,3.209,842,1.272,843,1.049,844,0.78,845,1.049,846,1.135,847,0.986,848,0.936,849,0.72,850,1.049,851,2.3,852,1.272,853,1.272,854,2.715,855,0.915,856,0.632,857,1.272,858,4.397,859,4.107,860,2.158,861,1.272,862,5.556,863,1.272,864,1.272,865,2.051,866,0.896,867,1.966,868,1.015,869,2.158,870,1.135,871,1.135,872,1.049,873,1.272,874,4.654,875,1.272,876,1.966,877,4.023,878,1.049,879,5.791,880,3.441,881,2.374,882,1.272,883,1.272,884,1.272,885,1.272,886,2.158,887,4.783,888,2.3,889,2.3,890,2.3,891,2.158,892,1.135,893,1.272,894,3.619,895,2.3,896,4.983,897,0.769,898,1.272,899,2.3,900,1.272,901,4.983,902,3.858,903,3.147,904,1.272,905,1.272,906,1.272,907,0.896,908,1.272,909,2.3,910,1.896,911,1.255,912,3.298,913,2.158,914,1.272,915,1.272,916,1.272,917,3.619,918,1.272,919,1.272,920,1.272,921,1.272,922,2.158,923,2.158,924,0.738,925,3.619,926,1.966,927,1.135,928,0.769,929,4.186,930,2.952,931,1.272,932,1.272,933,1.272,934,0.878,935,4.674,936,1.015,937,1.272,938,1.272,939,1.272,940,1.272,941,1.272,942,1.272]],["title/algo/analysis/intro/#algorithm-analysis",[428,3.511,429,2.366]],["text/algo/analysis/intro/#algorithm-analysis",[]],["title/algo/analysis/intro/#why",[]],["text/algo/analysis/intro/#why",[67,2.184,74,4.57,128,4.511,156,3.791,497,6.935,519,5.959,643,5.076,809,6.935,818,7.776,819,5.593,820,6.409,821,6.935,822,6.204,823,5.474,824,7.776,825,7.776,826,6.935,827,6.409,828,7.776]],["title/algo/analysis/intro/#why-not-just-run-it-see-running-time",[56,3.304,170,2.401,325,1.164]],["text/algo/analysis/intro/#why-not-just-run-it-see-running-time",[14,2.208,53,1.855,56,4.723,86,5.384,100,2.934,110,5.203,114,2.363,163,2.411,164,5.268,173,3.222,284,5.58,325,2.525,336,2.623,428,6.005,429,2.768,433,5.188,451,4.182,452,3.543,456,4.259,463,5.188,533,4.527,555,3.436,559,4.502,597,3.699,599,3.069,606,4.431,693,4.259,829,6.484,830,4.182,831,6.295,832,6.295,833,6.295,834,6.295,835,5.188,836,4.633]],["title/algo/analysis/intro/#worst-case",[436,2.673,437,2.132]],["text/algo/analysis/intro/#worst-case",[14,2.098,56,5.006,122,5.611,478,5.28,479,4.615,481,7.204]],["title/algo/analysis/intro/#average-case-rarely",[413,2.959,437,1.765,837,4.179]],["text/algo/analysis/intro/#average-case-rarely",[38,2.73,58,5.394,108,2.382,114,2.856,119,4.107,293,4.413,325,2.33,326,2.994,413,5.054,421,5.248,437,4.146,452,3.268,455,3.516,597,4.472,598,4.884,635,6.271,800,5.472,838,6.505,839,4.251,840,7.609]],["title/algo/analysis/intro/#best-case-analysis-bogus",[428,2.481,437,1.506,841,2.734,842,3.801]],["text/algo/analysis/intro/#best-case-analysis-bogus",[843,7.515]],["title/algo/analysis/intro/#why-not-average",[413,4.509]],["text/algo/analysis/intro/#why-not-average",[14,1.197,32,2.176,100,3.281,106,3.001,108,2.775,110,3.981,112,2.495,115,3.103,118,3.375,122,3.202,144,2.634,159,2.194,234,2.527,258,2.723,288,3.671,293,2.893,325,1.527,413,4.676,428,5.325,429,3.897,436,4.403,437,4.034,449,2.005,456,3.375,464,3.314,501,3.103,508,5.181,514,3.865,515,3.766,536,3.096,548,2.194,555,2.723,559,2.723,584,3.865,606,3.511,621,3.103,631,2.932,682,3.314,800,3.587,804,3.587,829,4.676,830,3.314,837,4.679,841,6.373,844,3.057,845,4.111,846,4.449,847,3.865,848,3.671,849,2.821,850,4.111,851,7.039,852,4.988,853,4.988,854,6.237,855,3.587,856,2.478,857,4.988]],["title/algo/analysis/intro/#notations",[858,4.593]],["text/algo/analysis/intro/#notations",[12,5.315,18,3.603,19,1.548,47,3.059,53,2.469,54,3.603,61,0.882,62,4.093,95,3.561,114,2.421,156,3.144,188,3.647,225,2.271,231,3.603,366,3.693,403,5.469,479,3.405,526,3.647,533,4.638,548,2.836,559,4.573,568,5.751,578,3.647,697,3.952,752,4.996,829,4.284,858,5.668,859,5.315,860,6.049,861,6.448,862,7.956,863,6.448,864,6.448,865,7.472,866,4.539,867,5.513,868,5.145,869,6.049,870,5.751,871,5.751]],["title/algo/analysis/intro/#why-drop",[869,6.368]],["text/algo/analysis/intro/#why-drop",[14,1.442,18,4.469,19,1.919,41,0.942,47,3.794,53,2.357,61,1.094,62,4.215,92,3.462,95,3.318,156,2.929,225,2.116,231,4.469,325,1.84,403,5.221,429,2.643,438,3.579,451,3.991,478,3.63,479,4.747,514,4.656,515,2.271,518,4.952,559,4.366,597,3.531,697,4.901,829,3.991,858,5.411,860,5.637,862,8.194,872,4.952,873,6.009,874,4.794,875,6.009,876,6.838,877,4.144,878,4.952,879,6.197,880,5.359,881,4.533]],["title/algo/analysis/intro/#properties",[624,3.793]],["text/algo/analysis/intro/#properties",[]],["title/algo/analysis/intro/#general-properties",[624,3.006,664,3.161]],["text/algo/analysis/intro/#general-properties",[94,5.684,403,7.061,559,5.552,859,7.802,874,7.552,879,7.334,880,8.442,882,7.834]],["title/algo/analysis/intro/#reflexive-properties",[624,3.006,883,5.379]],["text/algo/analysis/intro/#reflexive-properties",[301,5.121,403,7.263,879,6.402,884,8.263,885,8.263,886,7.751]],["title/algo/analysis/intro/#transitive-properties",[624,3.006,683,4.798]],["text/algo/analysis/intro/#transitive-properties",[61,1.365,403,7.101,628,6.017,859,6.182,874,5.984,879,7.733,880,6.689,887,7.345,888,9.218,889,9.218,890,9.218]],["title/algo/analysis/intro/#symmetric-properties",[624,3.006,891,5.046]],["text/algo/analysis/intro/#symmetric-properties",[403,5.568,624,4.766,628,5.568,685,7.292,708,7.607,858,5.77,859,7.03,887,6.277,892,7.607]],["title/algo/analysis/intro/#transpose-symmetric-properties",[624,2.489,891,4.179,893,4.455]],["text/algo/analysis/intro/#transpose-symmetric-properties",[403,5.523,624,4.728,685,7.233,858,5.724,874,6.751,877,5.835,879,7.678,886,7.937,887,6.227]],["title/algo/analysis/intro/#some-more-properties",[494,2.936,624,3.006]],["text/algo/analysis/intro/#some-more-properties",[53,2.579,61,1.47,70,2.305,100,4.079,159,3.035,185,2.589,325,1.485,326,1.909,332,3.085,403,6.807,429,2.133,438,2.89,451,4.585,478,2.93,479,3.644,492,4.003,594,5.079,698,3.346,859,3.998,874,5.506,877,6.036,881,5.206,887,3.57,894,4.551,895,6.902,896,9.61,897,2.93,898,4.851,899,6.902,900,4.851,901,9.61,902,8.751,903,8.034,904,4.851,905,4.851,906,4.851,907,3.414,908,4.851,909,6.902,910,5.688,911,3.767,912,5.9]],["title/algo/analysis/intro/#little-asymptotic-notation",[594,2.798,829,2.525,858,2.572,913,3.566]],["text/algo/analysis/intro/#little-asymptotic-notation",[13,1.754,14,1.269,15,1.135,18,4.097,19,2.182,33,4.561,44,1.796,53,2.679,61,1.306,70,2.104,92,2.289,97,3.24,195,6.539,225,1.862,231,2.955,403,6.232,451,3.512,478,3.194,479,2.792,525,3.452,527,5.531,531,3.989,548,3.225,559,4.002,584,4.097,594,5.396,697,3.24,765,5.396,862,4.52,874,4.219,877,5.057,887,3.891,913,4.96,914,5.288,915,5.288,916,5.288,917,4.96,918,5.288,919,5.288,920,5.288,921,5.288,922,4.96,923,4.96,924,3.067,925,6.878,926,4.52,927,4.716,928,3.194,929,8.527,930,6.878,931,5.288,932,5.288,933,5.288,934,3.647,935,4.96,936,4.219]],["title/algo/analysis/intro/#little-asymptotic-notation_1",[594,2.798,829,2.525,858,2.572,879,2.945]],["text/algo/analysis/intro/#little-asymptotic-notation_1",[13,1.798,14,1.791,15,1.164,16,1.368,18,4.169,19,1.791,33,5.306,53,2.199,61,0.742,70,1.556,92,3.23,100,2.528,157,3.54,225,1.91,231,3.03,400,3.602,403,6.5,438,3.231,451,3.602,479,2.864,480,4.837,525,3.54,527,5.629,548,3.282,559,4.073,594,3.991,697,3.323,764,3.669,829,3.602,858,3.669,862,6.379,867,4.636,879,6.61,887,6.278,894,8.002,912,6.379,917,8.002,922,5.087,923,5.087,925,7.0,926,4.636,929,5.087,930,5.087,935,9.038,937,5.423,938,5.423,939,5.423,940,5.423,941,5.423,942,5.423]],["title/algo/analysis/lower-upper-bound-theory/",[438,2.264,478,2.296,479,2.007,943,2.945]],["text/algo/analysis/lower-upper-bound-theory/",[2,1.242,3,1.535,13,1.022,14,0.54,15,1.438,16,0.778,19,0.74,21,0.681,32,0.981,38,1.573,39,0.412,41,0.687,42,1.042,45,0.7,47,0.589,51,2.048,53,2.775,54,1.256,55,0.711,56,1.288,57,3.213,58,0.72,61,0.518,62,0.546,69,0.506,70,0.645,74,0.729,86,3.983,87,1.113,88,0.913,92,1.898,103,1.022,105,0.485,106,1.614,108,0.389,110,2.48,112,2.374,113,1.696,115,1.918,116,0.642,117,0.662,121,0.959,128,0.72,132,2.561,144,0.655,154,0.702,155,0.913,156,1.846,157,1.468,158,1.611,159,2.684,163,1.877,173,1.151,178,1.611,179,2.389,188,1.272,198,0.772,209,1.766,225,0.437,231,1.723,258,2.066,274,1.999,284,1.521,285,0.874,286,1.03,293,0.72,294,1.468,298,2.217,305,1.764,325,1.343,326,2.736,332,0.555,334,1.775,336,0.517,352,2.326,358,1.551,391,3.146,400,0.824,429,3.726,431,0.913,436,1.117,437,1.943,438,5.294,442,1.378,443,0.962,448,1.583,451,1.494,452,2.987,455,2.965,459,0.893,475,1.862,476,0.856,477,1.853,478,3.876,479,4.972,486,0.693,491,1.948,505,0.913,512,0.797,515,1.852,531,4.603,536,0.546,548,1.356,555,0.677,559,1.227,567,0.962,576,0.739,577,2.515,578,0.702,597,1.322,599,0.605,600,0.67,601,1.853,602,3.024,603,3.629,607,2.862,611,1.107,622,0.936,631,2.225,642,2.026,644,0.702,675,1.948,679,0.962,682,1.494,692,1.023,693,0.84,697,1.378,698,2.126,707,1.023,724,2.75,761,0.67,766,1.617,775,1.358,781,0.81,787,1.812,796,1.023,804,1.617,813,0.994,829,1.494,841,0.893,846,1.107,847,1.742,849,0.702,850,1.023,855,0.893,858,1.521,866,1.583,876,1.922,887,1.655,897,0.75,907,0.874,912,1.922,924,1.304,927,1.107,928,0.75,943,4.728,944,4.599,945,2.109,946,2.109,947,3.551,948,1.241,949,1.241,950,1.794,951,0.856,952,0.913,953,0.99,954,1.107,955,1.241,956,1.241,957,2.109,958,1.241,959,1.583,960,1.107,961,1.107,962,1.241,963,1.241,964,1.061,965,3.083,966,1.107,967,1.601,968,1.241,969,1.241,970,0.874,971,1.023,972,1.241,973,1.107,974,1.048,975,1.151,976,0.99,977,1.107,978,2.249,979,2.249,980,1.241,981,1.023,982,2.005,983,3.785,984,1.241,985,1.107,986,1.241,987,1.241,988,1.241,989,1.468,990,1.494,991,0.824,992,1.023,993,1.023,994,3.12,995,1.241,996,2.249,997,1.241,998,1.241,999,1.241,1000,1.241,1001,2.249,1002,1.023,1003,0.856,1004,2.005,1005,1.241,1006,1.241,1007,3.785,1008,3.083,1009,2.086,1010,1.241,1011,1.241,1012,1.241,1013,1.241,1014,3.785,1015,1.241,1016,1.241,1017,1.241,1018,1.241,1019,1.241,1020,1.241,1021,1.241,1022,1.241,1023,1.107,1024,1.107,1025,2.933,1026,1.241,1027,2.249,1028,2.249,1029,2.249,1030,2.249,1031,1.241,1032,1.241,1033,3.785,1034,1.241,1035,1.241,1036,2.249,1037,1.241,1038,1.853,1039,3.45,1040,1.241,1041,1.241,1042,2.005,1043,1.107,1044,2.005,1045,0.99,1046,1.241,1047,1.241,1048,1.241,1049,1.241,1050,2.249,1051,3.083,1052,1.241,1053,1.241,1054,1.241,1055,1.241,1056,1.241,1057,1.241,1058,1.241,1059,1.241,1060,1.241,1061,1.241]],["title/algo/analysis/lower-upper-bound-theory/#lower-and-upper-bound-theory",[438,2.264,478,2.296,479,2.007,943,2.945]],["text/algo/analysis/lower-upper-bound-theory/#lower-and-upper-bound-theory",[]],["title/algo/analysis/lower-upper-bound-theory/#lower-bound",[438,3.204,479,2.84]],["text/algo/analysis/lower-upper-bound-theory/#lower-bound",[14,1.75,32,3.182,47,3.46,53,2.905,56,4.177,92,3.157,231,4.076,325,2.233,334,2.952,429,3.985,438,5.397,451,4.845,479,4.784,559,3.981,697,4.47,829,4.845,858,4.934,876,6.236,887,5.368,912,7.746,944,8.499,945,6.842,946,6.842]],["title/algo/analysis/lower-upper-bound-theory/#upper-bound",[478,3.249,479,2.84]],["text/algo/analysis/lower-upper-bound-theory/#upper-bound",[14,1.75,32,3.182,53,2.905,56,4.177,62,3.208,92,3.157,231,4.076,325,2.233,334,2.952,429,3.985,451,4.845,478,5.473,479,4.784,559,3.981,697,4.47,829,4.845,858,4.934,876,6.236,887,5.368,945,6.842,946,6.842,947,8.499,948,7.294,949,7.294]],["title/algo/analysis/lower-upper-bound-theory/#lower-bound-theory",[438,2.654,479,2.352,943,3.452]],["text/algo/analysis/lower-upper-bound-theory/#lower-bound-theory",[2,4.194,106,3.238,110,3.148,113,4.199,121,2.373,144,2.939,158,2.908,159,2.448,325,2.326,326,3.403,358,3.839,391,5.082,429,4.717,431,4.096,436,2.765,437,2.206,438,5.792,443,4.313,455,2.572,478,3.362,479,5.299,486,3.11,491,3.516,505,4.096,512,3.573,515,2.103,548,2.448,577,3.697,631,3.271,642,2.572,644,3.148,682,5.046,766,5.463,849,3.148,924,3.228,927,4.964,943,4.313,944,8.715,950,4.441,951,3.839,952,4.096,953,4.441,954,4.964,955,5.566,956,5.566]],["title/algo/analysis/lower-upper-bound-theory/#trivial-lower-bound",[438,2.654,479,2.352,957,4.179]],["text/algo/analysis/lower-upper-bound-theory/#trivial-lower-bound",[13,1.242,15,1.606,16,0.945,19,0.899,21,0.844,38,1.853,39,0.511,41,0.809,42,1.212,45,0.825,51,2.488,53,2.812,54,1.558,55,0.904,57,3.667,58,0.915,61,0.618,69,0.643,70,0.8,74,0.927,86,4.51,87,1.353,88,1.161,92,1.622,103,1.267,105,0.617,106,1.189,108,0.494,110,2.118,112,2.652,113,1.19,115,2.33,116,0.816,117,0.842,121,0.673,128,0.915,132,3.059,154,0.893,155,1.161,156,2.205,157,1.82,158,1.457,159,2.886,163,2.184,173,1.427,178,1.957,179,2.902,188,1.577,198,0.982,209,2.145,225,0.556,231,0.882,258,2.468,274,2.388,284,1.886,285,1.111,286,1.278,293,0.915,294,1.03,298,2.694,305,2.108,325,0.483,326,2.719,332,0.705,334,1.516,336,0.658,352,2.826,358,1.088,391,2.658,400,1.048,429,2.271,436,0.784,437,1.792,438,4.846,442,1.709,448,1.865,452,3.318,455,2.849,459,1.135,475,2.263,476,1.088,477,2.298,478,0.953,479,4.192,491,1.761,515,1.951,531,5.211,536,0.694,548,1.226,567,1.223,576,0.94,577,2.488,578,0.893,597,1.639,599,0.769,600,0.852,601,2.298,602,3.562,603,3.711,607,3.371,611,1.407,631,2.201,642,2.09,675,2.366,679,1.223,692,1.301,693,1.068,698,2.583,707,1.301,724,3.341,761,0.852,775,1.684,781,1.03,787,2.201,796,1.301,804,1.135,813,1.188,841,1.135,846,1.407,847,2.16,850,1.301,855,1.135,866,1.963,897,0.953,907,1.111,924,0.915,928,0.953,943,3.504,957,1.48,958,1.578,959,1.963,960,1.407,961,1.407,962,1.578,963,1.578,964,1.349,965,3.746,966,1.407,967,1.913,968,1.578,969,1.578,970,1.111,971,1.301,972,1.578,973,1.407,974,1.3,975,1.427,976,1.259,977,1.407,978,2.788,979,2.788,980,1.578,981,1.301,982,2.487,983,4.522,984,1.578,985,1.407,986,1.578,987,1.578,988,1.578,989,1.82,990,1.852,991,1.048,992,1.301,993,1.301,994,3.727,995,1.578,996,2.788,997,1.578,998,1.578,999,1.578,1000,1.578,1001,2.788,1002,1.301,1003,1.088,1004,2.487,1005,1.578,1006,1.578,1007,4.522,1008,3.746,1009,2.534,1010,1.578,1011,1.578,1012,1.578,1013,1.578,1014,4.522,1015,1.578,1016,1.578,1017,1.578,1018,1.578,1019,1.578,1020,1.578,1021,1.578,1022,1.578,1023,1.407,1024,1.407,1025,3.504,1026,1.578,1027,2.788,1028,2.788,1029,2.788,1030,2.788,1031,1.578,1032,1.578,1033,4.522,1034,1.578,1035,1.578,1036,2.788,1037,1.578,1038,2.298,1039,4.015,1040,1.578,1041,1.578,1042,2.487,1043,1.407,1044,2.487,1045,1.259,1046,1.578,1047,1.578,1048,1.578,1049,1.578,1050,2.788,1051,3.746,1052,1.578,1053,1.578,1054,1.578,1055,1.578,1056,1.578,1057,1.578,1058,1.578,1059,1.578]],["title/algo/analysis/lower-upper-bound-theory/#upper-bound-theory",[478,2.691,479,2.352,943,3.452]],["text/algo/analysis/lower-upper-bound-theory/#upper-bound-theory",[110,4.303,294,4.967,429,4.09,437,3.015,455,4.297,478,6.067,479,5.303,555,4.153,603,5.26,622,5.74,804,5.472,943,5.895,947,8.724,950,6.071,1060,7.609,1061,7.609]],["title/algo/analysis/master-theorum/",[1062,5.046,1063,5.046]],["text/algo/analysis/master-theorum/",[2,1.659,3,1.504,14,1.152,15,1.714,16,1.513,19,1.439,21,2.269,44,1.02,47,2.278,51,1.995,53,0.885,55,3.435,61,1.391,70,2.292,85,3.312,87,3.029,92,3.63,103,1.365,106,1.281,119,3.237,159,2.112,163,1.15,165,1.789,170,1.898,173,1.537,188,1.699,193,2.211,198,5.852,257,1.765,260,2.793,274,1.586,283,3.435,285,4.222,301,1.478,305,1.4,325,0.92,326,1.182,327,5.819,358,2.072,403,5.686,429,1.321,437,3.452,443,2.328,448,2.474,452,1.29,494,2.621,501,5.587,515,1.135,559,1.64,603,2.716,607,1.961,662,2.266,670,2.16,710,2.679,759,2.679,796,3.957,817,1.898,829,3.19,849,1.699,892,2.679,974,2.238,989,1.961,1062,2.818,1063,2.818,1064,7.169,1065,6.75,1066,5.128,1067,6.427,1068,7.867,1069,3.004,1070,3.004,1071,2.679,1072,2.818,1073,2.679,1074,3.004,1075,4.976,1076,3.249,1077,3.004,1078,3.004,1079,2.328,1080,3.004,1081,3.622,1082,3.004,1083,4.802,1084,2.679,1085,2.328,1086,3.004,1087,3.004,1088,2.679,1089,3.004,1090,3.004,1091,3.004,1092,3.004,1093,3.004,1094,3.004]],["title/algo/analysis/master-theorum/#masters-theorum",[1062,5.046,1063,5.046]],["text/algo/analysis/master-theorum/#masters-theorum",[14,1.956,15,1.749,44,2.1,47,2.934,53,1.823,55,3.542,61,1.464,70,1.774,85,4.265,87,2.944,92,3.948,119,4.922,173,3.165,188,3.498,198,3.847,327,6.124,403,6.328,437,2.451,670,4.448,759,5.516,892,5.516,974,3.8,1064,6.969,1065,6.316,1066,5.287,1067,8.555,1068,8.555,1069,6.184,1070,6.184]],["title/algo/analysis/master-theorum/#how-does-this-work",[198,4.222]],["text/algo/analysis/master-theorum/#how-does-this-work",[2,2.007,15,1.632,16,1.71,19,1.627,21,2.483,47,1.724,51,2.414,55,3.192,61,1.303,70,2.353,85,2.506,87,2.961,92,3.291,103,1.651,106,1.549,159,2.451,163,1.392,165,2.165,170,2.296,193,2.674,198,5.928,257,2.136,260,3.1,274,1.919,283,3.883,285,4.772,301,1.788,305,1.694,325,1.113,326,1.43,327,5.466,358,2.506,403,4.963,429,1.598,437,3.57,443,2.816,448,2.746,452,1.561,494,3.042,501,5.928,515,1.373,559,1.984,603,3.152,607,2.372,662,2.741,710,3.241,796,4.594,817,2.296,829,3.702,849,2.055,989,2.372,1064,7.01,1065,6.705,1066,4.765,1067,3.409,1068,7.132,1071,3.241,1072,3.409,1073,3.241,1074,3.634,1075,5.447,1076,3.771,1077,3.634,1078,3.634,1079,2.816,1080,3.634,1081,4.204,1082,3.634,1083,5.574,1084,3.241,1085,2.816,1086,3.634,1087,3.634,1088,3.241,1089,3.634,1090,3.634,1091,3.634,1092,3.634,1093,3.634,1094,3.634]],["title/algo/analysis/pseudo-polynomial/",[607,3.511,1095,4.434]],["text/algo/analysis/pseudo-polynomial/",[3,2.126,13,2.631,15,1.457,16,1.196,18,2.65,19,1.138,50,2.865,55,4.96,58,2.751,77,2.21,108,2.712,110,4.487,112,2.407,114,3.58,159,2.987,209,2.716,234,2.403,258,2.588,286,2.173,325,3.007,326,2.672,333,3.991,334,2.749,429,4.032,436,2.356,437,1.879,443,5.262,454,3.15,455,4.003,476,3.271,603,2.682,607,6.676,608,6.23,610,3.908,617,5.232,642,3.138,771,4.998,775,2.865,830,3.15,924,4.601,950,3.783,1095,8.28,1096,4.229,1097,4.448,1098,4.742,1099,4.229,1100,4.742]],["title/algo/analysis/pseudo-polynomial/#pseudo-polynomial",[607,3.511,1095,4.434]],["text/algo/analysis/pseudo-polynomial/#pseudo-polynomial",[13,2.932,15,1.247,18,3.247,50,3.51,55,4.479,77,2.708,108,2.961,110,5.0,112,2.772,114,3.816,159,2.555,209,3.328,234,2.944,286,2.662,325,3.022,326,3.078,333,4.596,334,2.352,429,4.159,436,2.887,437,2.303,443,6.059,455,2.685,476,4.008,607,6.172,642,3.614,771,5.755,775,3.51,830,3.86,924,5.127,950,4.636,1095,7.286,1096,5.182,1097,5.451]],["title/algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness",[607,2.481,608,2.734,617,2.296,1095,3.133]],["text/algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness",[15,1.534,16,1.802,19,1.715,55,5.123,58,4.145,159,3.143,258,3.901,325,2.739,334,2.893,429,3.143,454,4.747,455,4.513,603,4.042,607,6.374,608,7.023,610,5.889,617,5.899,1095,8.048,1098,7.146,1099,6.373,1100,7.146]],["title/algo/analysis/recursive/",[83,3.084]],["text/algo/analysis/recursive/",[3,1.878,16,1.211,53,2.354,55,2.75,58,4.345,61,1.191,62,2.638,70,2.699,72,3.863,75,2.211,83,3.113,87,2.166,114,1.802,116,1.553,119,3.237,122,3.082,156,2.341,157,3.915,159,2.112,179,2.328,198,1.869,225,1.691,233,1.961,274,4.428,292,2.032,294,1.961,301,1.478,325,2.098,326,2.36,327,5.298,333,2.822,358,4.726,366,1.72,421,2.072,448,3.029,464,1.995,478,1.815,479,1.586,501,1.869,505,2.211,506,2.679,507,2.679,515,1.135,517,2.679,584,3.72,603,2.716,613,6.111,642,1.388,761,2.592,804,2.16,805,3.72,813,0.789,849,1.699,907,2.114,928,2.9,936,2.397,954,2.679,977,2.679,1065,6.959,1073,5.349,1081,4.525,1085,3.72,1101,4.105,1102,3.004,1103,4.802,1104,2.397,1105,2.679,1106,3.004,1107,6.852,1108,1.586,1109,3.004,1110,3.004,1111,2.114,1112,1.553,1113,4.105,1114,4.802,1115,6.111,1116,6.852,1117,6.852,1118,6.249,1119,4.802,1120,3.19,1121,3.004,1122,5.998,1123,4.802,1124,3.004,1125,4.802,1126,3.004,1127,4.802,1128,3.004,1129,3.004,1130,3.004,1131,3.004,1132,3.004,1133,3.004,1134,3.004,1135,3.004,1136,2.328,1137,3.004,1138,3.004]],["title/algo/analysis/recursive/#recursive",[83,3.084]],["text/algo/analysis/recursive/#recursive",[61,0.977,70,2.05,83,4.064,122,4.587,225,3.151,325,2.99,326,3.843,327,4.514,358,6.169,505,5.259,506,6.373,507,6.373,515,2.7,517,6.373,584,5.537,603,5.059,849,4.042,907,5.03,928,4.317,954,6.373,1065,7.566,1081,5.39,1101,6.109]],["title/algo/analysis/recursive/#substitution-method",[87,1.943,1102,5.379]],["text/algo/analysis/recursive/#substitution-method",[16,2.033,53,3.034,55,4.615,61,1.37,62,3.976,70,2.874,114,2.282,116,3.142,157,5.902,159,2.673,179,4.709,233,3.967,327,6.082,333,3.572,421,4.192,584,4.709,613,8.587,761,3.28,1065,4.709,1081,6.079,1101,5.196,1103,8.059,1104,4.849,1105,5.42,1106,6.078,1107,9.628,1108,3.209,1109,6.078,1110,6.078]],["title/algo/analysis/recursive/#recurrence-tree-method",[87,1.609,448,1.609,1065,3.452]],["text/algo/analysis/recursive/#recurrence-tree-method",[58,5.071,61,0.852,70,2.508,72,4.207,75,3.101,83,1.914,87,1.521,114,1.582,119,4.002,122,2.705,156,3.038,159,1.853,198,2.621,274,5.0,292,2.85,294,2.75,301,2.073,325,1.29,327,3.936,333,2.476,358,4.297,366,2.413,448,3.305,464,2.799,478,2.545,479,2.225,501,2.621,642,1.947,761,2.274,804,3.03,805,4.828,813,1.106,928,2.545,936,3.361,977,3.757,1065,6.347,1073,6.612,1085,4.828,1111,2.965,1112,2.178,1113,5.327,1114,6.231,1115,7.306,1116,8.192,1117,8.192,1118,6.805,1119,6.231,1120,4.139,1121,4.213,1122,7.414,1123,6.231,1124,4.213,1125,6.231,1126,4.213,1127,6.231,1128,4.213,1129,4.213,1130,4.213,1131,4.213,1132,4.213,1133,4.213,1134,4.213,1135,4.213,1136,3.264,1137,4.213,1138,4.213]],["title/algo/analysis/space/",[331,2.451]],["text/algo/analysis/space/",[3,2.799,16,2.406,51,3.947,110,4.49,117,3.171,159,2.613,230,4.603,326,3.755,330,3.539,331,4.027,332,3.548,336,2.476,350,2.655,429,4.196,449,2.388,515,3.757,535,3.753,631,3.492,634,4.897,804,4.273,839,3.32,849,3.36,961,5.299,1079,4.603,1139,5.694,1140,5.299,1141,5.299,1142,5.941,1143,3.402]],["title/algo/analysis/space/#space",[331,2.451]],["text/algo/analysis/space/#space",[]],["title/algo/analysis/space/#auxiliary-space",[331,1.943,1139,3.081]],["text/algo/analysis/space/#auxiliary-space",[16,2.223,330,5.25,331,3.183,429,3.876,1140,7.86]],["title/algo/analysis/space/#space-complexity",[326,2.117,331,1.943]],["text/algo/analysis/space/#space-complexity",[16,2.34,51,4.258,110,4.72,117,3.421,159,2.819,230,4.966,326,3.652,331,3.974,332,3.73,336,2.671,350,2.865,429,4.081,449,2.576,515,3.851,535,4.049,631,3.767,634,5.282,804,4.61,839,3.581,849,3.625,961,5.716,1079,4.966,1139,5.629,1141,5.716,1142,6.409,1143,3.67]],["title/algo/dac/intro/",[81,2.959,293,2.584,1144,3.973]],["text/algo/dac/intro/",[3,2.941,41,0.896,45,0.913,55,3.274,61,1.342,70,2.219,81,3.797,83,2.597,92,3.348,105,3.671,173,2.926,182,3.503,293,5.085,298,4.111,315,5.419,327,3.611,334,2.314,356,3.867,455,4.675,509,4.111,603,4.375,642,2.642,1081,4.312,1085,5.993,1144,6.898,1145,6.611,1146,5.098,1147,8.766,1148,5.716,1149,5.716,1150,5.716,1151,7.735,1152,4.561,1153,5.716,1154,5.716,1155,7.735,1156,5.716]],["title/algo/dac/intro/#divide-conquer",[293,2.584,1144,3.973,1157,4.874]],["text/algo/dac/intro/#divide-conquer",[]],["title/algo/dac/intro/#divide",[293,3.937]],["text/algo/dac/intro/#divide",[293,5.112,455,4.689,509,6.339,1145,6.204]],["title/algo/dac/intro/#conquer",[1144,6.054]],["text/algo/dac/intro/#conquer",[83,3.907,334,3.481,455,4.623,603,4.863,1145,7.041,1146,7.669]],["title/algo/dac/intro/#combine",[298,4.882]],["text/algo/dac/intro/#combine",[41,1.023,45,1.043,55,3.738,61,1.402,70,2.423,92,3.656,105,3.869,173,3.341,182,4.001,315,5.661,327,4.124,356,4.417,455,3.903,603,3.692,642,3.017,1081,4.924,1085,6.543,1145,4.595,1147,9.361,1148,6.528,1149,6.528,1150,6.528,1151,8.445,1152,5.208,1153,6.528,1154,6.528,1155,8.445,1156,6.528]],["title/algo/search/exponential/",[329,4.996]],["text/algo/search/exponential/",[3,1.356,14,0.634,15,1.897,16,0.667,19,0.634,21,1.925,32,1.153,38,3.376,39,1.621,41,0.862,42,1.764,44,1.47,45,0.878,46,2.358,47,1.254,50,2.615,53,2.067,61,1.209,62,1.163,67,1.545,69,2.592,70,2.382,72,2.258,77,1.232,83,1.967,85,1.823,86,5.192,88,1.945,93,1.211,100,1.232,108,1.356,110,1.495,111,2.131,112,2.67,114,2.064,119,2.337,121,1.127,122,1.697,156,1.289,163,2.885,165,1.575,178,2.262,256,1.861,286,1.211,287,1.575,288,1.945,293,1.533,325,1.684,326,1.704,327,2.735,329,1.945,331,0.955,336,2.292,350,2.458,366,1.514,410,3.355,436,3.485,437,2.78,452,4.103,456,2.929,476,1.823,494,3.002,515,0.999,578,2.449,598,3.53,615,3.596,628,2.826,631,1.554,642,2.938,662,1.994,774,4.261,805,2.048,849,1.495,907,1.861,951,1.823,1085,2.048,1112,1.367,1136,2.048,1146,2.358,1158,3.266,1159,2.644,1160,2.358,1161,1.756,1162,3.861,1163,2.391,1164,1.697,1165,2.644,1166,2.644,1167,1.861,1168,2.644,1169,2.644,1170,2.048,1171,2.644,1172,2.358,1173,2.644,1174,2.644,1175,3.568,1176,6.256,1177,2.644,1178,2.644,1179,2.644,1180,2.644,1181,2.644,1182,2.644,1183,4.33,1184,3.861,1185,4.33,1186,2.358,1187,2.644,1188,4.659,1189,6.357,1190,4.33,1191,5.499,1192,4.33,1193,4.33,1194,5.499,1195,2.644,1196,2.644]],["title/algo/search/exponential/#exponential-search",[329,3.959,452,2.311]],["text/algo/search/exponential/#exponential-search",[15,1.728,16,1.229,19,1.17,21,1.476,38,3.324,39,1.608,41,0.764,42,1.472,44,1.655,45,0.778,53,2.73,61,0.947,62,2.143,67,1.369,69,3.575,72,2.001,77,2.272,88,3.586,93,2.233,108,1.526,111,2.398,112,3.411,114,1.829,122,3.128,156,2.376,163,1.866,165,2.903,178,2.546,256,3.43,286,2.233,287,2.903,325,1.492,331,1.76,336,3.357,350,2.178,452,3.46,456,4.685,578,3.916,598,5.17,631,2.864,642,4.053,774,6.24,951,3.361,1112,2.52,1136,3.776,1146,4.346,1158,5.223,1159,4.873,1160,4.346,1161,3.237,1162,6.175,1163,3.824,1164,3.128,1165,4.873,1166,4.873,1167,3.43,1168,4.873,1169,4.873,1170,3.776,1171,4.873,1172,4.346,1173,4.873,1174,4.873]],["title/algo/search/exponential/#ternery-search",[46,4.798,452,2.311]],["text/algo/search/exponential/#ternery-search",[14,0.869,15,1.931,21,2.049,32,1.58,38,3.332,39,1.585,41,0.871,42,1.837,44,1.23,45,0.888,47,1.718,50,3.358,61,1.27,67,1.562,70,2.664,72,2.283,83,2.526,85,2.498,86,5.873,100,1.688,108,1.134,110,2.048,111,1.782,114,2.087,119,3.0,121,1.544,163,3.135,178,1.892,288,2.665,293,2.101,325,1.702,326,2.188,327,3.512,350,2.485,366,2.074,410,4.307,436,4.068,437,3.245,452,4.09,476,2.498,494,3.693,515,1.368,615,4.292,628,3.629,662,2.732,805,2.806,849,2.048,907,2.549,1085,2.806,1175,4.582,1176,7.302,1177,3.621,1178,3.621,1179,3.621,1180,3.621,1181,3.621,1182,3.621,1183,5.559,1184,4.958,1185,5.559,1186,3.23,1187,3.621,1188,5.439,1189,7.589,1190,5.559,1191,6.766,1192,5.559,1193,5.559,1194,6.766,1195,3.621,1196,3.621]],["title/algo/search/interpolation/",[1197,6.054]],["text/algo/search/interpolation/",[3,2.244,14,1.72,15,1.923,19,0.781,38,3.707,39,1.73,41,1.221,42,1.905,44,1.737,45,1.244,47,2.427,53,1.863,61,1.183,62,3.151,67,2.013,69,2.577,70,2.235,72,2.596,77,1.517,86,3.339,93,3.283,100,2.384,108,1.019,111,2.517,114,1.221,116,1.682,137,2.902,163,1.959,185,3.825,234,1.649,267,2.521,287,1.938,325,0.996,329,2.394,331,1.175,332,1.454,350,1.454,351,2.244,436,2.542,437,2.027,441,1.025,452,1.398,457,2.29,475,1.965,515,1.229,626,1.965,675,3.231,693,2.201,773,2.089,800,4.546,838,4.373,877,2.244,975,1.665,1096,2.902,1197,4.562,1198,2.521,1199,3.254,1200,7.775,1201,8.953,1202,2.902,1203,3.254,1204,5.637,1205,3.254,1206,4.799,1207,7.991,1208,4.799,1209,4.799,1210,3.254,1211,3.254,1212,4.799,1213,4.799,1214,5.115,1215,3.254,1216,6.321,1217,5.115,1218,3.254]],["title/algo/search/interpolation/#interpolation-search",[452,2.311,1197,4.798]],["text/algo/search/interpolation/#interpolation-search",[14,2.102,38,2.481,53,2.037,61,0.945,69,3.921,70,1.983,72,2.839,108,2.164,137,6.165,163,2.647,234,3.502,267,5.356,325,2.117,331,2.496,350,3.089,436,3.434,437,2.739,441,2.177,475,4.175,515,2.612,675,5.534,800,6.3,838,5.909,877,4.767,1198,5.356,1199,6.912,1200,5.697,1201,7.813,1202,6.165,1203,6.912,1204,6.165,1205,6.912]],["title/algo/search/interpolation/#iterative",[77,3.164]],["text/algo/search/interpolation/#iterative",[15,2.091,19,1.343,38,3.691,39,1.786,41,1.359,42,1.979,44,1.9,45,1.385,47,2.654,53,2.247,61,1.332,62,3.353,67,2.436,70,2.187,72,2.298,93,3.493,100,2.608,111,2.754,1200,7.673,1201,9.173,1204,4.99,1206,5.249,1207,8.303,1208,5.249,1209,5.249,1210,5.595,1211,5.595,1212,5.249,1213,5.249,1214,7.623]],["title/algo/search/interpolation/#reursive",[1215,6.788]],["text/algo/search/interpolation/#reursive",[14,1.372,15,1.881,38,3.827,39,1.8,41,1.212,42,1.997,44,1.941,45,1.236,47,2.712,61,0.782,62,3.402,67,1.606,70,2.219,72,2.348,93,3.544,100,2.665,111,2.813,185,5.014,287,3.405,351,3.943,1200,8.088,1201,8.752,1204,5.098,1206,5.362,1207,8.377,1208,5.362,1209,5.362,1212,5.362,1213,5.362,1216,8.766,1217,7.735]],["title/algo/search/interpolation/#interpolation-vs-binary",[163,1.706,626,2.691,1197,3.973]],["text/algo/search/interpolation/#interpolation-vs-binary",[14,1.923,86,6.263,114,3.008,116,4.143,329,5.896,332,3.581,436,3.981,437,3.175,457,5.639,693,5.421,773,5.143,800,5.762,838,6.85,975,4.101,1096,7.146,1218,8.012]],["title/algo/search/intro/",[452,2.916]],["text/algo/search/intro/",[3,2.091,5,2.55,7,1.163,8,1.532,10,2.54,14,1.946,15,1.949,16,0.525,18,4.194,19,1.472,21,1.403,22,1.856,23,2.55,36,1.123,38,2.91,39,1.804,41,1.309,42,1.724,44,1.204,45,1.334,47,0.987,48,2.922,53,1.045,55,1.192,56,2.652,61,1.261,62,1.559,67,1.876,69,1.888,70,2.773,72,1.902,77,1.653,83,1.611,92,0.901,94,1.163,107,1.336,108,2.452,111,3.019,112,1.938,115,1.295,133,0.573,144,1.872,156,1.729,159,0.915,163,1.358,168,1.223,198,1.295,203,1.044,228,3.483,229,3.772,234,1.055,256,2.496,258,1.935,267,1.613,276,0.954,284,1.408,325,1.675,326,0.819,331,0.752,332,2.07,336,1.478,350,1.585,356,4.151,392,1.497,433,1.716,436,1.034,437,0.825,444,1.532,445,1.613,452,2.635,453,2.675,455,1.639,515,0.787,534,3.311,555,1.136,578,1.177,597,2.084,600,1.914,615,4.586,677,1.856,711,1.465,728,1.532,779,2.922,839,1.163,841,1.497,854,1.465,866,1.465,870,4.131,872,1.716,982,1.856,1120,2.355,1139,1.192,1152,5.686,1161,4.075,1163,1.149,1172,3.162,1188,4.986,1219,3.546,1220,1.856,1221,2.081,1222,3.038,1223,0.979,1224,4.632,1225,2.081,1226,2.081,1227,3.546,1228,4.632,1229,2.081,1230,2.081,1231,2.081,1232,2.081,1233,1.613,1234,1.716,1235,2.081,1236,2.081,1237,2.081,1238,2.081,1239,2.081,1240,1.465,1241,2.081,1242,3.194,1243,3.546,1244,3.546,1245,2.081,1246,2.081,1247,2.081,1248,3.326,1249,3.546,1250,3.546]],["title/algo/search/intro/#searching",[452,2.916]],["text/algo/search/intro/#searching",[14,2.115,163,3.375,444,6.486,445,6.829,841,6.339]],["title/algo/search/intro/#linear-search",[452,2.311,597,3.161]],["text/algo/search/intro/#linear-search",[10,3.422,14,0.965,15,2.002,18,5.359,19,1.731,38,2.16,39,1.798,41,1.343,42,1.279,44,1.365,45,1.369,53,1.773,56,2.303,61,1.312,62,1.768,67,2.249,70,2.978,94,2.247,108,2.258,111,2.962,112,2.837,133,1.106,203,2.017,228,4.289,229,4.974,267,3.115,276,1.842,325,1.231,326,1.582,332,3.223,350,1.797,436,1.998,437,1.593,452,1.727,597,2.363,1120,3.997,1161,5.694,1163,2.22,1219,6.018,1220,3.586,1221,4.021,1222,3.882,1223,1.891,1224,7.212,1225,4.021,1226,4.021,1227,6.018,1228,7.212,1229,4.021,1230,4.021]],["title/algo/search/intro/#binary-search",[163,2.06,452,2.311]],["text/algo/search/intro/#binary-search",[14,2.313,69,4.201,77,3.763,83,3.668,108,2.528,234,4.091,325,2.472,331,2.916,350,3.608,392,5.806,515,3.051,1139,4.623,1231,8.073]],["title/algo/search/intro/#problem-m-lr2-might-overflow",[61,0.402,356,1.989,455,1.358,1232,2.939,1233,2.277,1251,2.939]],["text/algo/search/intro/#problem-m-lr2-might-overflow",[5,4.807,7,2.592,8,3.413,14,2.058,15,1.434,16,1.17,19,1.604,21,1.405,22,4.136,23,4.807,36,2.503,39,1.437,41,1.047,42,1.421,45,1.068,48,5.508,55,2.656,56,3.827,61,1.072,70,2.248,72,1.905,92,2.008,107,2.977,108,2.846,111,2.283,115,2.885,144,3.529,156,3.258,159,2.04,168,2.726,198,2.885,229,3.199,256,4.704,258,3.648,284,3.138,325,2.047,336,2.785,433,3.823,452,1.992,453,5.042,455,2.143,534,4.905,555,2.532,578,2.623,600,3.607,677,4.136,711,3.265,728,3.413,779,5.508,839,2.592,854,3.265,866,3.265,870,6.988,872,3.823,982,4.136,1152,6.251,1234,3.823,1235,4.638,1236,4.638,1237,4.638,1238,4.638,1239,4.638,1240,3.265,1241,4.638,1242,5.404,1243,6.683,1244,6.683,1245,4.638,1246,4.638,1247,4.638]],["title/algo/search/intro/#recursive",[83,3.084]],["text/algo/search/intro/#recursive",[14,1.557,15,2.003,21,1.965,38,3.672,39,1.876,41,1.318,42,2.099,45,1.344,47,3.078,61,0.887,67,1.822,70,2.413,72,2.664,111,3.193,615,5.787,1152,7.879,1172,7.502,1188,6.56,1248,6.086,1249,8.412]],["title/algo/search/intro/#iterative",[77,3.164]],["text/algo/search/intro/#iterative",[15,2.027,21,2.014,38,3.39,39,1.891,41,1.34,42,1.817,44,2.259,45,1.365,61,1.292,62,2.925,67,1.868,70,2.452,72,2.732,111,3.273,356,6.744,615,5.832,1188,6.622,1248,6.24,1250,8.548]],["title/algo/search/jump/",[1252,6.054]],["text/algo/search/jump/",[3,1.485,14,2.289,15,1.967,19,1.138,38,3.29,39,1.681,41,1.243,42,1.841,44,2.941,45,1.267,47,2.25,53,2.702,61,1.185,63,3.15,67,1.908,69,3.234,70,1.361,84,3.271,108,1.485,111,2.334,112,1.681,163,1.816,234,2.403,325,1.452,331,1.713,332,2.119,336,1.976,350,2.119,356,4.594,391,2.787,452,3.721,460,5.584,515,1.792,519,2.787,535,2.996,597,2.787,642,2.191,675,2.996,877,3.271,951,3.271,1252,8.176,1253,4.742,1254,4.742,1255,4.742,1256,4.742,1257,4.742,1258,4.229,1259,2.102,1260,4.742,1261,6.791,1262,5.845,1263,4.742,1264,6.791,1265,4.742]],["title/algo/search/jump/#jump-search",[452,2.311,1252,4.798]],["text/algo/search/jump/#jump-search",[14,2.299,15,1.978,19,1.154,38,3.307,39,1.69,41,1.253,42,1.853,44,2.96,45,1.277,47,2.28,53,2.716,61,1.192,63,3.193,67,1.926,69,3.259,70,1.379,84,3.315,108,1.505,111,2.366,112,1.704,163,1.841,234,2.435,325,1.472,331,1.736,332,2.148,336,2.003,350,2.148,356,4.639,391,2.825,452,3.434,460,5.626,515,1.816,519,2.825,535,3.037,597,2.825,642,2.221,675,3.037,877,3.315,951,3.315,1252,7.773,1253,4.807,1254,4.807,1255,4.807,1256,4.807,1257,4.807,1258,4.287,1259,2.131,1260,4.807,1261,6.857,1262,5.872,1263,4.807,1264,6.857,1265,4.807]],["title/algo/sort/intro/",[515,2.033,516,4.168]],["text/algo/sort/intro/",[3,1.606,10,0.506,13,1.701,14,1.987,15,1.674,16,1.597,18,2.572,19,1.104,21,1.208,24,1.003,31,0.979,32,1.424,38,2.004,39,1.358,40,0.752,41,1.042,44,2.031,45,1.062,47,0.631,52,0.674,53,2.35,54,0.743,56,1.371,57,0.743,61,1.227,62,2.255,69,1.876,70,0.936,72,0.546,74,0.782,76,1.321,77,1.116,86,3.347,93,0.609,94,0.743,103,1.812,108,1.606,110,2.256,111,1.606,112,2.355,115,1.489,116,2.062,117,0.71,118,0.9,119,0.718,121,1.02,133,1.266,158,2.404,159,0.585,163,1.964,165,0.792,168,0.782,173,0.681,178,0.695,188,0.752,209,0.762,230,1.031,234,0.674,235,1.096,253,1.031,260,0.542,283,1.869,301,1.606,310,2.52,314,1.619,315,4.573,325,2.121,326,1.57,331,1.179,332,1.07,336,0.554,348,1.031,350,1.459,390,1.322,391,1.407,413,0.883,418,1.59,429,2.456,431,1.762,436,1.982,437,2.371,438,0.792,439,0.979,440,1.096,441,0.419,448,1.662,449,2.885,451,0.883,452,1.402,459,0.957,460,0.936,462,2.344,472,0.792,475,0.803,479,1.264,485,1.096,492,0.771,494,0.726,501,0.827,515,3.733,516,3.091,519,0.782,536,1.053,548,2.255,552,1.031,560,3.497,576,1.944,578,0.752,597,0.782,609,2.402,617,0.803,628,0.868,642,0.615,643,0.868,644,2.256,650,1.031,669,0.84,675,0.84,698,0.917,764,0.9,775,2.41,784,1.762,813,0.857,829,0.883,841,1.722,849,0.752,850,1.096,854,1.685,855,2.347,856,1.189,866,0.936,878,1.096,907,0.936,924,2.314,934,1.651,936,1.91,967,2.362,975,2.858,990,1.59,991,0.883,994,1.096,1003,0.917,1009,2.699,1075,1.59,1076,1.619,1104,1.91,1115,1.186,1139,1.371,1222,0.538,1242,0.917,1259,0.59,1266,1.096,1267,0.936,1268,4.384,1269,3.31,1270,2.394,1271,2.394,1272,1.33,1273,1.512,1274,2.394,1275,1.33,1276,2.246,1277,1.186,1278,1.186,1279,1.096,1280,3.264,1281,3.264,1282,1.146,1283,1.33,1284,3.264,1285,1.186,1286,2.246,1287,1.33,1288,1.33,1289,1.33,1290,1.33,1291,2.41,1292,1.33,1293,1.33,1294,1.33,1295,1.33,1296,1.33,1297,1.186,1298,2.246,1299,1.33,1300,1.33,1301,1.33,1302,1.248,1303,1.33,1304,1.33,1305,1.33,1306,1.33,1307,1.33,1308,2.046,1309,4.317,1310,1.186,1311,1.33,1312,1.33,1313,0.936,1314,1.137,1315,1.33,1316,1.33,1317,1.33,1318,1.186,1319,1.33,1320,1.33,1321,1.33,1322,1.186,1323,1.33,1324,2.394,1325,1.33,1326,1.33,1327,1.33,1328,1.33,1329,1.33,1330,2.046,1331,1.33,1332,1.33,1333,1.186,1334,1.33,1335,1.061,1336,1.096,1337,1.577,1338,0.84,1339,0.734,1340,0.734,1341,1.251,1342,2.135,1343,1.33,1344,1.33,1345,1.33,1346,1.33,1347,1.33,1348,1.33,1349,0.827,1350,3.264,1351,3.264,1352,1.806,1353,1.186,1354,1.33,1355,1.33,1356,1.33,1357,2.394,1358,2.394,1359,1.33,1360,1.186,1361,1.33,1362,1.33,1363,1.33,1364,1.33,1365,1.973]],["title/algo/sort/intro/#selection-sort",[515,2.033,516,4.168]],["text/algo/sort/intro/#selection-sort",[13,1.473,14,1.066,15,1.641,16,1.121,18,4.273,19,1.066,21,1.962,39,1.541,41,1.198,44,2.597,45,1.221,53,2.253,61,1.317,69,3.426,74,2.611,76,1.799,103,2.944,110,2.513,111,2.187,112,2.296,115,2.764,116,3.35,121,1.894,133,1.782,173,2.274,230,3.443,310,2.807,315,4.934,325,1.361,331,1.605,332,1.986,350,1.986,390,3.578,460,3.127,462,2.611,492,2.577,494,2.425,515,1.679,516,3.443,548,1.954,560,4.641,578,2.513,643,2.9,644,2.513,650,3.443,936,3.545,975,2.274,1266,3.662,1267,3.127,1268,6.537,1269,5.499,1270,6.479,1271,6.479,1272,4.443,1273,4.093,1274,6.479,1275,4.443,1276,4.168,1277,3.963,1278,3.963,1279,3.662,1280,7.646,1281,7.646,1282,3.101,1283,4.443,1284,7.646,1285,3.963,1286,4.168,1287,4.443,1288,4.443,1289,4.443]],["title/algo/sort/intro/#stable",[1268,5.803]],["text/algo/sort/intro/#stable",[14,2.011,15,1.997,19,1.548,39,1.873,41,1.458,44,2.845,45,1.487,53,2.743,61,1.457,70,1.85,94,3.603,133,1.774,315,5.44,975,4.288,1290,6.448,1291,5.951,1292,6.448,1293,6.448,1294,6.448,1295,6.448,1296,6.448,1297,5.751]],["title/algo/sort/intro/#bubble-sort",[515,2.033,1298,5.046]],["text/algo/sort/intro/#bubble-sort",[14,1.04,15,1.365,16,1.093,19,1.527,24,3.269,31,3.189,32,3.289,38,2.283,39,1.167,40,2.451,41,0.679,44,2.16,45,0.692,53,2.447,57,2.422,61,0.87,69,1.767,108,2.6,111,2.133,112,2.671,118,2.932,133,1.192,158,2.264,159,1.906,168,2.547,314,2.932,315,4.586,325,2.543,326,2.966,331,1.565,348,3.358,350,1.937,391,2.547,413,2.879,418,2.879,429,2.798,431,3.189,436,3.161,437,3.505,475,2.618,479,2.288,515,3.704,548,2.798,560,4.162,597,2.547,644,2.451,698,2.989,784,3.189,841,4.575,854,4.478,855,4.575,856,2.153,878,3.572,1009,5.618,1139,2.482,1242,2.989,1268,3.705,1269,3.117,1286,4.066,1298,4.066,1299,4.334,1300,4.334,1301,4.334,1302,4.066,1303,4.334,1304,4.334,1305,4.334,1306,4.334,1307,4.334,1308,3.705,1309,5.968,1310,3.865,1311,4.334,1312,4.334,1313,3.05,1314,3.705,1315,4.334,1316,4.334,1317,4.334,1318,3.865,1319,4.334,1320,4.334]],["title/algo/sort/intro/#insertion-sort",[449,2.162,515,2.033]],["text/algo/sort/intro/#insertion-sort",[13,1.751,14,0.813,15,1.805,16,2.122,19,0.813,21,1.026,39,0.969,41,1.017,44,1.151,45,1.037,47,1.608,53,1.912,54,1.894,56,3.024,61,1.15,70,1.515,77,2.462,86,2.212,93,1.553,103,1.54,108,1.654,110,1.917,111,1.668,112,2.596,119,1.829,133,0.932,158,3.39,163,3.041,188,1.917,234,1.717,253,2.626,283,3.716,301,2.599,314,2.293,315,4.385,325,2.243,326,1.334,331,1.224,350,1.515,418,2.251,429,2.854,436,2.624,437,2.571,449,3.907,451,2.251,452,2.787,472,2.019,485,2.793,515,3.933,516,2.626,536,2.323,548,2.323,552,2.626,560,1.872,576,3.146,617,2.047,642,1.566,644,1.917,775,3.19,784,2.494,813,1.387,855,2.438,856,1.684,866,2.386,924,1.966,936,2.704,967,3.716,975,3.75,991,2.251,1115,3.023,1139,1.941,1259,1.503,1268,2.898,1269,2.438,1308,2.898,1309,6.087,1321,3.389,1322,3.023,1323,3.389,1324,5.281,1325,3.389,1326,3.389,1327,3.389,1328,3.389,1329,3.389,1330,4.515,1331,3.389,1332,3.389,1333,3.023,1334,3.389,1335,2.704,1336,2.793,1337,3.134,1338,2.141,1339,1.872,1340,1.872,1341,2.759]],["title/algo/sort/intro/#lower-bound-for-comparison-based-sorting",[86,2.164,209,1.899,438,1.975,479,1.751,515,1.253]],["text/algo/sort/intro/#lower-bound-for-comparison-based-sorting",[10,1.704,13,1.486,14,2.421,15,0.962,16,1.13,21,1.357,38,3.217,53,2.264,61,0.892,62,4.114,72,1.84,76,2.639,86,5.508,103,2.036,110,3.687,112,1.588,115,2.787,117,2.392,158,2.341,163,1.716,165,2.669,178,2.341,260,1.827,301,2.205,336,1.867,391,2.633,429,2.867,439,3.298,448,3.238,459,3.223,501,2.787,515,3.388,519,2.633,548,1.971,609,5.654,628,2.925,669,2.831,675,2.831,764,3.031,775,2.707,813,1.177,829,2.976,849,2.534,850,3.693,924,4.457,934,3.09,990,4.33,994,3.693,1003,3.09,1075,4.33,1076,4.41,1222,1.814,1276,4.203,1342,5.814,1343,4.481,1344,4.481,1345,4.481,1346,4.481,1347,4.481,1348,4.481,1349,2.787,1350,7.683,1351,7.683,1352,4.917,1353,3.996,1354,4.481,1355,4.481,1356,4.481,1357,6.519,1358,6.519,1359,4.481,1360,3.996]],["title/algo/sort/intro/#minimum-number-of-memory-writes",[13,1.261,310,2.401,462,2.234,644,2.15]],["text/algo/sort/intro/#minimum-number-of-memory-writes",[13,2.277,14,2.421,18,4.875,52,3.48,116,4.511,121,2.927,235,5.66,310,5.511,325,2.671,332,3.069,431,5.054,440,5.66,441,2.162,462,5.127,515,3.623,516,5.321,560,3.792,576,4.091,775,4.148,907,4.834,934,4.736,1104,6.96,1361,6.867,1362,6.867,1363,6.867,1364,6.867,1365,7.19]],["title/algo/sort/merge/",[515,2.033,849,3.043]],["text/algo/sort/merge/",[2,0.643,3,1.129,15,0.25,16,0.909,19,0.509,21,0.643,32,2.05,39,0.536,41,1.431,42,1.319,45,1.447,53,0.625,57,0.651,61,1.371,62,1.585,67,1.823,79,1.533,82,1.12,83,0.964,84,0.803,103,0.964,105,1.638,106,0.496,114,0.437,116,0.602,121,1.246,133,1.415,144,0.615,148,0.835,156,1.035,166,0.929,170,0.736,173,4.808,199,5.954,209,1.215,220,0.902,225,1.812,228,0.5,229,1.464,231,1.186,237,1.336,250,1.133,258,0.636,264,0.837,268,5.794,271,5.754,276,0.534,283,4.88,286,0.534,288,0.857,294,0.76,297,0.659,299,2.341,301,1.044,313,1.039,330,0.694,331,0.421,335,0.485,347,0.525,390,1.172,394,1.2,418,1.942,429,0.512,432,6.174,437,0.841,441,2.327,449,0.468,461,1.41,466,0.902,494,0.636,499,0.929,501,0.724,512,0.748,515,2.452,519,1.247,536,0.512,550,0.736,555,0.636,556,0.857,558,0.44,572,0.774,577,0.774,585,0.902,600,0.628,617,0.703,621,0.724,675,0.736,678,1.039,761,0.628,807,1.039,813,2.748,839,0.651,844,0.714,849,1.654,866,0.82,911,0.636,967,3.649,991,1.942,1112,1.097,1120,1.41,1140,1.893,1163,0.643,1223,1.695,1240,0.82,1337,3.475,1338,1.847,1339,1.172,1341,3.759,1360,1.039,1366,3.737,1367,1.991,1368,3.082,1369,1.164,1370,1.164,1371,0.82,1372,1.164,1373,1.991,1374,4.826,1375,2.811,1376,3.893,1377,1.991,1378,2.743,1379,1.991,1380,3.931,1381,3.737,1382,2.743,1383,2.743,1384,4.063,1385,3.931,1386,3.931,1387,3.082,1388,2.103,1389,1.991,1390,3.082,1391,4.699,1392,1.164,1393,1.164,1394,1.164,1395,2.122,1396,1.991,1397,1.164,1398,1.164,1399,1.164,1400,1.164,1401,0.96,1402,0.628,1403,1.164,1404,1.164,1405,1.164,1406,0.96,1407,1.164,1408,0.996,1409,1.164,1410,0.736,1411,0.788,1412,1.164,1413,2.122,1414,1.164,1415,1.164,1416,0.96,1417,1.164,1418,1.039,1419,1.436,1420,0.774,1421,0.774,1422,0.902,1423,1.164,1424,1.039,1425,0.636,1426,1.164,1427,0.96,1428,1.766,1429,1.494,1430,2.394,1431,1.164,1432,1.749,1433,1.164,1434,1.164,1435,1.362,1436,1.494,1437,4.699,1438,1.164,1439,1.164,1440,1.164]],["title/algo/sort/merge/#merge-sort",[515,2.033,849,3.043]],["text/algo/sort/merge/#merge-sort",[]],["title/algo/sort/merge/#dummy-nodes",[813,1.413,1366,4.798]],["text/algo/sort/merge/#dummy-nodes",[16,0.858,32,2.31,41,1.425,42,1.56,45,1.453,57,1.9,61,1.4,62,1.495,67,2.062,79,1.937,121,2.257,133,1.456,173,4.98,199,7.048,237,1.26,264,2.445,268,3.517,271,3.456,283,5.47,294,2.219,299,3.633,335,1.417,394,1.923,432,7.257,441,1.667,461,2.259,499,2.713,501,2.115,555,1.856,577,2.259,621,2.115,813,2.755,844,2.084,911,1.856,967,3.105,1112,1.758,1140,4.722,1163,1.878,1223,1.599,1339,1.878,1341,3.397,1366,5.799,1367,3.19,1368,5.559,1369,3.4,1370,3.4,1371,2.393,1372,3.4,1373,3.19,1374,6.1,1375,2.964,1376,4.085,1377,3.19,1378,3.19,1379,3.19,1380,4.967,1381,3.032,1382,3.19,1383,3.19,1384,5.062,1385,4.967,1386,4.967,1387,4.526,1388,2.445,1389,3.19,1390,2.907]],["title/algo/sort/merge/#local-reference",[550,3.398,991,3.573]],["text/algo/sort/merge/#local-reference",[41,1.624,45,1.656,61,1.381,62,2.736,67,1.747,106,2.652,173,4.973,283,4.687,441,2.577,813,2.651,1120,5.436,1341,3.25,1366,5.548,1368,5.318,1375,2.667,1376,2.612,1381,5.548,1388,4.474,1391,10.364,1392,6.221,1393,6.221,1394,6.221,1395,8.184,1396,5.836]],["title/algo/sort/merge/#recursive-space-is-more-prodution-xxx",[83,1.506,331,1.197,494,1.81,1397,3.315,1398,3.315]],["text/algo/sort/merge/#recursive-space-is-more-prodution-xxx",[2,0.909,15,0.353,16,0.977,19,0.695,21,0.877,32,2.034,39,0.71,41,1.347,42,1.244,45,1.348,53,0.853,61,1.336,62,1.273,67,1.644,79,1.417,82,1.483,83,0.748,84,1.136,103,1.315,105,2.075,114,0.618,116,0.852,121,0.702,133,1.461,144,0.87,148,1.139,156,1.412,166,1.314,170,1.04,173,4.603,199,5.319,209,1.658,220,1.276,225,2.223,228,0.707,229,1.997,231,1.618,237,1.435,250,1.545,258,0.899,268,6.243,271,6.19,276,0.755,283,4.364,286,0.755,288,1.212,297,0.932,299,1.618,301,1.425,313,1.469,330,0.981,347,0.742,390,1.599,394,0.932,418,2.573,429,0.724,432,5.626,437,1.147,441,2.399,449,0.662,461,1.094,466,1.276,512,1.057,515,2.779,519,1.701,536,0.724,556,1.212,558,0.622,572,1.094,585,1.276,600,0.889,617,0.995,675,1.04,678,1.469,761,0.889,807,1.469,813,2.724,839,0.92,849,1.637,866,1.159,967,3.852,991,1.923,1112,0.852,1223,1.821,1240,1.159,1337,3.991,1338,2.447,1339,0.909,1341,3.842,1360,1.469,1367,1.545,1373,1.545,1374,4.373,1375,2.692,1376,3.823,1377,1.545,1378,2.716,1379,1.545,1380,3.634,1381,3.455,1382,2.716,1383,2.716,1384,3.662,1385,3.634,1386,3.634,1387,2.475,1388,1.185,1389,1.545,1390,3.312,1396,1.545,1399,1.647,1400,1.647,1401,1.357,1402,0.889,1403,1.647,1404,1.647,1405,1.647,1406,1.357,1407,1.647,1408,1.408,1409,1.647,1410,1.04,1411,1.114,1412,1.647,1413,2.895,1414,1.647,1415,1.647,1416,1.357,1417,1.647,1418,1.469,1419,1.959,1420,1.094,1421,1.094,1422,1.276,1423,1.647,1424,1.469,1425,0.899,1426,1.647,1427,1.357,1428,2.34,1429,2.038,1430,3.097,1431,1.647,1432,2.386,1433,1.647,1434,1.647,1435,1.859,1436,2.038,1437,5.852,1438,1.647,1439,1.647,1440,1.647]],["title/ds/array/decay/",[108,1.684,1441,4.599]],["text/ds/array/decay/",[3,2.365,108,3.268,114,2.836,121,3.947,225,2.661,286,3.461,336,3.148,462,4.44,814,4.931,934,5.21,974,3.521,1223,4.708,1408,6.458,1441,6.458,1442,6.737,1443,7.554,1444,7.554,1445,6.226,1446,6.737]],["title/ds/array/decay/#array-decay",[108,1.684,1441,4.599]],["text/ds/array/decay/#array-decay",[108,3.165,114,2.898,121,3.999,225,2.719,286,3.537,336,3.217,462,4.537,814,5.039,934,5.324,974,3.598,1223,4.753,1408,6.6,1442,6.885,1443,7.72,1444,7.72,1445,6.362,1446,6.885]],["title/ds/array/frequency/",[13,1.784,771,3.959]],["text/ds/array/frequency/",[3,2.781,13,1.662,15,1.516,19,1.695,38,1.799,39,1.83,41,1.467,44,2.777,45,1.496,50,4.94,53,2.759,54,2.8,61,1.28,67,1.984,69,2.043,70,1.438,82,3.903,111,3.476,133,1.943,148,2.78,163,1.919,186,4.131,228,3.815,315,4.516,444,3.688,452,2.153,515,1.894,771,3.688,1108,3.729,1170,3.883,1220,4.47,1447,6.626,1448,5.012,1449,5.012,1450,2.87,1451,4.47,1452,5.012,1453,5.012,1454,4.61,1455,5.012,1456,7.063,1457,5.012,1458,4.47,1459,5.012,1460,5.012]],["title/ds/array/frequency/#frequency-of-a-number",[13,1.784,771,3.959]],["text/ds/array/frequency/#frequency-of-a-number",[]],["title/ds/array/frequency/#simple",[54,3.793]],["text/ds/array/frequency/#simple",[15,1.756,19,1.493,39,1.782,41,1.523,44,2.779,45,1.552,50,5.524,53,2.695,61,1.329,67,2.299,70,1.785,82,3.721,111,3.062,133,1.711,148,2.448,186,5.127,228,3.515,315,5.05,1108,4.321,1170,4.82,1220,5.548,1447,5.836,1448,6.221,1449,6.221,1450,3.562,1451,5.548,1452,6.221,1453,6.221,1454,4.061]],["title/ds/array/frequency/#sort-then-binary-search",[163,1.706,452,1.914,515,1.683]],["text/ds/array/frequency/#sort-then-binary-search",[]],["title/ds/array/frequency/#hashing",[444,4.996]],["text/ds/array/frequency/#hashing",[19,1.75,38,2.617,39,1.808,41,1.143,44,2.477,45,1.165,53,2.67,61,0.997,69,2.974,82,3.948,111,3.59,133,2.006,148,2.87,228,3.892,1447,6.842,1454,4.761,1455,7.294,1456,9.06,1457,7.294,1458,6.505,1459,7.294,1460,7.294]],["title/ds/array/functions/",[108,1.395,225,1.569,814,2.908]],["text/ds/array/functions/",[3,1.962,13,1.408,16,1.071,19,1.788,39,1.787,41,1.289,42,1.748,44,2.128,45,1.314,52,2.152,61,1.125,69,1.731,70,1.798,82,3.636,92,1.839,95,3.461,100,2.921,105,3.214,108,1.962,133,2.049,144,3.309,148,2.931,156,2.071,185,3.976,203,3.144,225,3.233,228,1.824,250,3.345,284,2.873,299,2.373,334,1.719,351,2.929,420,4.5,512,2.726,550,3.959,602,5.672,664,2.496,814,2.772,839,3.502,1188,2.821,1223,1.997,1375,1.384,1410,2.683,1411,2.873,1425,2.318,1445,3.5,1454,4.091,1461,7.449,1462,6.267,1463,7.334,1464,4.247,1465,4.247,1466,4.247,1467,4.247,1468,3.5,1469,3.291,1470,4.247,1471,4.247,1472,6.267,1473,4.247,1474,4.247,1475,4.247,1476,4.247,1477,3.204,1478,6.267,1479,4.247,1480,3.788,1481,4.247]],["title/ds/array/functions/#passing-arrays-to-functions",[108,1.395,225,1.569,814,2.908]],["text/ds/array/functions/#passing-arrays-to-functions",[133,2.872,1461,10.44,1462,9.817,1463,9.311,1464,8.328]],["title/ds/array/functions/#return-array-from-functions",[42,0.947,108,1.395,225,1.569]],["text/ds/array/functions/#return-array-from-functions",[13,1.531,16,1.165,19,1.876,39,1.829,41,1.341,42,1.661,44,2.262,45,1.367,52,2.34,61,1.17,69,1.883,70,1.912,82,3.731,92,1.999,95,3.679,100,3.105,105,3.344,144,3.518,148,3.076,156,2.251,185,4.172,203,3.343,225,3.014,228,1.984,250,3.556,284,3.124,299,2.58,334,1.869,351,3.185,420,4.721,512,2.964,550,4.209,602,5.901,664,2.714,839,3.723,1188,3.067,1223,2.171,1375,1.505,1410,2.917,1411,3.124,1425,2.521,1445,3.806,1454,4.349,1463,4.118,1465,4.618,1466,4.618,1467,4.618,1468,3.806,1469,3.578,1470,4.618,1471,4.618,1472,6.662,1473,4.618,1474,4.618,1475,4.618,1476,4.618,1477,3.483,1478,6.662,1479,4.618,1480,4.118,1481,4.618]],["title/ds/array/intro/",[530,5.803]],["text/ds/array/intro/",[3,2.854,4,2.097,13,1.135,15,0.734,16,0.863,19,1.567,21,2.558,27,4.807,39,1.84,41,1.154,42,0.727,45,1.043,53,1.009,61,1.309,72,1.405,92,2.304,105,3.118,106,2.268,108,1.072,111,3.213,112,1.886,121,1.459,128,1.985,144,1.807,149,3.052,156,1.668,182,4.001,188,3.01,212,2.011,250,4.508,258,3.564,261,2.36,264,2.461,287,2.039,347,1.542,390,1.89,420,2.067,441,1.078,449,1.375,456,2.315,462,2.011,472,2.039,479,1.807,491,2.162,500,2.409,512,3.416,515,1.293,530,2.926,534,2.872,546,1.936,552,2.652,591,3.416,600,1.847,643,2.234,664,2.011,764,2.315,773,2.197,787,2.011,844,4.001,952,2.518,970,2.409,1009,2.315,1164,2.197,1242,3.67,1259,2.359,1267,2.409,1313,2.409,1402,3.975,1410,2.162,1411,2.315,1425,2.905,1435,4.728,1482,3.422,1483,1.638,1484,1.668,1485,3.422,1486,3.422,1487,5.42,1488,3.422,1489,2.518,1490,3.052,1491,1.529,1492,3.422,1493,3.052,1494,4.992,1495,3.422,1496,3.422,1497,3.422,1498,5.582,1499,3.422,1500,3.422,1501,3.422,1502,4.992,1503,3.422,1504,4.246,1505,2.518,1506,3.422,1507,2.926,1508,3.422,1509,3.422,1510,3.916,1511,5.321,1512,3.422,1513,5.321,1514,3.422,1515,3.422,1516,3.422]],["title/ds/array/intro/#introduction",[530,5.803]],["text/ds/array/intro/#introduction",[4,4.91,39,1.469,128,4.647,212,4.709,261,5.526,287,4.773,441,2.523,462,4.709,472,4.773,512,5.143,546,4.532,552,6.208,970,5.639,1402,4.324,1482,8.012,1483,3.835,1484,3.906]],["title/ds/array/intro/#why",[]],["text/ds/array/intro/#why",[108,2.715,121,3.695,420,5.237,456,5.865,591,5.565,764,5.865,773,5.565]],["title/ds/array/intro/#declaration",[952,4.996]],["text/ds/array/intro/#declaration",[19,2.111,27,6.297,39,1.958,41,1.379,45,1.405,53,2.05,61,1.386,105,2.719,106,2.966,111,4.329,250,5.41,1435,6.192,1485,6.958,1486,6.958,1487,7.099,1488,6.958]],["title/ds/array/intro/#advantages",[1489,4.996]],["text/ds/array/intro/#advantages",[491,5.303,512,5.388,515,3.172,600,4.53,844,6.419,1009,5.679,1259,3.721,1402,5.323]],["title/ds/array/intro/#disadvantages",[1490,6.054]],["text/ds/array/intro/#disadvantages",[13,2.875,112,3.562,449,3.484,1267,6.102,1313,6.102,1491,3.875]],["title/ds/array/intro/#accessing",[1402,3.664]],["text/ds/array/intro/#accessing",[21,2.994,39,1.347,61,1.453,72,3.016,105,2.87,106,3.131,149,6.55,182,6.059,250,3.92,390,4.056,1492,7.344,1493,6.55,1494,6.89,1495,7.344,1496,7.344,1497,7.344,1498,6.279,1499,7.344,1500,7.344,1501,7.344,1502,6.89]],["title/ds/array/intro/#in-c-no-index-out-of-bound-checking",[92,1.435,479,1.751,643,2.164,787,1.948,1164,2.128]],["text/ds/array/intro/#in-c-no-index-out-of-bound-checking",[21,2.664,27,4.542,39,1.769,41,1.09,61,0.952,92,3.012,105,2.719,111,3.424,156,3.392,250,3.714,258,5.265,264,5.004,347,3.135,500,4.897,534,4.748,591,4.466,664,4.089,1242,6.067,1435,4.466,1487,5.12,1494,6.527,1498,7.52,1502,6.527,1503,6.958,1504,7.018,1505,5.12,1506,6.958,1507,5.948]],["title/ds/array/intro/#traversal",[1259,3.009]],["text/ds/array/intro/#traversal",[15,1.565,16,1.84,19,1.75,21,2.209,39,1.662,41,1.143,42,1.55,45,1.165,105,3.541,144,3.851,188,5.124,1410,4.608,1411,4.934,1425,4.946,1508,7.294,1509,7.294,1510,6.668,1511,9.06,1512,7.294,1513,9.06,1514,7.294,1515,7.294,1516,7.294]],["title/ds/array/min-max/",[897,3.249,1291,3.249]],["text/ds/array/min-max/",[3,2.73,15,2.164,39,1.925,41,1.465,42,1.988,45,1.494,53,3.17,67,2.157,68,5.792,69,3.131,70,2.683,83,2.57,111,4.963,225,1.992,665,4.382,897,3.416,1291,3.416,1493,6.848,1517,7.203,1518,5.655,1519,5.655,1520,7.203,1521,5.655,1522,5.655,1523,5.655,1524,5.655]],["title/ds/array/min-max/#min-max",[897,3.249,1291,3.249]],["text/ds/array/min-max/#min-max",[]],["title/ds/array/min-max/#recursive",[83,3.084]],["text/ds/array/min-max/#recursive",[15,2.28,39,1.846,41,1.362,42,1.847,45,1.388,53,3.131,67,2.44,68,6.554,69,3.542,70,2.493,111,4.276,1493,7.748,1517,6.401,1518,6.823,1519,6.823,1520,6.401,1521,6.823,1522,6.823]],["title/ds/array/min-max/#library-functions",[225,1.895,665,4.168]],["text/ds/array/min-max/#library-functions",[39,1.919,41,1.457,42,1.977,45,1.486,53,3.083,70,2.668,111,5.149,1517,7.138,1520,7.138,1523,7.609,1524,7.609]],["title/ds/array/multi-dimensional/",[108,1.684,557,4.599]],["text/ds/array/multi-dimensional/",[3,2.568,13,2.35,15,1.91,19,2.136,21,2.146,38,1.807,39,1.632,40,2.848,41,1.285,45,0.804,61,1.217,85,3.473,92,2.18,97,4.343,103,3.22,108,2.219,160,5.491,178,3.702,194,4.794,200,5.097,211,4.018,243,4.15,250,3.783,315,2.781,347,2.269,363,5.346,390,3.913,400,4.707,547,4.491,557,4.305,733,3.706,734,4.491,740,4.491,741,4.491,1435,3.233,1436,3.544,1525,5.036,1526,5.036,1527,5.036,1528,7.087,1529,6.893,1530,5.036,1531,6.648,1532,5.036,1533,4.491,1534,7.087,1535,4.491,1536,4.724,1537,4.15,1538,5.036,1539,5.036,1540,5.036,1541,5.036,1542,5.036,1543,5.036,1544,5.036,1545,5.036]],["title/ds/array/multi-dimensional/#multidimensional-arrays",[108,1.684,557,4.599]],["text/ds/array/multi-dimensional/#multidimensional-arrays",[]],["title/ds/array/multi-dimensional/#row-major-in-c",[92,1.929,363,3.36,547,3.973]],["text/ds/array/multi-dimensional/#row-major-in-c",[13,2.858,15,2.039,19,2.28,21,2.04,38,2.417,39,1.58,40,3.81,61,1.179,97,4.128,103,3.061,160,5.219,178,3.519,194,4.557,200,4.845,211,5.374,250,3.596,315,3.72,363,5.081,390,3.72,400,4.475,1525,6.736,1526,6.736,1527,6.736,1528,8.617,1529,7.424,1530,6.736,1531,6.319,1532,6.736]],["title/ds/array/multi-dimensional/#three-dimensional-array",[85,3.072,108,1.395,1533,3.973]],["text/ds/array/multi-dimensional/#three-dimensional-array",[15,1.446,19,1.617,21,2.04,39,1.58,41,1.489,45,1.076,61,1.179,97,4.128,103,3.061,160,5.219,178,3.519,194,4.557,200,4.845,243,5.552,250,3.596,347,3.035,390,3.72,400,4.475,733,4.957,734,6.008,740,6.008,741,6.008,1435,4.324,1436,4.741,1531,6.319,1534,8.617,1535,6.008,1536,6.319,1537,5.552,1538,6.736,1539,6.736,1540,6.736,1541,6.736,1542,6.736,1543,6.736,1544,6.736,1545,6.736]],["title/ds/array/reverse/",[108,1.684,856,2.673]],["text/ds/array/reverse/",[3,2.768,15,1.678,39,1.864,41,1.385,42,1.235,44,1.973,45,1.412,47,2.756,61,1.39,70,1.667,77,2.708,83,3.553,94,3.247,105,2.271,108,1.819,111,3.849,133,2.151,225,2.047,334,2.352,599,4.956,856,2.887,1112,5.255,1282,4.526,1546,7.336,1547,7.336,1548,7.336,1549,7.336,1550,7.336,1551,5.811]],["title/ds/array/reverse/#reverse-array",[108,1.684,856,2.673]],["text/ds/array/reverse/#reverse-array",[]],["title/ds/array/reverse/#iterative",[77,3.164]],["text/ds/array/reverse/#iterative",[39,1.825,41,1.438,44,2.529,45,1.466,61,1.361,94,4.162,111,3.665,133,2.049,599,4.85,1112,5.144,1282,4.393,1546,6.987,1547,6.987,1548,6.987,1549,6.987,1550,6.987]],["title/ds/array/reverse/#recursive",[83,3.084]],["text/ds/array/reverse/#recursive",[15,1.92,39,1.791,41,1.12,42,1.519,45,1.142,47,3.39,61,1.335,70,2.05,83,3.247,105,2.793,111,3.517,133,1.966,225,2.517,334,2.893,599,4.761,1112,5.049,1282,4.282,1546,6.703,1547,6.703,1548,6.703,1549,6.703,1550,6.703,1551,7.146]],["title/ds/array/vectors/",[483,3.786,1507,4.599]],["text/ds/array/vectors/",[3,2.49,13,2.156,14,1.761,16,0.858,18,4.444,53,1.56,76,1.376,77,3.031,92,1.472,108,1.065,112,3.85,114,1.276,121,2.257,124,2.3,132,3.582,164,1.835,174,6.808,237,2.719,257,1.998,286,1.558,299,2.958,331,1.228,336,2.71,366,1.947,441,1.071,449,2.95,461,2.259,462,1.998,466,2.634,483,6.402,546,1.923,559,3.549,560,2.924,576,2.025,599,3.17,647,4.785,650,2.634,670,2.445,774,2.634,811,3.032,856,2.631,911,2.89,924,1.972,991,5.283,992,2.802,1163,2.924,1188,2.259,1223,1.599,1273,2.148,1339,2.924,1340,1.878,1349,2.115,1388,2.445,1402,1.835,1419,2.3,1420,4.319,1507,2.907,1552,3.896,1553,5.799,1554,2.802,1555,2.802,1556,3.032,1557,3.032,1558,3.032,1559,3.032,1560,3.032,1561,3.032,1562,5.853,1563,3.032,1564,3.4,1565,3.032,1566,3.873,1567,2.802,1568,3.032,1569,3.4,1570,3.4,1571,3.19,1572,2.802,1573,3.19,1574,3.4,1575,3.4,1576,2.183,1577,2.565,1578,3.032,1579,3.032,1580,2.025,1581,2.634,1582,3.032,1583,3.032,1584,3.4]],["title/ds/array/vectors/#vectors-in-cpp",[483,3.786,1507,4.599]],["text/ds/array/vectors/#vectors-in-cpp",[]],["title/ds/array/vectors/#iterators",[77,3.164]],["text/ds/array/vectors/#iterators",[14,2.421,77,4.066,92,2.973,112,3.69,174,5.511,299,4.875,559,5.234,599,4.253,650,5.321,856,4.335,1163,3.792,1188,4.562,1552,6.42,1553,8.551,1554,5.66,1555,5.66,1556,6.125,1557,6.125,1558,6.125,1559,6.125,1560,6.125,1561,6.125]],["title/ds/array/vectors/#capacity",[1562,4.996]],["text/ds/array/vectors/#capacity",[13,3.114,53,2.499,112,3.728,174,6.761,331,2.372,336,3.534,366,3.762,461,4.363,483,4.623,576,3.913,811,5.858,924,3.81,1339,4.682,1340,3.627,1562,7.302,1563,5.858,1564,6.569,1565,5.858,1566,5.051,1567,5.414,1568,5.858,1569,6.569,1570,6.569,1571,6.162,1572,5.414,1573,6.162]],["title/ds/array/vectors/#element-access",[112,1.906,1402,2.903]],["text/ds/array/vectors/#element-access",[16,1.721,18,4.855,76,2.762,108,2.136,112,3.683,174,6.565,286,3.126,441,2.149,462,4.01,483,7.315,546,3.859,647,7.035,670,4.907,991,6.903,1163,3.768,1223,3.208,1349,4.244,1419,4.616,1420,4.532,1574,6.823,1575,6.823]],["title/ds/array/vectors/#modifiers",[1576,4.358]],["text/ds/array/vectors/#modifiers",[18,5.052,112,3.78,114,2.282,121,3.435,124,4.112,132,5.452,164,3.28,174,6.82,237,3.567,257,3.572,336,2.533,449,3.87,466,4.709,483,4.278,560,4.45,599,2.963,774,4.709,911,4.399,992,5.009,1273,3.839,1388,4.371,1420,5.353,1566,3.621,1577,4.585,1578,5.42,1579,5.42,1580,3.621,1581,4.709,1582,5.42,1583,5.42,1584,6.078]],["title/ds/array/vs-pointers/",[108,1.395,626,2.691,1223,2.095]],["text/ds/array/vs-pointers/",[3,2.585,13,1.42,14,1.027,16,1.888,19,1.513,27,2.795,38,2.686,39,1.688,41,1.173,42,1.34,45,1.007,53,1.262,61,1.259,70,1.228,75,3.151,82,3.37,97,2.624,100,1.996,105,3.44,106,1.825,108,2.343,111,4.807,112,2.234,115,2.663,128,2.483,132,2.896,133,1.178,144,3.329,148,2.481,164,2.311,168,2.516,212,2.516,228,2.708,250,3.995,259,3.818,297,3.566,336,3.441,347,1.929,351,2.953,534,2.311,555,2.337,626,2.586,814,2.795,839,3.523,872,3.529,970,3.013,974,1.996,1223,4.138,1242,2.953,1402,2.311,1410,2.705,1411,2.896,1421,2.844,1435,4.047,1445,3.529,1469,3.317,1487,3.151,1505,3.151,1553,3.818,1585,3.818,1586,7.745,1587,4.281,1588,4.281,1589,4.281,1590,5.623,1591,4.281,1592,4.281,1593,4.281,1594,2.624,1595,3.151,1596,4.281,1597,4.281,1598,4.281]],["title/ds/array/vs-pointers/#array-vs-pointers",[108,1.395,626,2.691,1223,2.095]],["text/ds/array/vs-pointers/#array-vs-pointers",[]],["title/ds/array/vs-pointers/#difference",[164,3.664]],["text/ds/array/vs-pointers/#difference",[13,1.906,16,1.45,19,1.379,27,3.752,39,1.612,41,1.217,42,1.222,45,0.918,53,1.694,61,1.062,82,3.765,97,3.522,100,2.679,105,3.436,106,2.45,111,4.839,112,2.037,115,3.575,128,3.334,133,1.581,144,3.035,148,3.055,212,3.378,228,3.335,250,3.068,297,4.391,336,3.923,347,2.59,839,3.211,974,2.679,1223,3.65,1410,3.631,1411,3.888,1435,3.689,1469,4.453,1487,4.23,1505,4.23,1585,5.126,1586,8.246,1587,5.747,1588,5.747,1589,5.747,1590,6.923,1591,5.747,1592,5.747]],["title/ds/array/vs-pointers/#assignment",[132,4.593]],["text/ds/array/vs-pointers/#assignment",[19,1.775,38,3.559,39,1.819,41,1.159,42,1.572,45,1.181,61,1.417,105,3.572,111,4.497,144,3.905,250,4.878,534,3.992,839,4.133,872,6.095,1242,5.101,1435,4.748,1586,6.938,1593,7.396]],["title/ds/array/vs-pointers/#similarities",[970,4.778]],["text/ds/array/vs-pointers/#similarities",[14,1.813,16,2.335,70,2.167,75,5.559,108,2.899,111,3.718,112,2.677,168,4.44,259,6.737,351,5.21,555,4.124,814,4.931,1223,4.353,1402,4.077,1421,5.018,1445,6.226,1553,6.737,1594,4.629,1595,5.559,1596,7.554,1597,7.554,1598,7.554]],["title/ds/graph/bfs/",[1599,4.682]],["text/ds/graph/bfs/",[3,2.133,4,2.919,19,1.143,31,3.506,36,2.571,41,1.36,44,1.618,45,1.387,61,1.345,72,1.956,79,1.742,82,2.609,121,3.39,133,1.31,148,1.875,225,1.678,228,2.046,237,1.765,297,2.694,423,3.426,429,2.996,535,3.009,550,3.009,556,3.506,642,3.148,669,4.304,674,3.353,756,3.426,762,2.414,786,3.926,813,1.789,991,3.164,1038,3.926,1039,3.353,1108,3.597,1112,2.463,1198,3.691,1259,2.112,1365,3.926,1425,2.6,1450,2.728,1510,3.506,1576,4.373,1599,4.699,1600,4.248,1601,4.763,1602,5.139,1603,4.763,1604,4.763,1605,4.763,1606,4.763,1607,4.763,1608,4.763,1609,4.763,1610,3.926,1611,4.763,1612,4.609,1613,4.763,1614,3.691,1615,3.926,1616,4.763,1617,4.763,1618,4.763,1619,4.112,1620,3.426,1621,3.926,1622,3.926,1623,4.763,1624,2.22,1625,4.763,1626,4.763,1627,3.926,1628,4.763,1629,4.763,1630,4.763,1631,4.763,1632,4.763,1633,4.248,1634,4.763,1635,4.763]],["title/ds/graph/bfs/#bfs",[1599,4.682]],["text/ds/graph/bfs/#bfs",[]],["title/ds/graph/bfs/#application",[762,3.439]],["text/ds/graph/bfs/#application",[4,2.973,19,1.164,31,3.57,36,2.618,41,1.371,44,1.647,45,1.398,61,1.352,72,1.992,79,1.774,82,2.643,121,3.425,133,1.334,148,1.909,225,1.709,228,2.084,237,1.797,297,2.744,423,3.489,429,3.035,535,3.064,550,3.064,556,3.57,642,3.189,669,4.36,674,3.414,756,3.489,786,3.998,813,1.813,991,3.222,1038,3.998,1039,3.414,1108,3.644,1112,2.508,1198,3.759,1259,2.151,1365,3.998,1425,2.648,1450,2.778,1510,3.57,1576,4.43,1599,3.346,1600,4.326,1601,4.851,1602,5.206,1603,4.851,1604,4.851,1605,4.851,1606,4.851,1607,4.851,1608,4.851,1609,4.851,1610,3.998,1611,4.851,1612,4.669,1613,4.851,1614,3.759,1615,3.998,1616,4.851,1617,4.851,1618,4.851,1619,4.154,1620,3.489,1621,3.998,1622,3.998,1623,4.851,1624,2.261,1625,4.851,1626,4.851,1627,3.998,1628,4.851,1629,4.851,1630,4.851,1631,4.851,1632,4.851,1633,4.326,1634,4.851,1635,4.851]],["title/ds/graph/dfs-disconnected/",[1612,3.639,1636,5.046]],["text/ds/graph/dfs-disconnected/",[3,1.547,13,1.639,19,1.948,36,3.774,39,1.282,41,1.096,44,2.375,45,1.117,56,2.83,57,2.761,61,1.322,67,1.388,70,1.418,79,1.807,82,2.678,83,3.688,108,1.547,133,1.924,148,1.945,158,2.582,225,2.859,228,2.123,237,1.831,239,3.943,269,3.283,297,2.795,334,2.831,756,3.554,757,4.35,787,2.904,813,2.611,1039,6.211,1108,2.609,1164,4.489,1167,3.478,1259,2.191,1338,3.122,1340,3.861,1425,2.697,1450,4.005,1451,4.407,1529,3.408,1612,4.731,1620,6.954,1621,4.073,1622,4.073,1627,4.073,1636,4.636,1637,3.829,1638,4.407,1639,4.942,1640,4.407,1641,4.407,1642,4.942,1643,4.407,1644,4.407,1645,4.407,1646,4.942,1647,4.407,1648,4.942,1649,4.942]],["title/ds/graph/dfs-disconnected/#disconnected-dfs",[1612,3.639,1636,5.046]],["text/ds/graph/dfs-disconnected/#disconnected-dfs",[13,1.662,19,1.963,36,3.812,39,1.295,41,1.107,44,2.399,45,1.128,56,2.87,57,2.8,61,1.328,67,1.408,70,1.438,79,1.833,82,2.705,83,3.716,108,1.569,133,1.943,148,1.972,158,2.618,225,2.881,228,2.153,237,1.857,239,3.999,269,3.329,297,2.835,334,2.859,756,3.604,757,4.393,787,2.945,813,2.621,1039,6.25,1108,2.646,1164,4.534,1167,3.528,1259,2.222,1338,3.166,1340,3.9,1425,2.736,1450,4.045,1451,4.47,1529,3.457,1612,3.391,1620,6.986,1621,4.131,1622,4.131,1627,4.131,1637,3.883,1638,4.47,1639,5.012,1640,4.47,1641,4.47,1642,5.012,1643,4.47,1644,4.47,1645,4.47,1646,5.012,1647,4.47,1648,5.012,1649,5.012]],["title/ds/graph/dfs/",[1612,4.593]],["text/ds/graph/dfs/",[3,2.086,19,1.108,31,4.903,36,3.596,39,0.847,41,1.044,44,1.568,45,1.064,61,1.241,70,1.325,79,1.689,82,2.551,83,3.027,108,1.446,109,4.118,121,1.968,133,1.833,148,1.817,158,2.413,225,2.347,228,1.984,231,2.58,237,1.711,269,3.067,297,2.612,301,2.273,334,1.869,335,1.925,448,1.668,515,1.745,603,2.612,641,4.025,642,2.134,669,2.917,674,3.25,757,4.144,762,2.34,763,3.25,786,3.806,813,2.383,830,3.067,1039,6.386,1108,2.438,1164,4.277,1259,2.047,1338,2.917,1340,2.55,1365,5.491,1420,3.067,1425,2.521,1432,3.806,1450,2.644,1529,3.185,1580,2.751,1600,4.118,1612,4.507,1614,3.578,1620,6.798,1621,3.806,1622,3.806,1627,3.806,1633,4.118,1637,3.578,1638,4.118,1640,4.118,1641,4.118,1643,4.118,1644,4.118,1645,4.118,1647,4.118,1650,4.618,1651,4.618,1652,4.618,1653,4.118,1654,5.942,1655,3.806,1656,4.618,1657,4.618,1658,4.118,1659,4.618,1660,4.618,1661,4.618]],["title/ds/graph/dfs/#dfs",[1612,4.593]],["text/ds/graph/dfs/#dfs",[83,4.225,108,2.382,158,3.975,225,3.275,297,4.303,334,3.08,757,5.784,813,2.818,1164,5.97,1259,3.373,1338,4.806,1340,4.201,1620,6.688,1637,5.895,1638,6.786]],["title/ds/graph/dfs/#application",[762,3.439]],["text/ds/graph/dfs/#application",[19,1.263,31,5.378,36,3.944,39,0.965,41,1.145,44,1.787,45,1.167,61,1.303,70,1.509,79,1.924,82,2.798,109,4.692,121,2.243,133,2.01,148,2.071,228,2.26,231,2.94,237,1.949,269,3.495,301,2.589,335,2.193,448,1.9,515,1.988,603,2.976,641,4.414,642,2.431,669,3.324,674,3.703,763,3.703,786,4.336,830,3.495,1039,6.708,1108,2.778,1365,6.022,1420,3.495,1425,2.872,1432,4.336,1450,3.013,1529,3.629,1580,3.134,1600,4.692,1612,3.559,1614,4.076,1620,6.524,1621,4.336,1622,4.336,1627,4.336,1633,4.692,1640,4.692,1641,4.692,1643,4.692,1644,4.692,1645,4.692,1647,4.692,1650,5.261,1651,5.261,1652,5.261,1653,4.692,1654,6.517,1655,4.336,1656,5.261,1657,5.261,1658,4.692,1659,5.261,1660,5.261,1661,5.261]],["title/ds/graph/intro/",[641,4.101]],["text/ds/graph/intro/",[3,2.975,14,2.323,15,1.692,16,1.316,19,1.743,21,1.58,38,2.305,39,1.533,41,0.817,42,0.709,44,1.133,45,1.16,52,2.643,53,1.537,61,0.993,69,1.36,76,1.35,82,3.019,103,2.918,108,1.045,133,1.435,144,1.761,148,2.053,168,1.96,178,3.356,228,2.759,331,1.884,336,1.39,350,1.491,352,5.479,364,2.177,379,2.661,390,1.842,436,1.657,437,2.067,449,1.341,483,2.348,489,2.749,500,2.348,548,1.467,624,1.864,630,2.749,640,5.224,641,2.015,645,2.455,671,2.975,756,3.751,757,5.198,762,1.69,813,1.37,830,2.216,839,2.915,967,3.535,974,1.555,1039,6.924,1333,2.975,1341,1.743,1371,2.348,1410,2.107,1411,2.257,1425,1.821,1458,2.975,1469,2.585,1491,1.491,1602,2.516,1662,3.129,1663,4.162,1664,3.336,1665,3.336,1666,3.336,1667,2.975,1668,4.893,1669,3.336,1670,3.336,1671,3.336,1672,3.336,1673,5.216,1674,2.975,1675,5.216,1676,4.042,1677,4.893,1678,4.042,1679,6.025,1680,3.336,1681,3.336,1682,3.336,1683,3.336,1684,3.336,1685,5.216,1686,3.336,1687,3.336,1688,3.336,1689,3.336,1690,3.336,1691,3.336,1692,3.336,1693,8.732,1694,3.336]],["title/ds/graph/intro/#graph",[641,4.101]],["text/ds/graph/intro/#graph",[]],["title/ds/graph/intro/#properties",[624,3.793]],["text/ds/graph/intro/#properties",[14,1.923,52,4.861,548,3.524,640,5.762,756,5.762,813,2.104,1039,5.639,1662,7.516,1663,6.393,1664,8.012,1665,8.012,1666,8.012,1667,7.146,1668,7.516,1669,8.012,1670,8.012]],["title/ds/graph/intro/#applications",[762,3.439]],["text/ds/graph/intro/#applications",[14,2.098,489,7.204,813,2.296,1602,6.594,1671,8.741,1672,8.741]],["title/ds/graph/intro/#representation",[364,4.431]],["text/ds/graph/intro/#representation",[14,1.968,16,2.068,76,3.319,352,7.338,437,3.249,757,6.051,830,5.446,967,4.115,974,3.822,1673,9.727]],["title/ds/graph/intro/#adjacency-matrix",[352,4.058,757,3.346]],["text/ds/graph/intro/#adjacency-matrix",[15,1.787,38,2.989,61,1.343,108,2.608,336,3.471,379,6.644,1039,6.91,1674,7.427,1675,9.817]],["title/ds/graph/intro/#pros",[1676,5.26]],["text/ds/graph/intro/#pros",[14,2.133,350,3.972,1491,3.972,1677,8.337]],["title/ds/graph/intro/#cons",[1678,5.26]],["text/ds/graph/intro/#cons",[14,2.378,168,4.973,331,3.056,352,6.383,449,3.401,645,6.227,1679,9.296,1680,8.461]],["title/ds/graph/intro/#adjacency-list",[757,3.346,967,2.276]],["text/ds/graph/intro/#adjacency-list",[14,2.367,640,6.037,671,7.486,756,6.037,757,5.221,967,4.173,1333,7.486,1663,6.697,1681,8.394]],["title/ds/graph/intro/#pros_1",[1676,5.26]],["text/ds/graph/intro/#pros_1",[14,2.031,331,3.056,436,4.204,437,3.353,500,5.955,630,6.973,640,6.085,1371,5.955,1679,7.937,1682,8.461]],["title/ds/graph/intro/#cons_1",[1678,5.26]],["text/ds/graph/intro/#cons_1",[14,1.695,15,1.906,16,1.264,19,2.131,21,2.139,38,2.535,39,1.781,41,1.107,42,1.065,44,1.702,45,1.419,53,2.082,61,0.966,69,2.043,82,3.585,103,3.716,133,1.943,144,2.646,148,2.78,178,4.273,228,3.513,390,2.768,483,3.528,640,3.604,757,3.118,839,3.947,967,2.12,1039,7.293,1341,2.618,1410,3.166,1411,3.391,1425,2.736,1458,4.47,1469,3.883,1668,4.702,1677,4.702,1683,5.012,1684,5.012,1685,7.063,1686,5.012,1687,5.012,1688,5.012,1689,5.012,1690,5.012,1691,5.012,1692,5.012,1693,9.981,1694,5.012]],["title/ds/heap/fibonacci-heap/",[362,4.168,1143,3.081]],["text/ds/heap/fibonacci-heap/",[3,1.031,4,2.019,13,1.713,16,1.819,32,1.437,53,2.561,56,1.886,70,1.482,73,2.049,76,3.172,106,1.404,114,1.237,116,1.703,117,3.401,144,1.739,159,1.449,163,3.183,168,1.936,188,1.863,198,2.049,237,1.221,260,2.598,267,2.552,269,2.188,286,1.509,305,1.535,325,2.399,326,2.839,334,2.091,336,1.373,355,2.552,362,7.477,428,2.15,429,2.272,432,2.628,448,3.342,449,2.076,453,2.485,456,2.229,471,4.121,486,1.841,559,1.798,567,2.552,576,1.962,624,1.841,642,1.522,644,3.604,675,2.081,696,2.424,707,2.715,813,1.895,823,2.319,843,6.458,845,2.715,849,2.921,866,2.319,897,1.99,967,1.394,971,2.715,975,3.261,1025,4.002,1071,2.938,1136,2.552,1143,5.826,1158,3.896,1161,2.188,1223,2.429,1291,4.358,1337,2.495,1352,2.485,1384,2.272,1402,1.778,1491,2.848,1614,2.552,1695,8.998,1696,6.372,1697,4.582,1698,3.294,1699,3.294,1700,2.938,1701,4.159,1702,2.229,1703,2.485,1704,3.294,1705,5.165,1706,5.165,1707,3.294,1708,3.294,1709,2.552,1710,2.715,1711,3.294,1712,3.294,1713,5.165,1714,3.294,1715,2.319,1716,3.294,1717,3.294,1718,2.938,1719,3.294,1720,3.294,1721,3.294,1722,3.294]],["title/ds/heap/fibonacci-heap/#fibonacci-heap",[362,4.168,1143,3.081]],["text/ds/heap/fibonacci-heap/#fibonacci-heap",[4,2.038,13,1.726,16,1.829,32,1.451,53,2.57,56,1.904,70,1.493,73,2.068,76,3.186,106,1.417,114,1.248,116,1.719,117,3.422,144,1.756,159,1.462,163,3.196,168,1.954,188,1.881,198,2.068,237,1.232,260,2.613,267,2.576,269,2.209,286,1.524,305,1.55,325,2.41,326,2.854,334,2.106,336,1.386,355,2.576,362,7.355,428,2.171,429,2.288,432,2.653,448,3.351,449,2.091,453,2.508,456,2.25,471,4.151,486,1.858,559,1.815,567,2.576,576,1.981,624,1.858,642,1.537,644,3.626,675,2.101,696,2.447,707,2.741,813,1.904,823,2.34,843,6.487,845,2.741,849,2.943,866,2.34,897,2.009,967,1.407,971,2.741,975,3.281,1025,4.032,1071,2.966,1136,2.576,1143,5.776,1158,3.925,1161,2.209,1223,2.447,1291,4.38,1337,2.513,1352,2.508,1384,2.293,1402,1.795,1491,2.865,1614,2.576,1695,9.027,1696,6.41,1697,4.61,1698,3.325,1699,3.325,1700,2.966,1701,4.184,1702,2.25,1703,2.508,1704,3.325,1705,5.203,1706,5.203,1707,3.325,1708,3.325,1709,2.576,1710,2.741,1711,3.325,1712,3.325,1713,5.203,1714,3.325,1715,2.34,1716,3.325,1717,3.325,1718,2.966,1719,3.325,1720,3.325,1721,3.325,1722,3.325]],["title/ds/heap/heap-sort/",[515,2.033,1143,3.081]],["text/ds/heap/heap-sort/",[817,5.76]],["title/ds/heap/intro/",[163,2.06,1143,3.081]],["text/ds/heap/intro/",[3,1.779,10,0.521,14,1.849,15,1.008,16,0.843,19,1.127,21,0.415,38,1.463,39,1.581,40,2.306,41,1.311,42,1.433,44,1.385,45,1.313,61,1.144,62,0.602,67,0.69,69,1.662,70,0.705,72,0.562,73,0.852,76,1.901,79,1.223,82,2.001,84,2.812,93,1.868,94,1.373,105,2.042,106,1.048,108,1.636,112,2.155,114,1.255,119,1.804,128,0.794,129,1.008,133,1.855,144,0.723,148,1.605,156,1.198,163,3.203,173,0.701,210,0.945,227,2.404,228,1.056,234,2.066,237,1.511,260,2.13,274,0.723,276,0.628,286,0.628,290,0.927,292,0.927,297,0.775,305,1.901,325,1.97,326,0.967,330,1.464,331,0.495,332,1.822,334,1.353,347,0.617,350,1.098,355,1.061,362,1.061,390,0.756,392,5.675,412,1.222,429,0.602,448,2.196,449,2.284,452,1.436,464,0.91,501,0.852,508,1.008,515,2.147,519,0.805,520,1.129,521,1.129,532,1.093,535,0.865,536,1.47,548,1.081,550,0.865,555,0.748,556,1.809,558,0.518,559,0.748,578,0.775,599,0.668,615,1.891,617,0.827,621,2.079,624,1.373,630,1.129,631,0.805,641,0.827,642,1.136,644,2.955,669,0.865,673,1.129,674,0.964,693,1.663,762,0.694,777,2.192,798,1.809,813,0.878,820,1.129,823,0.964,843,1.129,849,0.775,897,0.827,911,2.563,924,2.365,959,0.964,967,0.579,975,3.594,1002,1.129,1136,1.904,1143,5.179,1161,1.633,1188,2.221,1198,1.061,1222,0.554,1223,1.572,1258,1.222,1259,1.482,1279,2.026,1282,1.176,1291,0.827,1313,0.964,1353,1.222,1410,0.865,1411,0.927,1425,1.342,1477,1.033,1489,1.809,1491,2.539,1529,0.945,1562,3.001,1577,1.033,1624,2.649,1697,2.932,1709,1.061,1715,0.964,1723,1.222,1724,1.37,1725,1.37,1726,1.37,1727,2.522,1728,2.458,1729,1.37,1730,1.695,1731,1.37,1732,1.129,1733,1.222,1734,1.222,1735,2.026,1736,3.825,1737,1.37,1738,3.825,1739,1.222,1740,1.37,1741,1.222,1742,1.37,1743,2.858,1744,4.273,1745,1.37,1746,1.37,1747,1.37,1748,1.222,1749,0.964,1750,2.306,1751,2.76,1752,1.604,1753,3.343,1754,2.404,1755,1.222,1756,2.306,1757,1.37,1758,0.927,1759,1.171,1760,1.129,1761,1.222,1762,1.37,1763,1.222,1764,1.37,1765,1.37,1766,1.222,1767,1.37,1768,1.222,1769,0.91,1770,1.37,1771,1.37,1772,1.37,1773,2.458,1774,2.458,1775,7.022,1776,1.37,1777,1.37,1778,1.37,1779,1.37,1780,1.37,1781,2.458,1782,1.37,1783,1.37,1784,3.343,1785,3.343,1786,1.37,1787,1.37,1788,1.37,1789,2.458,1790,1.37,1791,1.37,1792,1.37,1793,1.37,1794,2.458,1795,2.458,1796,3.343,1797,3.343,1798,2.458,1799,2.458,1800,1.37,1801,1.37,1802,1.129,1803,1.37,1804,1.37,1805,1.37,1806,1.37,1807,1.37,1808,1.061,1809,1.37,1810,1.37,1811,1.37,1812,1.37,1813,1.37,1814,1.37,1815,1.37,1816,1.37,1817,1.37,1818,1.37,1819,1.37,1820,1.37,1821,1.37,1822,1.37,1823,1.37,1824,1.37,1825,1.37,1826,1.37,1827,1.37,1828,1.37]],["title/ds/heap/intro/#binary-heap",[163,2.06,1143,3.081]],["text/ds/heap/intro/#binary-heap",[163,3.32,448,3.131,617,5.237,897,5.237,1143,5.756,1291,5.237]],["title/ds/heap/intro/#representaion",[1723,6.054]],["text/ds/heap/intro/#representaion",[]],["title/ds/heap/intro/#arrays",[108,2.126]],["text/ds/heap/intro/#arrays",[10,2.958,14,2.529,260,3.171,412,6.935,813,2.663,1222,3.148,1724,7.776,1725,7.776,1726,7.776,1727,5.866,1728,9.424,1729,7.776,1730,6.499,1731,7.776]],["title/ds/heap/intro/#traversal",[1259,3.009]],["text/ds/heap/intro/#traversal",[106,3.695,274,4.578,286,3.972,548,3.813,1732,7.145,1733,7.732,1734,7.732]],["title/ds/heap/intro/#operations",[76,2.748]],["text/ds/heap/intro/#operations",[14,1.41,42,1.249,69,2.395,73,3.655,114,3.337,237,3.294,260,3.624,290,3.975,334,3.598,448,2.122,449,2.361,578,3.323,599,2.864,624,4.402,644,3.323,693,5.33,823,4.135,911,4.852,975,5.418,1136,6.105,1143,4.512,1259,3.493,1313,4.135,1353,5.24,1491,3.973,1577,4.432,1697,4.225,1709,4.552,1727,5.943,1735,4.842,1736,7.391,1737,5.875,1738,8.339,1739,5.24,1740,5.875,1741,5.24,1742,5.875]],["title/ds/heap/intro/#application",[762,3.439]],["text/ds/heap/intro/#application",[14,1.387,16,1.965,69,3.594,72,2.373,76,2.339,108,2.954,112,2.048,163,3.376,173,2.958,227,4.156,305,2.694,325,2.386,362,4.478,390,3.191,392,4.156,429,2.541,448,2.087,449,2.323,515,3.835,519,3.396,536,2.541,621,4.847,641,3.491,644,3.268,669,3.651,673,4.763,674,4.067,777,6.949,849,3.268,1143,5.94,1258,5.154,1491,2.583,1624,4.109,1738,5.421,1743,4.94,1744,5.856,1745,5.779,1746,5.779,1747,5.779,1748,5.154,1749,4.067,1750,5.421]],["title/ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue",[163,1.011,556,1.943,1143,1.512,1198,2.045,1624,1.231,1744,1.754,1751,1.551]],["text/ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue",[14,1.689,15,1.211,16,0.457,19,1.354,21,0.549,38,1.789,39,1.714,40,2.82,41,1.43,42,1.567,44,1.693,45,1.437,61,1.248,62,0.798,67,0.885,70,0.904,76,1.69,79,1.527,82,2.37,84,3.439,93,2.285,94,1.76,105,2.419,106,0.773,108,0.568,112,2.356,119,2.253,128,1.052,129,1.335,133,2.109,144,0.958,148,1.962,156,1.536,163,3.123,210,1.251,227,2.265,228,1.353,234,2.526,237,0.672,260,1.284,276,0.831,292,1.227,297,1.026,305,1.946,325,2.035,326,1.24,330,1.876,331,0.655,332,2.228,347,0.817,350,1.408,355,1.405,392,6.144,448,2.038,449,2.268,452,1.793,464,1.205,501,1.128,508,1.335,515,0.685,520,1.495,521,1.495,532,1.447,535,1.146,536,1.385,548,0.798,550,1.146,555,0.99,556,1.335,558,0.685,559,0.99,615,2.361,621,1.128,630,1.495,631,1.066,642,1.455,644,2.82,798,2.318,820,1.495,843,1.495,911,1.719,924,2.892,959,1.277,967,0.767,975,2.136,1002,1.495,1143,4.539,1161,2.092,1188,2.773,1223,1.963,1279,2.596,1282,1.508,1410,1.146,1411,1.227,1425,1.719,1477,1.368,1489,2.318,1491,1.866,1529,1.251,1562,3.669,1624,1.946,1697,3.002,1715,1.277,1735,1.495,1736,2.955,1743,2.693,1744,3.749,1750,1.701,1751,2.93,1752,2.056,1753,4.175,1754,3.002,1755,1.618,1756,2.955,1757,1.814,1758,1.227,1759,1.551,1760,1.495,1761,1.618,1762,1.814,1763,1.618,1764,1.814,1765,1.814,1766,1.618,1767,1.814,1768,1.618,1769,1.205,1770,1.814,1771,1.814,1772,1.814,1773,3.15,1774,3.15,1775,7.926,1776,1.814,1777,1.814,1778,1.814,1779,1.814,1780,1.814,1781,3.15,1782,1.814,1783,1.814,1784,4.175,1785,4.175,1786,1.814,1787,1.814,1788,1.814,1789,3.15,1790,1.814,1791,1.814,1792,1.814,1793,1.814,1794,3.15,1795,3.15,1796,4.175,1797,4.175,1798,3.15,1799,3.15,1800,1.814,1801,1.814,1802,1.495,1803,1.814,1804,1.814,1805,1.814,1806,1.814,1807,1.814,1808,1.405,1809,1.814,1810,1.814,1811,1.814,1812,1.814,1813,1.814,1814,1.814,1815,1.814,1816,1.814,1817,1.814,1818,1.814,1819,1.814,1820,1.814,1821,1.814,1822,1.814,1823,1.814,1824,1.814,1825,1.814,1826,1.814,1827,1.814,1828,1.814]],["title/ds/linked-list/bin-tree-cdll/",[163,1.456,448,1.373,1702,2.572,1829,2.945]],["text/ds/linked-list/bin-tree-cdll/",[3,2.69,10,3.716,27,3.041,32,2.033,39,0.854,41,1.231,42,1.935,45,1.071,61,1.414,67,2.206,69,1.899,115,2.898,144,2.46,163,1.784,225,1.641,250,2.487,260,3.865,347,2.099,441,1.467,448,1.682,733,3.428,813,2.674,967,1.971,1222,4.047,1269,3.35,1337,2.25,1375,2.8,1436,3.279,1484,3.269,1702,4.536,1829,3.61,1830,4.659,1831,3.717,1832,4.659,1833,4.659,1834,9.77,1835,9.481,1836,7.855,1837,7.855,1838,4.659,1839,6.705,1840,4.659,1841,4.155,1842,4.659]],["title/ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll",[163,1.456,448,1.373,1702,2.572,1829,2.945]],["text/ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll",[1269,6.557]],["title/ds/linked-list/bin-tree-cdll/#cdll",[1830,6.788]],["text/ds/linked-list/bin-tree-cdll/#cdll",[10,3.219,39,1.552,41,1.326,347,3.813,441,2.664,813,2.602,1222,3.425,1484,4.831]],["title/ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls",[32,1.944,1831,3.554,1832,4.455]],["text/ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls",[10,3.238,41,1.036,42,2.002,45,1.056,61,1.441,67,2.391,813,2.612,1222,4.026,1375,2.774,1833,6.61,1834,10.718,1835,10.536,1836,9.417,1837,9.417]],["title/ds/linked-list/bin-tree-cdll/#main-function",[144,2.84,225,1.895]],["text/ds/linked-list/bin-tree-cdll/#main-function",[10,3.81,27,4.397,41,1.056,42,1.832,45,1.076,61,1.37,67,1.892,69,2.746,115,4.19,250,3.596,260,4.317,733,4.957,813,2.495,967,2.85,1222,3.846,1337,3.254,1375,2.808,1436,4.741,1702,4.557,1838,6.736,1839,8.617,1840,6.736,1841,6.008,1842,6.736]],["title/ds/linked-list/cll/",[1702,3.639,1843,4.058]],["text/ds/linked-list/cll/",[2,1.071,3,2.012,14,2.256,21,1.331,39,1.262,41,1.394,42,1.615,44,0.659,45,1.395,47,1.584,61,1.42,67,1.805,79,2.152,82,1.683,93,0.889,105,1.717,119,1.047,133,0.918,148,0.764,156,1.628,158,1.014,165,1.156,225,0.683,228,0.833,237,0.719,276,0.889,286,2.392,288,1.428,299,1.865,323,1.73,347,0.874,364,1.266,391,1.14,418,1.289,421,1.338,437,2.068,441,3.141,449,2.098,455,0.897,472,2.618,515,1.262,536,0.853,558,0.733,560,1.071,598,1.245,599,2.142,602,5.012,642,0.897,662,1.464,761,1.047,785,1.503,810,1.548,813,2.665,848,1.428,967,1.412,1044,1.73,1112,1.726,1143,1.111,1163,5.508,1223,0.912,1259,1.48,1279,1.599,1282,4.674,1339,1.071,1340,4.726,1341,1.014,1375,2.242,1376,4.261,1390,1.659,1428,4.59,1430,5.909,1454,1.266,1484,4.172,1498,1.659,1504,1.548,1552,1.428,1576,1.245,1590,1.73,1624,0.904,1701,1.266,1702,1.313,1703,1.464,1843,1.464,1844,1.73,1845,1.94,1846,1.94,1847,1.94,1848,1.73,1849,1.82,1850,1.94,1851,1.599,1852,1.94,1853,3.339,1854,4.394,1855,1.94,1856,1.94,1857,1.94,1858,1.94,1859,1.94,1860,3.132,1861,1.94,1862,1.94,1863,1.94,1864,1.94,1865,1.94,1866,1.94]],["title/ds/linked-list/cll/#circular-ll",[1702,3.639,1843,4.058]],["text/ds/linked-list/cll/#circular-ll",[2,4.294,158,4.063,299,4.345,323,6.935,599,3.791,785,6.025,810,6.204,813,2.475,848,5.723,1112,4.872,1143,4.453,1259,3.448,1624,3.625,1701,5.076,1703,5.866,1844,6.935,1845,7.776,1846,7.776,1847,7.776]],["title/ds/linked-list/cll/#representation",[364,4.431]],["text/ds/linked-list/cll/#representation",[39,1.564,41,1.337,276,3.908,347,3.843,441,2.686,558,3.223,813,2.615,1376,3.581]],["title/ds/linked-list/cll/#traversal",[1259,3.009]],["text/ds/linked-list/cll/#traversal",[41,1.549,45,1.579,61,1.244,79,3.328,133,2.02,286,4.735,441,2.313,813,2.39,1282,5.084,1375,2.393,1376,3.084,1484,3.581,1498,6.279,1504,5.86,1848,6.55]],["title/ds/linked-list/cll/#insertion",[449,2.728]],["text/ds/linked-list/cll/#insertion",[14,2.469,39,1.414,41,1.284,42,1.946,45,1.309,61,1.437,67,2.166,79,1.84,82,2.387,148,1.253,165,1.897,228,1.368,299,1.78,441,3.181,472,3.713,598,2.045,599,2.452,602,6.134,813,2.742,967,2.128,1163,5.97,1223,1.498,1282,4.964,1339,1.759,1375,2.512,1376,4.143,1454,2.079,1484,4.741,1552,2.344,1849,2.988,1850,3.185,1851,2.625,1852,3.185,1853,5.03,1854,6.234,1855,3.185,1856,3.185,1857,3.185]],["title/ds/linked-list/cll/#problems",[455,3.137]],["text/ds/linked-list/cll/#problems",[14,1.891,21,2.692,39,1.077,41,0.921,45,0.939,47,2.787,61,1.078,105,3.474,119,3.171,156,3.841,225,2.069,237,2.177,288,4.324,391,3.453,418,3.903,421,4.052,437,3.764,441,3.119,449,3.167,515,2.22,536,2.584,560,3.244,642,2.715,662,4.432,761,3.171,813,2.069,1044,5.24,1279,4.842,1340,3.244,1341,3.07,1376,3.732,1390,5.023,1428,4.759,1430,6.309,1576,3.772,1590,5.24,1858,5.875,1859,5.875,1860,5.511,1861,5.875,1862,5.875,1863,5.875,1864,5.875]],["title/ds/linked-list/cll/#cll-sorted-insert",[449,1.79,515,1.683,1860,4.179]],["text/ds/linked-list/cll/#cll-sorted-insert",[41,1.459,44,1.9,45,1.487,47,2.654,61,1.468,67,1.572,79,2.047,93,2.564,133,1.539,441,2.932,813,2.002,1340,6.031,1375,1.823,1376,4.55,1428,6.213,1430,7.198,1865,5.595,1866,5.595]],["title/ds/linked-list/count/",[50,4.101]],["text/ds/linked-list/count/",[3,2.923,15,1.392,19,2.019,39,1.712,41,1.463,42,1.984,45,1.491,50,5.965,61,1.277,67,1.822,70,1.861,77,3.024,79,2.373,83,2.948,332,2.9,813,2.209,1340,5.453,1341,5.159,1375,2.741,1376,3.532,1867,6.488,1868,6.488,1869,6.488]],["title/ds/linked-list/count/#counting",[50,4.101]],["text/ds/linked-list/count/#counting",[332,4.075]],["title/ds/linked-list/count/#iterative",[77,3.164]],["text/ds/linked-list/count/#iterative",[19,1.813,39,1.698,41,1.451,42,1.606,45,1.479,50,6.048,61,1.369,79,2.763,813,1.984,1340,5.763,1341,4.837,1375,2.462,1376,3.172,1867,7.554]],["title/ds/linked-list/count/#recursive",[83,3.084]],["text/ds/linked-list/count/#recursive",[15,1.733,19,1.938,39,1.481,41,1.265,42,2.049,45,1.29,67,2.268,70,2.316,813,2.12,1341,5.036,1375,2.631,1376,3.39,1868,8.073,1869,8.073]],["title/ds/linked-list/deletion/",[1491,3.034]],["text/ds/linked-list/deletion/",[3,2.65,39,0.979,41,1.502,42,1.569,45,1.531,61,1.389,67,2.074,79,3.339,93,3.383,133,2.031,286,2.447,441,2.325,813,2.398,975,4.331,1262,5.186,1282,5.188,1375,2.975,1376,4.023,1428,6.136,1484,3.6,1491,2.387,1870,5.341,1871,5.341,1872,7.235,1873,4.566]],["title/ds/linked-list/deletion/#deletion",[1491,3.034]],["text/ds/linked-list/deletion/#deletion",[]],["title/ds/linked-list/deletion/#first",[286,3.11]],["text/ds/linked-list/deletion/#first",[41,1.477,45,1.505,61,1.289,79,2.844,133,2.139,813,2.475,1282,3.722,1375,2.534,1376,3.265,1428,6.367,1484,3.791,1870,7.776,1871,7.776,1872,6.648]],["title/ds/linked-list/deletion/#any",[]],["text/ds/linked-list/deletion/#any",[39,1.128,41,1.425,42,1.726,45,1.453,61,1.375,67,2.281,79,3.326,93,3.721,133,1.691,441,2.557,813,2.133,975,4.654,1262,5.572,1282,5.27,1375,2.963,1376,4.061,1428,5.493,1484,2.998,1872,6.943,1873,5.256]],["title/ds/linked-list/dll/",[1703,4.058,1843,4.058]],["text/ds/linked-list/dll/",[3,2.299,14,1.271,35,3.81,39,1.129,41,1.32,42,1.449,43,1.728,45,1.298,61,1.463,67,2.062,79,2.842,117,1.337,133,1.875,185,1.337,237,1.963,301,2.607,325,0.767,326,1.63,331,0.905,337,2.916,347,1.129,394,1.417,441,2.146,449,1.665,460,1.764,470,1.89,494,2.262,560,1.384,599,1.222,620,2.065,621,1.559,670,1.802,761,1.352,813,2.541,817,1.583,844,1.536,856,1.245,959,1.764,967,1.06,1163,4.054,1167,1.764,1223,1.178,1259,1.111,1262,6.058,1282,2.946,1337,1.21,1340,4.487,1375,3.153,1376,4.189,1388,1.802,1419,1.695,1427,2.065,1428,5.845,1429,5.167,1430,6.733,1484,2.582,1489,1.844,1490,2.235,1491,1.852,1703,1.89,1829,3.21,1843,1.89,1874,3.542,1875,3.415,1876,2.506,1877,2.506,1878,2.506,1879,4.143,1880,1.728,1881,2.235,1882,6.078,1883,2.506,1884,2.235,1885,2.506,1886,8.682,1887,2.506,1888,2.506,1889,2.235]],["title/ds/linked-list/dll/#doubly-ll",[1703,4.058,1843,4.058]],["text/ds/linked-list/dll/#doubly-ll",[39,1.527,41,1.305,347,3.753,441,2.622,813,2.742,1262,5.103,1376,3.497,1484,5.09]],["title/ds/linked-list/dll/#advantages",[1489,4.996]],["text/ds/linked-list/dll/#advantages",[14,1.999,117,4.445,449,3.347,470,6.282,620,6.864,670,5.989,844,5.103,959,5.862,1223,3.916,1259,3.692,1262,5.103,1491,3.722]],["title/ds/linked-list/dll/#disadvantages",[1490,6.054]],["text/ds/linked-list/dll/#disadvantages",[14,2.184,35,7.11,43,5.065,61,1.004,67,2.063,441,2.313,460,5.169,494,4.967,621,4.568,761,3.964,967,3.107,1262,5.576,1337,3.548,1376,3.084,1874,7.779,1875,7.499,1876,7.344,1877,7.344,1878,7.344,1879,9.099,1880,5.065]],["title/ds/linked-list/dll/#insertion",[449,2.728]],["text/ds/linked-list/dll/#insertion",[39,1.329,41,1.348,42,1.54,45,1.374,61,1.496,67,1.7,79,2.65,133,1.993,237,2.684,301,3.565,441,2.281,599,1.975,813,2.627,1163,4.982,1167,2.852,1262,5.529,1375,3.202,1376,4.201,1388,2.914,1419,2.741,1427,3.339,1428,5.936,1429,6.35,1430,7.267,1829,4.689,1881,3.613,1882,7.67,1883,4.052,1884,3.613]],["title/ds/linked-list/dll/#deletion",[1491,3.034]],["text/ds/linked-list/dll/#deletion",[41,1.004,42,1.774,45,1.024,61,1.269,67,2.607,79,3.052,133,1.763,325,1.963,326,3.284,331,2.315,337,5.874,394,3.625,813,1.683,1262,6.024,1375,3.203,1376,4.279,1428,5.938,1885,6.409,1886,11.004,1887,6.409]],["title/ds/linked-list/dll/#reverse",[856,3.373]],["text/ds/linked-list/dll/#reverse",[41,1.334,45,1.36,61,1.466,79,3.114,133,1.818,185,3.528,560,3.65,813,2.236,817,4.175,1262,6.095,1282,4.76,1340,5.996,1375,3.069,1376,3.574,1428,5.688,1888,6.61,1889,5.895]],["title/ds/linked-list/functions/",[225,1.895,814,3.511]],["text/ds/linked-list/functions/",[3,2.453,42,1.665,132,5.3,154,4.431,225,2.759,287,4.667,814,5.114,967,3.314,1223,3.684,1337,3.784,1341,5.52,1576,5.029,1890,6.987,1891,7.834,1892,6.987,1893,7.834,1894,7.834]],["title/ds/linked-list/functions/#functional-passing",[225,1.895,814,3.511]],["text/ds/linked-list/functions/#functional-passing",[42,1.703,132,5.421,154,4.532,287,4.773,967,3.39,1223,3.767,1337,3.87,1341,5.562,1576,5.143,1890,7.146,1891,8.012,1892,7.146,1893,8.012,1894,8.012]],["title/ds/linked-list/generic/",[92,1.929,536,1.959,664,2.618]],["text/ds/linked-list/generic/",[3,1.672,7,2.984,16,1.347,39,0.979,41,1.431,45,1.352,61,1.355,70,2.118,79,1.954,92,3.663,133,2.726,212,4.339,227,3.841,347,2.407,441,2.875,508,3.931,536,2.349,664,4.339,696,3.931,813,2.794,934,3.684,1223,2.511,1375,1.741,1376,3.553,1428,5.112,1429,5.197,1430,6.365,1484,4.451,1848,4.763,1851,4.402,1895,5.341,1896,4.763,1897,5.341,1898,5.341,1899,5.341,1900,5.341,1901,5.341,1902,5.341,1903,5.341]],["title/ds/linked-list/generic/#generic-implementation-in-c",[92,1.929,536,1.959,664,2.618]],["text/ds/linked-list/generic/#generic-implementation-in-c",[7,3.046,16,1.375,39,1.0,41,1.443,45,1.366,61,1.364,70,2.148,79,1.994,92,3.242,133,2.743,212,4.401,227,3.92,347,2.456,441,2.9,508,4.012,664,3.204,696,4.012,813,2.805,934,3.76,1223,2.563,1375,1.776,1376,3.591,1428,5.167,1429,5.271,1430,6.412,1484,4.49,1848,4.862,1851,4.493,1895,5.451,1896,4.862,1897,5.451,1898,5.451,1899,5.451,1900,5.451,1901,5.451,1902,5.451,1903,5.451]],["title/ds/linked-list/insertion/",[449,2.728]],["text/ds/linked-list/insertion/",[3,2.652,39,1.416,41,1.41,42,1.641,45,1.437,61,1.473,67,1.842,79,1.653,82,1.731,133,2.124,148,1.778,237,2.861,301,2.224,441,2.431,449,1.816,813,2.655,1163,5.181,1167,3.181,1341,2.361,1375,2.931,1376,4.164,1419,3.057,1427,3.725,1428,5.848,1429,6.604,1430,7.05,1576,2.901,1881,4.03,1882,7.555,1884,4.03,1904,5.607,1905,3.502]],["title/ds/linked-list/insertion/#insertion",[449,2.728]],["text/ds/linked-list/insertion/#insertion",[1341,4.723,1576,5.803]],["title/ds/linked-list/insertion/#front-o1",[1419,3.639,1904,4.599]],["text/ds/linked-list/insertion/#front-o1",[39,1.405,41,1.201,45,1.224,61,1.434,133,2.108,237,2.84,441,2.413,813,2.453,1376,3.218,1427,6.316,1428,6.086,1429,6.574,1430,6.967]],["title/ds/linked-list/insertion/#after-node-o1",[813,1.413,1904,4.599]],["text/ds/linked-list/insertion/#after-node-o1",[39,1.276,41,1.379,42,1.479,45,1.405,61,1.386,67,1.954,82,2.664,133,1.914,148,2.738,237,2.578,301,3.424,441,2.191,813,2.533,1167,4.897,1375,2.867,1376,4.05,1429,6.191,1430,6.733,1881,6.205,1882,9.039]],["title/ds/linked-list/insertion/#last-on",[1163,2.97,1905,4.168]],["text/ds/linked-list/insertion/#last-on",[39,1.205,41,1.329,42,1.802,45,1.355,61,1.464,67,1.845,79,2.403,133,1.807,237,2.434,441,2.068,813,2.466,1163,5.672,1375,3.06,1376,4.166,1428,5.993,1429,5.968,1430,6.823,1884,5.858]],["title/ds/linked-list/intro/",[967,2.276,1337,2.599]],["text/ds/linked-list/intro/",[3,3.011,14,2.308,39,0.989,41,1.333,45,1.188,53,2.834,61,0.738,68,4.07,70,2.133,72,2.216,79,1.973,82,2.847,133,1.484,148,2.123,228,2.318,276,2.472,330,3.214,336,2.249,347,2.431,364,3.522,440,4.447,441,2.887,449,2.168,454,3.584,462,3.171,491,3.408,512,3.464,526,4.205,532,4.305,550,3.408,558,2.039,597,3.171,813,2.234,820,4.447,967,3.146,1112,2.79,1223,4.0,1259,2.392,1337,3.592,1375,1.758,1376,3.572,1402,2.912,1424,4.812,1425,2.945,1491,2.411,1906,4.613,1907,6.357,1908,5.395,1909,3.584,1910,5.395,1911,4.812]],["title/ds/linked-list/intro/#linked-list",[967,2.276,1337,2.599]],["text/ds/linked-list/intro/#linked-list",[526,4.985,597,5.18,1223,4.144,1906,7.535,1907,7.535]],["title/ds/linked-list/intro/#why",[68,5.121]],["text/ds/linked-list/intro/#why",[14,2.064,72,3.531,336,3.584,440,7.087,449,3.456,454,5.712,491,5.432,1491,3.843]],["title/ds/linked-list/intro/#drawbacks",[1908,6.788]],["text/ds/linked-list/intro/#drawbacks",[14,2.334,330,4.884,462,4.818,512,5.263,526,4.637,532,6.541,550,5.179,820,6.757,1223,3.855,1402,4.425,1907,7.009,1909,5.446,1910,8.199]],["title/ds/linked-list/intro/#representation",[364,4.431]],["text/ds/linked-list/intro/#representation",[14,2.252,39,1.416,41,1.21,70,2.692,276,3.537,347,3.479,441,3.183,558,2.917,813,2.654,967,3.266,1112,3.991,1223,3.63,1337,3.729,1376,3.939,1911,6.885]],["title/ds/linked-list/intro/#traversal",[1259,3.009]],["text/ds/linked-list/intro/#traversal",[41,1.477,45,1.505,53,3.182,61,1.064,79,2.844,82,3.609,133,2.139,148,3.06,228,3.34,441,2.449,1375,2.534,1376,3.265,1424,6.935,1425,4.245]],["title/ds/linked-list/reverse/",[856,2.673,1843,4.058]],["text/ds/linked-list/reverse/",[3,2.58,41,1.498,42,1.625,45,1.527,61,1.477,67,1.578,77,1.711,79,2.055,83,2.553,87,1.326,133,2.103,325,1.72,331,2.029,332,2.511,335,1.53,350,2.511,394,2.077,813,2.449,856,2.791,1262,5.541,1282,4.576,1340,4.798,1341,5.551,1368,3.139,1375,3.115,1376,4.511,1619,1.898,1843,2.77,1912,3.672,1913,4.63,1914,3.672,1915,3.672,1916,3.672,1917,3.672,1918,8.064,1919,3.672,1920,3.672,1921,3.672,1922,3.672,1923,3.672,1924,2.845,1925,2.845]],["title/ds/linked-list/reverse/#reverse-ll",[856,2.673,1843,4.058]],["text/ds/linked-list/reverse/#reverse-ll",[]],["title/ds/linked-list/reverse/#iterative",[77,3.164]],["text/ds/linked-list/reverse/#iterative",[41,1.356,45,1.382,61,1.493,79,2.48,133,1.865,325,2.076,331,2.448,332,3.03,350,3.03,813,2.272,856,3.368,1262,6.152,1340,5.857,1341,4.521,1375,3.106,1376,4.355]],["title/ds/linked-list/reverse/#recursive",[83,3.084]],["text/ds/linked-list/reverse/#recursive",[41,1.105,42,1.885,45,1.126,61,1.327,67,2.492,325,2.159,331,2.546,332,3.151,350,3.151,394,3.988,813,2.33,1341,5.682,1375,3.163,1376,4.407,1912,7.05,1913,7.311,1914,7.05]],["title/ds/linked-list/reverse/#tail-recursive-method",[83,2.024,87,1.609,1368,3.808]],["text/ds/linked-list/reverse/#tail-recursive-method",[41,1.485,42,1.824,45,1.513,61,1.367,133,2.361,813,2.488,1262,5.805,1341,5.523,1375,2.181,1376,4.338,1915,6.693,1916,6.693,1917,6.693,1918,9.586,1919,6.693]],["title/ds/linked-list/reverse/#stack",[335,2.829]],["text/ds/linked-list/reverse/#stack",[41,1.494,45,1.522,61,1.451,79,2.48,133,1.865,813,1.78,1282,5.275,1341,4.979,1375,2.82,1376,4.355,1619,3.505,1920,6.779,1921,6.779,1922,6.779,1923,6.779,1924,5.253,1925,5.253]],["title/ds/linked-list/search/",[452,2.916]],["text/ds/linked-list/search/",[3,2.268,39,1.328,42,1.918,45,1.57,61,1.234,82,3.455,148,3.55,252,6.46,452,3.112,1161,5.993,1282,4.922,1341,4.713,1375,2.361,1376,3.041,1889,6.46,1926,9.022,1927,7.244,1928,7.244,1929,7.244]],["title/ds/linked-list/search/#search",[452,2.916]],["text/ds/linked-list/search/#search",[39,1.347,42,1.934,45,1.579,61,1.244,82,3.485,148,3.581,252,6.55,1161,6.044,1282,4.947,1341,4.754,1375,2.393,1376,3.084,1889,6.55,1926,9.099,1927,7.344,1928,7.344,1929,7.344]],["title/ds/linked-list/swap/",[560,3.748]],["text/ds/linked-list/swap/",[3,1.639,38,3.626,39,1.335,40,5.714,41,1.543,42,1.113,45,1.573,61,1.409,67,2.352,93,2.399,133,2.003,173,5.273,441,2.293,560,2.891,598,3.361,682,3.478,757,3.256,813,2.498,967,2.215,1163,2.891,1282,3.486,1337,2.529,1341,2.735,1375,2.373,1376,3.516,1428,6.224,1930,5.235,1931,5.235,1932,5.235,1933,5.235,1934,5.235]],["title/ds/linked-list/swap/#swapping",[560,3.748]],["text/ds/linked-list/swap/#swapping",[38,3.636,39,1.345,40,5.73,41,1.548,42,1.124,45,1.578,61,1.412,67,2.364,93,2.423,133,2.017,173,5.286,441,2.309,598,3.394,682,3.512,757,3.289,813,2.507,967,2.237,1163,2.92,1282,3.51,1337,2.554,1341,2.763,1375,2.389,1376,3.534,1428,6.239,1930,5.288,1931,5.288,1932,5.288,1933,5.288,1934,5.288]],["title/ds/linked-list/vs-array/",[108,1.19,626,2.296,967,1.608,1337,1.836]],["text/ds/linked-list/vs-array/",[3,2.407,14,2.466,15,1.515,16,0.799,19,1.694,21,2.328,39,1.294,41,0.496,61,0.433,70,0.908,97,1.94,100,1.476,108,2.407,112,1.122,118,2.142,128,2.904,178,2.616,203,1.588,237,1.173,258,1.728,325,0.969,335,1.319,336,1.319,347,1.427,348,2.453,390,2.764,421,2.184,441,1.955,449,2.012,454,3.326,461,2.103,462,2.942,512,2.032,519,1.861,526,1.791,534,1.709,550,2.0,576,1.886,597,1.861,599,1.544,600,1.709,626,1.912,670,2.277,813,1.631,823,2.228,848,2.33,881,2.388,953,4.954,967,3.252,970,2.228,1143,3.556,1164,2.032,1259,1.404,1267,2.228,1336,2.609,1337,3.948,1339,1.748,1341,1.654,1402,1.709,1484,2.441,1491,1.415,1529,2.184,1874,6.034,1890,2.824,1904,2.707,1905,2.453,1907,2.707,1909,2.103,1935,3.166,1936,3.166,1937,3.166,1938,4.28,1939,5.825,1940,3.166,1941,3.166,1942,3.453,1943,3.166,1944,3.166,1945,3.166,1946,3.166,1947,2.824,1948,2.707,1949,3.166,1950,2.97,1951,3.387,1952,2.609,1953,4.696,1954,3.166,1955,2.707,1956,3.166,1957,5.006,1958,3.166,1959,3.166,1960,3.166,1961,3.166,1962,8.326,1963,8.031,1964,8.031,1965,8.326,1966,5.825,1967,3.166,1968,5.006,1969,7.668,1970,5.006,1971,3.166,1972,2.824,1973,5.006,1974,5.006,1975,3.166,1976,2.388,1977,2.609]],["title/ds/linked-list/vs-array/#linked-list-vs-arrays",[108,1.19,626,2.296,967,1.608,1337,1.836]],["text/ds/linked-list/vs-array/#linked-list-vs-arrays",[]],["title/ds/linked-list/vs-array/#array",[108,2.126]],["text/ds/linked-list/vs-array/#array",[14,2.385,15,1.595,19,1.783,21,2.251,39,1.505,41,0.663,61,0.578,70,1.214,100,1.972,108,2.327,118,2.862,128,2.453,178,3.265,203,2.122,258,2.309,325,1.295,335,1.763,336,1.763,347,1.906,421,2.917,441,1.332,454,2.81,461,2.81,462,3.672,512,2.715,519,2.486,534,2.283,550,2.672,576,2.52,597,2.486,599,2.062,600,2.283,670,3.042,813,1.111,848,3.113,881,3.191,953,4.986,967,2.644,970,2.977,1143,3.579,1164,2.715,1267,2.977,1336,3.486,1337,3.019,1402,2.283,1484,3.047,1491,1.89,1874,6.353,1890,3.772,1904,3.616,1907,3.616,1909,2.81,1935,4.23,1936,4.23,1937,4.23,1938,3.616,1939,5.862,1940,4.23,1941,4.23,1942,2.917,1943,4.23,1944,4.23,1945,4.23,1946,4.23,1947,3.772,1948,3.616,1949,4.23,1950,3.968,1951,4.228,1952,3.486,1953,3.968,1954,4.23,1955,3.616,1956,4.23,1957,6.249,1958,4.23,1959,4.23,1960,4.23,1961,4.23,1962,7.7,1963,6.971,1964,7.7,1965,7.7,1966,3.968,1967,4.23,1968,6.249,1969,5.862,1970,6.249,1971,4.23,1972,3.772]],["title/ds/linked-list/vs-array/#inserting",[449,2.728]],["text/ds/linked-list/vs-array/#inserting",[14,2.576,15,1.427,19,1.596,21,2.589,97,4.076,237,2.464,390,4.72,441,2.094,449,2.673,813,1.747,1962,9.351,1963,9.351,1964,8.86,1965,9.351,1966,8.018,1969,9.351,1973,8.548,1974,8.548,1975,6.651]],["title/ds/linked-list/vs-array/#how-to-optimise",[348,5.26]],["text/ds/linked-list/vs-array/#how-to-optimise",[441,2.775,823,6.204,967,3.729,1337,4.257,1339,4.867]],["title/ds/linked-list/vs-array/#linked-list",[967,2.276,1337,2.599]],["text/ds/linked-list/vs-array/#linked-list",[14,1.866,16,1.961,112,2.756,128,4.511,454,5.166,526,4.398,813,2.042,953,6.204,1143,4.453,1259,3.448,1337,3.756,1341,4.063,1529,5.363,1874,6.648,1905,6.025,1938,6.648,1939,7.295,1942,5.363,1953,7.295,1976,5.866,1977,6.409]],["title/ds/linked-list/xor-dll/",[35,3.869,1829,4.168]],["text/ds/linked-list/xor-dll/",[3,2.826,35,6.492,39,1.21,41,1.475,42,0.969,43,3.144,45,1.442,53,1.343,61,1.407,79,2.414,82,1.746,119,2.46,133,1.816,148,1.794,173,2.333,237,1.689,268,3.028,271,2.975,276,2.089,297,2.578,347,2.054,364,2.975,441,2.842,449,1.832,558,1.722,813,2.791,967,1.928,1167,3.208,1262,4.755,1337,2.202,1341,3.448,1375,2.528,1376,3.571,1418,4.065,1425,2.488,1428,5.685,1430,5.65,1829,3.532,1875,7.439,1918,8.05,1978,4.558,1979,4.558,1980,4.558,1981,4.558,1982,4.065,1983,4.558,1984,4.558,1985,4.558]],["title/ds/linked-list/xor-dll/#xor-dll",[35,3.869,1829,4.168]],["text/ds/linked-list/xor-dll/#xor-dll",[]],["title/ds/linked-list/xor-dll/#representation",[364,4.431]],["text/ds/linked-list/xor-dll/#representation",[35,5.851,39,1.492,41,1.275,268,5.404,271,5.311,276,3.728,347,3.666,441,2.562,558,3.074,813,2.715,1167,5.726,1376,3.416,1875,6.705]],["title/ds/linked-list/xor-dll/#xor-utility",[35,3.869,1418,4.798]],["text/ds/linked-list/xor-dll/#xor-utility",[35,5.942,41,1.295,42,1.756,43,5.699,45,1.32,173,4.229,813,2.733,1978,8.263,1979,8.263,1980,8.263,1981,8.263]],["title/ds/linked-list/xor-dll/#insert",[449,2.728]],["text/ds/linked-list/xor-dll/#insert",[39,1.302,41,1.396,45,1.423,61,1.438,79,2.596,133,1.952,237,2.63,441,3.065,813,2.339,1375,2.313,1428,6.483,1430,6.782,1875,8.023,1982,6.33,1983,7.098]],["title/ds/linked-list/xor-dll/#print",[297,3.839]],["text/ds/linked-list/xor-dll/#print",[35,4.814,41,1.345,45,1.371,53,1.973,61,1.413,79,2.448,82,2.563,119,3.613,133,1.841,148,2.634,441,2.108,813,2.713,967,2.832,1262,5.805,1337,3.233,1341,4.484,1375,2.797,1376,3.978,1425,3.654,1875,5.517,1918,9.214,1984,6.693,1985,6.693]],["title/ds/queue/dequeue/",[1986,4.431]],["text/ds/queue/dequeue/",[3,2.183,14,0.912,15,2.072,16,1.241,19,2.113,36,3.113,39,1.427,41,1.543,42,1.778,44,0.767,45,1.558,61,1.358,67,2.474,69,0.921,76,1.538,82,3.372,93,1.035,94,4.348,95,1.248,108,0.707,112,0.801,117,2.626,133,2.141,148,2.743,159,0.994,170,1.427,228,2.764,234,1.145,276,1.035,286,1.035,305,1.053,325,0.692,335,0.942,336,3.486,347,1.018,350,1.699,394,1.278,423,1.625,429,0.994,449,0.908,455,1.756,536,0.994,558,0.854,599,2.398,603,1.278,621,1.405,642,1.044,761,1.219,762,1.145,763,1.59,817,1.427,897,1.365,911,1.233,924,1.311,967,0.956,975,3.567,1162,2.015,1337,1.091,1371,1.59,1419,6.66,1454,4.55,1480,2.015,1491,1.699,1599,1.558,1620,1.625,1624,2.293,1654,2.015,1702,2.571,1703,1.704,1986,1.475,1987,2.259,1988,2.259,1989,4.614,1990,2.259,1991,3.565,1992,4.931,1993,4.853,1994,3.565,1995,3.565,1996,2.259,1997,2.259,1998,1.862,1999,5.5,2000,2.015,2001,2.259,2002,2.259,2003,2.259,2004,2.259,2005,1.932,2006,2.259,2007,7.868,2008,2.259,2009,2.259,2010,2.259,2011,2.259,2012,2.259,2013,2.259,2014,2.259,2015,2.259,2016,2.259,2017,2.259,2018,2.259,2019,2.259,2020,2.259,2021,5.768,2022,2.259,2023,2.259,2024,2.259,2025,2.259,2026,2.259,2027,2.259,2028,2.259]],["title/ds/queue/dequeue/#dequeue",[1986,4.431]],["text/ds/queue/dequeue/#dequeue",[14,2.064,117,4.59,423,6.184,449,3.456,599,4.192,1491,3.843,1624,4.008,1987,8.599]],["title/ds/queue/dequeue/#operations",[76,2.748]],["text/ds/queue/dequeue/#operations",[1988,8.599,1989,8.066,1990,8.599,1991,8.066,1992,7.351,1993,6.486,1994,8.066,1995,8.066]],["title/ds/queue/dequeue/#application",[762,3.439]],["text/ds/queue/dequeue/#application",[15,1.401,16,2.361,19,1.567,76,2.642,112,2.314,117,4.508,159,2.871,170,4.124,234,3.308,286,2.991,305,3.043,325,1.999,335,2.721,336,2.721,350,2.918,429,2.871,455,3.903,599,4.117,603,3.692,621,4.061,642,3.017,761,3.523,763,4.595,911,3.563,924,3.786,1162,5.822,1371,4.595,1491,2.918,1599,4.502,1620,4.695,1624,3.043,1654,5.822,1702,4.417,1996,6.528,1997,6.528,1998,5.38,1999,7.22,2000,5.822,2001,6.528,2002,6.528,2003,6.528]],["title/ds/queue/dequeue/#implementation",[536,2.985]],["text/ds/queue/dequeue/#implementation",[14,2.151,350,4.006,2004,8.963]],["title/ds/queue/dequeue/#doubly-linked-list",[967,1.885,1337,2.152,1703,3.36]],["text/ds/queue/dequeue/#doubly-linked-list",[817,5.76]],["title/ds/queue/dequeue/#circular-array",[108,1.684,1702,3.639]],["text/ds/queue/dequeue/#circular-array",[15,2.142,19,2.197,36,3.505,39,1.544,41,1.604,42,1.902,44,0.93,45,1.623,61,1.409,67,2.623,69,1.117,82,3.576,93,1.255,94,4.703,95,1.513,133,2.315,148,3.015,228,3.07,276,1.255,336,3.627,347,1.234,394,1.549,558,1.035,897,1.655,975,3.921,1419,6.924,1454,5.001,1480,2.443,1624,1.277,1989,4.182,1991,2.57,1992,4.818,1993,4.899,1994,2.57,1995,2.57,1999,4.818,2005,2.342,2006,2.739,2007,8.226,2008,2.739,2009,2.739,2010,2.739,2011,2.739,2012,2.739,2013,2.739,2014,2.739,2015,2.739,2016,2.739,2017,2.739,2018,2.739,2019,2.739,2020,2.739,2021,6.494,2022,2.739,2023,2.739,2024,2.739,2025,2.739,2026,2.739,2027,2.739,2028,2.739]],["title/ds/queue/intro/",[1624,3.164]],["text/ds/queue/intro/",[3,2.126,13,0.713,15,1.342,16,0.919,19,0.874,23,1.546,32,0.938,38,0.771,39,1.55,41,1.437,42,1.841,45,1.384,53,0.633,57,1.201,61,1.374,66,2.748,67,1.756,70,1.361,73,1.337,76,2.749,82,1.395,100,1.002,106,0.916,108,2.126,112,1.681,117,1.945,128,1.247,133,1.305,148,0.846,154,1.216,159,1.602,165,1.28,168,1.263,182,2.233,203,1.078,228,0.923,237,1.757,276,0.985,299,1.201,325,1.452,326,2.46,331,0.776,336,3.422,347,2.137,350,2.794,418,1.428,419,1.582,428,1.403,441,1.968,442,1.317,449,0.864,455,0.993,472,3.724,475,1.298,485,1.771,536,2.456,546,1.216,558,0.812,711,1.513,762,1.089,763,2.564,781,2.378,785,1.665,839,2.036,844,1.317,911,1.173,967,0.909,1139,1.231,1223,1.011,1233,1.665,1282,3.251,1313,1.513,1337,1.038,1339,1.187,1375,2.213,1376,2.345,1419,6.294,1484,1.776,1491,0.961,1562,5.839,1624,5.027,1676,1.665,1678,1.665,1702,1.454,1808,3.675,1986,3.646,2007,7.556,2029,1.917,2030,4.456,2031,1.917,2032,2.149,2033,1.917,2034,1.715,2035,2.149,2036,2.149,2037,2.149,2038,2.149,2039,1.917,2040,2.149,2041,2.149,2042,2.149,2043,3.418,2044,2.016,2045,2.149,2046,1.454,2047,2.149,2048,2.149,2049,2.149,2050,2.149,2051,2.149,2052,2.149,2053,2.149,2054,2.149,2055,2.149,2056,2.149,2057,5.585,2058,2.149,2059,2.149,2060,4.743,2061,2.149,2062,2.149,2063,6.251,2064,2.149,2065,1.771,2066,2.149]],["title/ds/queue/intro/#queue",[1624,3.164]],["text/ds/queue/intro/#queue",[2029,8.132]],["title/ds/queue/intro/#operations",[76,2.748]],["text/ds/queue/intro/#operations",[73,5.349,911,4.694,1233,6.662,1419,5.817,1986,5.613,2007,7.087,2030,6.86,2031,7.669]],["title/ds/queue/intro/#application",[762,3.439]],["text/ds/queue/intro/#application",[16,1.79,32,3.097,106,3.026,112,2.515,128,4.117,154,4.014,159,3.917,165,4.228,441,2.805,763,6.27,781,5.815,785,5.5,839,4.977,2032,7.098,2033,6.33,2034,5.663,2035,7.098,2036,7.098,2037,7.098,2038,7.098,2039,6.33,2040,7.098,2041,7.098,2042,7.098,2043,8.356,2044,6.658,2045,7.098,2046,4.802]],["title/ds/queue/intro/#implementation",[536,2.985]],["text/ds/queue/intro/#implementation",[]],["title/ds/queue/intro/#array",[108,2.126]],["text/ds/queue/intro/#array",[13,1.047,15,1.647,16,0.796,19,1.199,23,2.27,39,1.715,41,1.389,42,1.987,45,1.366,53,0.93,61,1.327,66,3.768,67,1.403,70,1.778,76,2.022,82,1.913,100,1.471,108,2.404,112,1.77,133,0.868,148,1.242,168,1.855,203,1.584,228,1.356,237,1.851,276,1.446,299,1.764,325,0.967,326,2.439,331,1.14,336,3.897,347,1.422,350,3.149,419,2.323,428,2.06,441,0.994,442,1.934,449,1.269,455,1.459,472,4.573,475,1.907,536,2.725,546,1.785,558,1.193,711,2.222,844,1.934,1139,1.808,1313,2.222,1339,1.743,1419,5.785,1562,6.718,1624,5.201,1676,2.446,1678,2.446,1702,2.136,1808,4.802,1986,2.06,2007,7.047,2030,3.985,2047,3.156,2048,3.156,2049,3.156,2050,3.156,2051,3.156,2052,3.156,2053,3.156,2054,3.156,2055,3.156,2056,3.156,2057,7.046,2058,3.156,2059,3.156,2060,6.197,2061,3.156,2062,3.156]],["title/ds/queue/intro/#linked-list",[967,2.276,1337,2.599]],["text/ds/queue/intro/#linked-list",[38,1.757,39,0.898,41,1.554,42,1.477,45,1.482,57,2.736,61,1.46,67,2.268,76,3.268,117,3.708,133,1.911,182,4.257,237,1.814,325,2.127,326,2.734,347,3.13,350,2.188,418,3.252,441,2.188,485,4.035,1223,2.302,1282,4.614,1375,3.141,1376,3.69,1419,6.853,1484,3.387,1491,2.188,1624,3.238,1986,4.535,2007,8.171,2030,3.906,2063,9.28,2064,4.896,2065,4.035,2066,4.896]],["title/ds/queue/print-binary/",[163,2.06,297,3.043]],["text/ds/queue/print-binary/",[3,2.94,15,1.41,16,1.657,41,1.329,45,1.355,53,2.924,54,3.67,57,3.67,61,1.16,82,3.247,100,3.062,105,2.567,133,1.807,148,2.585,163,2.515,185,3.506,255,3.759,297,3.715,334,2.659,1084,5.858,1401,5.414,1599,4.53,1624,3.062,2067,6.569,2068,6.569,2069,6.569,2070,3.913,2071,6.569,2072,6.91,2073,4.53,2074,4.53,2075,4.955,2076,6.569,2077,6.569]],["title/ds/queue/print-binary/#print-binary",[163,2.06,297,3.043]],["text/ds/queue/print-binary/#print-binary",[]],["title/ds/queue/print-binary/#simple",[54,3.793]],["text/ds/queue/print-binary/#simple",[15,1.891,53,2.597,57,4.925,334,3.568,2067,8.814]],["title/ds/queue/print-binary/#using-queues",[16,1.357,1624,2.507]],["text/ds/queue/print-binary/#using-queues",[41,1.402,45,1.429,53,2.878,61,1.223,82,3.426,100,3.331,105,2.793,133,1.966,148,2.812,185,3.814,255,3.966,1084,6.373,1401,5.889,1599,4.928,2068,7.146,2069,7.146,2070,4.257,2071,7.146,2072,7.186,2073,4.928,2074,4.928,2075,5.39,2076,7.146,2077,7.146]],["title/ds/queue/priority-queue/",[1624,2.507,1744,3.573]],["text/ds/queue/priority-queue/",[3,3.222,14,2.279,21,1.578,39,1.331,41,0.816,45,0.832,76,2.109,106,2.221,108,1.631,112,3.201,128,3.022,332,2.328,350,3.243,392,3.747,429,3.191,448,1.881,449,2.917,472,4.323,509,3.747,536,2.291,548,2.291,597,3.062,621,3.24,624,2.911,641,3.147,644,2.946,669,3.291,673,4.293,674,3.667,761,3.917,762,3.677,763,3.667,785,4.036,841,3.747,911,2.844,967,2.204,1143,2.983,1240,5.108,1259,2.309,1337,2.516,1484,2.54,1491,3.732,1624,4.21,1744,6.532,1748,4.646,1749,3.667,1905,4.036,1986,3.401,2078,5.209,2079,6.808,2080,5.209,2081,5.209,2082,6.808,2083,5.209]],["title/ds/queue/priority-queue/#priority-queue",[1624,2.507,1744,3.573]],["text/ds/queue/priority-queue/#priority-queue",[]],["title/ds/queue/priority-queue/#queue-with-properties",[624,3.006,1624,2.507]],["text/ds/queue/priority-queue/#queue-with-properties",[21,2.483,106,3.495,112,3.676,548,3.606,911,4.475,1491,3.664,1624,3.822,1744,6.461,1986,5.352,2078,8.199,2079,7.691]],["title/ds/queue/priority-queue/#operations",[76,2.748]],["text/ds/queue/priority-queue/#operations",[1744,5.904,2080,8.888,2081,8.888,2082,8.337]],["title/ds/queue/priority-queue/#implementation",[536,2.985]],["text/ds/queue/priority-queue/#implementation",[39,1.834,41,1.348,45,1.374,472,5.959,1484,4.192,1744,5.712]],["title/ds/queue/priority-queue/#arrays",[108,2.126]],["text/ds/queue/priority-queue/#arrays",[14,2.489,112,2.906,332,3.664,350,3.664,449,3.295,597,4.818,761,4.425,1240,5.771,1259,3.635,1905,6.352,2082,7.691,2083,8.199]],["title/ds/queue/priority-queue/#linked-list",[967,2.276,1337,2.599]],["text/ds/queue/priority-queue/#linked-list",[621,5.528,761,4.797,1240,6.256,1491,3.972]],["title/ds/queue/priority-queue/#heap",[1143,3.887]],["text/ds/queue/priority-queue/#heap",[14,2.401,350,3.843,392,6.184,449,3.456,841,6.184,1491,3.843,2079,8.066]],["title/ds/queue/priority-queue/#applications",[762,3.439]],["text/ds/queue/priority-queue/#applications",[128,4.647,429,4.22,448,2.893,509,5.762,641,4.84,644,4.532,669,5.061,673,6.603,674,5.639,762,4.06,763,5.639,785,6.208,1624,3.735,1744,5.322,1748,7.146,1749,5.639]],["title/ds/queue/using-stack/",[16,1.124,335,1.857,1624,2.076]],["text/ds/queue/using-stack/",[3,2.174,15,1.626,16,1.233,21,2.102,38,3.248,39,1.552,41,1.587,42,1.611,45,1.563,61,0.949,69,1.994,76,3.555,82,2.332,87,2.914,93,1.408,112,2.685,121,1.31,133,1.675,148,2.397,156,1.499,164,1.659,225,1.083,266,2.382,285,2.164,326,1.21,331,2.199,334,1.98,335,3.527,337,4.287,347,2.744,427,2.533,436,2.43,437,1.938,465,2.741,472,2.913,475,4.193,535,1.942,561,4.181,628,2.007,819,2.211,865,2.741,951,2.12,1139,3.488,1240,4.287,1267,3.442,1273,3.847,1335,3.902,1339,4.456,1420,2.042,1484,2.969,1580,3.628,1619,1.589,1624,3.236,1701,2.007,1924,2.382,1925,2.382,1986,5.524,2030,3.902,2065,5.019,2070,3.628,2072,3.599,2075,3.689,2084,4.719,2085,4.588,2086,4.588,2087,5.713,2088,4.588,2089,3.074,2090,3.074,2091,4.588,2092,3.074,2093,5.431,2094,3.074,2095,3.074,2096,3.074,2097,3.074,2098,3.074,2099,3.074,2100,3.074,2101,3.074,2102,4.89,2103,4.362]],["title/ds/queue/using-stack/#queue-using-stack",[16,1.124,335,1.857,1624,2.076]],["text/ds/queue/using-stack/#queue-using-stack",[]],["title/ds/queue/using-stack/#costly-enqueue",[1267,3.786,2030,4.292]],["text/ds/queue/using-stack/#costly-enqueue",[15,1.312,21,1.851,38,3.254,39,1.484,41,1.616,42,1.299,45,1.603,61,0.836,76,2.474,82,2.341,133,1.682,148,2.406,331,2.208,335,3.371,337,4.303,347,2.755,436,3.037,437,2.423,475,3.693,561,5.226,1139,3.501,1273,3.862,1335,4.877,1339,4.467,1484,2.98,1580,3.641,1624,2.849,1986,3.99,2065,5.038,2070,3.641,2072,4.499,2075,4.611,2084,4.736,2085,5.734,2086,5.734,2087,7.589,2088,5.734,2089,6.113,2090,6.113,2091,5.734,2092,6.113,2093,5.452,2094,6.113]],["title/ds/queue/using-stack/#costly-dequeue",[1267,3.786,1986,3.511]],["text/ds/queue/using-stack/#costly-dequeue",[15,1.926,21,2.509,38,2.973,39,1.317,41,1.534,42,1.091,45,1.509,61,0.702,76,3.823,82,1.966,87,3.241,93,2.352,112,2.936,133,1.412,148,2.02,266,3.978,285,3.613,326,2.02,331,1.854,335,2.994,337,3.613,347,2.313,427,4.231,436,2.551,437,2.034,465,4.578,475,3.101,535,3.243,561,4.389,628,3.351,865,4.578,951,3.541,1139,2.94,1240,5.832,1273,3.243,1335,4.096,1339,4.575,1484,2.503,1580,3.058,1624,2.393,1986,5.409,2030,4.096,2065,4.231,2070,3.058,2072,3.778,2075,3.872,2084,3.978,2085,4.816,2086,4.816,2087,4.816,2088,4.816,2091,4.816,2093,4.578,2095,5.134,2096,5.134,2097,5.134,2098,5.134,2099,5.134]],["title/ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion",[16,0.604,121,1.021,225,0.844,334,0.97,335,1.664,819,1.723,2100,2.396]],["text/ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion",[38,3.226,39,1.649,41,1.502,42,1.911,45,1.436,61,1.094,69,3.261,76,3.237,82,2.301,87,2.888,112,2.835,133,1.653,148,2.365,156,2.929,164,3.243,331,2.17,334,2.432,337,4.229,347,2.708,472,4.764,475,4.831,1139,3.441,1273,3.796,1339,3.318,1420,3.991,1484,2.929,1580,3.579,1619,3.107,1624,2.801,1701,3.922,1924,4.656,1925,4.656,1986,5.221,2065,4.952,2070,3.579,2084,4.656,2093,5.359,2101,6.009,2102,7.998,2103,7.133]],["title/ds/set-map/map/",[525,4.431]],["text/ds/set-map/map/",[3,2.709,42,1.441,73,5.382,106,2.89,112,3.378,114,3.248,174,4.283,237,3.206,515,2.562,525,5.648,548,3.805,975,5.138,1483,3.245,1663,6.903,2104,6.779,2105,4.586,2106,6.779,2107,6.779,2108,8.583,2109,4.586,2110,6.779,2111,6.779,2112,6.046,2113,5.587,2114,6.046,2115,4.283]],["title/ds/set-map/map/#maps",[525,4.431]],["text/ds/set-map/map/#maps",[73,5.14,112,2.928,114,3.102,237,3.061,525,5.394,975,5.001,1663,7.797,2104,8.263,2105,5.59,2106,8.263,2107,8.263]],["title/ds/set-map/map/#multimap",[2108,5.803]],["text/ds/set-map/map/#multimap",[42,1.617,73,4.733,106,3.243,112,3.296,114,2.856,174,4.806,237,2.819,515,2.875,548,4.09,975,4.759,1483,3.642,2108,8.586,2109,5.148,2110,7.609,2111,7.609,2112,6.786,2113,6.271,2114,6.786,2115,4.806]],["title/ds/set-map/multiset/",[2116,5.416]],["text/ds/set-map/multiset/",[3,2.467,13,1.948,16,1.482,32,2.563,42,1.889,52,2.977,76,2.378,77,3.672,106,3.789,112,3.366,113,5.943,114,3.566,121,2.504,164,3.171,225,2.775,336,2.449,468,4.552,526,3.323,560,3.244,599,2.864,647,7.504,773,5.058,911,4.852,974,2.739,976,4.687,1161,3.903,1715,4.135,2109,3.975,2116,8.31,2117,5.875,2118,5.875,2119,5.875,2120,5.875,2121,5.24,2122,5.24,2123,5.24,2124,5.24]],["title/ds/set-map/multiset/#multiset",[2116,5.416]],["text/ds/set-map/multiset/#multiset",[114,3.365,526,5.069,2109,6.064]],["title/ds/set-map/multiset/#functions",[225,2.391]],["text/ds/set-map/multiset/#functions",[13,2.027,16,1.542,32,2.667,42,1.927,52,3.097,76,2.474,77,3.771,106,3.865,112,3.42,113,6.103,114,3.404,121,2.606,164,3.299,225,2.153,336,2.548,468,4.736,560,3.376,599,2.98,647,7.59,773,5.193,911,4.949,974,2.849,976,4.877,1161,4.061,1715,4.303,2116,8.228,2117,6.113,2118,6.113,2119,6.113,2120,6.113,2121,5.452,2122,5.452,2123,5.452,2124,5.452]],["title/ds/set-map/set-types/",[52,2.726,974,2.507]],["text/ds/set-map/set-types/",[3,2.562,15,1.756,52,4.634,112,3.241,444,6.023,445,6.341,515,3.672,526,4.629,546,3.518,548,4.022,599,3.99,765,6.023,974,2.9,1112,4.231,1371,5.76,1566,3.706,1582,8.666,1734,5.548,1751,4.81,1909,4.132,1977,5.127,2105,4.209,2109,6.83,2116,6.529,2125,6.221,2126,6.221,2127,6.221,2128,6.221]],["title/ds/set-map/set-types/#set-types",[52,2.726,974,2.507]],["text/ds/set-map/set-types/#set-types",[15,1.928,52,3.645,444,6.611,445,6.96,515,3.395,526,5.081,548,4.308,599,4.38,1112,4.645,1582,9.149,1751,5.279,2109,6.94,2116,5.74,2125,7.194,2126,7.194,2127,7.194]],["title/ds/set-map/set-types/#conclusion",[2128,6.788]],["text/ds/set-map/set-types/#conclusion",[52,4.029,112,3.628,515,3.609,546,4.498,765,7.029,1371,6.723,1566,4.737,1734,7.092,1909,5.282,1977,6.554,2105,5.38,2109,5.38,2116,6.344]],["title/ds/set-map/set/",[52,3.439]],["text/ds/set-map/set/",[3,1.922,10,1.183,14,1.185,15,0.667,16,1.245,18,4.75,19,0.746,32,1.357,42,2.054,52,5.144,72,1.277,76,2.484,77,4.573,92,2.137,106,1.326,112,3.659,114,1.167,124,2.104,164,1.679,174,5.739,209,1.781,225,2.684,237,1.152,266,2.41,286,3.202,299,4.532,305,1.45,336,2.057,449,2.808,461,2.066,467,3.633,468,2.41,501,1.935,548,1.368,559,2.694,560,1.717,598,1.996,599,2.407,634,2.563,637,2.774,639,4.068,647,7.313,697,3.761,774,2.41,814,2.03,839,1.738,855,3.55,856,2.453,911,3.35,974,1.45,975,1.592,991,2.066,992,2.563,1161,2.066,1188,2.066,1240,2.189,1339,1.717,1371,2.189,1388,4.414,1421,2.066,1422,3.825,1483,2.363,1491,1.39,1552,2.289,1554,2.563,1555,2.563,1556,2.774,1557,2.774,1558,2.774,1559,2.774,1560,2.774,1563,2.774,1566,4.162,1583,2.774,1663,3.938,1715,2.189,1880,2.145,2109,3.34,2112,4.402,2113,2.563,2114,2.774,2115,1.965,2121,2.774,2122,2.774,2123,2.774,2124,2.774,2129,2.774,2130,3.11,2131,2.659,2132,3.11,2133,3.11,2134,3.11,2135,3.11,2136,3.11,2137,3.11,2138,3.11,2139,2.918,2140,3.11,2141,3.11,2142,2.774]],["title/ds/set-map/set/#set",[52,3.439]],["text/ds/set-map/set/#set",[112,3.098,634,7.204,1371,6.152,1491,3.907,2109,5.914,2129,7.795]],["title/ds/set-map/set/#functions",[225,2.391]],["text/ds/set-map/set/#functions",[10,2.629,14,2.102,18,3.862,42,1.862,52,3.502,77,4.083,92,2.992,112,3.408,286,4.014,299,4.895,336,2.881,559,4.782,599,3.37,856,4.352,1188,4.592,1339,3.817,1388,6.3,1552,5.087,1554,5.697,1555,5.697,1556,6.165,1557,6.165,1558,6.165,1559,6.165,1560,6.165,1563,6.165,1566,5.218]],["title/ds/set-map/set/#manipulation",[1880,4.682]],["text/ds/set-map/set/#manipulation",[15,0.783,16,1.409,18,4.842,19,0.875,32,1.591,42,2.07,52,5.21,72,1.497,76,2.75,77,4.617,92,1.579,106,1.554,112,3.644,114,1.369,124,2.467,164,1.968,174,6.027,209,2.088,225,2.683,237,1.351,266,2.825,286,2.561,299,4.256,305,1.7,336,1.52,449,3.061,461,2.422,467,4.113,468,2.825,501,2.268,548,1.604,560,2.014,598,2.341,599,1.778,637,3.252,639,4.606,647,7.567,697,4.164,774,2.825,814,2.38,839,2.037,855,4.019,911,3.709,974,1.7,975,1.866,991,2.422,992,3.005,1161,2.422,1240,2.567,1388,2.622,1421,2.422,1422,4.33,1483,2.675,1566,3.329,1583,3.252,1663,4.459,1715,2.567,2109,2.467,2112,4.984,2113,3.005,2114,3.252,2115,2.303,2121,3.252,2122,3.252,2123,3.252,2124,3.252,2130,3.646,2131,3.117,2132,3.646,2133,3.646,2134,3.646,2135,3.646,2136,3.646,2137,3.646,2138,3.646,2139,3.421,2140,3.646,2141,3.646,2142,3.252]],["title/ds/stack/intro/",[335,2.829]],["text/ds/stack/intro/",[3,1.769,14,1.226,15,1.096,16,0.693,19,1.645,21,0.832,27,1.014,32,1.199,36,2.412,38,2.335,39,1.642,41,1.436,42,1.757,44,1.518,45,1.431,47,1.304,53,1.317,57,2.066,61,1.192,62,0.683,69,0.633,72,0.638,82,3.337,93,0.711,95,0.857,103,0.705,105,0.607,106,0.662,108,0.861,111,0.764,112,3.133,119,1.996,121,1.172,133,0.756,139,1.28,144,1.451,148,2.697,158,0.811,178,0.811,185,0.829,228,2.624,231,0.868,232,1.203,233,1.794,234,0.787,237,0.575,250,0.829,255,0.688,260,3.128,264,1.117,276,1.259,285,1.093,286,0.711,292,1.05,293,0.901,297,0.878,325,0.842,326,0.611,330,0.925,331,0.993,335,3.895,336,0.647,347,1.238,350,0.694,365,1.171,429,1.626,436,0.771,437,0.615,441,2.049,448,0.561,454,1.031,455,2.361,460,2.603,462,1.615,475,0.938,492,0.901,500,1.093,508,1.143,509,1.977,515,1.397,527,1.171,535,0.981,536,1.626,548,1.966,558,1.397,560,0.857,578,2.091,588,2.35,591,0.997,631,0.912,635,1.28,641,0.938,689,1.385,761,1.483,762,1.393,772,1.385,776,1.385,781,1.794,787,1.615,830,1.031,844,0.952,854,1.093,856,0.771,897,1.66,924,0.901,950,1.239,967,1.163,1108,0.82,1111,1.093,1112,0.803,1170,1.203,1198,1.203,1223,1.739,1233,1.203,1259,0.688,1273,4.523,1278,1.385,1282,1.316,1337,1.328,1339,1.518,1340,0.857,1375,0.896,1376,3.601,1416,1.28,1420,1.031,1435,0.997,1450,0.889,1454,1.794,1580,5.02,1614,1.203,1615,1.28,1619,1.421,1637,1.203,1653,1.385,1655,1.28,1658,1.385,1676,2.13,1678,2.13,1697,1.977,1749,1.093,1752,4.474,1754,1.977,1808,2.13,1872,1.327,1905,1.203,1913,1.28,1924,1.203,1925,1.203,1942,1.896,1952,1.28,1993,2.073,2000,1.385,2031,1.385,2084,1.203,2103,1.385,2143,2.578,2144,1.553,2145,1.553,2146,1.553,2147,1.385,2148,1.553,2149,1.385,2150,1.385,2151,1.553,2152,1.553,2153,1.553,2154,1.457,2155,1.28,2156,1.553,2157,1.553,2158,1.327,2159,1.553,2160,1.553,2161,1.553,2162,1.553,2163,1.553,2164,1.553,2165,2.578,2166,1.553,2167,1.553,2168,1.239,2169,1.553,2170,1.553,2171,4.193,2172,1.553,2173,1.553,2174,1.553,2175,1.553,2176,1.553,2177,1.553,2178,1.553,2179,1.553,2180,1.553,2181,8.264,2182,1.385,2183,1.553,2184,1.553,2185,1.553,2186,1.553,2187,1.553,2188,1.553,2189,1.553,2190,3.698,2191,1.553,2192,1.553,2193,1.553,2194,1.553,2195,1.457,2196,1.385,2197,1.553,2198,1.553,2199,1.553,2200,1.553,2201,1.553,2202,1.553,2203,1.553,2204,3.698,2205,1.553]],["title/ds/stack/intro/#stack",[335,2.829]],["text/ds/stack/intro/#stack",[14,1.968,119,4.425,158,4.283,335,3.417,350,3.664,527,6.185,548,3.606,1273,5.179,1580,4.884,1993,6.185,2143,7.691,2144,8.199,2145,8.199,2146,8.199]],["title/ds/stack/intro/#applications-of-stack",[335,2.242,762,2.726]],["text/ds/stack/intro/#applications-of-stack",[16,1.667,53,1.948,72,2.714,232,5.121,429,3.744,448,2.387,455,4.596,515,2.498,591,4.243,641,3.993,762,3.349,772,5.895,776,5.895,1259,2.93,1278,5.895,1614,5.121,1615,5.448,1653,5.895,1655,5.448,1658,5.895,1749,4.652,1754,4.754,2000,5.895,2147,5.895,2148,6.61,2149,5.895,2150,5.895,2151,6.61,2152,6.61,2153,6.61,2154,6.201,2155,5.448,2156,6.61,2157,6.61,2158,5.651,2159,6.61,2160,6.61,2161,6.61,2162,6.61,2163,6.61,2164,6.61]],["title/ds/stack/intro/#implementation",[536,2.985]],["text/ds/stack/intro/#implementation",[]],["title/ds/stack/intro/#array",[108,2.126]],["text/ds/stack/intro/#array",[15,1.281,19,2.15,36,4.297,38,3.43,39,1.793,41,1.623,42,2.032,44,2.432,45,1.636,47,1.886,61,1.089,82,3.558,95,2.195,105,1.554,139,3.276,144,2.099,148,3.357,228,2.563,276,1.822,335,3.872,336,1.657,347,1.791,454,2.641,462,2.336,500,2.798,508,2.926,509,2.859,536,1.748,558,2.255,588,3.399,761,2.146,830,2.641,844,2.436,897,3.604,924,2.306,1108,2.099,1223,1.869,1233,3.08,1273,2.511,1339,2.195,1450,2.277,1580,3.554,1619,2.055,1676,3.08,1678,3.08,1752,5.848,1942,2.742,1993,2.999,2031,3.545,2143,3.729,2165,3.729,2166,3.975,2167,3.975,2168,3.172,2169,3.975,2170,3.975,2171,5.597,2172,3.975,2173,3.975,2174,3.975,2175,3.975,2176,3.975,2177,3.975,2178,3.975,2179,3.975,2180,3.975]],["title/ds/stack/intro/#linked-list",[967,2.276,1337,2.599]],["text/ds/stack/intro/#linked-list",[19,0.976,27,2.655,39,1.717,41,1.467,42,1.99,45,1.443,61,1.37,82,3.585,112,1.441,133,1.119,144,2.148,148,2.858,228,3.119,234,2.061,237,1.507,250,2.171,260,4.196,276,1.864,330,2.423,335,1.695,347,1.833,441,3.03,462,2.39,509,2.925,536,1.789,558,1.537,588,3.477,761,2.195,950,3.245,967,1.721,1223,1.912,1273,2.569,1282,2.905,1337,1.965,1375,1.978,1376,3.381,1435,2.611,1454,2.655,1580,4.326,1676,3.151,1678,3.151,1752,2.655,1808,4.703,1872,3.477,1942,2.805,1952,3.352,2165,3.815,2171,5.694,2181,10.587,2182,3.627,2183,4.067,2184,4.067,2185,4.067,2186,4.067,2187,4.067,2188,4.067,2189,4.067,2190,7.261,2191,4.067,2192,4.067]],["title/ds/stack/intro/#problems",[455,3.137]],["text/ds/stack/intro/#problems",[14,1.758,15,1.393,16,0.855,19,1.267,21,1.599,32,2.304,39,1.344,41,0.828,44,1.151,45,0.844,47,1.608,53,1.912,57,3.626,61,1.002,62,1.491,69,1.382,82,2.806,93,1.553,103,1.54,106,1.445,108,1.061,111,1.668,112,3.716,119,2.85,121,2.251,133,0.932,148,1.334,178,1.771,185,1.809,228,2.269,231,1.894,233,3.447,255,1.503,264,2.438,285,2.386,286,1.553,292,2.293,293,1.966,297,1.917,325,1.617,326,1.334,331,1.907,335,4.172,365,2.557,429,1.491,436,1.684,437,1.343,460,4.567,475,2.047,492,1.966,515,1.996,535,2.141,548,2.854,560,1.872,578,3.67,631,1.992,635,2.793,689,3.023,781,3.447,787,3.104,854,2.386,856,1.684,1111,2.386,1112,1.752,1170,2.626,1198,2.626,1223,1.594,1273,5.549,1339,1.872,1340,1.872,1376,4.203,1416,2.793,1420,2.251,1454,2.212,1580,5.685,1619,1.752,1637,2.626,1697,3.798,1752,3.447,1754,2.438,1905,2.626,1913,2.793,1924,2.626,1925,2.626,2084,2.626,2103,3.023,2193,3.389,2194,3.389,2195,3.179,2196,3.023,2197,3.389,2198,3.389,2199,3.389,2200,3.389,2201,3.389,2202,3.389,2203,3.389,2204,6.489,2205,3.389]],["title/ds/stack/k-stacks/",[305,2.507,335,2.242]],["text/ds/stack/k-stacks/",[3,2.132,14,1.345,15,1.938,19,1.345,21,1.697,33,2.276,36,3.024,39,1.905,41,1.46,42,1.748,44,1.243,45,1.443,53,2.007,54,2.045,61,1.461,67,1.574,82,2.146,108,1.754,111,2.758,112,1.297,133,1.541,148,2.205,168,2.15,237,2.523,276,1.677,293,2.122,305,3.834,330,2.18,331,1.321,335,2.838,347,1.649,469,8.054,470,2.76,472,4.056,539,3.263,558,1.383,1170,2.835,1233,2.835,1285,3.263,1322,3.263,1376,2.859,1752,4.445,1802,3.016,1992,4.79,2168,2.919,2206,3.659,2207,3.659,2208,3.659,2209,3.659,2210,8.226,2211,3.659,2212,3.659,2213,3.659,2214,3.659,2215,5.603,2216,4.79,2217,5.603,2218,3.659,2219,3.659,2220,3.659,2221,6.809,2222,3.659,2223,3.659,2224,5.603,2225,3.659,2226,5.603,2227,5.603,2228,5.603,2229,3.659,2230,3.659,2231,3.659]],["title/ds/stack/k-stacks/#k-stacks",[305,2.507,335,2.242]],["text/ds/stack/k-stacks/#k-stacks",[]],["title/ds/stack/k-stacks/#simple",[54,3.793]],["text/ds/stack/k-stacks/#simple",[108,2.692,168,5.053,293,4.987,331,3.105,335,3.584,470,6.486,1233,6.662,2206,8.599]],["title/ds/stack/k-stacks/#extra-2-integer-arrays",[21,1.151,33,2.365,108,1.19,330,2.264]],["text/ds/stack/k-stacks/#extra-2-integer-arrays",[14,1.412,15,1.982,19,1.412,21,1.182,36,3.176,39,1.927,41,1.489,42,1.799,44,1.325,45,1.475,53,2.087,61,1.475,67,1.653,82,2.253,111,2.896,112,1.383,133,1.619,148,2.316,237,2.624,276,1.788,305,3.676,335,1.626,347,1.758,469,8.235,472,4.219,539,3.48,558,1.474,1170,3.023,1285,3.48,1322,3.48,1376,2.974,1752,4.623,1802,3.216,1992,5.03,2168,3.113,2207,3.902,2208,3.902,2209,3.902,2210,8.463,2211,3.902,2212,3.902,2213,3.902,2214,3.902,2215,5.884,2216,5.03,2217,5.884,2218,3.902,2219,3.902,2220,3.902,2221,7.083,2222,3.902,2223,3.902,2224,5.884,2225,3.902,2226,5.884,2227,5.884,2228,5.884,2229,3.902,2230,3.902,2231,3.902]],["title/ds/stack/medium-special/",[2232,5.046,2233,4.168]],["text/ds/stack/medium-special/",[3,1.324,15,1.967,19,1.015,39,1.363,41,1.372,42,1.58,45,1.399,50,5.728,61,1.446,63,2.81,67,1.755,79,1.547,81,4.151,105,1.653,112,2.215,133,1.164,168,2.486,185,2.258,237,1.567,335,1.763,441,1.968,472,3.722,798,3.113,981,5.15,1152,7.313,1262,5.03,1341,5.282,1375,2.422,1376,3.12,1429,4.398,1491,1.89,2232,3.968,2233,3.277,2234,4.23,2235,4.23,2236,4.23,2237,9.771,2238,7.431,2239,9.482,2240,4.23,2241,4.23,2242,4.23,2243,4.23,2244,4.23]],["title/ds/stack/medium-special/#medium-special",[2232,5.046,2233,4.168]],["text/ds/stack/medium-special/#medium-special",[15,1.976,19,1.027,39,1.373,41,1.379,42,1.591,45,1.406,50,5.75,61,1.45,63,2.844,67,1.771,79,1.566,81,4.188,105,1.673,112,2.234,133,1.178,168,2.516,185,2.285,237,1.586,335,1.784,441,1.985,472,3.756,798,3.151,981,5.196,1152,7.345,1262,5.06,1341,5.297,1375,2.439,1376,3.142,1429,4.438,1491,1.913,2234,4.281,2235,4.281,2236,4.281,2237,9.786,2238,7.484,2239,9.518,2240,4.281,2241,4.281,2242,4.281,2243,4.281,2244,4.281]],["title/ds/stack/min-special/",[1291,3.249,2233,4.168]],["text/ds/stack/min-special/",[3,1.998,14,2.296,21,1.318,38,3.593,39,1.755,40,5.237,41,1.538,42,1.356,44,1.478,45,1.568,61,1.212,62,1.914,67,1.792,76,2.583,79,1.592,87,2.304,112,2.261,133,1.755,268,2.891,271,2.841,331,2.728,332,2.852,335,2.659,348,3.372,350,2.852,436,2.162,437,1.725,548,1.914,911,3.483,1108,3.369,1273,4.031,1291,3.854,1580,3.801,1595,3.203,1697,3.13,1735,5.259,1752,2.841,1993,6.277,2233,3.372,2245,5.986,2246,7.806,2247,7.806,2248,7.806,2249,7.806,2250,4.352,2251,5.986,2252,5.986,2253,5.986]],["title/ds/stack/min-special/#min-special",[1291,3.249,2233,4.168]],["text/ds/stack/min-special/#min-special",[14,2.158,38,3.44,39,1.649,40,4.524,41,1.502,42,1.277,44,2.041,45,1.531,61,1.094,67,1.688,76,2.432,87,2.888,112,2.835,133,1.653,268,3.991,271,3.922,331,2.17,332,2.686,335,2.504,350,2.686,911,4.366,1108,3.173,1273,3.796,1291,3.63,1580,3.579,1595,4.422,1735,4.952,1752,3.922,1993,6.033,2245,5.637,2246,7.503,2247,7.503,2248,7.503,2249,7.503,2250,6.009,2251,5.637,2252,5.637,2253,5.637]],["title/ds/stack/min-special/#optimised-space-for-2-stacks",[21,1.151,331,1.373,335,1.584,348,2.945]],["text/ds/stack/min-special/#optimised-space-for-2-stacks",[14,2.311,38,3.595,39,1.766,40,5.446,41,1.509,42,1.292,45,1.538,61,1.237,62,2.673,67,1.707,76,2.46,79,2.223,133,1.672,331,2.195,332,2.716,350,2.716,436,3.02,437,2.409,548,2.673,1108,3.209,1273,3.839,1580,3.621,1697,4.371,1735,5.009,1993,6.079,2245,5.702,2246,7.56,2247,7.56,2248,7.56,2249,7.56,2251,5.702,2252,5.702,2253,5.702]],["title/ds/stack/reverse/",[856,3.373]],["text/ds/stack/reverse/",[3,2.222,19,1.703,38,3.197,41,1.6,45,1.631,61,1.218,67,1.994,83,3.225,212,6.0,856,4.837,2254,7.098,2255,7.098,2256,7.098,2257,8.908,2258,7.944,2259,8.908,2260,7.098,2261,7.098]],["title/ds/stack/reverse/#reverse",[856,3.373]],["text/ds/stack/reverse/#reverse",[19,1.727,38,3.224,41,1.608,45,1.639,61,1.229,67,2.021,83,3.269,212,6.029,856,4.463,2254,7.194,2255,7.194,2256,7.194,2257,8.983,2258,8.012,2259,8.983,2260,7.194,2261,7.194]],["title/ds/stack/sort/",[515,2.565]],["text/ds/stack/sort/",[3,1.871,10,2.273,14,1.434,38,3.677,39,1.644,41,1.499,42,1.27,45,1.528,53,1.761,61,1.09,83,3.62,112,2.117,133,2.192,325,2.44,326,2.351,331,2.158,332,2.67,334,2.418,335,3.321,436,2.969,437,2.368,477,4.924,515,2.258,572,3.969,1139,3.422,1269,4.297,1282,3.814,1619,4.12,2262,5.975,2263,5.975,2264,5.975,2265,5.975,2266,5.975,2267,7.968,2268,7.968,2269,7.968,2270,5.975,2271,5.975,2272,5.975]],["title/ds/stack/sort/#sort",[515,2.565]],["text/ds/stack/sort/#sort",[10,2.299,14,1.45,38,3.689,39,1.653,41,1.505,42,1.284,45,1.535,53,1.781,61,1.098,83,3.648,112,2.142,133,2.208,325,2.458,326,2.378,331,2.182,332,2.701,334,2.446,335,3.346,436,3.003,437,2.395,477,4.981,572,4.014,1139,3.461,1269,4.346,1282,3.843,1619,4.151,2262,6.043,2263,6.043,2264,6.043,2265,6.043,2266,6.043,2267,8.028,2268,8.028,2269,8.028,2270,6.043,2271,6.043,2272,6.043]],["title/ds/stack/stock-span/",[1749,3.786,2158,4.599]],["text/ds/stack/stock-span/",[3,2.611,15,2.186,16,1.102,19,1.536,39,1.894,41,1.501,44,2.572,45,1.53,47,3.955,53,2.733,61,1.412,62,1.922,63,2.903,68,3.296,69,1.782,70,1.254,74,2.568,93,3.47,133,2.083,185,2.332,204,8.27,315,4.182,332,2.861,335,2.667,1023,3.897,1297,3.897,1619,3.309,1749,3.076,2084,3.386,2158,3.736,2258,3.897,2273,4.37,2274,6.754,2275,6.004,2276,6.004,2277,6.004,2278,4.37,2279,4.37,2280,4.37,2281,4.37,2282,3.897,2283,4.37,2284,4.37,2285,4.37,2286,4.37,2287,4.37,2288,4.37,2289,4.37,2290,4.37,2291,4.37,2292,4.37,2293,4.37,2294,4.37]],["title/ds/stack/stock-span/#stock-span",[1749,3.786,2158,4.599]],["text/ds/stack/stock-span/#stock-span",[]],["title/ds/stack/stock-span/#naive",[2273,6.788]],["text/ds/stack/stock-span/#naive",[15,2.17,19,1.659,39,1.854,41,1.373,44,2.347,45,1.399,47,4.156,53,2.582,61,1.383,93,3.167,133,1.901,185,3.69,315,5.31,332,3.089,1619,3.574,2274,6.165,2275,6.484,2276,6.484,2277,6.484,2278,6.912,2279,6.912,2280,6.912,2281,6.912]],["title/ds/stack/stock-span/#using-stack",[16,1.357,335,2.242]],["text/ds/stack/stock-span/#using-stack",[15,2.058,39,1.758,41,1.367,44,2.332,45,1.394,53,2.571,61,1.311,62,3.02,68,5.18,69,2.8,70,1.97,93,3.147,133,1.889,332,3.069,1619,3.551,2084,5.321,2258,6.125,2274,6.125,2275,6.442,2276,6.442,2277,6.442,2282,6.125,2283,6.867,2284,6.867,2285,6.867,2286,6.867,2287,6.867,2288,6.867,2289,6.867,2290,6.867]],["title/ds/stack/stock-span/#without-stack",[74,3.161,335,2.242]],["text/ds/stack/stock-span/#without-stack",[15,2.058,19,1.648,39,1.85,41,1.503,44,2.332,45,1.532,47,4.139,53,2.571,61,1.38,63,4.562,93,3.147,133,1.889,204,9.491,1023,6.125,1297,6.125,2274,6.125,2291,6.867,2292,6.867,2293,6.867,2294,6.867]],["title/ds/stack/using-queue/",[16,1.124,335,1.857,1624,2.076]],["text/ds/stack/using-queue/",[3,2.715,15,1.201,16,1.411,38,2.736,41,1.575,42,1.62,45,1.606,61,1.375,79,2.047,94,4.26,133,2.561,335,2.332,1267,5.366,1273,3.535,1580,5.165,1624,2.608,2070,5.546,2168,6.082,2295,8.734,2296,5.595,2297,5.595,2298,7.151,2299,8.734,2300,7.151,2301,8.734,2302,8.734,2303,7.151,2304,5.595,2305,5.595]],["title/ds/stack/using-queue/#stack-using-queue",[16,1.124,335,1.857,1624,2.076]],["text/ds/stack/using-queue/#stack-using-queue",[]],["title/ds/stack/using-queue/#costly-push",[1267,3.786,1273,3.398]],["text/ds/stack/using-queue/#costly-push",[38,2.6,41,1.54,42,1.54,45,1.57,61,1.344,94,4.048,133,2.482,1580,4.315,2070,5.374,2168,5.779,2295,8.463,2296,7.244,2297,7.244,2298,6.795,2299,8.463,2300,6.795,2301,8.463,2302,8.463,2303,6.795]],["title/ds/stack/using-queue/#costly-pop",[1267,3.786,1580,3.204]],["text/ds/stack/using-queue/#costly-pop",[15,1.534,38,2.564,41,1.53,42,1.519,45,1.56,61,1.335,79,2.614,94,3.993,133,2.461,1580,4.257,2070,5.329,2168,5.701,2295,8.391,2298,6.703,2299,8.391,2300,6.703,2301,8.391,2302,8.391,2303,6.703,2304,7.146,2305,7.146]],["title/ds/string/duplicate/",[2105,4.593]],["text/ds/string/duplicate/",[3,2.349,19,2.212,39,1.376,45,1.473,61,1.261,82,3.53,148,2.952,255,3.325,1454,4.896,1510,6.784,1619,3.878,2105,5.075,2306,7.501,2307,6.689,2308,6.689,2309,6.689,2310,7.501,2311,6.689,2312,7.501,2313,7.501,2314,7.501]],["title/ds/string/duplicate/#duplicate",[2105,4.593]],["text/ds/string/duplicate/#duplicate",[19,2.232,39,1.395,45,1.486,61,1.272,82,3.561,148,2.994,255,3.373,1454,4.967,1510,6.844,1619,3.934,2306,7.609,2307,6.786,2308,6.786,2309,6.786,2310,7.609,2311,6.786,2312,7.609,2313,7.609,2314,7.609]],["title/ds/string/frequency/",[771,4.996]],["text/ds/string/frequency/",[3,2.3,19,2.373,39,1.347,45,1.173,61,1.244,70,2.107,82,3.786,148,2.89,255,3.256,771,5.405,1454,4.794,1510,6.696,1619,3.797,2307,6.55,2308,6.55,2309,6.55,2311,6.55,2315,7.344,2316,7.344,2317,7.344,2318,7.344,2319,7.344,2320,7.344]],["title/ds/string/frequency/#frequency",[771,4.996]],["text/ds/string/frequency/#frequency",[19,2.388,39,1.366,45,1.19,61,1.255,70,2.137,82,3.81,148,2.931,255,3.302,1454,4.862,1510,6.755,1619,3.851,2307,6.642,2308,6.642,2309,6.642,2311,6.642,2315,7.448,2316,7.448,2317,7.448,2318,7.448,2319,7.448,2320,7.448]],["title/ds/string/intro/",[255,3.009]],["text/ds/string/intro/",[3,2.751,14,1.267,18,1.894,19,1.557,67,0.952,69,3.43,76,2.138,77,3.702,95,1.872,103,1.54,108,2.923,110,2.987,116,1.752,158,1.771,203,1.7,212,1.992,225,1.194,229,4.475,255,4.776,286,2.42,299,2.951,336,2.201,414,2.494,435,2.626,454,2.251,457,2.386,461,2.251,462,1.992,467,5.392,491,2.141,492,3.063,494,1.85,536,1.491,546,1.917,558,1.281,560,1.872,578,1.917,591,2.176,599,3.872,626,2.047,631,1.992,644,1.917,764,2.293,782,4.353,783,3.023,819,2.438,835,2.793,854,2.386,856,2.624,1112,2.731,1163,1.872,1200,2.793,1223,2.483,1375,1.104,1402,1.829,1441,4.515,1483,3.106,1491,1.515,1552,4.775,1554,2.793,1555,2.793,1562,5.392,1565,3.023,1568,3.023,1578,3.023,1579,3.023,1697,3.798,1701,2.212,1831,2.704,1880,2.338,1909,2.251,1938,2.898,2072,5.844,2075,6.854,2321,7.334,2322,4.214,2323,3.389,2324,3.023,2325,3.389,2326,3.023,2327,3.389,2328,3.389,2329,3.179,2330,3.389,2331,3.023,2332,4.515,2333,3.389,2334,3.389,2335,3.389,2336,3.389,2337,3.389,2338,3.389,2339,3.389,2340,5.281,2341,5.281,2342,3.389]],["title/ds/string/intro/#string",[255,3.009]],["text/ds/string/intro/#string",[435,6.662,1402,4.641,1701,5.613,1909,5.712,2321,7.546,2322,7.981]],["title/ds/string/intro/#stdstring-vs-character-array",[108,1.19,626,2.296,2321,2.868,2323,3.801]],["text/ds/string/intro/#stdstring-vs-character-array",[14,2.129,76,2.854,95,3.893,108,3.286,203,3.537,255,4.515,454,4.683,461,4.683,536,3.101,558,2.664,591,4.526,631,4.144,764,4.77,835,5.811,854,4.963,1375,2.298,1441,7.583,1483,4.246,1938,6.028,2321,7.321,2324,6.288,2325,7.05,2326,6.288]],["title/ds/string/intro/#operations-on-strings",[76,2.177,255,2.385]],["text/ds/string/intro/#operations-on-strings",[]],["title/ds/string/intro/#input",[110,3.839]],["text/ds/string/intro/#input",[69,4.147,110,4.431,255,4.196,414,5.765,462,4.604,546,4.431,599,3.819,819,5.634,1163,4.326,1483,3.75,1491,3.501,1578,6.987,1579,6.987,2321,7.673,2327,7.834]],["title/ds/string/intro/#capacity",[1562,4.996]],["text/ds/string/intro/#capacity",[69,3.825,116,3.991,229,6.471,255,4.481,336,3.91,457,5.434,492,5.442,494,4.214,644,4.366,1562,7.438,1565,6.885,1568,6.885,1697,6.747]],["title/ds/string/intro/#iterator",[77,3.164]],["text/ds/string/intro/#iterator",[77,4.925,255,4.684,299,5.289,599,4.959,856,4.703,1552,7.486,1554,6.457,1555,6.457]],["title/ds/string/intro/#manipulating",[1880,4.682]],["text/ds/string/intro/#manipulating",[18,3.127,19,2.081,67,1.572,69,2.281,103,2.542,108,2.715,158,2.923,212,3.288,225,1.971,229,3.859,255,4.641,286,3.493,467,6.852,491,3.535,560,3.09,578,3.165,599,2.728,782,6.283,783,4.99,1112,3.941,1200,4.612,1223,3.584,1831,4.464,2072,7.169,2075,7.897,2321,5.751,2328,5.595,2329,5.249,2330,5.595,2331,4.99,2332,6.517,2333,5.595,2334,5.595,2335,5.595,2336,5.595,2337,5.595,2338,5.595,2339,5.595,2340,7.623,2341,7.623,2342,5.595]],["title/ds/string/remove-duplicates/",[911,2.936,2105,3.639]],["text/ds/string/remove-duplicates/",[3,2.208,19,2.329,39,1.78,42,1.499,45,1.417,53,2.614,61,1.393,94,3.94,100,3.286,212,4.144,315,4.898,316,6.288,911,3.849,1120,4.683,1164,4.526,1510,5.189,2105,4.77,2343,7.05,2344,6.243,2345,7.05,2346,7.05,2347,7.05,2348,7.05,2349,7.05]],["title/ds/string/remove-duplicates/#remove-duplicates",[911,2.936,2105,3.639]],["text/ds/string/remove-duplicates/#remove-duplicates",[19,2.351,39,1.796,42,1.529,45,1.435,53,2.647,61,1.403,94,4.02,100,3.353,212,4.228,315,4.961,316,6.416,1120,4.779,1164,4.618,1510,5.295,2343,7.194,2344,6.323,2345,7.194,2346,7.194,2347,7.194,2348,7.194,2349,7.194]],["title/ds/string/reverse/",[856,3.373]],["text/ds/string/reverse/",[3,2.435,15,1.669,19,1.866,21,2.355,39,1.728,41,1.219,44,2.641,45,1.242,53,2.777,61,1.289,72,3.194,133,2.139,856,3.864,2344,5.474,2350,7.776,2351,6.935,2352,7.776,2353,7.776]],["title/ds/string/reverse/#reverse",[856,3.373]],["text/ds/string/reverse/#reverse",[15,1.694,19,1.894,21,2.39,39,1.744,41,1.237,44,2.68,45,1.261,53,2.802,61,1.3,72,3.241,133,2.171,2344,5.555,2350,7.893,2351,7.039,2352,7.893,2353,7.893]],["title/ds/string/rotation/",[1998,5.595]],["text/ds/string/rotation/",[3,2.365,21,2.288,61,1.369,70,2.167,79,2.763,82,2.893,148,2.973,180,6.737,255,4.627,775,4.563,1282,3.616,1619,5.176,1998,7.631,2354,7.554,2355,7.554,2356,7.554,2357,7.554]],["title/ds/string/rotation/#rotation",[1998,5.595]],["text/ds/string/rotation/#rotation",[21,2.321,61,1.378,70,2.199,79,2.803,82,2.935,148,3.016,180,6.835,255,4.649,775,4.629,1282,3.668,1619,5.209,1998,6.316,2354,7.664,2355,7.664,2356,7.664,2357,7.664]],["title/ds/string/string-to-no/",[13,1.784,255,2.385]],["text/ds/string/string-to-no/",[3,2.854,8,3.064,13,2.048,15,0.893,16,1.558,19,1.767,38,3.477,39,1.73,41,0.652,42,1.313,45,0.665,61,1.19,69,3.002,82,2.365,92,3.526,100,1.941,103,1.892,108,1.304,110,3.493,114,3.266,144,2.198,148,1.638,182,3.785,209,3.537,212,4.327,225,2.593,228,1.788,235,3.431,250,2.222,255,4.465,287,2.48,519,2.447,558,1.573,626,2.515,839,3.451,970,2.93,1079,3.226,1112,2.153,1164,3.965,1410,2.63,1411,2.817,1421,4.103,1469,3.226,1619,2.153,1896,3.713,2131,6.294,2150,3.713,2321,3.141,2344,5.182,2358,5.794,2359,4.163,2360,5.794,2361,4.163,2362,4.163,2363,5.794,2364,5.794,2365,4.163,2366,3.431,2367,4.163,2368,4.163,2369,6.566,2370,6.566,2371,5.508,2372,4.163,2373,4.163,2374,4.163,2375,4.163,2376,3.559,2377,3.713,2378,4.163]],["title/ds/string/string-to-no/#strings-to-numbers",[13,1.784,255,2.385]],["text/ds/string/string-to-no/#strings-to-numbers",[]],["title/ds/string/string-to-no/#using-stringstream-class",[16,1.124,558,1.683,2358,4.179]],["text/ds/string/string-to-no/#using-stringstream-class",[8,5.224,16,1.79,19,2.138,38,3.664,39,1.634,41,1.112,42,1.509,45,1.134,61,1.218,69,2.894,82,3.411,114,2.664,144,3.748,148,2.793,228,3.049,255,3.147,839,4.977,1410,4.484,1411,4.802,1469,5.5,1619,3.67,2358,6.658,2359,7.098,2360,6.658,2361,7.098,2362,7.098]],["title/ds/string/string-to-no/#sscanf",[2363,6.368]],["text/ds/string/string-to-no/#sscanf",[38,3.727,39,1.366,61,1.019,69,3.037,92,3.224,110,5.191,114,2.796,182,5.625,212,4.377,225,2.623,255,3.302,970,5.242,1079,5.771,2131,6.367,2344,5.242,2360,6.987,2363,6.987,2364,6.987,2365,7.448,2366,6.138,2367,7.448,2368,7.448]],["title/ds/string/string-to-no/#functions",[225,2.391]],["text/ds/string/string-to-no/#functions",[19,1.775,39,1.819,61,1.25,69,3.015,100,3.447,108,2.316,114,3.431,209,4.235,212,4.346,250,3.948,255,4.397,1164,4.748,1896,6.596,2131,7.813,2321,5.579,2344,6.432,2369,6.596,2370,6.596,2371,6.596,2372,7.396]],["title/ds/string/string-to-no/#stoi-vs-atoi",[626,2.691,2369,3.973,2370,3.973]],["text/ds/string/string-to-no/#stoi-vs-atoi",[15,1.669,92,4.389,103,3.533,209,4.453,212,4.57,225,2.739,255,4.495,1112,4.021,1164,4.992,1421,6.26,2364,7.295,2369,6.935,2370,6.935,2371,6.935,2373,7.776,2374,7.776]],["title/ds/string/string-to-no/#string-to-double",[255,2.385,287,3.204]],["text/ds/string/string-to-no/#string-to-double",[13,2.784,39,1.539,42,1.784,114,3.151,235,6.918,519,4.933,2150,7.486,2375,8.394,2376,7.176,2377,7.486,2378,8.394]],["title/ds/string/white-space/",[331,1.943,2379,5.046]],["text/ds/string/white-space/",[3,1.562,15,2.081,19,1.689,36,2.692,39,1.291,41,1.465,44,2.391,45,1.493,47,2.366,53,2.404,61,1.415,62,2.194,67,2.724,70,2.02,79,1.825,93,3.738,133,1.372,315,4.505,331,1.801,394,3.981,1108,2.634,1450,4.031,2344,3.511,2351,4.449,2379,4.679,2380,4.988,2381,8.861,2382,8.158,2383,7.702,2384,4.988,2385,4.988,2386,8.158,2387,4.988,2388,4.988,2389,4.988,2390,4.988,2391,7.039,2392,7.039,2393,7.039,2394,4.988,2395,4.111,2396,7.039,2397,7.039]],["title/ds/string/white-space/#white-space",[331,1.943,2379,5.046]],["text/ds/string/white-space/#white-space",[15,2.091,19,1.706,36,2.731,39,1.304,41,1.472,44,2.415,45,1.501,47,2.4,53,2.423,61,1.42,62,2.225,67,2.737,70,2.04,79,1.851,93,3.767,133,1.392,315,4.54,394,4.022,1108,2.672,1450,4.072,2344,3.561,2351,4.513,2380,5.06,2381,8.918,2382,8.221,2383,7.743,2384,5.06,2385,5.06,2386,8.221,2387,5.06,2388,5.06,2389,5.06,2390,5.06,2391,7.11,2392,7.11,2393,7.11,2394,5.06,2395,4.17,2396,7.11,2397,7.11]],["title/ds/tree/binary-tree/",[163,2.06,448,1.943]],["text/ds/tree/binary-tree/",[3,2.683,10,2.287,13,1.332,14,1.864,15,1.902,16,1.632,19,1.312,21,1.96,24,2.274,27,3.143,39,0.736,41,0.755,42,0.367,45,0.482,53,1.772,61,1.23,62,0.759,69,1.637,70,1.857,72,3.787,97,1.057,103,1.37,105,1.178,106,0.735,108,0.54,122,1.107,144,0.911,155,1.269,159,1.326,163,2.76,167,1.269,173,1.543,178,1.575,182,1.057,194,1.167,199,1.301,200,1.241,232,1.336,250,0.921,260,2.23,268,2.668,271,2.621,274,3.417,299,2.244,305,1.405,325,0.528,331,1.089,347,1.359,441,2.363,442,2.461,448,3.433,449,1.212,452,2.069,459,2.168,472,1.028,514,1.336,515,0.652,519,1.014,520,2.485,521,2.485,534,0.931,536,2.118,546,0.976,615,4.076,617,1.821,624,1.685,642,0.797,644,0.976,650,1.336,669,1.905,674,1.214,682,1.146,698,1.19,757,1.073,762,1.528,775,1.042,813,2.538,817,1.905,856,0.857,897,1.821,967,0.73,990,3.199,1075,1.146,1076,1.167,1099,1.538,1113,1.475,1118,6.125,1141,1.538,1143,1.727,1145,2.122,1158,1.301,1163,0.952,1164,1.107,1184,1.538,1222,2.917,1223,1.418,1234,1.422,1291,1.042,1313,1.214,1337,0.833,1349,1.875,1375,2.676,1406,1.422,1435,1.935,1436,2.827,1484,3.659,1487,4.425,1491,1.347,1505,3.544,1529,1.19,1533,1.538,1537,3.31,1602,1.301,1624,0.804,1710,1.422,1723,1.538,1730,2.77,1744,1.146,1749,1.214,1754,2.168,1755,1.538,1851,1.422,1909,2.003,2005,2.577,2182,1.538,2398,3.544,2399,1.725,2400,1.725,2401,1.725,2402,1.725,2403,1.725,2404,1.725,2405,1.725,2406,1.725,2407,1.725,2408,4.379,2409,3.015,2410,2.577,2411,3.204,2412,1.725,2413,1.725,2414,1.725,2415,3.015,2416,1.725,2417,1.422,2418,2.219,2419,2.577,2420,1.725,2421,1.725,2422,1.725,2423,1.725,2424,2.828,2425,1.725,2426,1.336,2427,1.725,2428,2.405,2429,1.725,2430,1.725,2431,1.538,2432,1.538,2433,1.725,2434,1.725,2435,1.725,2436,1.725,2437,1.725,2438,1.538,2439,1.725,2440,1.538,2441,1.538,2442,1.538,2443,1.475]],["title/ds/tree/binary-tree/#binary-tree",[163,2.06,448,1.943]],["text/ds/tree/binary-tree/#binary-tree",[10,3.271,14,2.401,21,2.604,775,5.194,813,2.258,1222,3.481,2398,6.328]],["title/ds/tree/binary-tree/#representaion",[1723,6.054]],["text/ds/tree/binary-tree/#representaion",[10,3.601,39,1.437,41,1.228,347,3.53,441,2.981,813,2.775,1222,3.832,1223,4.451,1484,4.959,1730,6.529]],["title/ds/tree/binary-tree/#example",[159,2.985]],["text/ds/tree/binary-tree/#example",[10,3.033,15,1.711,19,1.148,21,2.07,39,1.253,41,1.249,42,1.017,45,1.092,61,1.377,72,4.135,103,3.105,144,2.527,178,2.5,260,3.546,268,5.296,271,5.205,347,2.156,441,2.739,813,2.763,1118,6.689,1222,3.724,1375,3.494,1484,4.801,1851,3.944,2182,4.267,2399,4.785,2400,4.785,2401,4.785,2402,4.785,2403,4.785,2404,4.785,2405,4.785,2406,4.785]],["title/ds/tree/binary-tree/#properties",[624,3.793]],["text/ds/tree/binary-tree/#properties",[13,1.836,14,2.329,15,2.273,19,1.329,21,2.292,53,2.541,61,1.268,62,2.435,70,2.875,163,2.898,178,2.893,274,4.895,299,4.229,448,2.733,615,5.801,644,3.132,813,1.454,856,2.751,897,4.572,1075,3.678,1076,3.746,1234,4.563,1291,3.345,1529,3.819,2407,5.537,2408,6.566,2409,7.569,2410,4.733,2411,6.039,2412,5.537,2413,5.537,2414,5.537,2415,7.569]],["title/ds/tree/binary-tree/#full-binary-tree",[163,1.706,448,1.609,459,3.204]],["text/ds/tree/binary-tree/#full-binary-tree",[13,3.044,15,1.598,19,2.203,21,2.256,61,1.361,70,2.137,155,5.481,448,2.69,615,5.191,624,4.162,650,5.771,813,2.613,990,6.097,1349,4.633,1710,6.138,2398,6.755,2416,7.448,2417,6.138]],["title/ds/tree/binary-tree/#complete-binary-tree",[163,1.706,448,1.609,617,2.691]],["text/ds/tree/binary-tree/#complete-binary-tree",[14,1.999,24,6.282,163,3.189,274,5.184,682,5.532,762,4.219,813,2.187,1143,4.769,1163,4.599,1222,3.371,2418,6.129]],["title/ds/tree/binary-tree/#perfect-binary-tree",[163,1.706,448,1.609,2419,3.808]],["text/ds/tree/binary-tree/#perfect-binary-tree",[14,2.292,15,2.05,19,1.908,21,2.408,24,5.999,53,2.815,61,1.088,274,4.199,813,2.088,990,5.282,2398,5.852,2408,5.38,2410,6.798,2411,6.344,2418,5.852]],["title/ds/tree/binary-tree/#balanced-binary-tree",[163,1.706,448,1.609,1754,3.204]],["text/ds/tree/binary-tree/#balanced-binary-tree",[15,1.523,53,2.092,61,0.971,105,2.774,106,3.026,122,4.556,260,2.894,325,2.173,448,3.516,449,2.853,452,3.049,520,7.341,521,7.341,669,4.484,757,4.415,813,2.339,817,4.484,990,4.715,1145,6.27,1158,5.354,1184,6.33,1491,3.172,1755,6.33,2408,4.802,2420,7.098,2421,7.098,2422,7.098,2423,7.098]],["title/ds/tree/binary-tree/#a-degenerate-or-pathological-tree",[448,1.609,2424,4.179,2425,4.455]],["text/ds/tree/binary-tree/#a-degenerate-or-pathological-tree",[14,2.047,15,1.83,61,1.166,519,5.013,813,2.24,967,3.608,1337,4.12,1349,5.305,1730,5.883]],["title/ds/tree/binary-tree/#full",[459,4.882]],["text/ds/tree/binary-tree/#full",[27,5.394,72,4.273,1118,6.912,1435,5.304,1436,5.816,1487,6.081,1505,7.192,1537,6.81]],["title/ds/tree/binary-tree/#complete",[617,4.101]],["text/ds/tree/binary-tree/#complete",[27,5.152,72,4.452,97,4.837,194,5.34,200,5.676,1118,7.036,1436,5.555,1487,6.998,1505,5.808,1537,6.505,2005,6.748]],["title/ds/tree/binary-tree/#perfect",[2419,5.803]],["text/ds/tree/binary-tree/#perfect",[27,5.394,72,4.273,1118,6.912,1436,5.816,1487,7.192,1505,6.081,1537,6.81,2005,7.064]],["title/ds/tree/binary-tree/#balanced",[1754,4.882]],["text/ds/tree/binary-tree/#balanced",[105,3.503,159,3.942,817,5.662]],["title/ds/tree/binary-tree/#degenerate",[2424,6.368]],["text/ds/tree/binary-tree/#degenerate",[27,5.659,72,3.56,250,4.627,1118,6.676,1435,5.565,1487,6.38]],["title/ds/tree/binary-tree/#applications",[762,3.439]],["text/ds/tree/binary-tree/#applications",[16,2.531,69,3.369,108,1.6,163,1.956,167,3.76,173,3.664,182,3.131,199,3.854,232,3.958,299,2.855,305,3.337,331,2.585,441,2.82,442,5.064,448,3.849,449,2.053,452,3.55,472,3.043,514,3.958,515,1.93,534,2.757,536,3.938,546,2.889,642,2.361,669,3.227,674,3.596,698,3.523,1099,4.556,1113,4.368,1141,4.556,1143,2.926,1164,3.279,1313,3.596,1406,4.21,1491,2.283,1533,4.556,1602,3.854,1624,2.381,1744,3.394,1749,3.596,1909,4.755,2426,3.958,2427,5.109,2428,5.711,2429,5.109,2430,5.109,2431,4.556,2432,4.556,2433,5.109,2434,5.109,2435,5.109,2436,5.109,2437,5.109,2438,4.556,2439,5.109,2440,4.556,2441,4.556,2442,4.556,2443,4.368]],["title/ds/tree/bst-check/",[787,3.161,1751,3.161]],["text/ds/tree/bst-check/",[3,2.39,10,3.192,14,1.345,15,1.727,19,1.932,21,0.823,36,2.391,39,1.4,41,1.261,42,2.201,44,1.904,45,1.286,47,1.29,54,1.519,61,0.606,62,1.948,67,1.575,69,1.108,79,2.604,87,2.571,93,3.497,103,2.013,108,1.387,203,1.364,225,0.957,260,3.724,283,1.557,290,1.839,301,1.338,325,0.832,326,1.07,331,0.982,332,1.98,333,1.598,334,1.1,335,1.133,336,1.133,350,1.215,394,3.171,441,3.069,448,1.6,515,1.027,546,1.537,548,2.465,598,1.745,615,3.171,621,2.755,787,2.603,813,2.777,897,3.386,990,1.806,1104,3.534,1108,2.96,1139,1.557,1188,3.724,1222,3.513,1259,1.964,1262,3.961,1282,2.12,1291,3.386,1375,2.828,1450,3.702,1751,2.603,1802,2.24,1808,2.106,2196,2.424,2444,2.718,2445,4.155,2446,4.155,2447,4.155,2448,2.718,2449,2.718,2450,2.718,2451,2.718,2452,5.0,2453,2.718,2454,2.718,2455,2.718,2456,4.429,2457,2.718,2458,2.718,2459,2.718,2460,2.718,2461,5.259,2462,2.718,2463,2.424,2464,2.718]],["title/ds/tree/bst-check/#checking-bst",[787,3.161,1751,3.161]],["text/ds/tree/bst-check/#checking-bst",[]],["title/ds/tree/bst-check/#method-1-simple-but-wrong",[15,0.816,54,2.124,87,1.373,2444,3.801]],["text/ds/tree/bst-check/#method-1-simple-but-wrong",[10,3.489,14,1.502,15,1.763,19,2.201,39,1.148,41,0.981,42,2.206,44,2.125,45,1.0,67,1.758,79,3.005,93,3.764,260,2.551,394,3.539,441,3.067,598,4.017,813,2.878,990,4.157,1108,3.304,1222,3.942,1375,2.989,2196,5.581,2445,5.87,2446,5.87,2447,5.87]],["title/ds/tree/bst-check/#method-2-correct-but-not-efficient",[21,1.151,87,1.373,621,2.365,1104,3.033]],["text/ds/tree/bst-check/#method-2-correct-but-not-efficient",[10,3.305,14,1.637,15,1.865,19,2.294,39,1.251,41,1.069,42,2.209,44,2.317,45,1.09,67,1.917,93,3.981,394,3.859,441,2.736,813,2.835,1222,3.517,1375,2.223,2445,6.401,2446,6.401,2447,6.401,2448,6.823,2449,6.823,2450,6.823,2451,6.823]],["title/ds/tree/bst-check/#method-3-correct-and-efficient",[87,1.373,103,1.727,621,2.365,1104,3.033]],["text/ds/tree/bst-check/#method-3-correct-and-efficient",[10,2.325,14,1.467,15,1.736,19,1.467,39,1.77,41,1.268,42,1.927,44,2.076,45,1.292,69,2.492,93,2.801,225,2.153,290,4.136,325,1.872,326,2.406,331,2.208,332,3.616,333,3.593,334,2.474,335,2.548,336,2.548,350,2.732,394,3.457,441,2.855,813,2.708,897,5.477,1139,3.501,1222,2.474,1291,5.477,1802,5.038,1808,4.736,2452,5.452,2453,6.113,2454,6.113,2455,6.113,2456,8.09,2457,6.113]],["title/ds/tree/bst-check/#simplified-method-3",[87,1.609,103,2.024,2458,4.455]],["text/ds/tree/bst-check/#simplified-method-3",[10,2.546,36,3.613,41,1.049,42,2.124,45,1.069,47,3.175,62,2.944,67,1.88,79,3.139,260,4.31,441,3.146,615,5.358,813,2.254,1108,3.534,1188,6.293,1222,2.709,1375,3.087,1450,4.915,2452,5.969,2459,6.693,2460,6.693,2461,8.051]],["title/ds/tree/bst-check/#method-4using-in-order-traversal",[87,1.373,548,1.672,1259,1.685,2462,3.801]],["text/ds/tree/bst-check/#method-4using-in-order-traversal",[10,2.409,36,3.418,41,1.298,42,2.08,45,1.323,61,1.132,62,2.785,79,2.316,93,2.902,108,2.593,203,3.177,260,3.989,283,3.626,301,3.117,441,2.607,448,2.99,515,2.393,546,3.582,548,3.641,787,3.722,813,1.663,1108,3.344,1222,2.563,1259,2.807,1262,5.996,1282,3.963,1375,2.698,1450,4.742,1751,3.722,2452,5.648,2461,5.941,2463,5.648,2464,6.333]],["title/ds/tree/bst-merge/",[849,3.043,1751,3.161]],["text/ds/tree/bst-merge/",[3,1.892,10,1.843,15,0.652,19,0.729,39,0.557,41,1.611,42,1.791,44,1.032,45,1.629,61,1.443,67,1.698,79,2.937,94,3.377,133,1.333,185,2.587,237,1.126,276,1.392,305,2.259,335,1.266,347,1.369,394,3.9,441,2.172,558,1.148,813,2.212,849,2.741,928,1.835,1222,2.792,1375,3.259,1376,2.538,1425,2.645,1580,2.887,1619,4.523,1751,1.786,2072,3.566,2075,3.655,2282,4.322,2465,3.039,2466,7.903,2467,6.221,2468,3.039,2469,6.15,2470,3.039,2471,3.039,2472,3.039,2473,3.039,2474,3.039,2475,6.044,2476,6.044,2477,10.0,2478,10.0,2479,3.039,2480,3.039,2481,3.039,2482,3.039,2483,4.846,2484,4.846,2485,3.039,2486,3.039,2487,3.039,2488,3.039,2489,3.039,2490,3.039,2491,3.039,2492,3.039,2493,3.039,2494,3.039]],["title/ds/tree/bst-merge/#merge-bst",[849,3.043,1751,3.161]],["text/ds/tree/bst-merge/#merge-bst",[]],["title/ds/tree/bst-merge/#stack-related-stuff",[335,1.857,928,2.691,2465,4.455]],["text/ds/tree/bst-merge/#stack-related-stuff",[15,1.254,19,1.402,39,1.072,41,1.485,42,1.884,45,1.416,61,1.392,67,1.641,133,1.607,185,3.119,237,2.165,276,2.677,305,3.659,347,2.633,558,2.208,813,2.489,1375,1.904,1376,3.722,1619,5.467,2282,7.001,2466,9.275,2467,7.888,2468,5.843,2469,8.452,2470,5.843,2471,5.843,2472,5.843,2473,5.843]],["title/ds/tree/bst-merge/#merge",[849,3.839]],["text/ds/tree/bst-merge/#merge",[10,2.226,41,1.631,42,1.67,44,1.315,45,1.662,61,1.446,67,1.644,79,3.245,94,3.94,133,1.066,185,2.068,394,4.444,441,2.474,813,1.852,1222,3.18,1375,3.391,1425,3.194,1580,3.486,2072,4.306,2075,4.414,2466,5.489,2474,3.873,2475,7.051,2476,7.051,2477,10.496,2478,10.496,2479,3.873,2480,3.873,2481,3.873,2482,3.873,2483,5.851,2484,5.851,2485,3.873,2486,3.873,2487,3.873,2488,3.873,2489,3.873,2490,3.873,2491,3.873,2492,3.873,2493,3.873,2494,3.873]],["title/ds/tree/bst/",[163,1.706,448,1.609,452,1.914]],["text/ds/tree/bst/",[2,1.148,3,1.919,10,3.657,13,0.689,14,1.657,16,0.287,32,0.497,39,0.93,41,1.445,42,1.88,44,1.571,45,1.473,53,0.335,61,1.339,67,2.0,69,0.464,79,1.692,83,1.609,93,1.623,94,3.584,100,0.531,105,0.445,114,2.051,115,0.708,116,0.588,121,0.485,122,0.731,124,0.77,129,0.838,133,0.572,156,0.555,163,1.356,209,0.652,233,1.357,237,0.422,253,0.882,260,4.313,274,0.601,292,0.77,301,2.028,305,1.921,325,0.349,326,0.448,332,0.929,334,0.841,355,0.882,391,0.669,394,1.176,419,0.838,436,0.566,437,0.824,439,0.838,441,1.457,442,0.697,448,1.831,449,0.835,452,1.521,471,1.658,472,0.678,486,0.636,515,0.785,546,1.176,548,0.501,555,1.135,572,0.756,578,1.622,600,0.614,602,2.442,628,1.872,642,0.96,644,0.644,761,0.614,775,0.688,787,1.686,798,0.838,813,2.662,827,0.938,855,0.819,911,0.621,924,0.66,975,5.188,990,1.381,1163,0.628,1222,3.757,1259,2.051,1269,2.063,1282,3.745,1291,0.688,1339,0.628,1340,3.814,1352,2.671,1375,2.597,1422,0.882,1484,3.472,1491,2.442,1566,1.238,1727,1.568,1730,2.843,1751,2.422,1758,3.934,1759,3.028,1760,5.499,1873,1.777,1982,1.854,2070,2.756,2105,0.77,2109,0.77,2469,5.467,2495,1.138,2496,1.138,2497,1.95,2498,5.126,2499,1.138,2500,1.138,2501,1.138,2502,3.322,2503,1.95,2504,1.138,2505,1.854,2506,0.973,2507,0.973,2508,2.078,2509,1.015,2510,1.138,2511,2.078,2512,1.138,2513,1.138,2514,1.854,2515,1.138,2516,1.138,2517,1.138,2518,1.658,2519,1.138,2520,1.138,2521,4.121,2522,5.815,2523,1.138,2524,1.015,2525,1.138,2526,1.138,2527,4.121,2528,4.121,2529,2.078,2530,1.138,2531,1.138,2532,1.138,2533,1.138,2534,1.138,2535,2.078,2536,1.138,2537,1.138,2538,1.138]],["title/ds/tree/bst/#binary-search-tree",[163,1.706,448,1.609,452,1.914]],["text/ds/tree/bst/#binary-search-tree",[]],["title/ds/tree/bst/#insertion",[449,2.728]],["text/ds/tree/bst/#insertion",[10,3.417,39,1.319,41,1.127,42,1.909,44,2.443,45,1.149,61,1.229,67,2.021,813,2.9,975,5.404,1222,3.636,1375,2.345,1484,3.508,1982,8.012,2495,7.194,2496,7.194]],["title/ds/tree/bst/#min-value",[114,2.019,1291,3.249]],["text/ds/tree/bst/#min-value",[41,1.192,42,1.617,45,1.215,61,1.272,79,2.783,93,3.486,813,2.818,1222,3.764,1340,6.028,1375,2.48,1484,4.534,2497,7.138]],["title/ds/tree/bst/#deletion",[1491,3.034]],["text/ds/tree/bst/#deletion",[10,3.825,14,1.55,39,0.811,41,1.314,42,1.896,44,1.503,45,1.34,61,1.315,67,2.143,163,2.473,209,2.534,260,4.346,441,1.393,442,2.711,448,2.333,452,1.901,578,2.502,813,2.719,975,5.456,1222,3.77,1282,4.604,1352,5.754,1375,2.733,1484,4.089,1566,3.848,1873,3.783,2105,2.993,2498,7.156,2499,4.425,2500,4.425,2501,4.425,2502,6.059,2503,4.151,2504,4.425,2505,5.76]],["title/ds/tree/bst/#facts",[355,5.26]],["text/ds/tree/bst/#facts",[2,3.946,13,2.967,14,1.715,53,2.106,115,4.445,129,5.259,274,3.773,301,3.517,448,2.581,472,4.257,515,3.38,548,3.143,555,3.901,775,4.317,813,1.877,975,4.578,1259,4.537,1751,5.257,1758,6.052,2109,4.834,2506,6.109,2507,6.109,2508,8.945,2509,6.373]],["title/ds/tree/bst/#search",[452,2.916]],["text/ds/tree/bst/#search",[10,2.755,39,1.328,41,1.135,42,2.088,44,2.46,45,1.157,67,2.534,260,4.313,394,4.097,813,2.369,975,5.599,1222,2.932,1375,2.361,1484,3.532,2510,7.244,2511,9.022]],["title/ds/tree/bst/#insert",[449,2.728]],["text/ds/tree/bst/#insert",[10,3.36,14,1.681,39,1.284,41,1.592,42,1.878,45,1.623,61,1.208,114,3.814,237,2.595,260,4.361,441,2.205,1222,3.576,1751,5.191,2512,7.004,2513,7.004,2514,7.878]],["title/ds/tree/bst/#deletion_1",[1491,3.034]],["text/ds/tree/bst/#deletion_1",[2,1.497,10,3.788,14,1.83,32,1.183,39,0.811,41,1.43,42,1.895,44,1.501,45,1.458,61,1.375,67,2.141,79,1.617,83,2.543,114,1.018,116,1.402,121,1.156,122,1.74,156,1.322,260,4.43,292,1.834,305,3.313,325,0.83,326,1.067,332,1.212,334,1.789,391,1.593,419,1.995,437,1.074,439,1.995,448,0.979,471,3.527,486,1.515,555,1.48,572,1.801,600,1.463,642,1.253,644,1.533,761,1.463,813,2.488,827,2.235,911,1.48,975,4.921,990,2.936,1222,3.694,1269,4.025,1282,4.369,1339,1.497,1375,2.732,1484,3.147,1491,3.407,1727,3.334,1730,4.903,1758,3.786,1760,6.626,1873,2.318,2498,6.668,2502,4.147,2503,2.543,2515,2.711,2516,2.711,2517,2.711,2518,2.163,2519,2.711,2520,2.711,2521,7.109,2522,8.671]],["title/ds/tree/bst/#minvalue",[2523,6.788]],["text/ds/tree/bst/#minvalue",[10,2.562,41,1.056,42,1.432,45,1.076,61,1.179,79,2.464,83,3.061,93,3.086,100,3.14,114,2.529,163,2.58,332,3.011,436,3.347,437,2.669,448,3.112,452,2.894,813,2.781,924,3.907,1222,3.846,1259,2.986,1340,5.847,1375,2.195,1484,4.201,2497,6.319,2518,5.374,2524,6.008,2525,6.736]],["title/ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst",[301,1.447,975,1.504,1751,1.727,1758,1.989,1759,2.513,1760,2.422]],["text/ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst",[10,3.373,14,1.583,16,0.877,39,0.638,41,1.474,42,1.402,44,1.181,45,1.503,61,1.315,67,1.514,69,1.418,79,1.971,93,2.469,94,5.469,105,1.36,114,1.306,124,2.353,133,1.482,233,3.518,253,2.695,260,4.152,301,3.247,394,1.967,441,2.339,546,3.048,578,3.048,602,5.124,628,4.306,642,1.607,787,3.877,798,2.56,813,2.329,855,2.502,975,4.92,1163,1.921,1222,3.442,1259,1.542,1340,1.921,1352,2.624,1375,2.15,1422,2.695,1758,4.463,1759,5.64,1760,6.123,2070,5.065,2469,8.573,2526,3.478,2527,8.038,2528,8.038,2529,5.389,2530,3.478,2531,3.478,2532,3.478,2533,3.478,2534,3.478,2535,5.389,2536,3.478,2537,3.478,2538,3.478]],["title/ds/tree/bt-deletion/",[1491,3.034]],["text/ds/tree/bt-deletion/",[3,1.213,10,3.504,38,2.1,39,1.073,41,1.575,42,1.958,45,1.605,61,1.327,67,2.664,79,1.417,93,1.775,133,1.066,260,3.866,813,2.549,975,4.714,1222,3.728,1282,5.129,1375,3.224,1484,3.831,1491,3.512,2070,3.486,2073,4.036,2074,4.036,2539,3.873,2540,9.21,2541,5.851,2542,4.208,2543,5.218,2544,7.007,2545,3.873,2546,7.857,2547,3.873]],["title/ds/tree/bt-deletion/#deletion",[1491,3.034]],["text/ds/tree/bt-deletion/#deletion",[10,3.512,38,2.111,39,1.079,41,1.578,42,1.963,45,1.608,61,1.33,67,2.67,79,1.427,93,1.788,133,1.073,260,3.875,813,2.554,975,4.726,1222,3.738,1282,5.134,1375,3.23,1484,3.845,1491,3.166,2070,3.505,2073,4.058,2074,4.058,2539,3.902,2540,9.233,2541,5.884,2542,4.232,2543,5.247,2544,7.034,2545,3.902,2546,7.887,2547,3.902]],["title/ds/tree/bt-enumeration/",[163,1.706,448,1.609,2548,3.672]],["text/ds/tree/bt-enumeration/",[3,2.36,10,1.649,13,2.754,15,2.051,21,1.313,50,2.618,53,2.221,61,1.464,70,2.917,72,3.797,92,2.754,100,3.513,159,1.906,163,1.66,173,3.256,243,3.572,327,5.246,328,3.572,390,2.393,448,3.451,764,4.304,813,1.979,877,6.377,1101,3.705,1118,5.517,1145,4.478,1175,3.572,1222,1.754,1314,5.439,1339,2.393,2509,3.865,2548,3.572,2549,5.968,2550,4.334,2551,3.865,2552,4.334,2553,4.334,2554,4.334,2555,4.334,2556,4.334,2557,6.362,2558,4.334,2559,6.362,2560,4.334,2561,4.334,2562,4.334,2563,4.334,2564,4.334,2565,4.334,2566,4.334,2567,4.334,2568,4.334,2569,4.334,2570,4.334,2571,4.334,2572,4.334,2573,4.334,2574,4.334,2575,4.334]],["title/ds/tree/bt-enumeration/#binary-tree-enumeration",[163,1.706,448,1.609,2548,3.672]],["text/ds/tree/bt-enumeration/#binary-tree-enumeration",[]],["title/ds/tree/bt-enumeration/#unlabeled-trees",[448,1.943,2549,5.046]],["text/ds/tree/bt-enumeration/#unlabeled-trees",[10,1.889,13,2.698,15,2.136,21,1.504,50,2.999,53,1.463,61,1.475,70,3.007,72,3.342,100,3.27,159,2.183,243,4.092,327,5.14,328,4.092,390,2.742,448,2.938,764,4.747,813,2.137,877,6.679,1101,4.244,1118,4.661,1145,4.938,1175,4.092,1222,2.01,1314,4.244,1339,2.742,2509,4.428,2550,4.965,2551,4.428,2552,4.965,2553,4.965,2554,4.965,2555,4.965,2556,4.965,2557,7.016,2558,4.965,2559,7.016,2560,4.965,2561,4.965,2562,4.965,2563,4.965,2564,4.965,2565,4.965,2566,4.965,2567,4.965,2568,4.965,2569,4.965,2570,4.965,2571,4.965,2572,4.965]],["title/ds/tree/bt-enumeration/#labeled-trees",[448,1.943,2573,5.379]],["text/ds/tree/bt-enumeration/#labeled-trees",[13,2.579,53,2.777,61,1.289,72,4.164,92,4.08,100,3.625,173,4.823,327,4.913,448,2.808,1118,6.26,1314,6.648,2549,7.295,2574,7.776,2575,7.776]],["title/ds/tree/bt-height/",[1076,4.593]],["text/ds/tree/bt-height/",[3,2.238,10,2.718,14,1.715,15,1.92,19,1.715,39,1.791,41,1.402,42,1.519,45,1.429,61,1.223,67,2.007,70,2.566,813,2.349,1076,4.834,1222,2.893,1375,2.329,2576,7.146,2577,8.945,2578,8.945,2579,8.945,2580,7.146,2581,7.146]],["title/ds/tree/bt-height/#height",[1076,4.593]],["text/ds/tree/bt-height/#height",[10,2.755,14,1.738,15,1.936,19,1.738,39,1.802,41,1.414,42,1.54,45,1.441,61,1.234,67,2.035,70,2.588,813,2.369,1222,2.932,1375,2.361,2576,7.244,2577,9.022,2578,9.022,2579,9.022,2580,7.244,2581,7.244]],["title/ds/tree/bt-insertion/",[449,2.728]],["text/ds/tree/bt-insertion/",[3,1.914,10,3.449,39,1.121,41,1.573,42,1.927,45,1.603,61,1.32,67,1.717,79,2.959,260,4.205,441,1.925,449,2.457,813,2.125,1222,3.67,1282,4.805,1375,2.955,2070,3.641,2073,4.216,2074,4.216,2542,4.396,2543,5.452,2544,7.215,2582,6.113,2583,9.067,2584,6.113]],["title/ds/tree/bt-insertion/#insertion",[449,2.728]],["text/ds/tree/bt-insertion/#insertion",[10,3.469,39,1.134,41,1.579,42,1.938,45,1.61,61,1.326,67,1.737,79,2.982,260,4.218,441,1.947,813,2.141,1222,3.691,1282,4.823,1375,2.972,2070,3.684,2073,4.265,2074,4.265,2542,4.448,2543,5.516,2544,7.27,2582,6.184,2583,9.119,2584,6.184]],["title/ds/tree/bt-level-order/",[274,2.84,548,2.366]],["text/ds/tree/bt-level-order/",[3,2.415,10,3.158,14,0.897,15,1.782,39,1.523,41,1.506,42,1.21,45,1.535,61,1.196,62,1.643,67,2.457,79,2.083,82,3.35,133,2.284,148,2.715,164,2.017,185,1.995,228,2.963,260,4.169,274,4.952,301,1.839,335,1.557,441,2.172,548,2.504,813,2.389,856,1.857,1009,2.528,1222,3.361,1330,3.194,1375,2.514,1425,3.765,1450,3.95,1619,1.932,1624,2.654,1924,2.895,1925,2.895,2070,3.392,2073,3.927,2074,3.927,2408,4.667,2542,4.095,2585,3.737,2586,3.08,2587,5.504,2588,4.543,2589,4.693,2590,3.737,2591,4.868,2592,3.737,2593,3.737,2594,4.868,2595,3.737,2596,3.737,2597,5.694,2598,3.737,2599,3.332,2600,3.332,2601,5.078]],["title/ds/tree/bt-level-order/#level-order",[274,2.84,548,2.366]],["text/ds/tree/bt-level-order/#level-order",[]],["title/ds/tree/bt-level-order/#queue",[1624,3.164]],["text/ds/tree/bt-level-order/#queue",[10,3.278,41,1.35,42,1.432,45,1.377,61,0.921,67,2.421,79,3.152,82,3.3,133,1.853,148,2.651,228,2.894,260,3.513,441,2.121,813,2.719,1222,3.488,1375,3.096,1425,3.677,1450,3.858,2070,4.013,2073,4.646,2074,4.646,2542,4.845,2585,6.736,2586,5.552,2587,5.374,2588,5.374,2589,7.102]],["title/ds/tree/bt-level-order/#reverse",[856,3.373]],["text/ds/tree/bt-level-order/#reverse",[10,2.975,39,1.434,41,1.482,45,1.511,61,1.209,67,2.197,82,2.995,133,2.151,148,2.287,164,3.136,185,3.102,228,2.496,260,4.235,274,3.068,335,2.422,441,1.83,548,2.555,813,2.054,1009,3.931,1222,3.166,1330,4.968,1425,3.172,1450,4.479,1619,3.004,1624,2.708,1924,4.502,1925,4.502,2070,3.461,2073,4.008,2074,4.008,2408,3.931,2542,4.179,2587,6.24,2588,4.636,2590,5.811,2591,4.968,2592,5.811,2593,5.811,2594,4.968,2595,5.811,2596,5.811,2597,7.82,2598,5.811]],["title/ds/tree/bt-level-order/#given-level",[274,2.84,301,2.647]],["text/ds/tree/bt-level-order/#given-level",[10,2.453,14,1.548,15,2.192,39,1.707,41,1.458,42,1.371,45,1.487,61,1.146,62,2.836,67,2.353,82,3.208,133,2.305,148,2.538,228,2.77,260,4.017,274,5.392,441,2.031,1222,2.61,1375,2.101,1425,3.52,2408,5.668,2591,5.513,2594,5.513,2599,5.751,2600,5.751,2601,7.472]],["title/ds/tree/bt-search/",[452,2.916]],["text/ds/tree/bt-search/",[3,2.032,10,3.2,36,3.502,38,3.019,39,1.19,41,1.318,42,1.984,45,1.344,61,0.887,67,2.622,79,3.077,260,3.429,441,2.043,452,2.787,813,2.687,1108,3.426,1222,3.405,1375,3.042,1450,5.345,2070,3.865,2073,4.475,2074,4.475,2542,4.666,2586,5.347,2587,5.176,2588,5.176,2589,6.933,2602,6.488]],["title/ds/tree/bt-search/#search",[452,2.916]],["text/ds/tree/bt-search/#search",[10,3.225,36,3.545,38,3.043,39,1.205,41,1.329,42,1.996,45,1.355,61,0.898,67,2.637,79,3.101,260,3.457,441,2.068,813,2.697,1108,3.468,1222,3.432,1375,3.06,1450,5.377,2070,3.913,2073,4.53,2074,4.53,2542,4.724,2586,5.414,2587,5.241,2588,5.241,2589,6.988,2602,6.569]],["title/ds/tree/bt-swap-nodes/",[163,1.706,448,1.609,560,2.46]],["text/ds/tree/bt-swap-nodes/",[3,0.941,15,0.645,21,0.91,32,2.989,81,1.995,85,2.072,87,1.085,97,4.896,103,3.113,106,1.281,108,2.346,112,1.702,114,3.27,121,1.281,159,2.112,162,4.282,163,1.15,194,5.674,233,5.215,250,3.657,284,3.249,286,2.748,292,2.032,299,3.828,301,2.952,325,1.837,326,1.182,331,1.085,332,1.343,390,4.631,437,2.377,442,1.841,448,2.166,449,1.207,455,2.219,475,1.815,500,3.38,515,2.589,546,1.699,555,1.64,560,4.81,576,1.789,577,3.19,603,2.716,642,3.462,696,2.211,697,1.841,757,3.731,761,2.592,781,1.961,798,4.414,813,2.806,823,2.114,960,2.679,981,3.957,1111,3.38,1139,3.924,1163,3.783,1167,5.903,1223,2.258,1259,3.718,1266,2.476,1340,4.137,1375,0.979,1420,1.995,1435,4.809,1436,4.823,1620,2.16,1701,1.961,1743,2.568,1751,5.12,1758,5.674,1841,7.479,1947,2.679,2505,2.679,2603,3.004,2604,3.004,2605,3.004,2606,2.818,2607,3.004]],["title/ds/tree/bt-swap-nodes/#binary-tree-swapping",[163,1.706,448,1.609,560,2.46]],["text/ds/tree/bt-swap-nodes/#binary-tree-swapping",[15,0.652,21,0.92,32,3.009,81,2.018,85,2.096,87,1.097,97,4.92,103,3.133,106,1.295,108,2.359,112,1.717,114,3.284,121,1.295,159,2.131,162,4.322,194,5.699,233,5.241,250,3.681,284,3.278,286,2.769,292,2.056,299,3.853,301,2.974,325,1.851,326,1.196,331,1.097,332,1.358,390,4.652,437,2.395,442,1.862,448,1.75,449,1.221,455,2.239,475,1.835,500,3.411,515,2.606,546,1.719,555,1.659,560,4.652,576,1.81,577,3.219,603,2.741,642,3.482,696,2.236,697,1.862,757,3.759,761,2.615,781,1.983,798,4.448,813,2.81,823,2.139,960,2.71,981,3.994,1111,3.411,1139,3.949,1163,3.808,1167,5.929,1223,2.278,1259,3.735,1266,2.504,1340,4.16,1375,0.99,1420,2.018,1435,4.836,1436,4.854,1620,2.185,1701,1.983,1743,2.598,1751,5.141,1758,5.699,1841,7.513,1947,2.71,2505,2.71,2603,3.039,2604,3.039,2605,3.039,2606,2.85,2607,3.039]],["title/ds/tree/handshaking-lemma/",[2417,4.434,2608,4.798]],["text/ds/tree/handshaking-lemma/",[3,2.336,13,2.363,15,2.173,16,0.813,19,1.022,21,2.659,32,2.503,51,2.829,58,4.645,61,1.392,69,0.759,70,3.021,74,1.094,100,2.927,103,0.846,113,1.404,114,1.599,117,1.72,119,1.005,121,2.677,155,3.134,156,3.062,157,2.103,163,0.713,166,1.485,168,1.094,174,2.035,231,1.04,260,3.44,269,1.237,293,1.08,301,0.916,305,4.017,334,0.754,410,3.3,437,2.67,448,2.694,476,2.222,491,1.176,494,1.759,505,1.37,555,1.759,572,2.829,615,5.557,624,1.8,627,1.485,641,1.946,643,1.215,645,2.371,646,2.873,752,3.3,756,1.339,775,1.125,813,2.58,847,3.3,928,1.125,934,2.222,974,0.868,990,2.14,1003,2.222,1024,1.66,1025,7.207,1075,3.81,1108,0.983,1349,4.822,1619,2.202,1662,1.746,1701,1.215,1709,1.442,1710,1.534,1730,2.937,1913,1.534,2398,5.491,2411,3.398,2417,5.176,2418,3.735,2467,6.381,2608,5.601,2609,2.037,2610,1.746,2611,2.037,2612,2.037,2613,1.862,2614,3.798,2615,1.862,2616,1.862,2617,1.862,2618,4.259,2619,3.995,2620,1.862,2621,1.862,2622,3.222,2623,1.862,2624,4.761,2625,3.022,2626,3.022,2627,1.862,2628,1.862,2629,1.862]],["title/ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children",[19,0.634,305,2.016,448,0.953,813,0.693,2398,1.943,2613,2.64]],["text/ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children",[13,3.211,15,1.746,61,1.414,70,2.334,305,3.792,615,5.476,813,2.543,990,5.404,1349,5.061,2614,7.256]],["title/ds/tree/handshaking-lemma/#proof",[155,4.996]],["text/ds/tree/handshaking-lemma/#proof",[]],["title/ds/tree/handshaking-lemma/#with-handshaking-lemma",[2417,4.434,2608,4.798]],["text/ds/tree/handshaking-lemma/#with-handshaking-lemma",[13,1.883,15,2.193,16,1.432,19,0.894,21,2.646,32,1.625,51,2.473,58,4.466,61,1.339,70,3.014,100,3.208,114,1.398,119,2.01,121,2.421,155,2.74,156,3.754,157,3.707,174,2.352,231,2.081,260,3.562,269,2.473,293,2.16,301,1.832,305,4.072,410,4.4,437,3.051,448,3.155,494,3.1,505,2.74,555,2.032,572,2.473,615,5.298,624,3.173,627,2.971,641,2.249,645,4.179,646,3.321,752,2.885,813,2.521,847,2.885,928,2.249,974,1.736,1025,7.04,1075,3.772,1108,1.966,1349,4.79,1701,2.431,1709,2.885,1710,3.069,2411,2.971,2417,5.673,2418,4.179,2608,6.139,2614,3.321,2615,3.723,2616,3.723,2617,3.723,2618,6.883,2619,5.327,2620,3.723,2621,3.723]],["title/ds/tree/handshaking-lemma/#without-it",[74,3.989]],["text/ds/tree/handshaking-lemma/#without-it",[13,2.178,15,2.129,51,5.632,61,1.16,70,1.885,100,3.062,113,4.955,121,2.8,174,4.15,260,2.678,305,4.788,448,2.372,476,5.848,491,4.15,615,3.715,643,4.288,775,3.968,813,2.697,934,5.848,1024,5.858,1075,4.363,1349,6.172,1913,5.414,2398,7.302,2614,5.858]],["title/ds/tree/handshaking-lemma/#in-binary-tree",[163,2.06,448,1.943]],["text/ds/tree/handshaking-lemma/#in-binary-tree",[13,3.182,15,1.719,32,3.496,61,1.405,70,2.299,615,5.427,813,2.52,990,5.322,1349,4.984,2398,5.896,2467,7.434]],["title/ds/tree/handshaking-lemma/#proof_1",[155,4.996]],["text/ds/tree/handshaking-lemma/#proof_1",[]],["title/ds/tree/handshaking-lemma/#case-1",[15,1.154,437,2.132]],["text/ds/tree/handshaking-lemma/#case-1",[15,1.876,19,2.098,61,1.381,615,4.944,2467,6.773]],["title/ds/tree/handshaking-lemma/#case-2",[21,1.629,437,2.132]],["text/ds/tree/handshaking-lemma/#case-2",[15,1.856,21,2.945,32,3.314,58,5.015,61,1.33,70,3.106,100,2.594,114,2.089,117,2.971,121,2.373,156,2.714,260,3.525,572,3.697,615,5.676,752,4.313,813,2.271,847,4.313,1003,3.839,1025,7.534,1075,3.697,1619,2.878,1730,3.839,2398,5.59,2411,4.441,2418,4.096,2467,7.776,2622,7.596,2623,5.566,2624,7.125,2625,5.221,2626,5.221]],["title/ds/tree/handshaking-lemma/#case-3",[103,2.444,437,2.132]],["text/ds/tree/handshaking-lemma/#case-3",[15,2.161,21,2.633,32,2.454,58,5.043,61,1.335,70,3.083,100,2.622,114,2.112,117,3.003,121,3.261,156,2.742,260,3.545,572,3.737,615,5.52,752,4.358,813,2.283,847,4.358,1003,3.88,1025,7.562,1075,3.737,1619,3.956,1730,5.277,2398,4.14,2411,4.488,2418,4.14,2467,6.737,2619,5.277,2624,7.177,2625,5.277,2626,5.277,2627,5.625,2628,5.625,2629,5.625]],["title/ds/tree/intro/",[448,2.451]],["text/ds/tree/intro/",[3,2.636,14,1.269,44,2.49,72,3.011,91,6.35,108,2.296,116,3.791,126,4.52,167,3.891,170,3.34,260,2.156,305,4.237,315,2.92,395,5.681,429,2.325,441,2.309,442,3.24,448,2.648,452,2.271,515,1.998,609,3.891,761,2.854,762,2.679,835,6.043,844,3.24,848,3.891,967,3.846,989,3.452,1075,3.512,1118,5.591,1259,2.344,1337,4.066,1406,4.358,1727,3.989,1730,3.647,1732,4.358,1880,5.057,1906,4.52,1951,3.577,1977,4.358,2046,3.577,2408,3.577,2426,6.522,2438,4.716,2440,4.716,2441,4.716,2442,4.716,2443,4.52,2630,5.288,2631,7.332,2632,5.288,2633,7.332,2634,5.288,2635,4.716,2636,4.219,2637,4.716,2638,5.288,2639,5.288]],["title/ds/tree/intro/#tree",[448,2.451]],["text/ds/tree/intro/#tree",[14,1.8,44,3.13,72,3.786,91,7.528,260,3.058,305,4.852,315,4.142,395,7.142,1075,4.982,1118,6.629,1727,5.658,1730,5.173,1906,6.412,2408,5.075,2426,5.812,2630,7.501]],["title/ds/tree/intro/#why",[]],["text/ds/tree/intro/#why",[108,2.912,442,4.663,761,4.107,835,7.664,848,5.599,967,4.249,1337,4.851,1951,5.148,1977,6.271,2046,5.148,2426,5.895,2631,9.299,2632,7.609,2633,9.299,2634,7.609,2635,6.786]],["title/ds/tree/intro/#applications",[762,3.439]],["text/ds/tree/intro/#applications",[116,4.685,126,6.236,167,5.368,170,4.608,429,3.208,441,2.853,448,2.634,452,3.133,515,2.756,609,5.368,844,4.47,967,3.086,989,4.761,1259,3.233,1406,6.011,1732,6.011,1880,6.249,2426,5.651,2438,6.505,2440,6.505,2441,6.505,2442,6.505,2443,6.236,2636,5.819,2637,6.505,2638,7.294,2639,7.294]],["title/ds/tree/k-smallest/",[84,3.71,305,2.507]],["text/ds/tree/k-smallest/",[3,2.16,10,3.328,14,1.366,15,1.222,16,0.942,19,1.366,21,1.132,38,3.265,39,1.604,41,1.371,42,2.083,44,1.269,45,1.326,50,4.66,61,1.282,67,2.332,70,1.072,79,1.367,84,2.577,87,2.056,94,2.088,237,1.384,260,4.251,305,4.644,325,2.112,326,2.241,331,2.056,347,1.684,441,2.615,442,2.29,448,2.056,813,2.298,1076,2.528,1139,3.261,1222,3.889,1259,1.657,1375,2.965,1484,1.822,1758,2.528,1768,3.332,2408,2.528,2514,5.078,2640,3.737,2641,5.685,2642,5.341,2643,7.236,2644,3.737,2645,7.714,2646,3.737,2647,3.737,2648,3.737]],["title/ds/tree/k-smallest/#k-smallest",[84,3.71,305,2.507]],["text/ds/tree/k-smallest/#k-smallest",[]],["title/ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space",[15,0.434,16,0.51,87,0.73,325,0.619,331,0.73,1139,1.158,1259,0.896,1758,1.368,2640,2.022,2641,1.667]],["text/ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space",[10,2.7,19,1.703,39,1.302,41,1.112,42,2.17,45,1.134,61,0.971,67,2.502,79,2.596,94,3.966,260,3.969,305,4.902,813,2.339,1222,4.133,1375,3.172,2642,6.658,2643,8.356]],["title/ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space",[21,0.53,87,0.632,325,0.536,326,0.688,331,0.632,441,0.551,442,1.072,448,0.632,1139,1.002,1768,1.56,2641,1.442,2644,1.749]],["text/ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space",[10,3.493,14,1.635,15,1.022,19,1.143,38,3.529,39,1.684,41,1.439,42,2.03,44,1.618,45,1.387,50,5.243,61,1.345,67,2.234,70,1.367,237,1.765,260,4.33,305,4.28,325,1.459,326,1.875,347,2.146,441,2.733,448,1.72,813,2.279,1076,3.223,1222,3.717,1375,2.829,1484,2.322,2408,3.223,2514,6.076,2641,3.926,2642,4.469,2643,6.391,2645,8.68,2646,4.763,2647,4.763,2648,4.763]],["title/ds/tree/lowest-common-ancestor/",[766,3.204,2649,4.179,2650,3.808]],["text/ds/tree/lowest-common-ancestor/",[3,1.709,10,2.536,14,1.799,16,0.892,39,1.375,41,1.045,42,1.896,44,2.545,45,1.065,55,4.292,61,0.747,67,0.993,77,2.544,79,1.294,83,2.48,93,3.434,114,1.328,117,4.323,156,3.25,225,2.348,233,2.309,234,1.792,257,2.078,260,4.332,283,2.025,290,2.393,325,1.671,326,2.95,330,2.107,331,2.707,334,2.21,335,2.275,337,3.842,421,3.765,441,2.901,536,2.401,578,2.0,598,4.279,766,2.544,813,1.968,964,8.736,989,3.563,1003,3.765,1105,3.154,1120,2.349,1186,3.154,1222,2.698,1375,2.443,1446,3.154,1484,1.724,1751,4.405,1972,3.154,2216,8.736,2649,3.318,2650,3.024,2651,6.666,2652,5.459,2653,2.74,2654,5.121,2655,3.537,2656,5.459,2657,3.537]],["title/ds/tree/lowest-common-ancestor/#lowest-common-ancestor",[766,3.204,2649,4.179,2650,3.808]],["text/ds/tree/lowest-common-ancestor/#lowest-common-ancestor",[10,2.838,14,1.791,39,1.368,41,0.85,42,1.953,44,2.534,45,0.866,67,1.523,93,3.419,114,2.036,117,4.554,233,3.54,260,4.237,290,3.669,325,1.661,326,2.937,331,1.958,337,3.817,421,3.74,441,2.893,578,3.067,598,3.481,813,1.96,964,8.884,1003,5.146,1222,3.02,1375,2.432,1751,4.385,1972,4.837,2216,8.884,2651,8.531,2652,7.462,2653,4.202,2654,5.087,2655,5.423,2656,7.462]],["title/ds/tree/lowest-common-ancestor/#iterative-implementation",[77,2.507,536,2.366]],["text/ds/tree/lowest-common-ancestor/#iterative-implementation",[10,1.897,14,1.689,16,1.258,39,1.291,41,1.103,42,1.734,44,2.391,45,1.125,55,5.075,61,0.963,77,2.325,79,1.825,83,3.199,93,3.226,117,3.758,156,3.977,225,2.873,234,2.527,257,2.932,260,4.325,283,2.857,325,1.527,326,2.77,330,2.971,331,2.946,334,2.849,335,2.934,337,3.511,421,3.44,441,2.79,536,2.194,598,4.519,813,1.849,964,8.291,989,4.595,1105,4.449,1120,3.314,1186,4.449,1222,2.019,1375,2.294,1446,4.449,1484,2.432,1751,4.137,2216,8.291,2654,4.679,2657,4.988]],["title/ds/tree/segment-tree/",[448,1.943,2658,5.885]],["text/ds/tree/segment-tree/",[817,5.76]],["title/ds/tree/traversal/",[1259,3.009]],["text/ds/tree/traversal/",[3,2.391,10,2.709,13,1.681,14,2.014,15,1.766,16,1.415,19,0.653,21,1.958,39,0.672,41,1.013,42,1.078,45,1.033,53,1.906,61,1.101,62,0.675,67,1.817,69,1.807,70,2.527,72,1.117,79,0.995,82,2.727,83,1.236,87,0.554,92,1.586,103,2.548,106,0.654,114,0.576,117,1.452,121,1.889,133,1.543,148,1.995,158,1.421,163,1.697,164,0.828,174,1.718,178,2.93,182,0.94,188,1.538,225,1.29,228,1.168,232,1.189,260,3.014,274,3.204,286,2.031,305,2.066,325,1.858,326,2.388,327,4.498,328,4.179,330,0.914,331,2.192,332,2.89,334,2.052,335,2.337,336,0.64,350,0.686,366,2.538,379,1.224,390,2.8,428,1.002,436,2.519,437,2.563,441,1.766,442,0.94,448,3.135,457,1.08,467,1.129,475,1.643,481,1.265,492,0.89,526,1.538,531,1.158,535,1.718,546,0.868,548,1.611,559,1.485,597,0.902,626,0.927,642,1.257,728,1.129,762,1.856,813,2.005,854,1.08,878,1.265,910,1.265,924,2.125,989,1.002,1003,1.876,1064,1.312,1066,1.312,1075,1.019,1076,2.478,1079,1.189,1081,1.158,1112,0.793,1118,1.807,1139,0.879,1158,2.052,1160,2.426,1175,1.265,1222,2.882,1234,1.265,1259,3.021,1282,3.262,1308,1.312,1338,0.969,1339,2.023,1352,2.764,1375,1.978,1401,2.242,1416,1.265,1425,1.485,1450,0.879,1491,0.686,1599,3.497,1612,3.43,1624,1.268,1733,1.369,1751,0.902,1754,2.635,1758,1.84,2070,0.914,2073,1.058,2074,1.058,2149,1.369,2383,3.019,2395,3.019,2408,2.998,2410,1.312,2419,1.312,2506,2.325,2507,2.325,2518,4.045,2542,1.104,2551,2.426,2586,1.265,2587,1.224,2588,1.224,2589,2.242,2591,1.312,2594,1.312,2599,1.369,2600,1.369,2601,2.426,2641,1.265,2650,1.312,2659,1.369,2660,3.267,2661,1.535,2662,1.535,2663,1.535,2664,1.535,2665,1.535,2666,1.535,2667,1.535,2668,1.535,2669,1.535,2670,1.535,2671,1.535,2672,1.535,2673,1.535,2674,1.535,2675,1.535,2676,1.535,2677,2.72,2678,1.535,2679,2.72,2680,1.535,2681,2.72,2682,2.72,2683,1.535,2684,1.535,2685,1.535,2686,1.535,2687,1.535,2688,2.72,2689,2.72,2690,2.72,2691,1.535,2692,1.535,2693,1.535,2694,1.535,2695,1.535]],["title/ds/tree/traversal/#traversal",[1259,3.009]],["text/ds/tree/traversal/#traversal",[10,3.381,14,1.41,15,2.126,21,3.0,69,3.873,72,3.236,103,4.501,121,2.504,164,3.171,178,5.175,188,4.456,260,3.624,274,3.102,286,3.61,390,5.47,441,1.85,442,3.6,448,2.122,548,2.584,597,3.453,1118,5.234,1222,3.598,1259,4.211,1733,5.24,1758,3.975,2506,5.023,2507,5.023,2659,5.24,2660,5.24]],["title/ds/tree/traversal/#depth-first-traversals",[286,2.041,1259,1.975,2660,3.973]],["text/ds/tree/traversal/#depth-first-traversals",[10,1.622,13,2.085,14,1.509,15,1.768,19,1.023,21,1.904,53,2.2,61,1.405,70,3.062,83,1.937,87,1.54,92,3.232,103,1.937,114,1.601,117,2.276,121,2.68,158,2.228,174,3.971,178,2.228,182,2.613,225,1.502,260,1.738,305,3.841,325,1.925,327,6.399,328,7.241,331,1.54,335,1.777,336,1.777,428,2.783,437,2.959,448,2.27,475,2.576,481,3.514,492,2.473,526,2.412,559,3.431,813,1.651,910,3.514,989,2.783,1003,4.335,1064,3.645,1066,3.645,1079,3.304,1081,3.217,1139,2.442,1175,3.514,1222,1.726,1259,1.89,1308,3.645,1339,4.123,1352,5.632,2518,3.402,2551,5.606,2661,4.264,2662,4.264,2663,4.264,2664,4.264,2665,4.264,2666,4.264,2667,4.264,2668,4.264,2669,4.264,2670,4.264,2671,4.264,2672,4.264,2673,4.264,2674,4.264,2675,4.264]],["title/ds/tree/traversal/#inorder",[1758,4.593]],["text/ds/tree/traversal/#inorder",[10,2.853,41,1.175,42,1.594,45,1.198,67,2.107,82,3.53,133,2.063,148,2.952,441,2.362,457,5.279,526,4.242,548,3.299,762,3.8,813,1.97,1222,3.036,1282,4.777,1375,2.444,1751,4.408,2383,6.182,2395,6.182,2676,7.501,2677,9.218]],["title/ds/tree/traversal/#preorder",[2506,5.803]],["text/ds/tree/traversal/#preorder",[10,2.813,41,1.159,42,1.572,45,1.181,67,2.077,82,3.5,133,2.034,148,2.911,232,5.73,366,5.233,441,2.329,448,3.3,467,5.443,762,3.747,1222,2.994,1282,4.747,1338,4.672,1375,2.41,2383,6.095,2395,6.095,2678,7.396,2679,9.139]],["title/ds/tree/traversal/#postorder",[2507,5.803]],["text/ds/tree/traversal/#postorder",[10,2.833,41,1.167,42,1.583,45,1.19,67,2.092,82,3.515,133,2.049,148,2.931,366,5.256,441,2.345,448,3.315,762,3.774,1222,3.015,1282,4.762,1375,2.427,1491,3.329,2149,6.642,2383,6.138,2395,6.138,2680,7.448,2681,9.178]],["title/ds/tree/traversal/#bfs",[1599,4.682]],["text/ds/tree/traversal/#bfs",[]],["title/ds/tree/traversal/#using-call-stack",[16,1.124,334,1.803,335,1.857]],["text/ds/tree/traversal/#using-call-stack",[10,1.828,13,1.594,14,1.154,15,2.056,16,1.729,21,1.456,39,1.466,41,1.253,42,1.022,45,1.277,53,2.021,61,0.938,62,2.114,67,1.926,70,2.501,82,2.626,133,1.886,148,1.892,158,2.511,228,2.065,260,3.553,274,4.866,325,2.448,326,3.146,331,2.887,332,3.895,334,2.776,335,2.858,350,2.148,436,3.407,437,2.717,441,1.514,448,3.328,813,1.262,878,3.962,1076,3.252,1158,3.626,1222,1.946,1234,3.962,1375,1.566,1401,5.651,1425,2.624,1754,4.931,2408,4.639,2518,6.377,2591,4.109,2594,4.109,2599,4.287,2600,4.287,2601,6.115,2682,6.857,2683,4.807,2684,4.807,2685,4.807]],["title/ds/tree/traversal/#using-queues",[16,1.357,1624,2.507]],["text/ds/tree/traversal/#using-queues",[10,3.077,13,2.683,41,1.268,42,1.299,45,1.292,53,2.384,61,0.836,67,2.272,79,2.959,82,3.098,133,1.682,148,2.406,163,3.098,228,2.626,260,3.298,325,1.872,326,3.184,331,2.208,332,3.616,441,1.925,448,2.921,813,2.763,1222,3.275,1375,2.955,1425,3.337,1450,3.501,2070,3.641,2073,4.216,2074,4.216,2542,4.396,2586,5.038,2587,4.877,2588,4.877,2589,6.667,2686,6.113]],["title/ds/tree/traversal/#bfs-vs-dfs",[626,2.691,1599,3.072,1612,3.014]],["text/ds/tree/traversal/#bfs-vs-dfs",[]],["title/ds/tree/traversal/#time-complexity",[325,1.647,326,2.117]],["text/ds/tree/traversal/#time-complexity",[14,2.151,106,3.821,332,4.006]],["title/ds/tree/traversal/#space-complexity",[326,2.117,331,1.943]],["text/ds/tree/traversal/#space-complexity",[14,2.509,16,1.916,19,1.336,53,1.64,67,1.563,117,2.971,163,2.909,225,1.96,274,2.939,286,2.55,332,2.488,334,2.253,335,3.166,379,4.441,436,4.296,437,3.427,448,3.355,475,3.362,535,4.798,546,3.148,548,2.448,813,1.462,854,3.918,924,5.015,1076,5.139,1112,2.878,1158,4.199,1259,3.367,1599,5.239,1612,5.139,1624,2.594,1754,4.003,2408,5.139,2410,4.758,2419,4.758,2518,4.441,2641,4.587,2650,4.758,2660,4.964,2687,5.566,2688,7.596,2689,7.596,2690,7.596,2691,5.566,2692,5.566,2693,5.566,2694,5.566]],["title/ds/tree/traversal/#how-to-pick-one",[121,2.293,1416,4.434]],["text/ds/tree/traversal/#how-to-pick-one",[14,2.441,83,3.56,225,2.759,260,3.194,330,4.667,331,2.829,334,3.171,531,5.91,642,4.374,728,5.765,1075,5.204,1160,8.442,1599,5.403,1612,6.404,2695,7.834]],["title/java/IO/",[2043,6.368]],["text/java/IO/",[]],["title/java/annotations/",[2696,4.593]],["text/java/annotations/",[2,1.942,3,2.221,7,2.569,15,0.442,16,1.16,31,1.517,32,0.899,39,0.645,41,1.368,45,1.395,61,1.194,76,0.834,87,0.744,88,4.489,105,2.124,108,1.101,112,0.73,114,0.774,133,1.495,174,2.905,185,1.877,234,1.044,237,1.303,255,3.457,257,2.702,258,2.51,263,1.699,274,1.088,276,2.795,286,0.944,295,1.517,325,1.408,333,1.211,351,1.422,366,2.014,400,1.369,419,1.517,441,0.649,470,1.555,486,1.152,494,1.125,533,2.529,534,4.033,536,2.022,546,1.989,548,0.906,558,3.053,577,1.369,591,1.323,600,2.933,606,1.451,627,1.645,662,1.555,664,2.066,682,1.369,728,5.738,733,1.517,763,3.236,773,1.323,781,3.002,782,1.699,787,1.211,808,1.934,817,1.302,836,1.517,839,1.152,858,1.394,881,1.555,951,1.422,952,4.888,974,3.483,989,2.295,1145,1.451,1242,1.422,1349,1.282,1384,1.422,1566,2.095,1577,1.555,1581,1.597,1594,1.263,1637,4.211,1769,1.369,1909,2.336,1911,1.838,1942,3.171,1951,1.394,2046,1.394,2115,4.196,2326,1.838,2344,2.475,2418,1.517,2467,1.597,2636,2.805,2696,6.584,2697,2.255,2698,4.313,2699,2.255,2700,1.934,2701,1.838,2702,1.934,2703,1.934,2704,2.255,2705,2.255,2706,1.934,2707,2.255,2708,2.255,2709,2.724,2710,2.255,2711,4.598,2712,2.255,2713,2.255,2714,4.598,2715,2.255,2716,4.313,2717,2.255,2718,2.255,2719,2.255,2720,5.03,2721,4.598,2722,5.434,2723,2.255,2724,3.516,2725,1.934,2726,2.255,2727,2.255,2728,2.805,2729,2.255,2730,3.516,2731,4.598,2732,2.255,2733,2.255,2734,2.255,2735,2.255,2736,2.255,2737,2.898,2738,2.255,2739,1.762,2740,3.298,2741,2.539,2742,3.516,2743,3.516,2744,3.516,2745,3.516,2746,3.516,2747,3.516,2748,2.061,2749,2.061,2750,2.061,2751,1.838,2752,2.061,2753,2.061,2754,2.061,2755,2.061,2756,3.516,2757,2.061,2758,2.061,2759,2.061,2760,2.061,2761,2.061,2762,2.061,2763,4.598,2764,2.061,2765,1.838,2766,2.805,2767,2.061,2768,1.838,2769,1.762,2770,1.482,2771,2.061,2772,1.762,2773,1.838,2774,1.838,2775,2.061,2776,1.934,2777,2.061,2778,2.061,2779,2.061,2780,2.061,2781,2.061,2782,2.061,2783,2.061,2784,2.061,2785,2.061,2786,1.838,2787,1.517,2788,2.061,2789,2.061,2790,2.061,2791,2.061,2792,2.061,2793,2.061,2794,1.934,2795,2.061,2796,2.061,2797,1.838,2798,2.061,2799,2.061,2800,2.061]],["title/java/annotations/#annotation-type",[974,2.507,2696,3.639]],["text/java/annotations/#annotation-type",[2,4.225,15,1.207,16,1.419,39,1.032,41,1.199,45,1.222,61,1.377,105,3.398,108,2.396,185,3.003,255,4.327,257,3.306,276,2.577,351,3.88,400,3.737,558,2.891,577,3.737,591,3.611,600,4.129,858,3.806,1577,4.243,2115,5.492,2696,3.806,2711,7.651,2714,7.651,2721,5.625,2722,7.651,2724,5.625,2739,4.809,2740,5.277,2741,3.106,2742,7.651,2743,7.651,2744,7.651,2745,7.651,2746,7.651,2747,7.651,2748,5.625,2749,5.625,2750,5.625,2751,5.017,2752,5.625,2753,5.625,2754,5.625,2755,5.625]],["title/java/annotations/#java-inbuilt",[7,3.006,2326,4.798]],["text/java/annotations/#java-inbuilt",[76,3.398,105,3.281,419,6.177,817,5.303,2709,6.504,2756,9.863,2757,8.394,2758,8.394,2759,8.394,2760,8.394]],["title/java/annotations/#meta-annotations",[1911,4.798,2696,3.639]],["text/java/annotations/#meta-annotations",[7,3.56,16,1.607,88,4.688,174,5.845,274,3.364,325,1.951,494,3.478,533,5.978,534,4.994,546,3.603,558,2.407,606,4.484,782,5.251,839,3.56,951,4.394,1145,4.484,1384,4.394,1581,4.936,1637,7.598,1909,4.232,1942,4.394,2696,6.882,2740,5.976,2761,6.371,2762,6.371,2763,9.252,2764,6.371,2765,5.682,2766,6.632,2767,6.371,2768,5.682,2769,5.446,2770,4.582,2771,6.371,2772,5.446,2773,5.682]],["title/java/annotations/#type-annotations-and-pluggable-type-systems",[974,2.42,1951,2.243,2696,2.243,2774,2.957]],["text/java/annotations/#type-annotations-and-pluggable-type-systems",[237,3.086,255,3.692,366,4.769,536,3.662,2344,5.862,2728,6.644,2730,8.328,2731,9.817,2737,6.864,2775,8.328,2776,7.812]],["title/java/annotations/#repeating-annotations",[88,3.959,2696,3.639]],["text/java/annotations/#repeating-annotations",[7,3.177,32,2.481,39,1.043,41,1.469,45,1.497,88,5.671,114,2.134,133,1.564,234,2.881,255,3.416,257,3.341,276,4.294,286,2.605,486,3.177,534,4.159,546,3.216,548,2.5,558,2.148,600,3.069,664,3.341,728,5.671,733,4.184,763,6.153,952,6.434,974,3.592,1566,4.591,2115,5.523,2696,6.341,2741,4.256,2777,5.686,2778,5.686,2779,5.686,2780,5.686,2781,5.686,2782,5.686,2783,5.686,2784,5.686,2785,5.686,2786,5.071,2787,4.184,2788,5.686,2789,5.686,2790,5.686,2791,5.686,2792,5.686,2793,5.686]],["title/java/annotations/#retrieving-annotations",[2696,3.639,2794,5.046]],["text/java/annotations/#retrieving-annotations",[2795,9.04,2796,9.04]],["title/java/annotations/#design-considerations",[2797,4.798,2798,5.379]],["text/java/annotations/#design-considerations",[295,6.38,333,5.095,682,5.759,974,4.041,2696,5.865,2799,8.669,2800,8.669]],["title/java/basics/",[420,4.101]],["text/java/basics/",[3,2.419,5,1.598,9,3.203,10,1.425,11,4.878,13,0.737,14,0.533,15,1.043,16,0.56,18,2.094,19,1.166,21,1.135,23,1.598,24,1.676,32,0.969,39,0.687,41,1.401,42,0.796,43,1.532,44,1.65,45,1.399,47,1.777,54,1.241,56,1.272,57,1.241,61,1.245,62,0.977,66,1.676,67,1.052,70,2.11,72,0.912,74,1.306,75,1.635,76,3.933,79,0.813,81,1.476,82,0.851,85,1.532,86,1.45,89,1.981,93,1.018,94,1.241,104,1.721,107,2.405,108,1.173,114,2.142,116,1.149,118,1.503,121,0.947,125,3.341,132,1.503,154,1.256,167,1.635,182,1.361,186,1.831,194,1.503,200,1.598,203,1.88,210,1.532,212,1.306,228,2.968,229,2.584,237,0.823,255,1.661,258,1.213,261,1.532,264,1.598,275,5.447,276,1.018,283,1.272,287,1.323,314,3.287,315,3.151,347,1.001,357,1.831,366,3.267,394,1.256,395,1.721,400,1.476,419,1.635,420,3.849,435,1.721,437,1.485,441,0.7,452,1.609,491,2.367,492,4.008,496,3.341,526,1.256,550,1.403,555,1.213,558,2.156,562,3.088,566,4.485,578,2.119,601,1.831,609,1.635,631,1.306,709,1.981,773,1.426,779,1.831,805,1.721,910,4.004,928,1.342,974,2.265,993,1.831,1004,1.981,1038,1.831,1108,1.173,1112,1.149,1120,3.79,1176,1.981,1222,0.899,1313,1.564,1402,2.622,1421,1.476,1483,1.063,1504,3.877,1572,1.831,1576,1.426,1581,1.721,1585,1.981,1594,2.296,1667,1.981,1709,1.721,1752,1.45,1769,4.233,1831,1.772,1976,1.676,2115,1.403,2237,1.981,2322,1.772,2324,1.981,2659,1.981,2725,2.084,2801,2.221,2802,2.221,2803,3.515,2804,2.221,2805,2.221,2806,1.899,2807,2.221,2808,2.221,2809,2.221,2810,2.221,2811,1.981,2812,2.221,2813,2.221,2814,1.831,2815,2.221,2816,2.221,2817,2.221,2818,2.221,2819,3.747,2820,2.221,2821,2.221,2822,2.221,2823,2.221,2824,2.221,2825,2.221,2826,2.221,2827,2.221,2828,2.221,2829,2.221,2830,2.221,2831,2.221,2832,2.221,2833,2.221,2834,5.705,2835,1.981,2836,2.221,2837,2.221,2838,2.221,2839,2.221,2840,2.221,2841,2.221,2842,1.981,2843,2.221,2844,1.981,2845,2.221,2846,2.43,2847,2.084,2848,3.747,2849,2.221,2850,4.859,2851,3.747,2852,3.747,2853,2.221,2854,2.221,2855,4.859,2856,2.221,2857,2.221,2858,2.221,2859,2.221,2860,3.747,2861,3.515,2862,2.221,2863,2.221,2864,1.676]],["title/java/basics/#variables",[420,4.101]],["text/java/basics/#variables",[39,1.293,61,0.964,107,4.526,203,4.45,212,4.144,261,4.863,287,4.2,420,6.152,441,2.22,526,3.988,550,4.454,555,3.849,558,3.352,773,4.526,974,3.286,1421,4.683,1667,6.288,1769,6.447,1976,5.319,2322,5.625,2801,7.05,2802,7.05,2803,8.321,2804,7.05,2805,7.05,2806,6.028,2807,7.05]],["title/java/basics/#naming",[1594,4.16]],["text/java/basics/#naming",[61,1.079,167,5.808,229,5.443,357,6.505,400,5.243,419,5.808,435,6.115,437,3.128,1112,4.081,1572,6.505,2808,7.893,2809,7.893,2810,7.893,2811,7.039,2812,7.893,2813,7.893,2814,6.505,2815,7.893,2816,7.893]],["title/java/basics/#arrays",[108,2.126]],["text/java/basics/#arrays",[19,1.775,21,2.768,39,1.356,41,1.159,61,1.25,194,5.004,200,5.319,229,5.101,237,2.74,255,3.279,347,3.333,1313,5.205,1504,7.291,1594,4.532,2237,6.596,2725,6.938,2817,7.396,2818,7.396,2819,9.139,2820,7.396,2821,7.396,2822,7.396,2823,7.396,2824,7.396]],["title/java/basics/#javautilarrays",[2825,6.788]],["text/java/basics/#javautilarrays",[14,2.014,24,6.332,70,2.408,228,3.606,492,4.869,2826,8.394,2827,8.394,2828,8.394,2829,8.394,2830,8.394,2831,8.394]],["title/java/basics/#operators",[76,2.748]],["text/java/basics/#operators",[5,3.196,9,5.539,10,2.464,11,7.184,13,1.473,15,1.39,16,1.121,18,3.62,23,3.196,32,1.939,42,0.944,43,3.064,44,1.509,54,2.483,61,0.886,62,1.954,66,3.352,67,1.248,72,1.825,74,2.611,75,3.27,76,4.424,79,1.625,81,2.951,82,1.702,85,3.064,86,2.9,89,3.963,93,2.036,104,3.443,107,2.852,114,3.155,118,3.006,121,1.894,125,5.778,132,3.006,154,2.513,210,3.064,255,1.97,275,7.638,283,2.544,314,4.383,366,2.544,394,2.513,491,4.093,492,5.182,562,5.34,566,3.127,578,3.664,631,2.611,709,3.963,910,6.302,928,2.684,974,3.02,993,3.662,1004,3.963,1176,3.963,1222,1.799,1483,2.127,1581,3.443,1709,3.443,1831,3.545,2659,3.963,2832,4.443,2833,4.443,2834,8.404,2835,3.963,2836,4.443,2837,4.443,2838,4.443,2839,4.443,2840,4.443,2841,4.443,2842,3.963,2843,4.443,2844,3.963]],["title/java/basics/#expressions-result9-blocks-statements-",[94,1.642,366,1.683,566,2.069,779,2.422,1251,2.939,2845,2.939]],["text/java/basics/#expressions-result9-blocks-statements-",[]],["title/java/basics/#control-flow",[601,4.434,2847,5.046]],["text/java/basics/#control-flow",[15,0.995,19,1.604,41,1.656,42,0.986,44,2.27,45,1.688,47,3.171,56,2.656,57,2.592,61,1.366,67,1.303,70,2.716,108,1.452,116,2.398,182,2.842,186,3.823,228,3.904,258,2.532,264,3.336,314,3.138,315,4.735,366,3.827,395,3.594,437,1.838,452,2.871,496,5.961,566,5.515,609,3.413,805,3.594,1108,2.449,1120,5.695,1504,3.7,1585,4.136,1752,3.028,2115,2.93,2324,4.136,2848,6.683,2849,4.638,2850,7.835,2851,6.683,2852,6.683,2853,4.638,2854,4.638,2855,7.835,2856,4.638,2857,4.638,2858,4.638,2859,4.638,2860,6.683,2861,6.27,2862,4.638,2863,4.638]],["title/java/basics/#access-modifiers",[1402,2.903,1576,3.453]],["text/java/basics/#access-modifiers",[276,3.908,558,3.762,1038,7.03,1402,5.373,1769,6.614,2864,6.434]],["title/java/classes/",[558,2.565]],["text/java/classes/",[2865,9.975]],["title/java/collections/",[4,4.16]],["text/java/collections/",[3,2.298,4,5.573,14,1.4,15,0.352,16,1.688,19,0.692,21,0.496,33,1.794,39,0.529,41,1.049,42,0.348,45,1.069,47,0.778,51,1.089,52,1.956,55,0.939,61,1.128,67,1.305,69,1.176,70,1.333,76,2.362,77,2.166,87,1.678,92,1.248,100,2.72,103,0.745,105,2.868,107,1.052,112,2.601,114,1.449,117,0.875,128,0.951,129,1.206,133,1.062,154,2.183,156,0.799,158,0.856,164,0.885,165,0.977,173,1.476,185,0.875,203,1.936,212,0.963,225,0.577,227,1.179,228,1.239,237,2.333,255,2.06,256,1.154,258,1.574,260,0.668,269,1.915,276,2.129,283,0.939,286,1.321,287,0.977,293,0.951,297,0.927,298,2.074,334,1.167,336,0.683,356,1.109,357,2.376,364,1.07,366,0.939,413,2.564,414,3.419,423,1.179,429,1.268,435,1.27,441,0.908,449,0.659,455,1.332,457,1.154,464,1.089,466,1.27,471,1.308,483,1.154,486,1.611,494,0.895,502,4.363,509,1.179,519,0.963,525,3.455,528,1.462,536,1.697,546,0.927,548,2.328,555,0.895,558,0.619,572,1.089,576,3.153,585,1.27,599,0.799,603,0.927,615,2.628,622,1.237,624,0.916,626,0.99,643,1.07,648,1.351,663,1.308,696,1.206,697,1.767,698,1.989,764,2.611,765,1.206,775,0.99,781,3.033,823,2.029,836,1.206,848,2.122,868,1.308,877,1.131,911,1.574,959,1.154,966,1.462,967,1.633,974,0.764,975,1.975,989,1.07,1259,0.727,1318,2.571,1338,1.036,1342,1.462,1349,1.02,1375,0.534,1376,0.688,1421,1.089,1477,2.175,1483,2.224,1489,1.206,1491,0.733,1566,2.299,1576,1.851,1595,1.206,1619,1.491,1624,2.166,1701,1.07,1744,1.089,1880,2.662,1906,1.401,1909,1.915,1986,1.07,1999,1.401,2029,1.462,2039,1.462,2046,1.109,2105,1.951,2108,1.401,2139,1.538,2366,1.351,2463,2.571,2610,2.705,2698,6.884,2741,3.222,2776,1.538,2794,1.538,2797,1.462,2864,1.237,2866,3.442,2867,1.793,2868,1.538,2869,1.793,2870,1.462,2871,1.27,2872,2.571,2873,1.538,2874,3.154,2875,2.571,2876,3.86,2877,1.462,2878,1.639,2879,3.621,2880,2.571,2881,3.829,2882,1.639,2883,1.639,2884,2.705,2885,2.705,2886,1.462,2887,1.639,2888,2.883,2889,2.883,2890,1.639,2891,1.639,2892,1.639,2893,1.639,2894,1.639,2895,1.639,2896,1.639,2897,1.639,2898,1.639,2899,1.639,2900,1.639,2901,1.639,2902,1.639,2903,1.639,2904,1.639,2905,1.639,2906,1.639,2907,1.639,2908,1.639,2909,1.639,2910,1.639,2911,1.462,2912,1.639,2913,1.639,2914,1.639,2915,1.639,2916,1.639,2917,1.639,2918,1.639,2919,1.639,2920,1.639,2921,1.351,2922,1.308,2923,2.883,2924,1.639,2925,1.639,2926,1.639,2927,1.639,2928,1.639,2929,1.639,2930,1.639,2931,1.639,2932,1.639,2933,1.639,2934,1.639,2935,1.639,2936,1.639,2937,1.639,2938,1.639,2939,1.639,2940,1.639,2941,1.639,2942,1.639,2943,1.538,2944,1.639,2945,1.639,2946,1.639,2947,1.639,2948,1.639,2949,1.639,2950,1.639,2951,1.639,2952,1.639,2953,1.639,2954,1.639,2955,1.639,2956,1.639,2957,3.442,2958,2.705,2959,2.705,2960,2.705,2961,1.639,2962,1.639,2963,2.883,2964,1.639,2965,1.639,2966,1.639,2967,2.705,2968,2.705,2969,2.705,2970,1.639,2971,1.639,2972,1.639,2973,1.639,2974,1.639,2975,1.639,2976,1.639,2977,1.639,2978,1.639,2979,1.639,2980,1.639,2981,1.639,2982,1.639,2983,1.639,2984,1.639,2985,1.639,2986,1.639,2987,1.639,2988,1.639,2989,1.639,2990,1.639]],["title/java/collections/#why",[]],["text/java/collections/#why",[4,4.128,16,1.699,52,3.413,100,4.936,237,3.193,258,4.704,457,4.741,525,4.397,576,5.66,663,5.374,836,4.957,967,2.85,1624,3.14,1909,4.475,1986,4.397,2797,6.008,2876,9.502,2877,6.008,2878,6.736,2879,8.084,2880,7.685,2881,8.255,2882,6.736,2883,6.736,2884,6.319,2885,6.319]],["title/java/collections/#interfaces",[2741,3.748]],["text/java/collections/#interfaces",[4,6.223,14,1.186,16,1.764,52,3.543,112,3.523,114,1.855,117,2.638,154,3.955,260,2.015,276,2.264,286,3.204,334,2.0,364,3.226,435,3.829,449,1.986,464,3.283,483,3.478,525,5.76,528,4.407,548,4.095,585,3.829,599,2.409,622,3.728,624,2.761,643,3.226,764,3.343,781,4.565,823,4.922,848,3.637,911,2.697,967,2.958,975,3.579,1483,3.347,1491,2.209,1566,4.166,1624,3.783,1744,3.283,1880,3.408,1909,3.283,1999,4.225,2029,4.407,2039,4.407,2105,4.731,2463,6.237,2610,4.636,2698,9.526,2741,3.861,2866,4.407,2872,4.407,2884,4.636,2885,4.636,2886,4.407,2887,4.942,2888,6.993,2889,6.993]],["title/java/collections/#traversing-collections",[4,3.297,1259,2.385]],["text/java/collections/#traversing-collections",[4,3.311,14,1.297,15,0.749,16,1.363,21,1.057,39,0.991,41,1.438,42,0.742,45,1.466,47,1.656,51,2.318,61,1.316,67,1.518,69,2.203,70,1.55,76,2.676,77,2.518,92,1.511,103,1.586,105,2.112,107,2.24,128,2.024,129,2.568,133,1.818,156,1.701,164,1.884,165,2.079,185,1.863,203,3.317,212,2.051,228,1.499,237,2.758,255,3.299,256,2.456,269,3.589,276,3.029,297,1.974,336,1.454,356,2.361,357,4.453,423,2.51,466,2.704,486,3.019,502,4.453,558,1.319,572,2.318,615,4.209,697,2.139,765,2.568,775,2.108,877,2.407,911,1.905,975,1.786,1342,3.112,1375,1.137,1376,1.465,1483,1.671,1576,2.24,1619,2.793,2046,2.361,2108,2.984,2366,2.876,2741,1.927,2864,2.633,2866,3.112,2875,3.112,2890,3.49,2891,3.49,2892,3.49,2893,3.49,2894,3.49,2895,3.49,2896,3.49,2897,3.49,2898,3.49,2899,3.49,2900,3.49,2901,3.49,2902,3.49,2903,3.49,2904,3.49,2905,3.49,2906,3.49,2907,3.49,2908,3.49,2909,3.49,2910,3.49,2911,3.112,2912,3.49,2913,3.49,2914,3.49,2915,3.49,2916,3.49,2917,3.49,2918,3.49,2919,3.49,2920,3.49,2921,2.876,2922,2.784,2923,5.403,2924,3.49,2925,3.49,2926,3.49,2927,3.49,2928,3.49,2929,3.49,2930,3.49,2931,3.49,2932,3.49,2933,3.49,2934,3.49,2935,3.49,2936,3.49,2937,3.49,2938,3.49,2939,3.49,2940,3.49,2941,3.49,2942,3.49,2943,3.274,2944,3.49,2945,3.49,2946,3.49,2947,3.49,2948,3.49,2949,3.49,2950,3.49,2951,3.49,2952,3.49,2953,3.49,2954,3.49,2955,3.49,2956,3.49]],["title/java/collections/#aggregate-operations",[76,2.177,502,4.434]],["text/java/collections/#aggregate-operations",[14,1.983,61,1.13,67,2.321,287,4.922,413,6.491,414,6.081,2957,7.369,2958,7.751,2959,7.751,2960,7.751,2961,8.263,2962,8.263]],["title/java/collections/#aggregate-operations-vs-iterators",[76,1.539,77,1.772,502,3.133,626,2.296]],["text/java/collections/#aggregate-operations-vs-iterators",[16,1.84,55,4.177,77,3.4,112,2.585,158,3.811,227,5.246,283,4.177,293,4.231,298,5.246,366,4.177,414,5.368,455,4.187,494,3.981,509,5.246,603,4.125,698,5.03,781,4.761,868,5.819,959,5.134,966,6.505,1318,8.08,1349,4.537,1421,4.845,1489,5.368,2963,9.06,2964,7.294,2965,7.294]],["title/java/collections/#reduction",[648,5.595]],["text/java/collections/#reduction",[14,1.923,19,1.923,33,4.984,61,1.096,70,2.299,105,3.75,173,4.91,414,5.896,576,4.773,1477,6.044,2957,7.146,2966,8.012,2967,7.516,2968,7.516,2969,7.516]],["title/java/collections/#streamcollect-method",[87,1.943,2970,5.379]],["text/java/collections/#streamcollect-method",[4,4.901,14,1.442,19,1.442,33,3.738,61,1.094,67,1.688,70,1.724,76,2.432,87,2.888,105,4.011,112,2.13,114,3.002,228,2.581,237,2.226,298,4.321,413,3.991,414,4.422,555,3.28,576,3.579,696,4.422,697,3.682,781,3.922,1338,3.796,1477,4.533,1576,3.857,1595,4.422,2957,5.359,2958,5.637,2959,5.637,2960,5.637,2967,5.637,2968,5.637,2969,5.637,2971,6.009,2972,6.009,2973,6.009,2974,6.009,2975,6.009,2976,6.009,2977,6.009,2978,6.009,2979,6.009,2980,6.009,2981,6.009,2982,6.009,2983,6.009,2984,6.009,2985,6.009,2986,6.009,2987,6.009,2988,6.009,2989,6.009]],["title/java/collections/#algorithms",[429,2.985]],["text/java/collections/#algorithms",[]],["title/java/collections/#custom-implementation",[536,2.366,2990,5.379]],["text/java/collections/#custom-implementation",[]],["title/java/collections/#interoperability",[2879,6.368]],["text/java/collections/#interoperability",[]],["title/java/concurrency/",[2991,7.426]],["text/java/concurrency/",[]],["title/java/debugging/",[2992,6.368]],["text/java/debugging/",[]],["title/java/deployment/",[2701,6.054]],["text/java/deployment/",[]],["title/java/exceptions/",[2418,4.996]],["text/java/exceptions/",[334,3.243,335,3.339,1330,6.85,1483,3.835,2418,8.01,2737,6.603,2847,7.516,2943,7.516,2993,8.765,2994,8.765,2995,8.765,2996,8.765,2997,8.765]],["title/java/generics/",[664,3.989]],["text/java/generics/",[3,2.284,31,5.368,87,2.634,95,4.028,325,2.774,429,3.208,534,4.89,536,3.208,558,2.756,642,3.371,664,5.792,787,4.286,974,4.223,1421,4.845,1942,5.03,2706,6.842,2728,5.819,2741,4.028,2998,9.912,2999,7.979,3000,7.746,3001,7.294,3002,6.505]],["title/java/generics/#why",[]],["text/java/generics/#why",[325,2.55,429,3.662,534,4.495,536,3.662,664,4.894,787,4.894,974,3.882,2706,7.812,2728,6.644,3000,7.12,3001,8.328,3002,7.427]],["title/java/helloworld/",[3003,7.426]],["text/java/helloworld/",[41,1.451,45,1.479,72,4.111,105,3.619,133,2.078,203,3.79,255,3.349,271,4.931,276,3.461,558,2.855,1009,5.111,1701,4.931,2769,6.458,2921,6.226,2922,6.027,3004,8.264,3005,8.264,3006,6.226,3007,7.087,3008,8.264]],["title/java/inheritance/",[2770,4.882]],["text/java/inheritance/",[2,0.766,3,2.125,4,0.85,7,0.775,13,1.12,14,0.333,16,1.329,39,0.456,41,0.897,42,1.007,45,0.915,61,0.563,72,0.57,74,0.815,87,3.42,95,3.162,105,0.972,106,2.441,107,0.891,114,0.933,121,2.611,133,1.943,154,2.68,158,0.725,159,1.094,164,1.342,170,1.571,188,0.785,203,3.885,209,0.795,210,0.957,225,0.489,230,3.19,231,1.888,234,0.703,237,1.756,255,1.102,257,2.785,272,1.075,276,4.069,283,0.795,310,2.134,311,1.984,325,0.425,333,1.461,334,1.918,364,0.906,365,1.047,423,1.788,437,0.55,439,1.021,441,0.437,444,1.021,449,0.558,455,1.561,467,1.021,476,0.957,492,1.442,494,1.357,513,1.876,526,1.406,531,2.549,534,1.823,536,2.694,558,3.729,566,1.75,591,2.169,600,1.342,626,0.838,627,1.984,631,0.815,664,0.815,711,0.977,766,0.998,773,3.042,787,0.815,792,3.106,819,0.998,830,0.922,868,2.696,926,1.186,928,0.838,952,4.508,967,0.587,970,0.977,974,2.456,989,0.906,991,0.922,993,1.144,1045,1.107,1072,1.302,1111,5.148,1242,0.957,1335,1.107,1338,0.877,1402,2.222,1420,1.652,1421,0.922,1432,1.144,1483,3.952,1489,1.021,1505,1.021,1566,1.481,1567,2.785,1576,1.596,1577,1.047,1581,1.075,1594,2.07,1595,4.214,1610,2.049,1718,1.238,1727,3.574,1730,0.957,1769,4.069,1942,0.957,2034,1.984,2109,0.939,2113,1.144,2115,1.571,2147,1.238,2332,2.126,2428,1.107,2548,1.144,2637,1.238,2696,0.939,2709,3.671,2728,2.696,2737,2.049,2741,3.901,2765,1.238,2770,5.26,2772,3.52,2773,1.238,2787,1.83,2814,2.049,2835,1.238,2842,1.238,2864,3.574,2871,5.018,2873,1.302,2875,1.238,2880,2.218,2921,1.144,2922,1.107,3000,1.186,3009,6.588,3010,6.724,3011,1.518,3012,1.518,3013,3.013,3014,1.518,3015,6.445,3016,4.699,3017,1.302,3018,2.601,3019,3.905,3020,1.518,3021,1.518,3022,3.862,3023,4.445,3024,1.388,3025,1.302,3026,1.518,3027,1.518,3028,1.388,3029,2.126,3030,2.218,3031,1.388,3032,1.388,3033,1.388,3034,1.238,3035,1.238,3036,1.388,3037,1.388,3038,1.388,3039,1.388,3040,1.388,3041,1.388,3042,1.388,3043,1.388,3044,1.388,3045,1.388,3046,1.388,3047,1.388,3048,1.388,3049,1.388,3050,1.388,3051,2.487,3052,1.388,3053,1.388,3054,1.388,3055,1.388,3056,2.487,3057,2.487,3058,1.388,3059,1.388,3060,1.238,3061,1.388,3062,1.388,3063,1.388,3064,1.238,3065,1.388,3066,1.302,3067,1.388,3068,2.333,3069,1.388,3070,2.487,3071,1.388,3072,1.388,3073,1.388,3074,1.388,3075,2.333,3076,5.268,3077,2.487,3078,4.117,3079,2.487,3080,5.268,3081,2.487,3082,1.388,3083,1.388,3084,1.388]],["title/java/inheritance/#casting-objects",[1483,2.575,2728,4.292]],["text/java/inheritance/#casting-objects",[61,1.318,105,3.767,237,2.991,1483,3.864,2728,7.69,2842,7.2,3028,8.073,3029,6.902,3030,8.596,3031,8.073,3032,8.073,3033,8.073]],["title/java/inheritance/#multiple-inheritance-of-state-implementation-and-type",[154,1.875,536,1.458,792,2.501,974,1.545,2770,2.384]],["text/java/inheritance/#multiple-inheritance-of-state-implementation-and-type",[16,1.778,87,2.546,95,3.893,121,3.005,154,5.489,164,3.805,203,3.537,257,4.144,272,5.463,283,4.038,437,2.794,455,4.099,534,3.805,536,3.901,558,2.664,792,6.691,819,5.071,1566,4.2,1594,4.321,1769,4.683,2115,4.454,2741,4.898,2770,7.325,3034,6.288,3035,6.288,3036,7.05]],["title/java/inheritance/#polymorphism",[2875,6.054]],["text/java/inheritance/#polymorphism",[95,4.391,106,3.39,164,4.292,225,2.801,558,3.609,591,5.105,868,6.344,989,5.191,1727,5.999,2034,6.344,2109,5.38,2428,6.344,2637,7.092,3009,6.344,3037,7.952,3038,7.952,3039,7.952]],["title/java/inheritance/#virtual-method-invocation",[87,1.609,2765,3.973,3040,4.455]],["text/java/inheritance/#virtual-method-invocation",[87,3.183,95,4.867,334,3.568,974,4.108,3041,8.814]],["title/java/inheritance/#super-keyword",[2772,4.599,2814,4.434]],["text/java/inheritance/#super-keyword",[2,3.946,7,3.993,14,1.715,231,3.993,325,2.188,334,2.893,449,2.872,455,3.302,534,4.828,558,3.38,967,3.023,1242,4.928,1483,4.282,2332,7.647,2772,7.647,2787,5.259,3010,8.709,3015,9.19,3023,6.703,3042,7.146,3043,7.146]],["title/java/inheritance/#constructor-chaining",[3013,4.798,3015,4.599]],["text/java/inheritance/#constructor-chaining",[188,4.863,334,3.481,1335,6.86,1420,5.712,1483,4.116,3013,7.669,3015,8.552]],["title/java/inheritance/#object-as-superclass",[1483,2.575,3010,4.798]],["text/java/inheritance/#object-as-superclass",[4,2.656,13,1.437,39,1.167,42,1.765,72,1.78,87,2.999,107,2.782,114,2.388,121,1.847,133,2.543,159,1.906,170,4.019,255,2.82,276,4.583,334,2.575,364,2.829,444,3.189,467,3.189,492,3.69,494,3.473,558,3.494,600,2.339,664,2.547,711,3.05,787,2.547,952,5.547,991,2.879,993,3.572,1111,7.04,1338,2.738,1432,3.572,1483,4.692,1505,3.189,1567,3.572,1610,5.243,1769,2.879,1942,2.989,2113,3.572,2147,3.865,2548,3.572,2696,2.932,2709,4.929,2737,5.243,2741,2.393,2773,3.865,3009,3.458,3015,3.705,3016,5.674,3018,2.738,3029,3.705,3044,4.334,3045,4.334,3046,4.334,3047,4.334,3048,4.334,3049,4.334,3050,4.334,3051,6.362,3052,4.334,3053,4.334,3054,4.334,3055,4.334,3056,6.362,3057,6.362,3058,4.334,3059,4.334,3060,3.865,3061,4.334,3062,4.334,3063,4.334,3064,3.865,3065,4.334,3066,4.066,3067,4.334]],["title/java/inheritance/#abstract-methods-and-classes",[87,1.609,558,1.683,2871,3.452]],["text/java/inheritance/#abstract-methods-and-classes",[558,3.358,2871,6.886,3009,7.091,3068,8.337]],["title/java/inheritance/#abstract-classes-vs-interface",[558,1.436,626,2.296,2741,2.099,2871,2.945]],["text/java/inheritance/#abstract-classes-vs-interface",[13,1.443,16,1.906,74,2.557,87,3.344,95,4.172,121,1.855,154,2.461,158,2.274,159,1.914,203,3.791,210,3.001,230,6.447,231,2.432,234,2.205,257,3.75,276,3.813,333,3.75,365,3.283,439,3.203,441,1.37,513,4.813,526,3.609,536,3.896,558,3.846,566,4.491,591,4.096,600,2.349,627,5.091,631,2.557,766,3.13,792,3.283,868,5.091,926,3.72,928,2.629,952,6.124,970,3.063,974,2.974,1045,3.472,1111,5.318,1402,3.444,1483,2.083,1489,3.203,1566,2.592,1567,3.587,1576,4.096,1581,3.372,1769,5.527,2034,3.472,2115,2.749,2741,5.283,2770,3.13,2787,3.203,2864,4.813,2871,7.174,2873,4.082,2880,5.691,3000,3.72,3016,5.691,3068,4.082,3069,4.352,3070,6.381,3071,4.352,3072,4.352,3073,4.352]],["title/java/inheritance/#overriding-and-hiding-methods",[87,1.609,2709,3.452,3019,3.672]],["text/java/inheritance/#overriding-and-hiding-methods",[13,1.512,41,1.521,42,0.969,45,1.55,61,0.903,87,3.763,95,2.517,106,2.813,121,2.813,133,2.483,203,5.082,237,1.689,257,2.679,276,4.447,423,4.747,558,2.494,773,5.46,830,3.028,974,3.076,1421,3.028,1567,3.757,1594,2.793,1718,4.065,2709,3.532,2835,4.065,2921,3.757,2922,3.637,3009,6.786,3010,6.919,3019,3.757,3022,6.191,3023,7.278,3074,4.558,3075,6.191,3076,9.41,3077,6.6,3078,8.505,3079,6.6,3080,9.41,3081,6.6,3082,4.558,3083,4.558,3084,4.558]],["title/java/interfaces/",[2741,3.748]],["text/java/interfaces/",[3,1.892,10,1.156,14,1.163,15,1.48,19,1.163,38,1.739,39,1.653,41,1.258,42,1.466,44,1.032,45,1.283,61,0.663,87,3.682,95,3.337,105,3.812,106,1.295,107,3.111,114,1.819,116,3.125,122,1.951,133,0.836,203,4.028,209,1.74,255,1.347,257,4.053,269,2.018,276,4.008,287,5.506,334,1.23,418,2.018,491,1.92,492,1.762,494,1.659,536,2.131,558,2.606,559,3.299,578,1.719,670,4.347,773,3.111,856,1.51,928,2.927,952,3.566,1043,2.71,1111,2.139,1222,1.23,1483,2.319,1529,2.096,1566,1.81,1619,2.505,1756,2.85,2034,2.424,2115,5.696,2142,2.71,2331,2.71,2709,2.354,2741,4.83,2770,2.185,2871,3.754,2881,2.504,3022,5.67,3024,3.039,3085,2.85,3086,5.301,3087,3.324,3088,3.324,3089,3.324,3090,3.324,3091,3.324,3092,5.301,3093,5.301,3094,3.324,3095,3.324,3096,3.324,3097,3.324,3098,5.301,3099,5.301,3100,3.324,3101,3.324,3102,3.324,3103,3.324,3104,3.324,3105,3.324,3106,3.324,3107,3.324,3108,3.324,3109,3.324,3110,3.039,3111,3.324,3112,5.301,3113,5.301,3114,3.324,3115,3.324,3116,5.301,3117,5.301,3118,3.039,3119,3.039,3120,3.039,3121,3.039,3122,3.039,3123,2.85,3124,3.039,3125,3.039,3126,3.039,3127,3.039,3128,3.039]],["title/java/interfaces/#evolving-interfaces",[2741,2.97,3118,5.379]],["text/java/interfaces/#evolving-interfaces",[38,2.73,41,1.192,45,1.215,87,3.358,95,4.201,105,2.974,107,4.884,116,4.808,203,3.817,255,3.373,257,4.472,287,4.532,418,5.054,1619,3.934,2115,5.875,2741,4.201,3119,7.609,3120,7.609,3121,7.609,3122,7.609,3123,7.138]],["title/java/interfaces/#extending-interfaces-that-contain-default-methods",[87,1.197,257,1.948,1566,1.975,2115,2.094,2741,1.831]],["text/java/interfaces/#extending-interfaces-that-contain-default-methods",[87,3.835,116,4.112,257,4.673,1043,7.092,2115,6.708,2331,7.092,2709,6.161,2741,4.391,2770,5.719,2871,6.161,3124,7.952,3125,7.952]],["title/java/interfaces/#static-methods",[87,1.943,203,2.699]],["text/java/interfaces/#static-methods",[87,3.721,95,4.458,203,4.836,558,3.642,773,5.183,856,4.011,1483,3.864,2034,6.441,2142,7.2,3126,8.073,3127,8.073,3128,8.073]],["title/java/intro/",[7,3.793]],["text/java/intro/",[3,2.33,4,2.139,7,5.262,14,1.786,16,0.88,50,2.108,54,1.95,56,3.786,69,3.282,87,1.26,92,2.339,106,1.488,128,3.834,178,1.823,209,3.094,210,2.407,233,2.278,258,3.608,274,1.843,294,2.278,295,2.568,310,2.205,325,1.069,453,4.076,454,2.318,460,2.456,491,2.205,494,2.949,519,4.374,534,1.884,535,2.205,558,2.042,599,1.701,600,4.792,606,2.456,620,4.453,642,1.613,663,4.311,664,3.175,665,2.704,762,2.737,800,3.886,803,3.112,810,2.784,819,3.886,822,4.311,836,5.477,844,2.139,845,2.876,907,2.456,951,2.407,953,2.784,959,2.456,1112,3.418,1402,2.916,1483,3.853,1602,2.633,1610,2.876,1615,2.876,1674,3.112,1752,2.278,1844,3.112,1880,2.407,1942,2.407,2155,4.453,2322,2.784,2377,3.112,2431,4.818,2653,2.704,2701,3.112,2702,3.274,2703,3.274,2741,1.927,2766,4.311,2768,4.818,2769,2.984,2787,2.568,2870,4.818,2881,5.448,2886,3.112,3129,3.49,3130,4.186,3131,3.274,3132,3.49,3133,3.49,3134,3.49,3135,3.49,3136,3.112,3137,6.201,3138,3.49,3139,3.49,3140,5.068,3141,3.49,3142,3.49,3143,7.017,3144,5.403,3145,4.818,3146,3.49,3147,3.274,3148,3.49,3149,3.49,3150,3.49,3151,3.49,3152,3.49,3153,3.49,3154,3.49,3155,3.49,3156,3.274,3157,3.49,3158,5.403,3159,3.49,3160,3.49,3161,3.49,3162,3.49]],["title/java/intro/#what-is-java",[7,3.793]],["text/java/intro/#what-is-java",[3129,9.118]],["title/java/intro/#programming-language",[258,2.936,3130,4.168]],["text/java/intro/#programming-language",[7,3.581,14,2.359,16,1.617,54,3.581,210,4.421,274,3.384,294,4.184,453,6.295,454,4.258,460,4.511,494,3.499,519,5.777,534,3.459,558,2.422,600,5.305,606,4.511,642,2.962,663,5.114,664,3.767,762,3.247,800,4.61,822,5.114,953,5.114,1483,3.068,1942,4.421,2322,5.114,2766,5.114,2870,5.716,3131,6.013,3132,6.409,3133,6.409,3134,6.409,3135,6.409,3136,5.716,3137,6.013,3138,6.409,3139,6.409,3140,6.013,3141,6.409,3142,6.409]],["title/java/intro/#platform",[3143,5.595]],["text/java/intro/#platform",[7,5.652,56,4.429,128,4.486,209,3.274,258,3.12,599,2.787,664,3.359,665,4.429,762,2.896,803,5.098,819,5.563,822,4.561,836,5.692,1112,2.956,1402,4.175,1483,3.702,1602,4.312,1674,5.098,1752,3.731,1880,3.943,2155,4.711,2377,5.098,2431,6.898,2701,5.098,2702,5.362,2703,5.362,2741,3.157,2766,4.561,2768,6.898,2769,4.887,2881,6.375,2886,5.098,3143,8.088,3144,7.735,3145,5.098,3146,5.716,3147,5.362,3148,5.716,3149,5.716,3150,5.716,3151,5.716,3152,5.716,3153,5.716,3154,5.716,3155,5.716,3156,5.362,3157,5.716,3158,7.735,3159,5.716,3160,5.716]],["title/java/intro/#why",[]],["text/java/intro/#why",[4,3.725,7,3.396,50,3.671,56,3.481,69,4.084,87,2.195,92,3.489,106,2.591,128,3.525,178,3.175,209,3.481,233,3.967,258,3.318,295,4.473,310,3.839,325,1.861,491,3.839,494,3.318,535,3.839,558,2.297,600,4.88,620,6.642,663,4.849,800,4.371,810,4.849,836,5.931,844,3.725,845,5.009,907,4.278,951,4.192,959,4.278,1112,4.167,1483,3.858,1610,5.009,1615,5.009,1844,5.42,2155,5.009,2653,4.709,2787,4.473,2870,5.42,2881,5.009,3130,4.709,3137,7.56,3140,5.702,3145,5.42,3161,6.078,3162,6.078]],["title/java/java9%26beyond/",[3163,7.426]],["text/java/java9%26beyond/",[7,5.976,97,5.929,160,7.497,200,5.037,237,2.595,250,3.739,423,5.037,514,5.427,626,4.231,693,4.738,817,4.424,1240,4.93,1536,6.57,1571,6.57,2154,8.286,2786,6.246,3164,7.662,3165,7.662,3166,7.662,3167,7.662,3168,8.286,3169,7.662,3170,7.662,3171,7.662,3172,7.662]],["title/java/jdbc/",[3156,6.368]],["text/java/jdbc/",[]],["title/java/jsp/",[3173,7.426]],["text/java/jsp/",[]],["title/java/networking/",[1602,5.121]],["text/java/networking/",[]],["title/java/numbers/",[13,2.251]],["text/java/numbers/",[3,1.178,4,2.306,7,2.103,13,2.298,16,2.213,33,3.561,61,0.783,70,2.696,87,2.067,95,2.078,114,2.601,115,4.31,126,3.217,153,3.002,161,3.217,163,1.441,165,2.242,171,3.356,182,2.306,203,1.888,228,4.037,231,2.103,237,1.394,255,3.432,261,3.948,269,2.5,276,1.724,287,2.242,358,2.595,420,3.458,438,2.242,441,1.803,453,2.839,478,2.273,479,1.987,486,2.103,501,2.341,512,2.416,513,2.839,534,2.031,558,2.926,559,2.054,581,3.356,615,2.128,675,2.377,762,1.907,775,2.273,881,4.318,897,2.273,974,3.229,1002,3.102,1113,4.894,1269,2.706,1291,2.273,1387,3.217,1483,3.706,1619,1.946,1766,3.356,1880,2.595,1948,3.217,1951,2.546,1976,5.84,2322,3.002,2332,3.217,2376,5.923,2786,3.356,2803,3.53,2806,3.217,2922,3.002,3143,3.102,3174,4.117,3175,6.263,3176,4.117,3177,4.117,3178,3.53,3179,3.53,3180,4.117,3181,4.117,3182,3.53,3183,4.117,3184,4.117,3185,3.53,3186,4.117,3187,4.117,3188,4.117,3189,4.117,3190,4.117,3191,4.117,3192,4.117,3193,4.117,3194,4.117,3195,4.117,3196,4.117,3197,4.117,3198,4.117,3199,4.117,3200,6.263,3201,4.117,3202,4.117,3203,4.117,3204,4.117,3205,4.117,3206,4.117,3207,4.117,3208,4.117,3209,4.117,3210,4.117,3211,3.356,3212,3.763,3213,3.763,3214,3.356,3215,3.763,3216,3.763,3217,3.763,3218,3.763]],["title/java/numbers/#advanced-math",[153,4.292,1387,4.599]],["text/java/numbers/#advanced-math",[171,7.039,203,3.96,269,5.243,486,4.41,512,5.067,581,7.039,675,4.986,897,4.768,1002,6.505,1291,4.768,1766,7.039,3211,7.039,3212,7.893,3213,7.893,3214,7.039,3215,7.893,3216,7.893,3217,7.893,3218,7.893]],["title/java/oops/",[1483,3.249]],["text/java/oops/",[3,2.818,15,0.707,16,0.831,19,1.24,39,1.168,41,1.41,45,1.437,52,2.617,61,1.189,69,2.106,70,2.385,72,2.963,87,2.605,95,1.819,105,2.49,133,2.545,165,1.962,220,2.552,225,1.16,228,2.219,234,1.669,237,1.221,257,1.936,314,4.311,420,1.99,441,1.037,442,2.019,519,1.936,525,2.15,527,2.485,536,1.449,558,3.284,562,5.251,577,2.188,590,2.938,592,2.938,600,1.778,606,2.319,622,2.485,665,2.552,773,3.316,792,3.896,814,2.15,821,2.938,826,2.938,836,2.424,928,1.99,959,2.319,989,2.15,1042,2.938,1120,2.188,1338,2.081,1349,2.049,1410,2.081,1422,2.552,1468,2.715,1483,3.979,1577,2.485,1769,4.232,1892,2.938,1951,2.229,2428,4.121,2636,2.628,2741,3.518,2770,2.369,2774,2.938,2868,3.09,2877,7.751,2992,3.09,3006,4.257,3009,2.628,3018,3.263,3019,4.257,3030,2.938,3064,2.938,3085,3.09,3219,3.294,3220,3.294,3221,3.294,3222,3.294,3223,3.294,3224,3.294,3225,2.816,3226,3.294,3227,3.294,3228,6.988,3229,3.294,3230,3.294,3231,3.294,3232,3.294,3233,3.294,3234,3.294,3235,3.294,3236,5.165,3237,8.313,3238,5.165,3239,5.165,3240,5.165,3241,3.294,3242,6.372,3243,7.214,3244,3.294,3245,3.294]],["title/java/oops/#objects",[1483,3.249]],["text/java/oops/#objects",[72,4.35,87,2.85,225,2.78,420,4.768,525,5.152,527,5.954,792,5.954,1483,4.551,1769,5.243,1892,7.039,2868,7.404,3006,6.505,3219,7.893,3220,7.893,3221,7.893]],["title/java/oops/#why",[]],["text/java/oops/#why",[16,1.947,69,3.825,220,5.981,592,6.885,600,4.166,606,5.434,814,5.039,821,6.885,959,5.434,1120,5.128,1483,3.695,1577,5.823,1951,5.223,2636,6.159,2774,6.885,2992,7.242,3019,6.362,3222,7.72,3223,7.72,3224,7.72,3225,6.6]],["title/java/oops/#data-encapsulation",[441,1.694,3226,5.379]],["text/java/oops/#data-encapsulation",[87,3.08,234,4.322,519,5.013,792,6.434,826,7.607,1349,5.305,3019,7.03,3064,7.607,3227,8.529]],["title/java/oops/#class",[558,2.565]],["text/java/oops/#class",[558,3.71,590,7.427,622,6.282,773,6.302,1338,5.261,1483,4.699,3228,8.756,3229,8.328]],["title/java/oops/#inheritance",[2770,4.882]],["text/java/oops/#inheritance",[41,1.201,45,1.224,87,3.373,95,4.232,105,3.651,237,2.84,257,4.504,442,4.697,558,2.896,577,5.091,836,5.64,1422,5.938,1769,6.205,2428,6.115,3009,6.115,3030,6.835,3228,6.835,3230,7.664,3231,7.664,3232,7.664]],["title/java/oops/#interface",[2741,3.748]],["text/java/oops/#interface",[15,1.07,19,1.689,39,1.496,41,1.562,45,1.592,61,1.363,70,2.783,105,1.95,133,2.847,165,2.971,228,3.024,314,5.519,536,2.194,558,2.66,562,6.723,989,3.256,1042,4.449,1468,4.111,2741,2.754,2877,8.889,3006,4.111,3085,4.679,3228,6.278,3233,4.988,3234,4.988,3235,4.988,3236,7.039,3237,9.698,3238,7.039,3239,7.039,3240,7.039,3241,4.988,3242,8.158,3243,8.861,3244,4.988,3245,4.988]],["title/java/oops/#package",[3018,4.288]],["text/java/oops/#package",[52,4.429,558,3.303,928,5.28,1410,5.522,2428,6.974,2741,4.827]],["title/java/oops/#library",[665,5.26]],["text/java/oops/#library",[52,4.58,3018,5.711]],["title/java/packages/",[3018,4.288]],["text/java/packages/",[3,2.779,7,3.789,10,0.944,13,1.363,14,1.263,15,0.533,16,1.843,21,1.245,32,1.083,52,1.258,54,1.387,73,1.544,87,0.896,106,2.243,116,1.283,117,2.194,118,2.781,121,2.608,124,1.679,129,1.827,159,1.092,203,3.069,225,0.874,234,1.258,237,0.92,263,2.046,274,1.311,276,3.545,284,1.679,310,1.568,311,1.98,331,0.896,334,1.005,365,1.872,420,1.499,437,0.984,438,1.479,439,1.827,452,1.066,459,1.785,486,5.25,526,2.976,534,3.302,558,3.69,559,1.355,566,1.747,591,1.593,600,1.34,610,2.046,642,1.147,669,4.616,679,1.923,761,1.34,784,1.827,801,2.214,839,2.94,844,1.521,856,1.233,881,3.101,928,3.696,971,2.046,973,2.214,974,4.379,976,1.98,1111,1.747,1112,1.283,1310,2.214,1336,2.046,1338,1.568,1340,2.27,1371,1.747,1384,3.629,1402,3.302,1410,1.568,1468,2.046,1552,1.827,1566,1.479,1572,2.046,1594,5.757,1595,3.872,1655,2.046,1715,1.747,1752,2.683,1769,1.649,1951,2.781,1955,4.498,2046,5.68,2115,1.568,2426,1.923,2548,2.046,2696,1.679,2741,2.27,2766,4.198,2787,3.025,2814,2.046,2844,2.214,2864,1.872,2866,2.214,2872,2.214,3016,2.214,3018,6.478,3025,2.328,3034,2.214,3035,2.214,3060,2.214,3130,3.185,3136,2.214,3143,2.046,3211,2.214,3225,3.514,3246,2.482,3247,2.482,3248,2.482,3249,2.482,3250,2.482,3251,3.856,3252,4.693,3253,2.482,3254,2.482,3255,2.482,3256,2.482,3257,2.482,3258,2.482,3259,2.482,3260,2.482,3261,2.482,3262,3.856,3263,3.856,3264,2.482,3265,2.482,3266,2.482,3267,2.482,3268,2.482,3269,4.111,3270,2.482,3271,2.482,3272,2.482,3273,2.482,3274,2.482,3275,4.936,3276,2.482,3277,2.482,3278,2.482,3279,2.482,3280,2.482]],["title/java/packages/#why",[]],["text/java/packages/#why",[106,2.533,121,3.811,124,4.019,225,2.093,237,2.201,274,3.137,276,4.687,365,4.482,439,4.372,526,5.056,642,2.746,784,4.372,839,3.32,844,3.641,881,4.482,928,4.795,974,5.061,1336,4.897,1338,3.753,1384,4.098,1402,4.284,1410,3.753,1468,4.897,1594,5.478,1655,4.897,1752,5.182,2046,5.37,2864,4.482,3018,6.281,3034,5.299,3246,5.941,3247,5.941,3248,5.941,3249,5.941,3250,5.941]],["title/java/packages/#naming",[1594,4.16]],["text/java/packages/#naming",[7,5.063,13,2.419,14,2.174,73,4.537,118,4.934,263,6.011,437,2.89,438,4.345,801,6.505,856,3.624,1112,3.771,1552,5.368,1572,6.011,1594,5.552,2814,6.011,3018,4.608,3130,5.651,3251,6.842,3252,6.505,3253,7.294,3254,7.294,3255,7.294,3256,7.294,3257,7.294,3258,7.294,3259,7.294,3260,7.294]],["title/java/packages/#usage",[973,6.054]],["text/java/packages/#usage",[]],["title/java/packages/#by-its-qualified-name",[1594,3.297,3252,4.798]],["text/java/packages/#by-its-qualified-name",[10,3.095,16,2.442,54,4.546,106,3.468,310,5.139,486,4.546,600,4.391,1594,4.986,1595,7.126,3018,6.117,3261,8.136,3262,7.632]],["title/java/packages/#importing-a-package-member",[486,2.489,1595,3.278,3018,2.814]],["text/java/packages/#importing-a-package-member",[486,5.051,3263,8.48]],["title/java/packages/#importing-an-entire-package",[486,2.489,3018,2.814,3225,3.808]],["text/java/packages/#importing-an-entire-package",[16,2.453,486,5.435,558,3.098,591,5.263,610,6.757,974,3.822,976,6.541,1310,7.312,3018,6.552,3225,7.009]],["title/java/packages/#import-the-public-nested-classes-of-an-enclosing-class",[276,1.347,311,2.345,486,1.642,558,1.783,3025,2.757]],["text/java/packages/#import-the-public-nested-classes-of-an-enclosing-class",[284,5.724,486,6.055,566,5.955,3263,7.937,3264,8.461,3265,8.461,3266,8.461]],["title/java/packages/#static-import",[203,2.699,486,3.006]],["text/java/packages/#static-import",[7,4.191,15,1.61,21,2.272,32,3.273,87,2.709,121,3.197,203,5.007,486,5.151,534,4.048,558,2.834,559,4.094,761,4.048,1111,5.279,1340,4.142,1402,4.048,1769,4.982,2046,5.075,2787,5.52,3018,5.823,3060,6.689,3136,6.689,3211,6.689]],["title/java/packages/#apparent-hierarchies-of-packages",[2872,3.973,3018,2.814,3267,4.455]],["text/java/packages/#apparent-hierarchies-of-packages",[13,2.698,16,2.052,116,4.206,679,6.304,839,4.546,928,4.914,2844,7.256,3018,6.531,3268,8.136,3269,9.683,3270,8.136,3271,8.136]],["title/java/packages/#name-ambiguities",[1594,3.297,3035,4.798]],["text/java/packages/#name-ambiguities",[14,1.968,16,2.068,21,2.483,106,3.495,117,4.376,839,4.581,974,3.822,1594,5.961,3018,5.179,3251,7.691,3252,7.312,3262,7.691,3272,8.199]],["title/java/packages/#managing-source-and-class-files",[558,1.436,1384,2.622,1955,3.25,2046,2.572]],["text/java/packages/#managing-source-and-class-files",[7,4.37,52,2.944,117,3.102,118,3.931,129,4.276,159,2.555,234,2.944,334,2.352,420,3.51,452,2.496,459,4.179,534,4.771,558,4.086,669,6.421,971,4.789,1340,3.209,1371,4.09,1384,4.008,1566,3.461,1594,4.793,1715,4.09,1951,5.291,1955,4.968,2046,6.677,2115,3.671,2426,4.502,2766,7.053,2787,4.276,3018,4.94,3130,4.502,3143,4.789,3273,5.811,3274,5.811,3275,8.292,3276,5.811,3277,5.811,3278,5.811,3279,5.811,3280,5.811]],["title/java/re/",[220,5.26]],["text/java/re/",[]],["title/java/security/",[822,5.416]],["text/java/security/",[]],["title/java/strings/",[255,3.009]],["text/java/strings/",[2,1.456,3,1.353,7,1.473,14,1.037,15,1.178,16,1.601,19,1.523,39,1.659,41,1.473,42,1.167,44,1.467,45,1.502,61,1.425,62,1.16,70,2.01,74,1.55,76,1.067,87,0.952,105,2.481,107,1.693,108,1.353,133,1.189,154,1.491,164,1.423,165,1.571,203,2.168,210,1.819,212,4.669,237,2.034,255,4.232,258,1.439,276,3.934,297,1.491,315,3.505,420,1.593,431,1.941,550,1.666,558,2.647,566,1.856,572,1.752,636,2.474,669,1.666,682,1.752,766,1.896,856,1.31,951,1.819,976,2.104,1009,2.923,1108,1.392,1120,2.87,1161,1.752,1384,1.819,1402,1.423,1408,2.254,1450,1.51,1483,2.068,1749,1.856,1831,2.104,1849,4.053,1976,3.259,2046,1.784,2072,1.941,2129,4.896,2321,1.989,2329,5.15,2344,3.041,2371,2.352,2524,2.352,2606,2.474,2653,2.043,2861,5.15,2864,3.259,2921,3.561,2922,3.447,3075,2.474,3130,2.043,3185,2.474,3281,2.885,3282,5.489,3283,4.727,3284,4.727,3285,4.727,3286,2.885,3287,7.663,3288,4.727,3289,6.944,3290,4.727,3291,2.885,3292,4.727,3293,2.885,3294,2.885,3295,2.885,3296,2.885,3297,2.885,3298,4.727,3299,2.885,3300,4.727,3301,4.727,3302,2.885,3303,6.944,3304,2.885,3305,2.885,3306,2.885,3307,2.885,3308,2.885,3309,2.885,3310,2.885,3311,2.885,3312,2.885,3313,2.885,3314,4.727,3315,2.885,3316,2.885,3317,2.885,3318,2.885,3319,2.885,3320,2.885,3321,2.885,3322,2.885,3323,5.489,3324,2.637,3325,4.321,3326,2.637,3327,2.637,3328,2.637,3329,2.637,3330,4.053,3331,4.053]],["title/java/strings/#why",[]],["text/java/strings/#why",[2,4.113,16,2.509,87,2.69,154,4.212,164,4.02,210,5.137,255,3.302,420,4.499,550,4.705,682,4.947,1402,4.02,2129,6.642,2524,6.642,2653,5.771,3185,6.987,3323,9.949,3324,7.448,3325,9.178,3326,7.448,3327,7.448,3328,7.448,3329,7.448]],["title/java/strings/#autoboxing-and-unboxing",[3330,5.046,3331,5.046]],["text/java/strings/#autoboxing-and-unboxing",[14,2.401,1483,4.788,1976,7.546,3330,8.066,3331,8.066]],["title/php/atttributes/",[3332,7.426]],["text/php/atttributes/",[14,1.085,19,1.085,41,1.63,45,1.661,61,1.283,87,2.788,225,3.168,237,3.139,255,2.908,276,4.299,536,1.987,558,2.479,567,5.982,628,4.282,697,2.769,1463,4.03,2737,5.406,2741,2.495,3066,4.239,3275,6.153,3282,8.995,3333,3.057,3334,9.841,3335,7.176,3336,8.447,3337,7.176,3338,10.59,3339,4.944,3340,7.176,3341,4.944,3342,4.944,3343,4.944,3344,4.944,3345,4.944,3346,4.944,3347,4.944,3348,4.944,3349,4.944,3350,4.944,3351,7.176,3352,4.944,3353,4.239,3354,4.944,3355,4.944,3356,7.176,3357,4.944,3358,8.447,3359,4.944,3360,4.944,3361,4.944]],["title/php/basics/",[3147,6.368]],["text/php/basics/",[2,0.622,3,2.153,13,2.478,14,0.683,15,1.425,16,1.032,19,0.683,21,1.064,33,2.859,36,0.608,39,0.207,41,1.142,42,0.24,45,1.164,53,0.332,54,1.151,61,1.217,63,0.749,67,0.317,70,1.559,73,0.701,74,0.662,75,0.83,76,1.152,77,1.638,87,1.478,92,1.522,97,0.691,100,1.326,103,0.936,105,3.944,107,1.826,108,1.578,114,1.068,115,0.701,131,1.005,139,0.929,153,0.899,159,1.251,160,2.205,161,3.499,163,0.789,167,0.83,170,0.712,173,1.054,178,1.487,179,0.873,182,0.691,188,0.638,194,0.763,203,2.306,209,1.18,225,2.248,226,0.964,227,0.811,228,1.222,233,0.736,234,0.571,237,1.054,250,1.876,254,0.873,255,2.234,256,0.793,257,0.662,261,5.027,268,1.89,271,1.857,272,0.873,276,1.304,283,1.18,286,0.517,287,1.695,290,0.763,292,0.763,294,1.345,297,1.988,299,2.816,310,0.712,314,0.763,333,0.662,334,1.423,336,0.859,351,0.777,364,1.857,365,0.85,366,1.18,390,0.622,394,0.638,400,0.749,463,0.929,464,0.749,470,0.85,489,1.698,492,0.654,494,0.615,499,2.27,513,0.85,515,0.426,526,0.638,534,0.608,536,0.496,548,0.496,556,0.83,558,2.053,577,0.749,585,0.873,594,0.83,599,0.55,600,1.536,617,0.681,631,0.662,639,2.345,643,2.294,679,1.596,692,0.929,693,1.394,697,0.691,711,0.793,728,0.83,733,0.83,765,0.83,784,1.516,787,0.662,794,1.005,817,0.712,827,0.929,830,0.749,844,0.691,867,0.964,871,1.005,924,0.654,934,0.777,974,3.397,985,1.005,994,2.897,1009,0.763,1045,1.644,1088,1.005,1097,1.057,1108,2.161,1112,0.583,1145,0.793,1163,0.622,1202,1.005,1242,1.962,1266,0.929,1277,1.005,1302,1.057,1349,1.77,1375,0.367,1376,0.473,1442,1.005,1450,2.886,1477,0.85,1483,1.682,1535,1.005,1561,1.005,1566,0.671,1594,0.691,1700,1.005,1701,0.736,1715,0.793,1732,0.929,1739,1.005,1741,1.005,1761,1.005,1763,1.005,1948,0.964,1951,0.763,1952,0.929,1976,0.85,2033,1.005,2044,1.057,2046,1.394,2233,0.873,2366,0.929,2376,0.964,2432,1.005,2443,0.964,2635,1.005,2636,0.899,2653,0.873,2700,1.057,2716,1.933,2739,1.761,2751,1.005,2806,1.761,2811,1.005,2911,2.537,3002,1.005,3006,1.698,3007,3.297,3017,1.057,3029,0.964,3110,1.127,3168,1.057,3178,1.057,3179,1.057,3182,4.312,3214,1.005,3333,6.175,3353,1.057,3362,1.233,3363,1.233,3364,5.667,3365,1.233,3366,1.233,3367,1.837,3368,1.127,3369,4.89,3370,1.127,3371,1.127,3372,1.127,3373,2.06,3374,2.06,3375,2.06,3376,1.933,3377,1.127,3378,1.127,3379,2.845,3380,1.933,3381,1.127,3382,1.127,3383,1.127,3384,1.127,3385,1.127,3386,1.933,3387,2.537,3388,1.127,3389,1.127,3390,1.127,3391,1.127,3392,1.127,3393,2.845,3394,1.127,3395,7.195,3396,1.127,3397,2.06,3398,1.127,3399,1.127,3400,1.127,3401,1.127,3402,5.783,3403,1.127,3404,2.845,3405,4.597,3406,1.127,3407,1.127,3408,2.06,3409,2.06,3410,2.06,3411,1.127,3412,1.127,3413,1.127,3414,1.127,3415,1.127,3416,1.127,3417,1.127,3418,1.127,3419,1.127,3420,1.127,3421,1.127,3422,1.127,3423,1.127,3424,1.127,3425,1.127,3426,1.127,3427,1.127,3428,1.127,3429,1.933,3430,1.127,3431,1.127,3432,1.127,3433,1.127,3434,1.127,3435,1.127,3436,1.127,3437,1.127,3438,1.127,3439,1.127,3440,1.127,3441,1.127,3442,1.127,3443,1.127,3444,1.127,3445,1.127,3446,1.127,3447,1.127,3448,1.127,3449,1.127,3450,1.127,3451,1.127,3452,2.06,3453,1.127,3454,2.06,3455,4.597,3456,4.597,3457,1.127,3458,2.845,3459,3.515,3460,3.515,3461,3.515,3462,1.127,3463,1.127,3464,1.127,3465,2.06,3466,1.127,3467,4.312,3468,1.127,3469,2.06,3470,1.127,3471,1.127,3472,2.845,3473,1.127,3474,2.845,3475,2.845,3476,1.127,3477,1.127,3478,1.127,3479,1.127,3480,1.127,3481,1.127,3482,1.127,3483,1.127,3484,1.127,3485,1.127,3486,1.127,3487,1.127,3488,1.127,3489,1.127]],["title/php/basics/#html-escaping",[3367,4.798,3368,5.379]],["text/php/basics/#html-escaping",[67,2.285,290,5.504,366,5.545,679,7.502,1108,5.113,3333,6.994,3369,7.13,3370,8.136]],["title/php/basics/#comments",[2739,5.803]],["text/php/basics/#comments",[2,2.995,15,1.164,16,1.368,21,1.642,100,3.976,103,2.464,105,3.766,188,3.067,233,3.54,234,2.748,256,3.817,268,4.957,271,4.871,286,2.485,292,3.669,310,3.426,336,2.26,489,6.15,499,5.953,515,2.049,577,3.602,585,4.202,600,4.027,617,3.276,692,4.47,693,3.669,711,3.817,765,3.991,827,4.47,844,3.323,985,4.837,1009,3.669,1045,4.327,1145,3.817,1376,2.277,1700,4.837,1701,3.54,2366,4.47,2636,4.327,2653,4.202,2739,4.636,2811,4.837,2911,7.608,3333,5.771,3367,4.837,3369,3.74,3371,5.423,3372,5.423,3373,7.462,3374,7.462,3375,7.462,3376,5.087,3377,5.423,3378,5.423,3379,8.531,3380,5.087,3381,5.423,3382,5.423,3383,5.423,3384,5.423]],["title/php/basics/#types",[974,3.164]],["text/php/basics/#types",[13,1.58,14,1.909,33,4.238,36,2.571,39,0.874,41,1.068,45,1.088,61,1.187,63,3.164,77,2.22,105,4.002,107,4.373,108,1.492,114,1.788,178,2.489,179,3.691,225,1.678,226,4.072,227,3.426,250,2.543,255,4.235,261,4.699,272,3.691,287,4.058,297,4.909,299,2.662,314,3.223,534,2.571,643,5.666,697,2.919,733,3.506,787,2.799,794,4.248,974,4.584,1108,2.515,1375,1.552,1483,2.28,1732,3.926,1739,4.248,1976,3.593,2033,4.248,2233,3.691,3002,4.248,3333,5.381,3364,6.555,3369,3.285,3385,4.763,3386,4.469,3387,4.248,3388,4.763,3389,4.763,3390,4.763,3391,4.763,3392,4.763,3393,7.953,3394,4.763,3395,5.615,3396,4.763,3397,6.813,3398,4.763,3399,4.763,3400,4.763,3401,4.763]],["title/php/basics/#boolean",[107,4.358]],["text/php/basics/#boolean",[13,2.814,15,1.59,19,2.036,21,1.626,61,1.013,76,2.173,105,4.27,108,1.681,114,2.015,268,3.566,271,3.504,394,3.036,1108,3.912,1450,5.826,1561,4.787,1741,4.787,3007,8.583,3333,5.013,3364,6.993,3369,5.11,3395,4.424,3402,10.521,3403,5.368,3404,8.485,3405,9.926,3406,5.368,3407,5.368,3408,7.409,3409,7.409,3410,7.409,3411,5.368,3412,5.368]],["title/php/basics/#integers",[33,4.222]],["text/php/basics/#integers",[13,3.46,61,1.427,105,4.078,161,8.92,163,2.647,639,7.926,3178,6.484,3179,6.484,3333,5.927,3369,4.767,3413,6.912,3414,6.912,3415,6.912,3416,6.912,3417,6.912,3418,6.912,3419,6.912,3420,6.912,3421,6.912]],["title/php/basics/#float",[261,4.682]],["text/php/basics/#float",[13,3.109,16,1.535,21,1.236,42,0.868,54,2.281,61,1.103,73,2.54,74,2.399,75,3.005,76,2.464,92,1.768,97,2.502,105,1.596,131,3.641,153,3.258,159,1.796,163,1.564,167,3.005,170,2.579,173,2.09,182,2.502,194,2.762,209,3.486,225,2.144,250,3.249,254,3.163,261,6.465,283,3.486,287,2.432,294,3.973,299,5.056,333,2.399,336,1.702,364,4.751,463,3.365,464,2.712,470,3.08,492,2.368,499,3.258,513,3.08,526,2.309,548,1.796,631,2.399,693,2.762,784,3.005,830,2.712,867,3.491,871,3.641,924,2.368,934,2.816,1045,3.258,1088,3.641,1163,2.255,1242,5.02,1266,3.365,1277,3.641,1349,4.527,1442,3.641,1535,3.641,1715,2.874,1763,3.641,1948,3.491,1951,2.762,1952,3.365,2376,3.491,2635,3.641,2700,3.83,3017,3.83,3168,3.83,3182,8.488,3214,3.641,3333,4.924,3369,2.816,3376,3.83,3380,3.83,3386,3.83,3422,4.083,3423,4.083,3424,4.083,3425,4.083,3426,4.083,3427,4.083,3428,4.083,3429,3.83,3430,4.083,3431,4.083,3432,4.083,3433,4.083,3434,4.083,3435,4.083,3436,4.083,3437,4.083,3438,4.083,3439,4.083,3440,4.083,3441,4.083,3442,4.083,3443,4.083,3444,4.083,3445,4.083,3446,4.083,3447,4.083,3448,4.083,3449,4.083]],["title/php/basics/#string",[255,3.009]],["text/php/basics/#string",[15,2.133,33,4.826,61,1.359,70,2.852,105,3.885,160,6.011,178,2.381,228,3.333,250,2.433,261,6.225,351,3.144,594,3.354,784,3.354,2751,4.065,3333,6.566,3369,3.144,3395,8.946,3450,4.558,3451,4.558,3452,6.6,3453,4.558,3454,6.6,3455,9.41,3456,9.41,3457,4.558,3458,7.759,3459,8.505,3460,8.505,3461,8.505,3462,4.558,3463,4.558,3464,4.558,3465,6.6,3466,4.558]],["title/php/basics/#arrays",[108,2.126]],["text/php/basics/#arrays",[16,1.878,61,1.255,105,2.911,108,3.252,139,6.138,994,8.559,1202,6.642,1477,5.618,2432,6.642,2806,6.367,3333,5.039,3369,5.137,3395,8.559,3467,9.742]],["title/php/basics/#iterable",[77,3.164]],["text/php/basics/#iterable",[41,1.524,45,1.554,77,4.534,105,3.204,114,3.078,225,2.888,728,6.034,3333,5.547,3353,7.691,3369,5.655,3468,8.199]],["title/php/basics/#object",[1483,3.249]],["text/php/basics/#object",[41,1.49,45,1.519,61,1.079,225,2.78,237,2.924,558,2.982,1761,7.039,3333,5.34,3364,6.505,3369,5.443,3395,8.411,3467,8.92,3469,9.508]],["title/php/basics/#reources",[3470,6.788]],["text/php/basics/#reources",[3471,9.118]],["title/php/basics/#callable",[3387,6.054]],["text/php/basics/#callable",[15,0.95,16,1.116,21,1.34,41,1.576,45,1.606,53,1.304,54,2.472,61,0.883,87,3.221,92,3.302,103,2.01,105,3.93,159,2.841,173,2.264,178,2.312,203,4.673,225,3.28,237,2.393,257,2.6,276,3.495,334,3.395,390,2.443,400,2.939,536,1.946,558,3.634,974,4.341,1483,3.092,1594,2.711,2716,6.059,3006,5.323,3029,3.783,3333,2.993,3364,7.351,3369,3.052,3387,3.946,3429,4.151,3472,7.628,3473,4.425,3474,7.628,3475,7.628,3476,4.425,3477,4.425,3478,4.425,3479,4.425,3480,4.425,3481,4.425,3482,4.425,3483,4.425,3484,4.425,3485,4.425,3486,4.425,3487,4.425]],["title/php/basics/#type-juggling-and-declartion",[974,2.076,3488,4.455,3489,4.455]],["text/php/basics/#type-juggling-and-declartion",[817,5.76]],["title/php/intro/",[3490,7.426]],["text/php/intro/",[3,1.86,16,1.498,83,2.7,118,4.019,258,3.243,310,3.753,464,3.947,567,4.603,664,3.492,698,4.098,762,3.01,766,4.273,781,3.878,799,7.079,819,4.273,1003,4.098,1009,4.019,1207,5.299,1341,4.147,1384,4.098,1573,5.573,1950,5.573,2155,6.542,2195,5.573,2741,4.383,3000,5.079,3123,7.446,3130,4.603,3131,5.573,3145,5.299,3333,6.455,3364,4.897,3367,8.509,3369,4.098,3491,6.5,3492,6.5,3493,6.5,3494,6.5,3495,6.5,3496,6.5,3497,6.5,3498,9.541,3499,6.5,3500,6.5,3501,6.5,3502,6.5,3503,6.5,3504,5.941,3505,5.941]],["title/php/intro/#what-it-can-do",[]],["text/php/intro/#what-it-can-do",[310,5.388,762,4.322,799,7.607,1003,5.883,1009,5.77,3498,9.956,3504,8.529,3505,8.529]],["title/php/security/",[822,5.416]],["text/php/security/",[810,7.032,1337,4.257,1951,5.963,3013,7.86,3506,9.642]]],"fields":["title","text"],"invertedIndex":[["!",{"_index":2838,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["!=",{"_index":79,"text":{"algo/bits/":{},"algo/bits/#iterative":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#method-5-optimized-method-4":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["!a[0]",{"_index":140,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["!a[1]",{"_index":138,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["!isbst(nod",{"_index":2447,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{}},"title":{}}],["!isempty(s1)",{"_index":2481,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["!isempty(s2))",{"_index":2482,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["\"",{"_index":228,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#javautilarrays":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"php/basics/":{},"php/basics/#string":{}},"title":{}}],["\"\"",{"_index":3281,"text":{"java/strings/":{}},"title":{}}],["\"\");",{"_index":3403,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["\"%f%n,",{"_index":3188,"text":{"java/numbers/":{}},"title":{}}],["\")",{"_index":1481,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["\"));",{"_index":2900,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["\").foreach(system.out::print)",{"_index":2830,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["\",",{"_index":1504,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#traversal":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{}},"title":{}}],["\"/home/user\";",{"_index":3360,"text":{"php/atttributes/":{}},"title":{}}],["\"/tmp/foo.jpg\";",{"_index":3359,"text":{"php/atttributes/":{}},"title":{}}],["\"10.0",{"_index":3465,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["\"10.2",{"_index":3462,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["\"10.5\";",{"_index":3450,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["\"3/17/2002\",",{"_index":2748,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["\"3/27/2003\"",{"_index":2715,"text":{"java/annotations/":{}},"title":{}}],["\"4/12/2004\",",{"_index":2749,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["\":",{"_index":2952,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["\";",{"_index":1425,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["\"<<a[0]<<endl;",{"_index":147,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["\"<<a[1];",{"_index":150,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["\"a\\n\";",{"_index":3480,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["\"b\\n\";",{"_index":3481,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["\"n/a\";",{"_index":2745,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["\"overflow\\n\"",{"_index":2015,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["\"},",{"_index":2820,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["#",{"_index":3379,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["###,###.###",{"_index":3201,"text":{"java/numbers/":{}},"title":{}}],["###.##",{"_index":3203,"text":{"java/numbers/":{}},"title":{}}],["#include<bits/stdc++.h>",{"_index":1508,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["#include<climits>",{"_index":1772,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["#include<iostream>",{"_index":1771,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["#include<stdio.h>",{"_index":2399,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{}}],["#include<stdlib.h>",{"_index":2400,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{}}],["$",{"_index":2813,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["$###,###.###",{"_index":3209,"text":{"java/numbers/":{}},"title":{}}],["$12,345.67",{"_index":3210,"text":{"java/numbers/":{}},"title":{}}],["$z=true",{"_index":3408,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["%",{"_index":66,"text":{"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/maths/":{},"algo/maths/#lucky-number":{},"algo/maths/#method-5-optimized-method-4":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["&",{"_index":81,"text":{"algo/bits/":{},"algo/bits/#iterative":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#recursive":{},"algo/dac/intro/":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"algo/dac/intro/":{}}}],["&&",{"_index":93,"text":{"algo/bits/":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["&arr[i]);",{"_index":1289,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["&arr[j+1]);",{"_index":1306,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["&gt;&gt;",{"_index":151,"text":{},"title":{"algo/bits/#signed-right-shift":{}}}],["&gt;&gt;&gt;",{"_index":152,"text":{},"title":{"algo/bits/#unsigned-right-shift":{}}}],["&harr[parent(i)]);",{"_index":1798,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["&harr[smallest]);",{"_index":1815,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["'",{"_index":2383,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{}},"title":{}}],["')",{"_index":2386,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["');",{"_index":2384,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["',",{"_index":3486,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["','",{"_index":2389,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["'.'",{"_index":2388,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["'/'",{"_index":3348,"text":{"php/atttributes/":{}},"title":{}}],["';",{"_index":2395,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{}},"title":{}}],["'?')",{"_index":2390,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["'parent::who'));",{"_index":3483,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["(",{"_index":351,"text":{"algo/maths/":{},"algo/search/interpolation/":{},"algo/search/interpolation/#reursive":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"php/basics/":{},"php/basics/#string":{}},"title":{"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}}}],["(!cond(it.next()))",{"_index":2915,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(!file_exists($thi",{"_index":3340,"text":{"php/atttributes/":{}},"title":{}}],["(!is_dir($thi",{"_index":3345,"text":{"php/atttributes/":{}},"title":{}}],["(!isbst(nod",{"_index":2446,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{}},"title":{}}],["(!isbst(root",{"_index":2464,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{}},"title":{}}],["(!isempty(*s))",{"_index":2271,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["(!isempty(s1))",{"_index":2489,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["(!isempty(s2))",{"_index":2486,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["(!q.empty())",{"_index":2543,"text":{"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{}},"title":{}}],["(!q1.empty())",{"_index":2297,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["(!s.empty()",{"_index":2201,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["(!s.empty())",{"_index":1923,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{}},"title":{}}],["(!s1.empty())",{"_index":2085,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["(!s2.empty())",{"_index":2089,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["(!st.empty()",{"_index":2284,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["(!visited[*i])",{"_index":1633,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["(((double)(hi",{"_index":1211,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{}},"title":{}}],["(((float)sum)",{"_index":426,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{}},"title":{}}],["((..(anx+an",{"_index":1047,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["((str[j]",{"_index":2387,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["()",{"_index":1480,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["(*fptr)(node",{"_index":1903,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["(*fptr)(void",{"_index":1901,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["(11.5)",{"_index":3451,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["(14.2)",{"_index":3464,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["(2*i",{"_index":1781,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["(a[min]",{"_index":1292,"text":{"algo/sort/intro/":{},"algo/sort/intro/#stable":{}},"title":{}}],["(arr[0]",{"_index":1169,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{}},"title":{}}],["(arr[hi]",{"_index":1204,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{}},"title":{}}],["(arr[i]",{"_index":1220,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],["(arr[j]",{"_index":1286,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["(arr[left]",{"_index":1226,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{}},"title":{}}],["(arr[lo]",{"_index":1210,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{}},"title":{}}],["(arr[m]",{"_index":1250,"text":{"algo/search/intro/":{},"algo/search/intro/#iterative":{}},"title":{}}],["(arr[mid1]",{"_index":1192,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["(arr[mid2]",{"_index":1193,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["(arr[mid]",{"_index":1249,"text":{"algo/search/intro/":{},"algo/search/intro/#recursive":{}},"title":{}}],["(arr[min(step,",{"_index":1263,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{}}],["(arr[pos]",{"_index":1214,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{}},"title":{}}],["(arr[prev]",{"_index":1264,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{}}],["(arr[right]",{"_index":1229,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{}},"title":{}}],["(arrayofints[i][j]",{"_index":2859,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["(b/2)",{"_index":289,"text":{"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{}},"title":{}}],["(b==null)",{"_index":1393,"text":{"algo/sort/merge/":{},"algo/sort/merge/#local-reference":{}},"title":{}}],["(count($attributes)",{"_index":3355,"text":{"php/atttributes/":{}},"title":{}}],["(e.g.",{"_index":1939,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{}},"title":{}}],["(f(n)).",{"_index":886,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#reflexive-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{}},"title":{}}],["(g(n))",{"_index":880,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#general-properties":{},"algo/analysis/intro/#transitive-properties":{},"algo/analysis/intro/#why-drop":{}},"title":{}}],["(h(n))",{"_index":890,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#transitive-properties":{}},"title":{}}],["(height/width)",{"_index":2691,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["(i.e.,",{"_index":2685,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["(i=0;",{"_index":1899,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["(i=1;",{"_index":702,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["(i=h;",{"_index":2592,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{}},"title":{}}],["(int)$var2;",{"_index":3412,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["(is_int($an_int))",{"_index":3400,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["(is_string($a_bool))",{"_index":3401,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["(isempty(*root))",{"_index":2187,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["(isempty(*s)",{"_index":2265,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["(isempty(queue))",{"_index":2060,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["(isempty(root))",{"_index":2189,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["(isempty(s1))",{"_index":2485,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["(isempty(s2))",{"_index":2488,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["(isempty(sn))",{"_index":2230,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["(isfull(queue))",{"_index":2056,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["(j=1;",{"_index":704,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["(k+1))",{"_index":751,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["(l+r)/2",{"_index":1232,"text":{"algo/search/intro/":{}},"title":{"algo/search/intro/#problem-m-lr2-might-overflow":{}}}],["(l.size()",{"_index":2950,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(list<string>",{"_index":2948,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(l\u2019hospital)",{"_index":933,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{}}],["(mountainbike)obj;",{"_index":3033,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["(n)c",{"_index":2672,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["(n+1)!n!",{"_index":2572,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["(n+1)!n!]",{"_index":2574,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{}},"title":{}}],["(n+1).",{"_index":840,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{}},"title":{}}],["(n+1)th",{"_index":361,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["(n2)/(1",{"_index":1137,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["(nk+1)/(k+1)",{"_index":748,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["(node==null)",{"_index":2455,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{}},"title":{}}],["(o(1))",{"_index":1904,"text":{"ds/linked-list/insertion/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{}}}],["(o(h)",{"_index":2644,"text":{"ds/tree/k-smallest/":{}},"title":{"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}}}],["(o(log",{"_index":401,"text":{"algo/maths/":{}},"title":{"algo/maths/#method-6-olog-n-time":{}}}],["(o(n)",{"_index":2640,"text":{"ds/tree/k-smallest/":{}},"title":{"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{}}}],["(o(n))",{"_index":1905,"text":{"ds/linked-list/insertion/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{"ds/linked-list/insertion/#last-on":{}}}],["(o(n^2))",{"_index":2197,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["(price[i]",{"_index":2278,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{}},"title":{}}],["(q.empty()",{"_index":2588,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["(q1.empty())",{"_index":2303,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["(q1.size()",{"_index":2304,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{}},"title":{}}],["(rectangleplus)other;",{"_index":3115,"text":{"java/interfaces/":{}},"title":{}}],["(result=9),",{"_index":2845,"text":{"java/basics/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["(root.left==nul",{"_index":2499,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion":{}},"title":{}}],["(s.empty()",{"_index":2598,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{}},"title":{}}],["(s.empty())",{"_index":2103,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["(s.hasnext())",{"_index":2933,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(s1.empty()",{"_index":2096,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["(s1.empty())",{"_index":2092,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["(s2.empty())",{"_index":2098,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["(sat)boolean",{"_index":684,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["(searchme.regionmatches(i,",{"_index":3305,"text":{"java/strings/":{}},"title":{}}],["(sizeof(int)",{"_index":99,"text":{"algo/bits/":{},"algo/bits/#method-2-use-bit-operations":{}},"title":{}}],["(st.empty())",{"_index":2287,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["(str[j++]",{"_index":2394,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["(str[j]",{"_index":2385,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["(t(n)",{"_index":2674,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["(temp.find(str2)",{"_index":2356,"text":{"ds/string/rotation/":{},"ds/string/rotation/#rotation":{}},"title":{}}],["(that'",{"_index":3328,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["(this.getarea()",{"_index":3116,"text":{"java/interfaces/":{}},"title":{}}],["(top[sn]",{"_index":2213,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["(u(n)=l(n)).",{"_index":956,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{}},"title":{}}],["(u,v)",{"_index":1664,"text":{"ds/graph/intro/":{},"ds/graph/intro/#properties":{}},"title":{}}],["(unsigned)time(",{"_index":1476,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["(visited[i]",{"_index":1451,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{}},"title":{}}],["(\u2018<\u2018",{"_index":2114,"text":{"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],[")",{"_index":185,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/search/interpolation/":{},"algo/search/interpolation/#reursive":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}}}],["))",{"_index":900,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],[")),",{"_index":360,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],[").",{"_index":2607,"text":{"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],[");",{"_index":1477,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],["*",{"_index":100,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/bits/":{},"algo/bits/#method-2-use-bit-operations":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#method-5-optimized-method-4":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/tree/bst/":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"java/collections/":{},"java/collections/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["*)",{"_index":1863,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["*))",{"_index":1902,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["*)malloc(sizeof(int)*arrsize);",{"_index":1944,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["*)malloc(sizeof(struct",{"_index":1854,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["*,",{"_index":1590,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["*/",{"_index":268,"text":{"algo/maths/":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#square-root":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#comments":{}},"title":{}}],["*>",{"_index":2587,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["*>(",{"_index":1979,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{}}],["*addafter(struct",{"_index":1856,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["*addbegin(struct",{"_index":1852,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["*addend(struct",{"_index":1855,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["*addtoempty(struct",{"_index":1850,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["*btreetoclist(nod",{"_index":1838,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{}},"title":{}}],["*concatenate(nod",{"_index":1833,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}},"title":{}}],["*lca(node*",{"_index":2655,"text":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["*lca(struct",{"_index":2657,"text":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{}},"title":{}}],["*max_element(arr,",{"_index":1524,"text":{"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{}},"title":{}}],["*min_element(arr,",{"_index":1523,"text":{"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{}},"title":{}}],["*pop(snod",{"_index":2470,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{}},"title":{}}],["*sumbase14(char",{"_index":213,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["+",{"_index":70,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#recursive":{},"algo/analysis/recursive/#substitution-method":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#method-2-use-bit-operations":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#method-6-olog-n-time":{},"algo/maths/#method-7-using-formula":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#stable":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/count/":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#using-call-stack":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#javautilarrays":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{},"php/basics/":{},"php/basics/#string":{}},"title":{}}],["++",{"_index":2837,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["+=",{"_index":63,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#method-1-using-nested-loops":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],[",",{"_index":1529,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{},"java/interfaces/":{}},"title":{}}],[".",{"_index":628,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#symmetric-properties":{},"algo/analysis/intro/#transitive-properties":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"php/atttributes/":{}},"title":{}}],["..",{"_index":1234,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["...",{"_index":728,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/tree/traversal/":{},"ds/tree/traversal/#how-to-pick-one":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"php/basics/":{},"php/basics/#iterable":{}},"title":{}}],["....",{"_index":1132,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["......",{"_index":3101,"text":{"java/interfaces/":{}},"title":{}}],[".collect(averager::new,",{"_index":2974,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],[".collect(collectors.joining(\",",{"_index":2899,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".collect(collectors.summingint(employee::getsalary)));",{"_index":2902,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".filter(",{"_index":2891,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".filter(p",{"_index":2958,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],[".foreach(",{"_index":2894,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".map(object::tostring)",{"_index":2898,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".map(person::getage)",{"_index":2967,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],[".maptoint(person::getage)",{"_index":2961,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{}},"title":{}}],[".thencomparing(comparator.comparing(card::getsuit)));",{"_index":3128,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["/",{"_index":72,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#method-3-use-division-operator":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#method-7-using-formula":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"ds/tree/binary-tree/#degenerate":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#full":{},"ds/tree/binary-tree/#perfect":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{},"java/basics/":{},"java/basics/#operators":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["/*",{"_index":271,"text":{"algo/maths/":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#square-root":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"java/helloworld/":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#comments":{}},"title":{}}],["//",{"_index":105,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#method-3-use-division-operator":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/intro/#traversal":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#java-inbuilt":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/strings/":{},"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#float":{},"php/basics/#integers":{},"php/basics/#iterable":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{}}],["//======================================================================",{"_index":3373,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["0",{"_index":19,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#iterative":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/bits/#recursive":{},"algo/bits/#signed-right-shift":{},"algo/bits/#ternery":{},"algo/bits/#unsigned-right-shift":{},"algo/bits/#xor":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#lucky-number":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#traversal":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#without-stack":{},"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-1":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#space-complexity":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{}}}],["0(logn)",{"_index":1770,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["0.000001;",{"_index":270,"text":{"algo/maths/":{},"algo/maths/#square-root":{}},"title":{}}],["0.1",{"_index":3437,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["0.2",{"_index":831,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{}},"title":{}}],["0.7,",{"_index":3438,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["00...0001",{"_index":30,"text":{"algo/bits/":{},"algo/bits/#unsigned-right-shift":{}},"title":{}}],["00...0011",{"_index":28,"text":{"algo/bits/":{},"algo/bits/#unsigned-right-shift":{}},"title":{}}],["00...0111",{"_index":26,"text":{"algo/bits/":{},"algo/bits/#unsigned-right-shift":{}},"title":{}}],["000000.000",{"_index":3206,"text":{"java/numbers/":{}},"title":{}}],["000123.780",{"_index":3207,"text":{"java/numbers/":{}},"title":{}}],["0123",{"_index":3414,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["0b11111111",{"_index":3418,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["0x1a",{"_index":3416,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["0x500",{"_index":1962,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["0x508",{"_index":1963,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["0x510",{"_index":1964,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["0x518",{"_index":1965,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["0x520",{"_index":1969,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["1",{"_index":15,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#iterative":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#recursive":{},"algo/bits/#signed-right-shift":{},"algo/bits/#unsigned-right-shift":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#lucky-number":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#method-6-olog-n-time":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/min-max/":{},"ds/array/min-max/#recursive":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-matrix":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/count/":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#simple":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-1":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#traversal":{},"ds/tree/traversal/#using-call-stack":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/packages/":{},"java/packages/#static-import":{},"java/strings/":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#string":{}},"title":{"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-1-using-nested-loops":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/handshaking-lemma/#case-1":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{}}}],["1)*(k+1)",{"_index":2617,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["1)*2",{"_index":2624,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{}},"title":{}}],["1)*3",{"_index":2622,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{}},"title":{}}],["1)*f(k",{"_index":409,"text":{"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{}},"title":{}}],["1)*i",{"_index":2614,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{}},"title":{}}],["1)/2",{"_index":406,"text":{"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{}},"title":{}}],["1)/2;",{"_index":1779,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["1)/2]",{"_index":412,"text":{"algo/maths/":{},"algo/maths/#method-7-using-formula":{},"ds/heap/intro/":{},"ds/heap/intro/#arrays":{}},"title":{}}],["1)c",{"_index":2670,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["1)t(0)",{"_index":2669,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["1)x+..+a2)x+a1)x+a0",{"_index":1048,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["1*1",{"_index":2558,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["1*2",{"_index":2557,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["1*5",{"_index":2565,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["1+an",{"_index":1029,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["1.0;",{"_index":3466,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["1.11e",{"_index":3430,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["1.234;",{"_index":3422,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["1.2e3;",{"_index":3423,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["1.3e3\";",{"_index":3452,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["10",{"_index":250,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#degenerate":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{}}],["100",{"_index":2005,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"ds/tree/binary-tree/#perfect":{}},"title":{}}],["1000",{"_index":2166,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["1000*log(n)",{"_index":832,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{}},"title":{}}],["1001a",{"_index":181,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["11",{"_index":160,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#string":{}},"title":{}}],["11a",{"_index":172,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["11b",{"_index":177,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["11c",{"_index":183,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["12",{"_index":733,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["123,456.789",{"_index":3202,"text":{"java/numbers/":{}},"title":{}}],["123.78",{"_index":3205,"text":{"java/numbers/":{}},"title":{}}],["1234",{"_index":3413,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["12345",{"_index":2360,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#using-stringstream-class":{}},"title":{}}],["12345.67",{"_index":3208,"text":{"java/numbers/":{}},"title":{}}],["123456.789",{"_index":3200,"text":{"java/numbers/":{}},"title":{}}],["123456.79",{"_index":3204,"text":{"java/numbers/":{}},"title":{}}],["1234_5678_9012_3456l",{"_index":2805,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["1299",{"_index":3453,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["13",{"_index":740,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["14",{"_index":243,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["15",{"_index":1436,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"ds/tree/binary-tree/#full":{},"ds/tree/binary-tree/#perfect":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["16",{"_index":1535,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["17",{"_index":1536,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"java/java9%26beyond/":{}},"title":{}}],["17.html",{"_index":3171,"text":{"java/java9%26beyond/":{}},"title":{}}],["18",{"_index":1537,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"ds/tree/binary-tree/#full":{},"ds/tree/binary-tree/#perfect":{}},"title":{}}],["19",{"_index":1538,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["1>>>31",{"_index":29,"text":{"algo/bits/":{},"algo/bits/#unsigned-right-shift":{}},"title":{}}],["1_234.567;",{"_index":3425,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["1_234_567",{"_index":3420,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["1dio",{"_index":3165,"text":{"java/java9%26beyond/":{}},"title":{}}],["1k",{"_index":723,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["1st",{"_index":1553,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["1xn",{"_index":1028,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["2",{"_index":21,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#signed-right-shift":{},"algo/maths/":{},"algo/maths/#lucky-number":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiple-of-3":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/intro/#traversal":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/min-special/":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#binary-tree":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst-check/":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/k-smallest/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#traversal":{},"ds/tree/traversal/#using-call-stack":{},"java/basics/":{},"java/basics/#arrays":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#static-import":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{"algo/bits/#method-2-use-bit-operations":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-3-space-optimised-2":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}}}],["2(e)",{"_index":2612,"text":{"ds/tree/handshaking-lemma/":{}},"title":{}}],["2)*(b/2)",{"_index":291,"text":{"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{}},"title":{}}],["2*1",{"_index":2559,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["2*i",{"_index":2621,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["2*l",{"_index":2619,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["2*t",{"_index":2629,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-3":{}},"title":{}}],["2+...+a1x+a0",{"_index":1046,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["2+\u2026+a1x+a0",{"_index":1031,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["2.3e5);",{"_index":3406,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["2.718282;",{"_index":3107,"text":{"java/interfaces/":{}},"title":{}}],["20",{"_index":1435,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#degenerate":{},"ds/tree/binary-tree/#full":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["21",{"_index":1539,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["22",{"_index":734,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["23",{"_index":741,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["230",{"_index":1238,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["24",{"_index":1592,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["25",{"_index":1841,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["25(n^2)/256)",{"_index":1131,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["255",{"_index":3419,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["26",{"_index":3417,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["29",{"_index":25,"text":{"algo/bits/":{},"algo/bits/#unsigned-right-shift":{}},"title":{}}],["2^(h",{"_index":2412,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{}},"title":{}}],["2^(h+1)",{"_index":2413,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{}},"title":{}}],["2^h",{"_index":2410,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["2^l",{"_index":2409,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{}},"title":{}}],["2^x",{"_index":1357,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["2c",{"_index":2664,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["2clog2n",{"_index":1180,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["2cn/2log(n/2)",{"_index":1109,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{}},"title":{}}],["2d",{"_index":1674,"text":{"ds/graph/intro/":{},"ds/graph/intro/#adjacency-matrix":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["2i",{"_index":2620,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["2k",{"_index":724,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["2log2n",{"_index":1178,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["2log3n",{"_index":1183,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["2n",{"_index":1314,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["2n2",{"_index":963,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["2nd",{"_index":1970,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["2s",{"_index":2626,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{}},"title":{}}],["2t(0)",{"_index":2663,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["2t(n/2)",{"_index":1081,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"algo/analysis/recursive/#substitution-method":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["2x",{"_index":3162,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["2xn",{"_index":1030,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["3",{"_index":103,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/bits/":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"ds/tree/bst-check/":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#traversal":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#comments":{}},"title":{"algo/bits/#method-3-use-division-operator":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#multiple-of-3":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/handshaking-lemma/#case-3":{}}}],["3*t",{"_index":2628,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-3":{}},"title":{}}],["30",{"_index":27,"text":{"algo/bits/":{},"algo/bits/#unsigned-right-shift":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"ds/tree/binary-tree/#degenerate":{},"ds/tree/binary-tree/#full":{},"ds/tree/binary-tree/#perfect":{}},"title":{}}],["31",{"_index":49,"text":{"algo/bits/":{},"algo/bits/#32-bit-ints":{}},"title":{}}],["32",{"_index":48,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/bits/":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{"algo/bits/#32-bit-ints":{}}}],["33",{"_index":742,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["36",{"_index":1842,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{}},"title":{}}],["3c",{"_index":2666,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["3k",{"_index":725,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["3t(0)",{"_index":2665,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["4",{"_index":178,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiple-of-3":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#properties":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#traversal":{},"java/intro/":{},"java/intro/#why":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}}}],["4(use",{"_index":2462,"text":{"ds/tree/bst-check/":{}},"title":{"ds/tree/bst-check/#method-4using-in-order-traversal":{}}}],["40",{"_index":1487,"text":{"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"ds/tree/binary-tree/#degenerate":{},"ds/tree/binary-tree/#full":{},"ds/tree/binary-tree/#perfect":{}},"title":{}}],["4>>1",{"_index":20,"text":{"algo/bits/":{},"algo/bits/#signed-right-shift":{}},"title":{}}],["4a",{"_index":1270,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["4b",{"_index":1271,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["4c",{"_index":2668,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["4clog3n",{"_index":1181,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["4log3n",{"_index":1179,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["4n",{"_index":941,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["4t(0)",{"_index":2667,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["5",{"_index":390,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/maths/":{},"algo/maths/#method-7-using-formula":{},"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"algo/maths/#method-5-optimized-method-4":{}}}],["5(n^2)/16",{"_index":1130,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["5*1",{"_index":2566,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["5/16)",{"_index":1138,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["5/16.",{"_index":1135,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["50",{"_index":1505,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"ds/tree/binary-tree/#full":{},"ds/tree/binary-tree/#perfect":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["6",{"_index":400,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/maths/":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#naming":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"algo/maths/#method-6-olog-n-time":{}}}],["60",{"_index":1585,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["7",{"_index":194,"text":{"algo/maths/":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/basics/":{},"java/basics/#arrays":{},"php/basics/":{},"php/basics/#float":{}},"title":{"algo/maths/#method-7-using-formula":{},"algo/maths/#multiply-by-7":{}}}],["7.0",{"_index":1246,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["7.4.0",{"_index":3426,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["7.4.0)",{"_index":3421,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["7.9999999999999991118....",{"_index":3444,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["7/2n",{"_index":932,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{}}],["75000",{"_index":812,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["754",{"_index":3428,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["7e",{"_index":3424,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["7n",{"_index":195,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/maths/":{},"algo/maths/#multiply-by-7":{}},"title":{}}],["8",{"_index":97,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/bits/":{},"algo/bits/#method-2-use-bit-operations":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["8)/(n2)",{"_index":931,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{}}],["8.0.0,",{"_index":3455,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["83",{"_index":3415,"text":{"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["8n",{"_index":196,"text":{"algo/maths/":{},"algo/maths/#multiply-by-7":{}},"title":{}}],["9",{"_index":200,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#multiply-by-7":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"java/basics/":{},"java/basics/#arrays":{},"java/java9%26beyond/":{}},"title":{}}],["90",{"_index":2849,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["999b",{"_index":184,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["99a",{"_index":176,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],[":",{"_index":69,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#method-3-use-division-operator":{},"algo/maths/":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#selection-sort":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/min-max/":{},"ds/array/min-max/#recursive":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#operations":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{},"ds/string/intro/#input":{},"ds/string/intro/#manipulating":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/handshaking-lemma/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/intro/":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["::insert(bst*",{"_index":2512,"text":{"ds/tree/bst/":{},"ds/tree/bst/#insert":{}},"title":{}}],["::insertrear(int",{"_index":2017,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],[":=",{"_index":1033,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],[";",{"_index":94,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#general-properties":{},"algo/bits/":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/intro/":{},"algo/sort/intro/#stable":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"java/basics/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["<",{"_index":44,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/bits/":{},"algo/bits/#method-3-use-division-operator":{},"algo/bits/#ternery":{},"algo/bits/#xor":{},"algo/maths/":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#search":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/interfaces/":{},"java/strings/":{}},"title":{}}],["<<",{"_index":82,"text":{"algo/bits/":{},"algo/bits/#iterative":{},"algo/bits/#recursive":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["<=",{"_index":62,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{},"java/basics/":{},"java/basics/#operators":{},"java/strings/":{}},"title":{}}],["<=>",{"_index":1597,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["<?=",{"_index":3362,"text":{"php/basics/":{}},"title":{}}],["<bits/stdc++.h>",{"_index":1409,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["<path_one>\\sources\\com\\example\\graphics\\rectangle.java",{"_index":3273,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<path_two>\\class",{"_index":3277,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<path_two>\\classes\\com\\example\\graphics.",{"_index":3279,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<path_two>\\classes\\com\\example\\graphics\\rectangle.class",{"_index":3274,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<stdbool.h>",{"_index":1247,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["<stdio.h>",{"_index":1593,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{}},"title":{}}],["<title>example</title>",{"_index":3502,"text":{"php/intro/":{}},"title":{}}],["=",{"_index":61,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#transitive-properties":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#recursive":{},"algo/analysis/recursive/#substitution-method":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#iterative":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#lucky-number":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#method-6-olog-n-time":{},"algo/maths/#method-7-using-formula":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-by-7":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-matrix":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-1":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{},"java/basics/#naming":{},"java/basics/#operators":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#float":{},"php/basics/#integers":{},"php/basics/#object":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{"algo/search/intro/#problem-m-lr2-might-overflow":{}}}],["=0;i<s.size();i++){",{"_index":2310,"text":{"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{}},"title":{}}],["==",{"_index":67,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#recursive":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#lucky-number":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/array/min-max/":{},"ds/array/min-max/#recursive":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/count/":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#html-escaping":{}},"title":{}}],["=====",{"_index":718,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["=>",{"_index":994,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],[">",{"_index":14,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/intro/#worst-case":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/bits/":{},"algo/bits/#signed-right-shift":{},"algo/bits/#unsigned-right-shift":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#lucky-number":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#interpolation-vs-binary":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/search/intro/#searching":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-list":{},"ds/graph/intro/#applications":{},"ds/graph/intro/#cons":{},"ds/graph/intro/#cons_1":{},"ds/graph/intro/#properties":{},"ds/graph/intro/#pros":{},"ds/graph/intro/#pros_1":{},"ds/graph/intro/#representation":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#arrays":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/intro/#why":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/dequeue/#implementation":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#heap":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"ds/tree/binary-tree/#binary-tree":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#facts":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#how-to-pick-one":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#time-complexity":{},"ds/tree/traversal/#traversal":{},"ds/tree/traversal/#using-call-stack":{},"java/basics/":{},"java/basics/#javautilarrays":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#interfaces":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{},"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],[">;",{"_index":2846,"text":{"java/basics/":{}},"title":{}}],[">=",{"_index":47,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/bits/":{},"algo/bits/#ternery":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#method-2-using-recursion":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#problems":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#problems":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#without-stack":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#simplified-method-3":{},"java/basics/":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[">>",{"_index":8,"text":{"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#method-2-use-bit-operations":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{}},"title":{}}],[">>>",{"_index":22,"text":{"algo/bits/":{},"algo/bits/#unsigned-right-shift":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],[">array[queu",{"_index":2057,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],[">data+1,",{"_index":2457,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{}},"title":{}}],[">getattributes(setup::class);",{"_index":3354,"text":{"php/atttributes/":{}},"title":{}}],[">left!=nul",{"_index":2448,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{}},"title":{}}],[">right!=nul",{"_index":2450,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{}},"title":{}}],[">value==val){",{"_index":1929,"text":{"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["?",{"_index":68,"text":{"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#method-3-use-division-operator":{},"ds/array/min-max/":{},"ds/array/min-max/#recursive":{},"ds/linked-list/intro/":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{"ds/linked-list/intro/#why":{}}}],["?:",{"_index":2840,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["?>",{"_index":3369,"text":{"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#float":{},"php/basics/#html-escaping":{},"php/basics/#integers":{},"php/basics/#iterable":{},"php/basics/#object":{},"php/basics/#string":{},"php/basics/#types":{},"php/intro/":{}},"title":{}}],["@alert(role=\"administrator\")",{"_index":2782,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@alert(role=\"manager\")",{"_index":2781,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@author(nam",{"_index":2720,"text":{"java/annotations/":{}},"title":{}}],["@repeatable(schedules.class)",{"_index":2789,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@schedule(dayofmonth=\"last\")",{"_index":2777,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@schedule(dayofweek=\"fri\",",{"_index":2778,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@suppresswarnings(valu",{"_index":2717,"text":{"java/annotations/":{}},"title":{}}],["@suppresswarnings({\"unchecked\",",{"_index":2757,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["[",{"_index":1202,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],["[(1),1]",{"_index":1966,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["[(1),2]",{"_index":1971,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["[(2),2]",{"_index":1967,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["[(2),3]",{"_index":1973,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["[(3),3]",{"_index":1968,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["[(4),4]",{"_index":1974,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["[(8),0]",{"_index":1975,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{}},"title":{}}],["[2*f(k",{"_index":404,"text":{"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{}},"title":{}}],["[\u03b8(log",{"_index":1696,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["[\u03b8(m",{"_index":1698,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["\\",{"_index":1118,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete":{},"ds/tree/binary-tree/#degenerate":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#full":{},"ds/tree/binary-tree/#perfect":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{}},"title":{}}],["]",{"_index":137,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{}},"title":{}}],["];",{"_index":139,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],["^",{"_index":43,"text":{"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#iterative":{},"algo/bits/#recursive":{},"algo/bits/#xor":{},"algo/maths/":{},"algo/maths/#method-7-using-formula":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["_",{"_index":2812,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["__advantage__",{"_index":1945,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["__invok",{"_index":3484,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["__invoke($name)",{"_index":3485,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["__this__",{"_index":1961,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["a(say),",{"_index":945,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{}},"title":{}}],["a*f(n)",{"_index":882,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#general-properties":{}},"title":{}}],["a+b;",{"_index":1013,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["a.erase():",{"_index":2119,"text":{"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{}},"title":{}}],["a.erase(a.find()):",{"_index":2120,"text":{"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{}},"title":{}}],["a1",{"_index":649,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["a2",{"_index":654,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["a2(f(x1))",{"_index":660,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["a[++top]",{"_index":2170,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["a[0]",{"_index":141,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["a[0];",{"_index":143,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["a[1]",{"_index":136,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["a[2])",{"_index":135,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["a[a[0]];",{"_index":142,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["a[i",{"_index":2292,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["a[i]",{"_index":1297,"text":{"algo/sort/intro/":{},"algo/sort/intro/#stable":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["a[i])*x;",{"_index":1055,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["a[i]*pow(x,",{"_index":1040,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["a[j])",{"_index":1293,"text":{"algo/sort/intro/":{},"algo/sort/intro/#stable":{}},"title":{}}],["a[max];",{"_index":2167,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["a[min",{"_index":1296,"text":{"algo/sort/intro/":{},"algo/sort/intro/#stable":{}},"title":{}}],["a[min]",{"_index":1295,"text":{"algo/sort/intro/":{},"algo/sort/intro/#stable":{}},"title":{}}],["a[min];",{"_index":1294,"text":{"algo/sort/intro/":{},"algo/sort/intro/#stable":{}},"title":{}}],["a[top",{"_index":2173,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["a[top];",{"_index":2175,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["a^b",{"_index":319,"text":{"algo/maths/":{},"algo/maths/#method-2-using-recursion":{}},"title":{}}],["a_bool",{"_index":3393,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["a_str",{"_index":3394,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["a_str2",{"_index":3396,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["ab",{"_index":171,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["abc",{"_index":175,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["abca",{"_index":2306,"text":{"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{}},"title":{}}],["abcd",{"_index":180,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{}},"title":{}}],["abcdddssod",{"_index":2315,"text":{"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["abhinav'",{"_index":1,"text":{"":{}},"title":{"#abhinavs-notes":{}}}],["abov",{"_index":156,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#multiple-of-3":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["abstract",{"_index":2871,"text":{"java/collections/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{}}}],["access",{"_index":1402,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/array/intro/#introduction":{},"ds/array/vectors/":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/string/intro/":{},"ds/string/intro/#string":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/intro/":{},"java/intro/#platform":{},"java/packages/":{},"java/packages/#static-import":{},"java/packages/#why":{},"java/strings/":{},"java/strings/#why":{}},"title":{"ds/array/intro/#accessing":{},"ds/array/vectors/#element-access":{},"java/basics/#access-modifiers":{}}}],["access/search",{"_index":2632,"text":{"ds/tree/intro/":{},"ds/tree/intro/#why":{}},"title":{}}],["accord",{"_index":950,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["accordingli",{"_index":969,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["account",{"_index":503,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["accumul",{"_index":2969,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["accuraci",{"_index":273,"text":{"algo/maths/":{},"algo/maths/#square-root":{}},"title":{}}],["acmebicycl",{"_index":3241,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["acronym",{"_index":3494,"text":{"php/intro/":{}},"title":{}}],["actionhandl",{"_index":3334,"text":{"php/atttributes/":{}},"title":{}}],["actual",{"_index":927,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{}},"title":{}}],["acycl",{"_index":2616,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["ad",{"_index":1371,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/graph/intro/":{},"ds/graph/intro/#pros_1":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/set-map/set/":{},"ds/set-map/set/#set":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["add",{"_index":73,"text":{"algo/bits/":{},"algo/bits/#recursive":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/queue/intro/":{},"ds/queue/intro/#operations":{},"ds/set-map/map/":{},"ds/set-map/map/#maps":{},"ds/set-map/map/#multimap":{},"java/packages/":{},"java/packages/#naming":{},"php/basics/":{},"php/basics/#float":{}},"title":{"algo/bits/#add-two-numbers-without-using-arithmetic-operators":{}}}],["add(int",{"_index":78,"text":{"algo/bits/":{},"algo/bits/#iterative":{},"algo/bits/#recursive":{}},"title":{}}],["addal",{"_index":2905,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["addedge(adj,",{"_index":1693,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["addedge(vector<int>",{"_index":1684,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["addit",{"_index":210,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/intro/":{},"java/intro/#programming-language":{},"java/strings/":{},"java/strings/#why":{}},"title":{"algo/maths/#base-n-addition":{}}}],["addition",{"_index":3434,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["addr",{"_index":1879,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{}},"title":{}}],["addr(next)",{"_index":1876,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{}},"title":{}}],["addr(prev)",{"_index":1877,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{}},"title":{}}],["address",{"_index":1445,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["addtoempty(last,",{"_index":1853,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["adher",{"_index":3087,"text":{"java/interfaces/":{}},"title":{}}],["adit",{"_index":2117,"text":{"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{}},"title":{}}],["adj",{"_index":1685,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["adj[i][j]",{"_index":1675,"text":{"ds/graph/intro/":{},"ds/graph/intro/#adjacency-matrix":{}},"title":{}}],["adj[s].begin();",{"_index":1631,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["adj[s].end();",{"_index":1632,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["adj[u].push_back(v);",{"_index":1686,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["adj[v])",{"_index":1689,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["adj[v].begin();",{"_index":1644,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["adj[v].end();",{"_index":1645,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["adj[v].push_back(u);",{"_index":1687,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["adj[v];",{"_index":1692,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["adjac",{"_index":757,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-list":{},"ds/graph/intro/#cons_1":{},"ds/graph/intro/#representation":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{"ds/graph/intro/#adjacency-list":{},"ds/graph/intro/#adjacency-matrix":{}}}],["adn",{"_index":3260,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["advanc",{"_index":1387,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/numbers/":{}},"title":{"java/numbers/#advanced-math":{}}}],["advantag",{"_index":1489,"text":{"ds/array/intro/":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/dll/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{"ds/array/intro/#advantages":{},"ds/linked-list/dll/#advantages":{}}}],["advoc",{"_index":1467,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["aedg",{"_index":1666,"text":{"ds/graph/intro/":{},"ds/graph/intro/#properties":{}},"title":{}}],["ag",{"_index":2979,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["again",{"_index":2606,"text":{"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/strings/":{}},"title":{}}],["against",{"_index":978,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["aggreg",{"_index":502,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{"java/collections/#aggregate-operations":{},"java/collections/#aggregate-operations-vs-iterators":{}}}],["ai",{"_index":1350,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["ain't",{"_index":3324,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["aj",{"_index":1351,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["aka",{"_index":1732,"text":{"ds/heap/intro/":{},"ds/heap/intro/#traversal":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["algebra",{"_index":1007,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["algo",{"_index":1044,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["algo_sol(a,",{"_index":1018,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["algoriithm",{"_index":616,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{}},"title":{}}],["algorithm",{"_index":429,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#reduction":{},"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/analysis/space/":{},"algo/analysis/space/#auxiliary-space":{},"algo/analysis/space/#space-complexity":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#problems":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/collections/":{},"java/generics/":{},"java/generics/#why":{}},"title":{"algo/analysis/intro/":{},"algo/analysis/intro/#algorithm-analysis":{},"java/collections/#algorithms":{}}}],["algorithm/cod",{"_index":1861,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["algorithm\u2019",{"_index":1059,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["alic",{"_index":2750,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["alloc",{"_index":461,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{}},"title":{}}],["alloc(from",{"_index":1941,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["allow",{"_index":1909,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/string/intro/":{},"ds/string/intro/#string":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{}}],["aloc",{"_index":1938,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{}},"title":{}}],["along",{"_index":672,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["alpha",{"_index":2935,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["alphabetize(str",{"_index":2953,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["alphabetize(word);",{"_index":2936,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["alreadi",{"_index":855,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["altern",{"_index":681,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{}},"title":{}}],["although",{"_index":1715,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["alwai",{"_index":555,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#facts":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["ambigu",{"_index":3035,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/packages/":{}},"title":{"java/packages/#name-ambiguities":{}}}],["amort",{"_index":427,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}}}],["amount",{"_index":563,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["amp",{"_index":1157,"text":{},"title":{"algo/dac/intro/#divide-conquer":{}}}],["an",{"_index":1023,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["an_int",{"_index":3397,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["anagram",{"_index":2920,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["analysi",{"_index":428,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#algorithm-analysis":{},"algo/analysis/intro/#best-case-analysis-bogus":{}}}],["analyz",{"_index":434,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["anarrai",{"_index":2817,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["ancestor",{"_index":2650,"text":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}}}],["and/or",{"_index":1930,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["angri",{"_index":3121,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["anim",{"_index":3076,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["animal.testclassmethod();",{"_index":3083,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["annot",{"_index":2696,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#design-considerations":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{}},"title":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/annotations/#retrieving-annotations":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}}}],["annotatedelement.getannotation(class<t>)",{"_index":2795,"text":{"java/annotations/":{},"java/annotations/#retrieving-annotations":{}},"title":{}}],["annotatedelement.getannotationsbytype(class<t>)",{"_index":2796,"text":{"java/annotations/":{},"java/annotations/#retrieving-annotations":{}},"title":{}}],["anoth",{"_index":124,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["ans:=v+c;",{"_index":1022,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["ans[0]",{"_index":2291,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["ans[i",{"_index":2293,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["ans[i]",{"_index":2294,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["answer",{"_index":313,"text":{"algo/maths/":{},"algo/maths/#method-1-using-nested-loops":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["anticlockwis",{"_index":1997,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["anxn+an",{"_index":1027,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["anyth",{"_index":1739,"text":{"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["anywher",{"_index":1844,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["api",{"_index":2881,"text":{"java/collections/":{},"java/collections/#why":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["api's)",{"_index":1956,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["appar",{"_index":3267,"text":{"java/packages/":{}},"title":{"java/packages/#apparent-hierarchies-of-packages":{}}}],["appear",{"_index":677,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["append",{"_index":1369,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{}},"title":{}}],["append(node**",{"_index":1884,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#last-on":{}},"title":{}}],["appli",{"_index":627,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/annotations/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["applic",{"_index":762,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/graph/bfs/":{},"ds/graph/dfs/":{},"ds/graph/intro/":{},"ds/heap/intro/":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/intro/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/numbers/":{},"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{"algo/analysis/graph-coloring/#applications":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/#application":{},"ds/graph/intro/#applications":{},"ds/heap/intro/#application":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/#application":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/#applications-of-stack":{},"ds/tree/binary-tree/#applications":{},"ds/tree/intro/#applications":{}}}],["applybrakes(int",{"_index":3240,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["approach",{"_index":253,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["approxim",{"_index":265,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/maths/":{},"algo/maths/#square-root":{}},"title":{}}],["aprior",{"_index":2078,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{}},"title":{}}],["aproach",{"_index":816,"text":{"algo/analysis/graph-coloring/":{}},"title":{"algo/analysis/graph-coloring/#greedy-aproach":{}}}],["arbitrari",{"_index":3446,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["architectur",{"_index":2870,"text":{"java/collections/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["aren't",{"_index":1949,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["arg",{"_index":2922,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/numbers/":{},"java/strings/":{}},"title":{}}],["argument",{"_index":2332,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/numbers/":{}},"title":{}}],["ari",{"_index":2613,"text":{"ds/tree/handshaking-lemma/":{}},"title":{"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{}}}],["arithmet",{"_index":75,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/bits/":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"java/basics/":{},"java/basics/#operators":{},"php/basics/":{},"php/basics/#float":{}},"title":{"algo/bits/#add-two-numbers-without-using-arithmetic-operators":{}}}],["around",{"_index":3222,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["arr",{"_index":111,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/array/vs-pointers/#similarities":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["arr.length;",{"_index":1225,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{}},"title":{}}],["arr1[10];",{"_index":1485,"text":{"ds/array/intro/":{},"ds/array/intro/#declaration":{}},"title":{}}],["arr1[i]",{"_index":2204,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["arr1[n];",{"_index":2200,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["arr2[n];",{"_index":1486,"text":{"ds/array/intro/":{},"ds/array/intro/#declaration":{}},"title":{}}],["arr[(2",{"_index":1728,"text":{"ds/heap/intro/":{},"ds/heap/intro/#arrays":{}},"title":{}}],["arr[(i",{"_index":1726,"text":{"ds/heap/intro/":{},"ds/heap/intro/#arrays":{}},"title":{}}],["arr[(k+1)m]",{"_index":1255,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{}}],["arr[0]",{"_index":1493,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/min-max/":{},"ds/array/min-max/#recursive":{}},"title":{}}],["arr[0],",{"_index":1499,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[0].",{"_index":1724,"text":{"ds/heap/intro/":{},"ds/heap/intro/#arrays":{}},"title":{}}],["arr[0];",{"_index":1497,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[1<<30];",{"_index":1243,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["arr[1]",{"_index":149,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[1],",{"_index":1500,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[2]",{"_index":1494,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}},"title":{}}],["arr[2],",{"_index":1501,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[2];",{"_index":1503,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}},"title":{}}],["arr[3",{"_index":1495,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[3]",{"_index":1496,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[3]);",{"_index":1502,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}},"title":{}}],["arr[5];",{"_index":1492,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{}},"title":{}}],["arr[6]",{"_index":1488,"text":{"ds/array/intro/":{},"ds/array/intro/#declaration":{}},"title":{}}],["arr[6]={11,12,13,14,15,16};",{"_index":1509,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["arr[arr_size];",{"_index":303,"text":{"algo/maths/":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}},"title":{}}],["arr[end]",{"_index":1550,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{}},"title":{}}],["arr[end];",{"_index":1549,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{}},"title":{}}],["arr[front]",{"_index":2016,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["arr[front];",{"_index":2025,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["arr[hi])",{"_index":1209,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{}},"title":{}}],["arr[i]",{"_index":1170,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["arr[i])",{"_index":2203,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["arr[i]:",{"_index":1725,"text":{"ds/heap/intro/":{},"ds/heap/intro/#arrays":{}},"title":{}}],["arr[i];",{"_index":1322,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["arr[i]=",{"_index":307,"text":{"algo/maths/":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}},"title":{}}],["arr[i][j];",{"_index":543,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["arr[j",{"_index":1324,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["arr[j+1])",{"_index":1304,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["arr[j]",{"_index":1323,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["arr[j])",{"_index":1452,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],["arr[j];",{"_index":1325,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["arr[km]",{"_index":1254,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{}}],["arr[lo]",{"_index":1208,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{}},"title":{}}],["arr[lo])",{"_index":1205,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{}},"title":{}}],["arr[lo]))",{"_index":1212,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{}},"title":{}}],["arr[lo]));",{"_index":1213,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{}},"title":{}}],["arr[lo])*(hi",{"_index":1203,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{}},"title":{}}],["arr[max];",{"_index":2006,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["arr[min_idx])",{"_index":1287,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["arr[pos]",{"_index":1216,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#reursive":{}},"title":{}}],["arr[r][c])",{"_index":538,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["arr[rear]",{"_index":2020,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["arr[rear];",{"_index":2028,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["arr[start]",{"_index":1548,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{}},"title":{}}],["arr[start];",{"_index":1547,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{}},"title":{}}],["arrai",{"_index":108,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"ds/array/multi-dimensional/":{},"ds/array/reverse/":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-matrix":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/intro/":{},"ds/tree/intro/#why":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{},"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#types":{}},"title":{"algo/bits/#a-boolean-array-puzzle":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#multidimensional-arrays":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#reverse-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#array-vs-pointers":{},"ds/heap/intro/#arrays":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list-vs-arrays":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/#arrays":{},"ds/stack/intro/#array":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/string/intro/#stdstring-vs-character-array":{},"java/basics/#arrays":{},"php/basics/#arrays":{}}}],["array(12));",{"_index":3407,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["array[i]",{"_index":1681,"text":{"ds/graph/intro/":{},"ds/graph/intro/#adjacency-list":{}},"title":{}}],["array_name[size1][size2]....[sizen];",{"_index":1526,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["arraylist",{"_index":484,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["arraylist<string>());",{"_index":2941,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["arrayll[5];",{"_index":1960,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["arrayofints.length;",{"_index":2857,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["arrayofints[i].length;",{"_index":2858,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["arrays.sort(a);",{"_index":2955,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["ascend",{"_index":2463,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["ask",{"_index":688,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["assert(0);",{"_index":236,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["assign",{"_index":132,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/array/vs-pointers/":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"ds/array/vs-pointers/#assignment":{}}}],["associ",{"_index":2142,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["assum",{"_index":421,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["asymptot",{"_index":829,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}}}],["asynchron",{"_index":2038,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["at(g)",{"_index":1574,"text":{"ds/array/vectors/":{},"ds/array/vectors/#element-access":{}},"title":{}}],["at(n/b)",{"_index":1066,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["atof",{"_index":2375,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#string-to-double":{}},"title":{}}],["atoi",{"_index":2370,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#stoi-vs-atoi":{}},"title":{"ds/string/string-to-no/#stoi-vs-atoi":{}}}],["atomicinteg",{"_index":3183,"text":{"java/numbers/":{}},"title":{}}],["atomiclong",{"_index":3184,"text":{"java/numbers/":{}},"title":{}}],["attempt",{"_index":1228,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{}},"title":{}}],["attribut",{"_index":3335,"text":{"php/atttributes/":{}},"title":{}}],["atttribut",{"_index":3332,"text":{},"title":{"php/atttributes/":{}}}],["augment",{"_index":1768,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/k-smallest/":{}},"title":{"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}}}],["author",{"_index":2711,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["auto",{"_index":1458,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["autobox",{"_index":3330,"text":{"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{}},"title":{"java/strings/#autoboxing-and-unboxing":{}}}],["automat",{"_index":2787,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{}},"title":{}}],["aux",{"_index":2253,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["auxiliari",{"_index":1139,"text":{"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/k-smallest/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{"algo/analysis/space/#auxiliary-space":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}}}],["avail",{"_index":470,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{},"java/annotations/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["averag",{"_index":413,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#why-not-average":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#why-not-average":{},"algo/maths/#average-of-stream-of-numbers":{}}}],["averagecollect",{"_index":2972,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averagecollect.average());",{"_index":2981,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averager::accept,",{"_index":2976,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averager::combin",{"_index":2977,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["avl",{"_index":1755,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{}},"title":{}}],["avoid",{"_index":419,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["awar",{"_index":3265,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["ax2+bx+c",{"_index":1017,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["axi",{"_index":1319,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["a\u20181",{"_index":1344,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["a\u20182",{"_index":1345,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["a\u2018n.",{"_index":1347,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["b",{"_index":173,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#multiple-of-3":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"java/collections/":{},"java/collections/#reduction":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{}},"title":{}}],["back",{"_index":1420,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#modifiers":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/inheritance/":{},"java/inheritance/#constructor-chaining":{}},"title":{}}],["backref",{"_index":1386,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["backtrack",{"_index":2160,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["backward",{"_index":2153,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["balanc",{"_index":1754,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#problems":{},"ds/tree/binary-tree/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{}},"title":{"ds/tree/binary-tree/#balanced":{},"ds/tree/binary-tree/#balanced-binary-tree":{}}}],["bar",{"_index":3467,"text":{"php/basics/":{},"php/basics/#arrays":{},"php/basics/#object":{}},"title":{}}],["base",{"_index":209,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/sort/intro/":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"java/inheritance/":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"php/basics/":{},"php/basics/#float":{}},"title":{"algo/maths/#base-n-addition":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}}}],["basename($thi",{"_index":3349,"text":{"php/atttributes/":{}},"title":{}}],["basi",{"_index":961,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{}},"title":{}}],["basic",{"_index":3147,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{"php/basics/":{}}}],["bcdea",{"_index":2355,"text":{"ds/string/rotation/":{},"ds/string/rotation/#rotation":{}},"title":{}}],["be",{"_index":635,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["becom",{"_index":285,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["befor",{"_index":1388,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["begin",{"_index":1552,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/string/intro/":{},"ds/string/intro/#iterator":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["beging",{"_index":1426,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["behavior",{"_index":868,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#polymorphism":{}},"title":{}}],["behaviour",{"_index":1892,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["belong",{"_index":3071,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["below",{"_index":866,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["benjamin",{"_index":2712,"text":{"java/annotations/":{}},"title":{}}],["best",{"_index":841,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/search/intro/":{},"algo/search/intro/#searching":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#heap":{}},"title":{"algo/analysis/intro/#best-case-analysis-bogus":{}}}],["better",{"_index":535,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["between",{"_index":165,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["beyond",{"_index":1571,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"java/java9%26beyond/":{}},"title":{}}],["bf",{"_index":1599,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/tree/traversal/":{},"ds/tree/traversal/#how-to-pick-one":{},"ds/tree/traversal/#space-complexity":{}},"title":{"ds/graph/bfs/":{},"ds/graph/bfs/#bfs":{},"ds/tree/traversal/#bfs":{},"ds/tree/traversal/#bfs-vs-dfs":{}}}],["bfs(int",{"_index":1618,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["bicycl",{"_index":3228,"text":{"java/oops/":{},"java/oops/#class":{},"java/oops/#inheritance":{},"java/oops/#interface":{}},"title":{}}],["big",{"_index":451,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["bigdecim",{"_index":3180,"text":{"java/numbers/":{}},"title":{}}],["bigger",{"_index":1765,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["biginteg",{"_index":3181,"text":{"java/numbers/":{}},"title":{}}],["bike",{"_index":3232,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["binari",{"_index":163,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/intro/":{},"algo/search/intro/#searching":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/frequency/":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#binary-heap":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/queue/print-binary/":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/handshaking-lemma/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-queues":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#integers":{}},"title":{"algo/search/interpolation/#interpolation-vs-binary":{},"algo/search/intro/#binary-search":{},"ds/array/frequency/#sort-then-binary-search":{},"ds/heap/intro/":{},"ds/heap/intro/#binary-heap":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#print-binary":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/binary-tree/#binary-tree":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/bst/":{},"ds/tree/bst/#binary-search-tree":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#binary-tree-enumeration":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/#in-binary-tree":{}}}],["binarysearch",{"_index":2826,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["binarysearch(arr,",{"_index":1172,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/intro/":{},"algo/search/intro/#recursive":{}},"title":{}}],["binarysearch(int",{"_index":1248,"text":{"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#recursive":{}},"title":{}}],["binomi",{"_index":1695,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["binomoi",{"_index":1746,"text":{"ds/heap/intro/":{},"ds/heap/intro/#application":{}},"title":{}}],["binri",{"_index":2692,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["biologi",{"_index":3038,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["bipartit",{"_index":786,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["bit",{"_index":5,"text":{"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#bits-tricks":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#method-2-use-bit-operations":{}}}],["bitch",{"_index":593,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{}},"title":{}}],["bitcount",{"_index":60,"text":{"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{}},"title":{}}],["bitwis",{"_index":275,"text":{"algo/maths/":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{}}}],["black",{"_index":521,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{}},"title":{}}],["block",{"_index":779,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"java/basics/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["blueprint",{"_index":3229,"text":{"java/oops/":{},"java/oops/#class":{}},"title":{}}],["bob",{"_index":2751,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"php/basics/":{},"php/basics/#string":{}},"title":{}}],["bob3",{"_index":3457,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["bodi",{"_index":3123,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"php/intro/":{}},"title":{}}],["bogu",{"_index":842,"text":{"algo/analysis/intro/":{}},"title":{"algo/analysis/intro/#best-case-analysis-bogus":{}}}],["boil",{"_index":1182,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["bolt",{"_index":3224,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["bond",{"_index":996,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["bool",{"_index":36,"text":{"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#ternery":{},"algo/bits/#xor":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#lucky-number":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["bool(false)",{"_index":3404,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["bool(true)",{"_index":3405,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["bool[v];",{"_index":1621,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["boolean",{"_index":107,"text":{"algo/bits/":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"java/basics/":{},"java/basics/#operators":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/strings/":{},"php/basics/":{},"php/basics/#types":{}},"title":{"algo/bits/#a-boolean-array-puzzle":{},"php/basics/#boolean":{}}}],["boost",{"_index":3132,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["both",{"_index":117,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#space-complexity":{},"java/collections/":{},"java/collections/#interfaces":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#name-ambiguities":{}},"title":{}}],["bottleneck",{"_index":3133,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["bound",{"_index":479,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#worst-case":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/array/intro/":{},"java/numbers/":{}},"title":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-and-upper-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}}}],["boundari",{"_index":1308,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["bracket",{"_index":1598,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["branch",{"_index":2856,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["breadth",{"_index":1733,"text":{"ds/heap/intro/":{},"ds/heap/intro/#traversal":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{}},"title":{}}],["break",{"_index":1120,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/merge/":{},"algo/sort/merge/#local-reference":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"java/basics/":{},"java/basics/#control-flow":{},"java/oops/":{},"java/oops/#why":{},"java/strings/":{}},"title":{}}],["bridg",{"_index":2439,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["broadcast",{"_index":1609,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["browser",{"_index":2156,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["bst",{"_index":1751,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-merge/":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/bst/#insert":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{}},"title":{"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#checking-bst":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge-bst":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}}}],["bst(value);",{"_index":2513,"text":{"ds/tree/bst/":{},"ds/tree/bst/#insert":{}},"title":{}}],["bt",{"_index":2690,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["btreetoclist(root",{"_index":1839,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{}},"title":{}}],["bubbl",{"_index":1298,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{"algo/sort/intro/#bubble-sort":{}}}],["bubblesort(int",{"_index":1303,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["buffer",{"_index":2044,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"php/basics/":{}},"title":{}}],["bug",{"_index":2998,"text":{"java/generics/":{}},"title":{}}],["bui",{"_index":497,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why":{}},"title":{}}],["build",{"_index":1010,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["bulk",{"_index":2903,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["busi",{"_index":2638,"text":{"ds/tree/intro/":{},"ds/tree/intro/#applications":{}},"title":{}}],["bw",{"_index":1667,"text":{"ds/graph/intro/":{},"ds/graph/intro/#properties":{},"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["byte",{"_index":2322,"text":{"ds/string/intro/":{},"ds/string/intro/#string":{},"java/basics/":{},"java/basics/#variables":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{}},"title":{}}],["c",{"_index":92,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/bits/":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#multiple-of-3":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/intro/":{},"java/intro/#why":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{}},"title":{"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}}}],["c(n2)/16",{"_index":1122,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["c(n2)/256",{"_index":1126,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["c(n2)/4",{"_index":1123,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["c(n2)/64",{"_index":1127,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["c(n^2",{"_index":1129,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["c*g(n)",{"_index":876,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{}},"title":{}}],["c*g(n).",{"_index":919,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{}}],["c++11",{"_index":2374,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#stoi-vs-atoi":{}},"title":{}}],["c.iterator();",{"_index":2913,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["c.removeall(collections.singleton(e));",{"_index":2917,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["c/c++,",{"_index":545,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["c1",{"_index":861,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{}},"title":{}}],["c1*g(n)",{"_index":863,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{}},"title":{}}],["c2",{"_index":568,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{}},"title":{}}],["c2*g(n)",{"_index":864,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{}},"title":{}}],["c3",{"_index":569,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["cach",{"_index":532,"text":{"algo/analysis/caching/":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{}},"title":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}}}],["cadenc",{"_index":3242,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["calcul",{"_index":358,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#recursive":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"java/numbers/":{}},"title":{}}],["calculatespan(int",{"_index":2274,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["call",{"_index":334,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#chromatic-number":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/dac/intro/":{},"algo/dac/intro/#conquer":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-5-optimized-method-4":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#simple":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/handshaking-lemma/":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/traversal/":{},"ds/tree/traversal/#how-to-pick-one":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{},"java/collections/":{},"java/collections/#interfaces":{},"java/exceptions/":{},"java/inheritance/":{},"java/inheritance/#constructor-chaining":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#super-keyword":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/tree/traversal/#using-call-stack":{}}}],["call_user_func($c,",{"_index":3487,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["call_user_func('my_callback_function');",{"_index":3476,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["call_user_func('myclass::mycallbackmethod');",{"_index":3479,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["call_user_func(array($obj,",{"_index":3478,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["call_user_func(array('b',",{"_index":3482,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["call_user_func(array('myclass',",{"_index":3477,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["callabl",{"_index":3387,"text":{"php/basics/":{},"php/basics/#callable":{},"php/basics/#types":{}},"title":{"php/basics/#callable":{}}}],["callback",{"_index":3472,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["can't",{"_index":2104,"text":{"ds/set-map/map/":{},"ds/set-map/map/#maps":{}},"title":{}}],["cancel",{"_index":2625,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{}},"title":{}}],["cant",{"_index":824,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{}},"title":{}}],["can\u2019t",{"_index":123,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["cap",{"_index":1789,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["capabl",{"_index":1312,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["capac",{"_index":1562,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{}},"title":{"ds/array/vectors/#capacity":{},"ds/string/intro/#capacity":{}}}],["capit",{"_index":3378,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["car",{"_index":498,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["cardin",{"_index":2799,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{}},"title":{}}],["care",{"_index":818,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{}},"title":{}}],["carefulli",{"_index":2604,"text":{"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["carri",{"_index":80,"text":{"algo/bits/":{},"algo/bits/#iterative":{},"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["case",{"_index":437,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#interpolation-vs-binary":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/intro/":{},"ds/graph/intro/#pros_1":{},"ds/graph/intro/#representation":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#naming":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/packages/":{},"java/packages/#naming":{}},"title":{"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#best-case-analysis-bogus":{},"algo/analysis/intro/#worst-case":{},"ds/tree/handshaking-lemma/#case-1":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{}}}],["cast",{"_index":2728,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{"java/inheritance/#casting-objects":{}}}],["cat",{"_index":3080,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["catalan",{"_index":2509,"text":{"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["catch",{"_index":2943,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/exceptions/":{}},"title":{}}],["categori",{"_index":3374,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["caus",{"_index":1302,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"php/basics/":{}},"title":{}}],["cbegin",{"_index":1556,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{}},"title":{}}],["cdll",{"_index":1830,"text":{"ds/linked-list/bin-tree-cdll/":{}},"title":{"ds/linked-list/bin-tree-cdll/#cdll":{}}}],["cdll'",{"_index":1832,"text":{"ds/linked-list/bin-tree-cdll/":{}},"title":{"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}}}],["ceil",{"_index":1002,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["ceil(n/2).",{"_index":2693,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["cell",{"_index":778,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["cend",{"_index":1557,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{}},"title":{}}],["certain",{"_index":666,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["cgi",{"_index":3492,"text":{"php/intro/":{}},"title":{}}],["ch",{"_index":2340,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["chain",{"_index":3013,"text":{"java/inheritance/":{},"java/inheritance/#constructor-chaining":{},"php/security/":{}},"title":{"java/inheritance/#constructor-chaining":{}}}],["chang",{"_index":418,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["changecadence(int",{"_index":3236,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["changegear(int",{"_index":3238,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["changelanes(direct",{"_index":3094,"text":{"java/interfaces/":{}},"title":{}}],["changetozero(a);",{"_index":145,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["changetozero(int",{"_index":134,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["char",{"_index":212,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/strings/":{}},"title":{}}],["char('a'",{"_index":2319,"text":{"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["char('a'+i)",{"_index":2314,"text":{"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{}},"title":{}}],["char[(sizeof(char)*(l1",{"_index":238,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["char[len];",{"_index":3314,"text":{"java/strings/":{}},"title":{}}],["char_bit",{"_index":96,"text":{"algo/bits/":{},"algo/bits/#method-2-use-bit-operations":{}},"title":{}}],["charact",{"_index":2321,"text":{"ds/string/intro/":{},"ds/string/intro/#input":{},"ds/string/intro/#manipulating":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/string/intro/#string":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"java/strings/":{}},"title":{"ds/string/intro/#stdstring-vs-character-array":{}}}],["chararrai",{"_index":3315,"text":{"java/strings/":{}},"title":{}}],["chararray[j]",{"_index":3318,"text":{"java/strings/":{}},"title":{}}],["check",{"_index":787,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/array/intro/":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"java/annotations/":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/basics/":{},"php/basics/#types":{}},"title":{"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#checking-bst":{}}}],["checker",{"_index":2775,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}},"title":{}}],["cheney\u2019",{"_index":1611,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["chess",{"_index":2639,"text":{"ds/tree/intro/":{},"ds/tree/intro/#applications":{}},"title":{}}],["child",{"_index":1730,"text":{"ds/heap/intro/":{},"ds/heap/intro/#arrays":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"ds/tree/binary-tree/#representaion":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"java/inheritance/":{}},"title":{}}],["children",{"_index":2398,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#binary-tree":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#without-it":{}},"title":{"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{}}}],["chill",{"_index":873,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-drop":{}},"title":{}}],["choic",{"_index":614,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{}},"title":{}}],["choos",{"_index":834,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{}},"title":{}}],["chosen",{"_index":852,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{}},"title":{}}],["chromat",{"_index":760,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#chromatic-number":{}},"title":{"algo/analysis/graph-coloring/#chromatic-number":{}}}],["cindi",{"_index":2752,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["circular",{"_index":1702,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/queue/dequeue/#circular-array":{}}}],["citi",{"_index":793,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["ck",{"_index":571,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["class",{"_index":558,"text":{"algo/analysis/classes/":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/string/string-to-no/":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/generics/":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/inheritance/#super-keyword":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/numbers/":{},"java/oops/":{},"java/oops/#class":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#object":{}},"title":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"ds/string/string-to-no/#using-stringstream-class":{},"java/classes/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{},"java/oops/#class":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#managing-source-and-class-files":{}}}],["class'",{"_index":2773,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["classifi",{"_index":2802,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["classpath",{"_index":3276,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["classpreambl",{"_index":2742,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["class\u2014both",{"_index":3026,"text":{"java/inheritance/":{}},"title":{}}],["claus",{"_index":2731,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}},"title":{}}],["clear",{"_index":992,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["clearli",{"_index":1056,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["cll",{"_index":1860,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{"ds/linked-list/cll/#cll-sorted-insert":{}}}],["clockwis",{"_index":1996,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["clogcn",{"_index":574,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["clone",{"_index":3044,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["cloneabl",{"_index":3072,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["clonenotsupportedexcept",{"_index":3045,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["close",{"_index":365,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{},"php/basics/":{}},"title":{}}],["closer",{"_index":1160,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/tree/traversal/":{},"ds/tree/traversal/#how-to-pick-one":{}},"title":{}}],["closest",{"_index":2430,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["cn",{"_index":1101,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"algo/analysis/recursive/#substitution-method":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["cn2",{"_index":1117,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["cnlog2",{"_index":1110,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{}},"title":{}}],["cnlogn",{"_index":1107,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{}},"title":{}}],["code",{"_index":600,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/classes/#reduction":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["coffe",{"_index":2829,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["colect",{"_index":1935,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["collect",{"_index":4,"text":{"":{},"#abhinavs-notes":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#why":{},"java/numbers/":{}},"title":{"java/collections/":{},"java/collections/#traversing-collections":{}}}],["collection<e>",{"_index":2887,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["collector",{"_index":3049,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["collectors.groupingby(",{"_index":2984,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["collectors.reducing(",{"_index":2986,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["color",{"_index":753,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#chromatic-number":{},"algo/analysis/graph-coloring/#vertex-coloring":{}},"title":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#vertex-coloring":{}}}],["color.red)",{"_index":2893,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["column",{"_index":211,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["com.example.graphics,",{"_index":3278,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["com.example.region.mypackag",{"_index":3256,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["combin",{"_index":298,"text":{"algo/analysis/classes/":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/dac/intro/":{},"algo/maths/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#streamcollect-method":{}},"title":{"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/dac/intro/#combine":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}}}],["combine(b,",{"_index":1154,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{}},"title":{}}],["come",{"_index":692,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["command",{"_index":3504,"text":{"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["comment",{"_index":2739,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"php/basics/":{},"php/basics/#comments":{}},"title":{"php/basics/#comments":{}}}],["common",{"_index":766,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"ds/tree/lowest-common-ancestor/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/strings/":{},"php/intro/":{}},"title":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}}}],["commun",{"_index":2868,"text":{"java/collections/":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["compani",{"_index":690,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["compar",{"_index":631,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["comparator.comparing(card::getrank)",{"_index":3127,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["comparison",{"_index":86,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"algo/bits/#smallest-of-three-integers-without-comparison-operators":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}}}],["compat",{"_index":2785,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["compil",{"_index":534,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["complement",{"_index":125,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["complet",{"_index":617,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/intro/":{},"ds/heap/intro/#binary-heap":{},"ds/tree/binary-tree/":{},"php/basics/":{},"php/basics/#comments":{}},"title":{"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"ds/tree/binary-tree/#complete":{},"ds/tree/binary-tree/#complete-binary-tree":{}}}],["complex",{"_index":326,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{}},"title":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/space/#space-complexity":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#time-complexity":{}}}],["complexity(o(n)):",{"_index":2661,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["complexity:o(n)",{"_index":349,"text":{"algo/maths/":{},"algo/maths/#method-3-space-optimised-2":{}},"title":{}}],["complic",{"_index":1706,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["compon",{"_index":1615,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["compos",{"_index":300,"text":{"algo/maths/":{}},"title":{"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}}}],["composit",{"_index":2441,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{}},"title":{}}],["compound",{"_index":3386,"text":{"php/basics/":{},"php/basics/#float":{},"php/basics/#types":{}},"title":{}}],["comput",{"_index":698,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"php/intro/":{}},"title":{}}],["con",{"_index":1678,"text":{"ds/graph/intro/":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{"ds/graph/intro/#cons":{},"ds/graph/intro/#cons_1":{}}}],["concaten",{"_index":1831,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"java/basics/":{},"java/basics/#operators":{},"java/strings/":{}},"title":{"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}}}],["concatenate(concatenate(left,",{"_index":1840,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{}},"title":{}}],["concept",{"_index":187,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-by-7":{}},"title":{}}],["concern",{"_index":3073,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["conclus",{"_index":2128,"text":{"ds/set-map/set-types/":{}},"title":{"ds/set-map/set-types/#conclusion":{}}}],["concret",{"_index":2873,"text":{"java/collections/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["concurr",{"_index":2991,"text":{},"title":{"java/concurrency/":{}}}],["condit",{"_index":910,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["conflict",{"_index":3034,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["confus",{"_index":3441,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["connect",{"_index":1614,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["conquer",{"_index":1144,"text":{"algo/dac/intro/":{}},"title":{"algo/dac/intro/":{},"algo/dac/intro/#conquer":{},"algo/dac/intro/#divide-conquer":{}}}],["consecut",{"_index":589,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{}},"title":{"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{}}}],["consequ",{"_index":2609,"text":{"ds/tree/handshaking-lemma/":{}},"title":{}}],["consid",{"_index":333,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/classes/#reduction":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#substitution-method":{},"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-5-optimized-method-4":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"java/annotations/":{},"java/annotations/#design-considerations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["consider",{"_index":2798,"text":{"java/annotations/":{}},"title":{"java/annotations/#design-considerations":{}}}],["consist",{"_index":985,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["consolid",{"_index":1708,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["const",{"_index":2131,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#sscanf":{}},"title":{}}],["constant",{"_index":559,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/":{},"algo/analysis/intro/#general-properties":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"java/interfaces/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["constraint",{"_index":755,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["construct",{"_index":129,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["constructor",{"_index":3015,"text":{"java/inheritance/":{},"java/inheritance/#constructor-chaining":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#super-keyword":{}},"title":{"java/inheritance/#constructor-chaining":{}}}],["consum",{"_index":2035,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["contagi",{"_index":1907,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["contain",{"_index":1566,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vectors/#modifiers":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{}},"title":{"java/interfaces/#extending-interfaces-that-contain-default-methods":{}}}],["containsal",{"_index":2904,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["content",{"_index":468,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["context",{"_index":162,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["contigu",{"_index":1482,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{}},"title":{}}],["continu",{"_index":186,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["contract",{"_index":3085,"text":{"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["contribut",{"_index":1439,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["control",{"_index":601,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"java/basics/":{}},"title":{"java/basics/#control-flow":{}}}],["convers",{"_index":2150,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#string-to-double":{}},"title":{}}],["convert",{"_index":2376,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#string-to-double":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["coordin",{"_index":1316,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["copi",{"_index":467,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/tree/traversal/":{},"ds/tree/traversal/#preorder":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["copy($thi",{"_index":3347,"text":{"php/atttributes/":{}},"title":{}}],["copy(\u201cchar",{"_index":2328,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["copyact",{"_index":3358,"text":{"php/atttributes/":{}},"title":{}}],["copyfil",{"_index":3337,"text":{"php/atttributes/":{}},"title":{}}],["copyto",{"_index":2823,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["corner",{"_index":853,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{}},"title":{}}],["correct",{"_index":1104,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"ds/tree/bst-check/":{}},"title":{"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{}}}],["correspond",{"_index":637,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["cost",{"_index":474,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["costli",{"_index":1267,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/using-stack/":{},"ds/stack/using-queue/":{}},"title":{"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}}}],["count",{"_index":50,"text":{"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"java/intro/":{},"java/intro/#why":{}},"title":{"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"ds/linked-list/count/":{},"ds/linked-list/count/#counting":{}}}],["count(const",{"_index":2123,"text":{"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["count[26];",{"_index":2307,"text":{"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["count[i]",{"_index":2320,"text":{"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["count[s[i]",{"_index":2311,"text":{"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["counter",{"_index":204,"text":{"algo/maths/":{},"algo/maths/#lucky-number":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#without-stack":{}},"title":{}}],["counterpart",{"_index":3440,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["countfreq(int",{"_index":1447,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{}},"title":{}}],["countri",{"_index":791,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["countsetbits(unsign",{"_index":59,"text":{"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{}},"title":{}}],["countsetbitsutil(i);",{"_index":64,"text":{"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{}},"title":{}}],["countsetbitsutil(unsign",{"_index":65,"text":{"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{}},"title":{}}],["countsetbitsutil(x",{"_index":71,"text":{"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{}},"title":{}}],["cours",{"_index":3432,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["cout",{"_index":148,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["cout<<\"arr[0]",{"_index":146,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["cout<<\"bi",{"_index":1514,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["cout<<\"stack",{"_index":2242,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["cout<<\"th",{"_index":1883,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{}},"title":{}}],["cout<<arr[i]<<\"",{"_index":1512,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["cout<<curr",{"_index":1985,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{}},"title":{}}],["cout<<current1",{"_index":2493,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["cout<<current2",{"_index":2494,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["cout<<endl;",{"_index":1513,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["cout<<i[arr]<<\"",{"_index":1516,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["cover",{"_index":518,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-drop":{}},"title":{}}],["coz",{"_index":2689,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["cpp",{"_index":1507,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vectors/":{}},"title":{"ds/array/vectors/":{},"ds/array/vectors/#vectors-in-cpp":{}}}],["cpu",{"_index":785,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{}},"title":{}}],["crash",{"_index":1244,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["crawler",{"_index":1603,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["crbegin",{"_index":1558,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{}},"title":{}}],["creat",{"_index":1338,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/tree/traversal/":{},"ds/tree/traversal/#preorder":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#class":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["createnode(data);",{"_index":2583,"text":{"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{}},"title":{}}],["createqueue(unsign",{"_index":2051,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["creation",{"_index":2726,"text":{"java/annotations/":{}},"title":{}}],["creditcardnumb",{"_index":2804,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["crend",{"_index":1559,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{}},"title":{}}],["criteria",{"_index":1142,"text":{"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{}},"title":{}}],["critic",{"_index":808,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"java/annotations/":{}},"title":{}}],["ctime",{"_index":1470,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["cuberoot",{"_index":582,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["curr",{"_index":1918,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{}},"title":{}}],["curr_siz",{"_index":2295,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["currenc",{"_index":825,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{}},"title":{}}],["current",{"_index":1340,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{}},"title":{}}],["current1",{"_index":2477,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["current2",{"_index":2478,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["currentrevis",{"_index":2743,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["custom",{"_index":2990,"text":{"java/collections/":{}},"title":{"java/collections/#custom-implementation":{}}}],["cycl",{"_index":1365,"text":{"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["cyclat",{"_index":1846,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{}},"title":{}}],["d",{"_index":182,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#multiple-of-3":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"java/basics/":{},"java/basics/#control-flow":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["d(n)",{"_index":896,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["d(n)=o(e(n))",{"_index":895,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["d_node",{"_index":2540,"text":{"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{}},"title":{}}],["dac(a,",{"_index":1147,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{}},"title":{}}],["data",{"_index":441,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#how-to-optimise":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#representaion":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#traversal":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/annotations/":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/numbers/":{},"java/oops/":{}},"title":{"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"java/oops/#data-encapsulation":{}}}],["data_s",{"_index":1897,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["data_typ",{"_index":1525,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["databas",{"_index":2431,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["dataint",{"_index":1958,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["datatyp",{"_index":1936,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["date",{"_index":2714,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["dayofmonth",{"_index":2790,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["dayofweek",{"_index":2791,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["debug",{"_index":2992,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{"java/debugging/":{}}}],["decai",{"_index":1441,"text":{"ds/array/decay/":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{}},"title":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{}}}],["decid",{"_index":272,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/maths/":{},"algo/maths/#square-root":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["decim",{"_index":161,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{},"java/numbers/":{},"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["decimalformat",{"_index":3195,"text":{"java/numbers/":{}},"title":{}}],["decimalformat(pattern);",{"_index":3197,"text":{"java/numbers/":{}},"title":{}}],["decis",{"_index":609,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#np":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{"algo/analysis/classes/#decision-vs-optimization-problems":{}}}],["decison",{"_index":1355,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["declar",{"_index":952,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"ds/array/intro/":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{}},"title":{"ds/array/intro/#declaration":{}}}],["declart",{"_index":3489,"text":{"php/basics/":{}},"title":{"php/basics/#type-juggling-and-declartion":{}}}],["decreas",{"_index":1697,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{}},"title":{}}],["decreasekei",{"_index":1738,"text":{"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#operations":{}},"title":{}}],["decreasekey(i,",{"_index":1807,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["decreasekey(int",{"_index":1783,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["decrement",{"_index":562,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"java/basics/":{},"java/basics/#operators":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["default",{"_index":2115,"text":{"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#control-flow":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/interfaces/#extending-interfaces-that-contain-default-methods":{}}}],["defin",{"_index":95,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{},"algo/bits/":{},"algo/bits/#method-2-use-bit-operations":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#static-methods":{},"java/numbers/":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["definit",{"_index":266,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/maths/":{},"algo/maths/#square-root":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["degener",{"_index":2424,"text":{"ds/tree/binary-tree/":{}},"title":{"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"ds/tree/binary-tree/#degenerate":{}}}],["degre",{"_index":1025,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["del",{"_index":1886,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{}},"title":{}}],["delai",{"_index":1707,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["delet",{"_index":1491,"text":{"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/graph/intro/":{},"ds/graph/intro/#pros":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/deletion/":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#heap":{},"ds/queue/priority-queue/#linked-list":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/set-map/set/":{},"ds/set-map/set/#set":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/string/intro/":{},"ds/string/intro/#input":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/traversal/":{},"ds/tree/traversal/#postorder":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#deletion":{},"ds/linked-list/dll/#deletion":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{}}}],["deletdeepest(root,",{"_index":2547,"text":{"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{}},"title":{}}],["deletdeepest(struct",{"_index":2539,"text":{"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{}},"title":{}}],["deletefirst(struct",{"_index":1870,"text":{"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#first":{}},"title":{}}],["deletefront",{"_index":1989,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["deletehighestprior",{"_index":2082,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#operations":{}},"title":{}}],["deletekey(int",{"_index":1786,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["deletemiddl",{"_index":2235,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["deletenode(node*",{"_index":2520,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["deletenode(node**",{"_index":1885,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{}},"title":{}}],["deletenode(root",{"_index":2498,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["deletenode(struct",{"_index":1873,"text":{"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["deleterear",{"_index":1991,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["deletion(struct",{"_index":2545,"text":{"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{}},"title":{}}],["demonstr",{"_index":1026,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["denot",{"_index":938,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["depend",{"_index":830,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#representation":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["deploi",{"_index":803,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["deploy",{"_index":2701,"text":{"java/annotations/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{"java/deployment/":{}}}],["deprec",{"_index":2756,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["depth",{"_index":2660,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#traversal":{}},"title":{"ds/tree/traversal/#depth-first-traversals":{}}}],["dequ",{"_index":1999,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#circular-array":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["deque(deletion)",{"_index":2048,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["deque(int",{"_index":2008,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::deleterear()",{"_index":2023,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::getfront()",{"_index":2024,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::getrear()",{"_index":2026,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::insertfront(int",{"_index":2014,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::isempti",{"_index":2013,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["deque::isfull()",{"_index":2011,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["dequeu",{"_index":1986,"text":{"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/intro/#operations":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"java/collections/":{},"java/collections/#why":{}},"title":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/using-stack/#costly-dequeue":{}}}],["dequeue(queue*",{"_index":2059,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["deriv",{"_index":1072,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"java/inheritance/":{}},"title":{}}],["descend",{"_index":3012,"text":{"java/inheritance/":{}},"title":{}}],["design",{"_index":2797,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#why":{}},"title":{"java/annotations/#design-considerations":{}}}],["desir",{"_index":1275,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["desktop",{"_index":3505,"text":{"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["destroi",{"_index":1570,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["detail",{"_index":585,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/collections/":{},"java/collections/#interfaces":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["detect",{"_index":31,"text":{"algo/bits/":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"java/annotations/":{},"java/generics/":{}},"title":{"algo/bits/#detect-if-two-integers-have-opposite-signs":{}}}],["determin",{"_index":2113,"text":{"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["determinist",{"_index":604,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#p":{}},"title":{}}],["dev",{"_index":3120,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["develop",{"_index":3145,"text":{"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"php/intro/":{}},"title":{}}],["df",{"_index":1612,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/tree/traversal/":{},"ds/tree/traversal/#how-to-pick-one":{},"ds/tree/traversal/#space-complexity":{}},"title":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/tree/traversal/#bfs-vs-dfs":{}}}],["dfs(int",{"_index":1660,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["dfsutil(*i,",{"_index":1647,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["dfsutil(i,",{"_index":1649,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{}},"title":{}}],["dfsutil(int",{"_index":1659,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["dfsutil(v,",{"_index":1661,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["diagram",{"_index":983,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["dictionari",{"_index":2434,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["diditwork(int",{"_index":3122,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["didn\u2019t",{"_index":1301,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["differ",{"_index":164,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#multiple-of-3":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/array/vs-pointers/":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#polymorphism":{},"java/strings/":{},"java/strings/#why":{}},"title":{"ds/array/vs-pointers/#difference":{}}}],["difficult",{"_index":2999,"text":{"java/generics/":{}},"title":{}}],["difficulti",{"_index":632,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{}},"title":{}}],["digit",{"_index":167,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/basics/":{},"java/basics/#naming":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["dijkstra",{"_index":1711,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["dijkstra\u2019",{"_index":673,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{}},"title":{}}],["dimens",{"_index":1443,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{}},"title":{}}],["dimension",{"_index":1533,"text":{"ds/array/multi-dimensional/":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{"ds/array/multi-dimensional/#three-dimensional-array":{}}}],["direct",{"_index":670,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/interfaces/":{}},"title":{}}],["directli",{"_index":131,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["directori",{"_index":3275,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/atttributes/":{}},"title":{}}],["disadvantag",{"_index":1490,"text":{"ds/array/intro/":{},"ds/linked-list/dll/":{}},"title":{"ds/array/intro/#disadvantages":{},"ds/linked-list/dll/#disadvantages":{}}}],["disconnect",{"_index":1636,"text":{"ds/graph/dfs-disconnected/":{}},"title":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{}}}],["discourag",{"_index":3249,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["discuss",{"_index":505,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["disjoint",{"_index":446,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["disk",{"_index":2036,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["displai",{"_index":3007,"text":{"java/helloworld/":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["disrupt",{"_index":2994,"text":{"java/exceptions/":{}},"title":{}}],["distancetocar",{"_index":3098,"text":{"java/interfaces/":{}},"title":{}}],["distinct",{"_index":2508,"text":{"ds/tree/bst/":{},"ds/tree/bst/#facts":{}},"title":{}}],["distribut",{"_index":800,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#why-not-average":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#interpolation-vs-binary":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["divid",{"_index":293,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/dac/intro/":{},"algo/dac/intro/#divide":{},"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{"algo/dac/intro/":{},"algo/dac/intro/#divide":{},"algo/dac/intro/#divide-conquer":{}}}],["divide(a,",{"_index":1150,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{}},"title":{}}],["divis",{"_index":104,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/maths/":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"algo/bits/#method-3-use-division-operator":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#write-you-own-power-without-using-multiplication-and-division-operators":{}}}],["dll",{"_index":1829,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/xor-dll/":{}},"title":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-dll":{}}}],["dllnode",{"_index":2238,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["do",{"_index":1761,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"php/basics/":{},"php/basics/#object":{}},"title":{}}],["do_foo",{"_index":3469,"text":{"php/basics/":{},"php/basics/#object":{}},"title":{}}],["doc",{"_index":3160,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["doc)[http://www.phpdoc.org/]",{"_index":3384,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["doctyp",{"_index":3501,"text":{"php/intro/":{}},"title":{}}],["document",{"_index":2740,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{}},"title":{}}],["doe",{"_index":2722,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["doesn't",{"_index":226,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["doesn\u2019t",{"_index":508,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["domain",{"_index":3254,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["domin",{"_index":1078,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["don't",{"_index":2423,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{}},"title":{}}],["done",{"_index":501,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"java/numbers/":{}},"title":{}}],["don\u2019t",{"_index":254,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["doperiodiccleanup",{"_index":2780,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["dosometh",{"_index":3108,"text":{"java/interfaces/":{}},"title":{}}],["dosomethingelse(str",{"_index":3109,"text":{"java/interfaces/":{}},"title":{}}],["dot",{"_index":3289,"text":{"java/strings/":{}},"title":{}}],["doubl",{"_index":287,"text":{"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#reursive":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/string/string-to-no/":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#types":{}},"title":{"ds/string/string-to-no/#string-to-double":{}}}],["doubli",{"_index":1703,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/dll/":{},"ds/queue/dequeue/":{}},"title":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#doubly-ll":{},"ds/queue/dequeue/#doubly-linked-list":{}}}],["down",{"_index":805,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["dp",{"_index":340,"text":{"algo/maths/":{}},"title":{"algo/maths/#method-2-dp":{}}}],["draw",{"_index":1073,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["drawback",{"_index":1908,"text":{"ds/linked-list/intro/":{}},"title":{"ds/linked-list/intro/#drawbacks":{}}}],["driver",{"_index":1431,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["drop",{"_index":869,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{}},"title":{"algo/analysis/intro/#why-drop":{}}}],["ds",{"_index":1906,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#linked-list":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"java/collections/":{}},"title":{}}],["due",{"_index":1952,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["dummi",{"_index":1366,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{}},"title":{"algo/sort/merge/#dummy-nodes":{}}}],["dummy.next.",{"_index":1372,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{}},"title":{}}],["duplic",{"_index":2105,"text":{"ds/set-map/map/":{},"ds/set-map/map/#maps":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/string/duplicate/":{},"ds/string/remove-duplicates/":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{}}}],["dure",{"_index":2605,"text":{"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["dynam",{"_index":454,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["dynarr",{"_index":1943,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["e",{"_index":269,"text":{"algo/maths/":{},"algo/maths/#square-root":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/interfaces/":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["e(n)",{"_index":899,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["e.g.",{"_index":1947,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["e.getcolor()",{"_index":2892,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["e_notic",{"_index":3461,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["e_warn",{"_index":3459,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["each",{"_index":775,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#binary-tree":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#without-it":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{}},"title":{}}],["eas",{"_index":3223,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["easi",{"_index":844,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["easier",{"_index":630,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"ds/graph/intro/":{},"ds/graph/intro/#pros_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["easiest",{"_index":958,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["easili",{"_index":959,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/intro/":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["ebook",{"_index":2723,"text":{"java/annotations/":{}},"title":{}}],["echo",{"_index":3364,"text":{"php/basics/":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#object":{},"php/basics/#types":{},"php/intro/":{}},"title":{}}],["edg",{"_index":645,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"ds/graph/intro/":{},"ds/graph/intro/#cons":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["eeprom",{"_index":1362,"text":{"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["effect",{"_index":2443,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"php/basics/":{}},"title":{}}],["effici",{"_index":621,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#linked-list":{},"ds/tree/bst-check/":{}},"title":{"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{}}}],["effort",{"_index":2876,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["eg",{"_index":848,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/tree/intro/":{},"ds/tree/intro/#why":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["egd",{"_index":1650,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["egg",{"_index":3298,"text":{"java/strings/":{}},"title":{}}],["element",{"_index":112,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/graph-coloring/":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#iterators":{},"ds/array/vectors/#modifiers":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/array/vs-pointers/#similarities":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/set-map/map/":{},"ds/set-map/map/#maps":{},"ds/set-map/map/#multimap":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"ds/set-map/set/#set":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/annotations/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{}},"title":{"ds/array/vectors/#element-access":{}}}],["element,pop",{"_index":2198,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["elementari",{"_index":3431,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["elements.stream()",{"_index":2897,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["elif",{"_index":2501,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion":{}},"title":{}}],["elimin",{"_index":3001,"text":{"java/generics/":{},"java/generics/#why":{}},"title":{}}],["elogv",{"_index":1714,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["elseif",{"_index":3344,"text":{"php/atttributes/":{}},"title":{}}],["embed",{"_index":1950,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"php/intro/":{}},"title":{}}],["emplac",{"_index":1583,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["emplace_back",{"_index":1584,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{}},"title":{}}],["emplace_hint",{"_index":2137,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["employees.stream()",{"_index":2901,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["empti",{"_index":1339,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#how-to-optimise":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#problems":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["empty\\n\";",{"_index":2243,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["enabl",{"_index":3000,"text":{"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"php/intro/":{}},"title":{}}],["encapsul",{"_index":3226,"text":{"java/oops/":{}},"title":{"java/oops/#data-encapsulation":{}}}],["enclos",{"_index":3025,"text":{"java/inheritance/":{},"java/packages/":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}}}],["end",{"_index":599,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/array/vectors/#modifiers":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#dequeue":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"ds/string/intro/":{},"ds/string/intro/#input":{},"ds/string/intro/#iterator":{},"ds/string/intro/#manipulating":{},"java/collections/":{},"java/collections/#interfaces":{},"java/intro/":{},"java/intro/#platform":{},"php/basics/":{}},"title":{}}],["endif",{"_index":3370,"text":{"php/basics/":{},"php/basics/#html-escaping":{}},"title":{}}],["endl",{"_index":1454,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["endspe",{"_index":3093,"text":{"java/interfaces/":{}},"title":{}}],["engin",{"_index":686,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["enough",{"_index":811,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["enque(insertion)",{"_index":2047,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["enqueu",{"_index":2030,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/intro/#operations":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{"ds/queue/using-stack/#costly-enqueue":{}}}],["enqueue(int",{"_index":2065,"text":{"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}},"title":{}}],["enqueue(queue*",{"_index":2055,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["entir",{"_index":3225,"text":{"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{"java/packages/#importing-an-entire-package":{}}}],["entiti",{"_index":2708,"text":{"java/annotations/":{}},"title":{}}],["enum",{"_index":3089,"text":{"java/interfaces/":{}},"title":{}}],["enumer",{"_index":2548,"text":{"ds/tree/bt-enumeration/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{}},"title":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#binary-tree-enumeration":{}}}],["environ",{"_index":2768,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["equal",{"_index":492,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"java/basics/":{},"java/basics/#javautilarrays":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["equal_rang",{"_index":2136,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["equals(object",{"_index":3046,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["equat",{"_index":1014,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["equival",{"_index":639,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["eras",{"_index":1582,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{}},"title":{}}],["erase(const",{"_index":2121,"text":{"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["erase(iter",{"_index":2132,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["error",{"_index":1242,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"java/annotations/":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["escap",{"_index":3368,"text":{"php/basics/":{}},"title":{"php/basics/#html-escaping":{}}}],["especi",{"_index":3499,"text":{"php/intro/":{}},"title":{}}],["estim",{"_index":923,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["etc",{"_index":128,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["evalu",{"_index":1080,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["even",{"_index":168,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{},"algo/maths/#multiple-of-3":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/graph/intro/":{},"ds/graph/intro/#cons":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/handshaking-lemma/":{}},"title":{}}],["even_count",{"_index":191,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["event",{"_index":2993,"text":{"java/exceptions/":{}},"title":{}}],["evid",{"_index":3271,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["evolv",{"_index":3118,"text":{"java/interfaces/":{}},"title":{"java/interfaces/#evolving-interfaces":{}}}],["exact",{"_index":867,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["exactli",{"_index":3436,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["examin",{"_index":2705,"text":{"java/annotations/":{}},"title":{}}],["exampl",{"_index":159,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/classes/#reduction":{},"algo/analysis/examples/":{},"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#substitution-method":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{}},"title":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"ds/tree/binary-tree/#example":{}}}],["except",{"_index":2418,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/annotations/":{},"java/exceptions/":{}},"title":{"java/exceptions/":{}}}],["exchang",{"_index":2124,"text":{"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["exclud",{"_index":1024,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#without-it":{}},"title":{}}],["exclus",{"_index":2843,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["execut",{"_index":567,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"php/atttributes/":{},"php/intro/":{}},"title":{}}],["executeaction($copyaction);",{"_index":3361,"text":{"php/atttributes/":{}},"title":{}}],["executeaction(actionhandl",{"_index":3350,"text":{"php/atttributes/":{}},"title":{}}],["exercis",{"_index":1186,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{}},"title":{}}],["exist",{"_index":697,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["exit(0);",{"_index":2093,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}},"title":{}}],["exp",{"_index":3215,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["expand",{"_index":587,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["expect",{"_index":513,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["expens",{"_index":440,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{}},"title":{}}],["explan",{"_index":3380,"text":{"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["explicit",{"_index":3031,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["explicitli",{"_index":3042,"text":{"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{}}],["exponenti",{"_index":329,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/search/exponential/":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{}},"title":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{}}}],["exponentialsearch(int",{"_index":1168,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{}},"title":{}}],["express",{"_index":366,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/tree/traversal/":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"php/basics/":{},"php/basics/#html-escaping":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["ext",{"_index":1849,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"java/strings/":{}},"title":{}}],["extend",{"_index":257,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/oops/":{},"java/oops/#inheritance":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"java/interfaces/#extending-interfaces-that-contain-default-methods":{}}}],["extens",{"_index":3288,"text":{"java/strings/":{}},"title":{}}],["extensionsepar",{"_index":3285,"text":{"java/strings/":{}},"title":{}}],["extern",{"_index":3493,"text":{"php/intro/":{}},"title":{}}],["extra",{"_index":330,"text":{"algo/analysis/space/":{},"algo/analysis/space/#auxiliary-space":{},"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/traversal/":{},"ds/tree/traversal/#how-to-pick-one":{}},"title":{"ds/stack/k-stacks/#extra-2-integer-arrays":{}}}],["extract",{"_index":1705,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["extractmax",{"_index":1745,"text":{"ds/heap/intro/":{},"ds/heap/intro/#application":{}},"title":{}}],["extractmin",{"_index":1736,"text":{"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["extrem",{"_index":689,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["f",{"_index":395,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["f(k",{"_index":408,"text":{"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{}},"title":{}}],["f(k)*f(k)",{"_index":407,"text":{"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{}},"title":{}}],["f(k)]*f(k)",{"_index":405,"text":{"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{}},"title":{}}],["f(n)",{"_index":403,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#general-properties":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#reflexive-properties":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#symmetric-properties":{},"algo/analysis/intro/#transitive-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{}},"title":{}}],["f(n),",{"_index":1074,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["f(n).",{"_index":921,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{}}],["f(n)/g(n)",{"_index":930,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["f(n):",{"_index":875,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-drop":{}},"title":{}}],["f(n)=o(g(n))",{"_index":904,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["f(u,v)",{"_index":1669,"text":{"ds/graph/intro/":{},"ds/graph/intro/#properties":{}},"title":{}}],["f1(n)",{"_index":1151,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{}},"title":{}}],["f2(n)",{"_index":1155,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{}},"title":{}}],["f[0]",{"_index":342,"text":{"algo/maths/":{},"algo/maths/#method-2-dp":{}},"title":{}}],["f[0][0]",{"_index":382,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["f[0][0]*m[0][0]",{"_index":373,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["f[0][0]*m[0][1]",{"_index":375,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["f[0][0];",{"_index":370,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["f[0][1]",{"_index":383,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["f[0][1]*m[1][0];",{"_index":374,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["f[0][1]*m[1][1];",{"_index":376,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["f[1]",{"_index":343,"text":{"algo/maths/":{},"algo/maths/#method-2-dp":{}},"title":{}}],["f[1][0]",{"_index":384,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["f[1][0]*m[0][0]",{"_index":377,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["f[1][0]*m[0][1]",{"_index":380,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["f[1][1]",{"_index":385,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["f[1][1]*m[1][0];",{"_index":378,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["f[1][1]*m[1][1];",{"_index":381,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["f[2][2]",{"_index":367,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["f[2][2],",{"_index":371,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["f[i",{"_index":345,"text":{"algo/maths/":{},"algo/maths/#method-2-dp":{}},"title":{}}],["f[i]",{"_index":344,"text":{"algo/maths/":{},"algo/maths/#method-2-dp":{}},"title":{}}],["f[n",{"_index":341,"text":{"algo/maths/":{},"algo/maths/#method-2-dp":{}},"title":{}}],["f[n];",{"_index":346,"text":{"algo/maths/":{},"algo/maths/#method-2-dp":{}},"title":{}}],["f^k",{"_index":1721,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["f^k+2,",{"_index":1720,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["face",{"_index":758,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#vertex-coloring":{}},"title":{}}],["facebook",{"_index":1671,"text":{"ds/graph/intro/":{},"ds/graph/intro/#applications":{}},"title":{}}],["fact",{"_index":355,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/bst/":{}},"title":{"ds/tree/bst/#facts":{}}}],["factor",{"_index":1946,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["failur",{"_index":980,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["fall",{"_index":1083,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["fals",{"_index":1450,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{},"java/strings/":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["fast",{"_index":199,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/maths/":{},"algo/maths/#multiply-by-7":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["fast/slow",{"_index":1423,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["faster",{"_index":433,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["featur",{"_index":2154,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/java9%26beyond/":{}},"title":{}}],["few",{"_index":485,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{}},"title":{}}],["fib(int",{"_index":338,"text":{"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["fib(n",{"_index":339,"text":{"algo/maths/":{},"algo/maths/#method-1-recurssion":{}},"title":{}}],["fibonacci",{"_index":362,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{}},"title":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}}}],["fibonici",{"_index":323,"text":{"algo/maths/":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{}},"title":{"algo/maths/#fibonici":{}}}],["field",{"_index":1769,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"java/annotations/":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/basics/#variables":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["fifo",{"_index":2029,"text":{"ds/queue/intro/":{},"ds/queue/intro/#queue":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["file",{"_index":2046,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/tree/intro/":{},"ds/tree/intro/#why":{},"java/annotations/":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{},"java/packages/#why":{},"java/strings/":{},"php/basics/":{}},"title":{"java/packages/#managing-source-and-class-files":{}}}],["file(args[0]));",{"_index":2932,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["fileexist",{"_index":3339,"text":{"php/atttributes/":{}},"title":{}}],["filenam",{"_index":3282,"text":{"java/strings/":{},"php/atttributes/":{}},"title":{}}],["filename(str",{"_index":3286,"text":{"java/strings/":{}},"title":{}}],["fill",{"_index":24,"text":{"algo/bits/":{},"algo/bits/#unsigned-right-shift":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["filler",{"_index":17,"text":{"algo/bits/":{},"algo/bits/#signed-right-shift":{}},"title":{}}],["filter(collection<?>",{"_index":2912,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["filter_non",{"_index":424,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{}},"title":{}}],["finaal",{"_index":3067,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["final",{"_index":1111,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["find",{"_index":642,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/traversal/":{},"ds/tree/traversal/#how-to-pick-one":{},"java/generics/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["find(const",{"_index":2122,"text":{"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["find_p_s(node*",{"_index":2532,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["find_p_s(root",{"_index":2535,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["findm",{"_index":3300,"text":{"java/strings/":{}},"title":{}}],["findme.length();",{"_index":3304,"text":{"java/strings/":{}},"title":{}}],["findmelength",{"_index":3303,"text":{"java/strings/":{}},"title":{}}],["findmiddl",{"_index":2234,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["findpresuc(node*",{"_index":2526,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["findpresuc(root",{"_index":2529,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["fine",{"_index":872,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-drop":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{}},"title":{}}],["finit",{"_index":1662,"text":{"ds/graph/intro/":{},"ds/graph/intro/#properties":{},"ds/tree/handshaking-lemma/":{}},"title":{}}],["first",{"_index":286,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/classes/":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#traversal":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/deletion/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#traversal":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"php/basics/":{},"php/basics/#comments":{}},"title":{"algo/analysis/classes/#first-problem-as-np-complete":{},"ds/linked-list/deletion/#first":{},"ds/tree/traversal/#depth-first-traversals":{}}}],["fit",{"_index":1569,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["fix",{"_index":1313,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["flash",{"_index":1363,"text":{"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["flexibl",{"_index":2800,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{}},"title":{}}],["float",{"_index":261,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#square-root":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{"php/basics/#float":{}}}],["floatvar",{"_index":3189,"text":{"java/numbers/":{}},"title":{}}],["floor",{"_index":1766,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["floor((0.1+0.7)*10)",{"_index":3442,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["flow",{"_index":2847,"text":{"java/basics/":{},"java/exceptions/":{}},"title":{"java/basics/#control-flow":{}}}],["fn",{"_index":411,"text":{"algo/maths/":{},"algo/maths/#method-7-using-formula":{}},"title":{}}],["folder",{"_index":2427,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["follow",{"_index":119,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["font",{"_index":3375,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["foo",{"_index":3395,"text":{"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#object":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{}}],["foo(iter",{"_index":3468,"text":{"php/basics/":{},"php/basics/#iterable":{}},"title":{}}],["for(i",{"_index":239,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-3-space-optimised-2":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{}},"title":{}}],["for(int",{"_index":1510,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{}},"title":{}}],["for(j",{"_index":316,"text":{"algo/maths/":{},"algo/maths/#method-1-using-nested-loops":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{}},"title":{}}],["ford\u2013fulkerson",{"_index":1613,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["foreach",{"_index":3353,"text":{"php/atttributes/":{},"php/basics/":{},"php/basics/#iterable":{}},"title":{}}],["forget",{"_index":1894,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{}},"title":{}}],["form",{"_index":989,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"java/annotations/":{},"java/collections/":{},"java/inheritance/":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["format",{"_index":1948,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["format(local",{"_index":3193,"text":{"java/numbers/":{}},"title":{}}],["former",{"_index":3326,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["formula",{"_index":410,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/maths/":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{"algo/maths/#method-7-using-formula":{}}}],["forth",{"_index":2704,"text":{"java/annotations/":{}},"title":{}}],["fortun",{"_index":680,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{}},"title":{}}],["forward",{"_index":1278,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["foster",{"_index":2882,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["found",{"_index":1161,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"java/strings/":{}},"title":{}}],["foundit",{"_index":2861,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{}},"title":{}}],["four",{"_index":794,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["framework",{"_index":2776,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/collections/":{}},"title":{}}],["franklin",{"_index":2713,"text":{"java/annotations/":{}},"title":{}}],["free",{"_index":469,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["free(del);",{"_index":1887,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{}},"title":{}}],["free(head);",{"_index":2244,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["free(root);",{"_index":2502,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["free(st);",{"_index":2472,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{}},"title":{}}],["free(temp);",{"_index":1872,"text":{"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["frequenc",{"_index":771,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"ds/array/frequency/":{},"ds/string/frequency/":{}},"title":{"ds/array/frequency/":{},"ds/array/frequency/#frequency-of-a-number":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}}}],["frequent",{"_index":3136,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["fresh",{"_index":676,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["friendli",{"_index":820,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{}},"title":{}}],["front",{"_index":1419,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/intro/#operations":{}},"title":{"ds/linked-list/insertion/#front-o1":{}}}],["front(get",{"_index":2049,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["front(queue*",{"_index":2061,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["front+1;",{"_index":2022,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["frontbacksplit(head,",{"_index":1377,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["frontbacksplit(node*",{"_index":1383,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["frontref",{"_index":1385,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["full",{"_index":459,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/tree/binary-tree/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"ds/tree/binary-tree/#full":{},"ds/tree/binary-tree/#full-binary-tree":{}}}],["fulli",{"_index":3251,"text":{"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{}},"title":{}}],["fullpath",{"_index":3283,"text":{"java/strings/":{}},"title":{}}],["fullpath.lastindexof(extensionseparator);",{"_index":3290,"text":{"java/strings/":{}},"title":{}}],["fullpath.lastindexof(pathseparator);",{"_index":3292,"text":{"java/strings/":{}},"title":{}}],["fullpath.substring(0,",{"_index":3294,"text":{"java/strings/":{}},"title":{}}],["fullpath.substring(dot",{"_index":3291,"text":{"java/strings/":{}},"title":{}}],["fullpath.substring(sep",{"_index":3293,"text":{"java/strings/":{}},"title":{}}],["fun",{"_index":580,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["fun(i))",{"_index":583,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["fun(int",{"_index":715,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["fun1(int",{"_index":537,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["fun2(int",{"_index":544,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["function",{"_index":225,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-5-optimized-method-4":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/min-max/":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/functions/":{},"ds/queue/using-stack/":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#how-to-pick-one":{},"ds/tree/traversal/#space-complexity":{},"java/collections/":{},"java/inheritance/":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#why":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{},"php/basics/#iterable":{},"php/basics/#object":{},"php/basics/#types":{}},"title":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/min-max/#library-functions":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/#functions":{},"ds/string/string-to-no/#functions":{}}}],["functionalinterfac",{"_index":2760,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["funtion",{"_index":659,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["further",{"_index":1119,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["g",{"_index":647,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#chromatic-number":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["g(n)",{"_index":887,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#symmetric-properties":{},"algo/analysis/intro/#transitive-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{}},"title":{}}],["g(n),",{"_index":898,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["gap",{"_index":1089,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["garbag",{"_index":1610,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["gatewai",{"_index":3491,"text":{"php/intro/":{}},"title":{}}],["gear",{"_index":3243,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["gearratio",{"_index":2815,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["geek",{"_index":2362,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{}},"title":{}}],["geek(s);",{"_index":2361,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{}},"title":{}}],["gener",{"_index":664,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/intro/":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"php/intro/":{}},"title":{"algo/analysis/intro/#general-properties":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"java/generics/":{}}}],["generalis",{"_index":1987,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#dequeue":{}},"title":{}}],["generateprintbinary(int",{"_index":2068,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["generation2list",{"_index":2754,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["generation3list",{"_index":2753,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["geograph",{"_index":790,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["geometr",{"_index":1114,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["get",{"_index":3075,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/strings/":{}},"title":{}}],["get_alloc",{"_index":2141,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["get_resource_typ",{"_index":3471,"text":{"php/basics/":{},"php/basics/#reources":{}},"title":{}}],["getasdoubl",{"_index":2962,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{}},"title":{}}],["getavg",{"_index":417,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{}},"title":{}}],["getavg(float",{"_index":415,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{}},"title":{}}],["getavg(int",{"_index":425,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{}},"title":{}}],["getchar",{"_index":2406,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{}}],["getclass",{"_index":3050,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["getcount(head",{"_index":1869,"text":{"ds/linked-list/count/":{},"ds/linked-list/count/#recursive":{}},"title":{}}],["getcount(node*",{"_index":1867,"text":{"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{}},"title":{}}],["getcount(struct",{"_index":1868,"text":{"ds/linked-list/count/":{},"ds/linked-list/count/#recursive":{}},"title":{}}],["getfield",{"_index":3065,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["getfront",{"_index":1994,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["gethighest",{"_index":2083,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{}},"title":{}}],["gethighestprior",{"_index":2081,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#operations":{}},"title":{}}],["getlin",{"_index":2327,"text":{"ds/string/intro/":{},"ds/string/intro/#input":{}},"title":{}}],["getmax(arr",{"_index":1522,"text":{"ds/array/min-max/":{},"ds/array/min-max/#recursive":{}},"title":{}}],["getmax(int",{"_index":1520,"text":{"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{}},"title":{}}],["getmethod",{"_index":3066,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/atttributes/":{}},"title":{}}],["getmin",{"_index":1735,"text":{"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["getmin(arr",{"_index":1519,"text":{"ds/array/min-max/":{},"ds/array/min-max/#recursive":{}},"title":{}}],["getmin(int",{"_index":1517,"text":{"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{}},"title":{}}],["getnam",{"_index":3357,"text":{"php/atttributes/":{}},"title":{}}],["getnumeral(int",{"_index":251,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["getnumeral(res_nml);",{"_index":245,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["getnumeralvalue(char",{"_index":248,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["getnumeralvalue(num1[i]);",{"_index":240,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["getnumeralvalue(num2[i]);",{"_index":241,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["getradarfront(doubl",{"_index":3097,"text":{"java/interfaces/":{}},"title":{}}],["getradarrear(doubl",{"_index":3100,"text":{"java/interfaces/":{}},"title":{}}],["getrandom",{"_index":1472,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["getrear",{"_index":1995,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["gettyp",{"_index":3389,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["gettype($a_bool);",{"_index":3398,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["gettype($a_str);",{"_index":3399,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["give",{"_index":294,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"java/intro/":{},"java/intro/#programming-language":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["given",{"_index":301,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"algo/analysis/intro/":{},"algo/analysis/intro/#reflexive-properties":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/maths/":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bt-level-order/#given-level":{}}}],["global",{"_index":1890,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["gmp",{"_index":3447,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["go",{"_index":1422,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["goe",{"_index":2755,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["good",{"_index":810,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"java/intro/":{},"java/intro/#why":{},"php/security/":{}},"title":{}}],["gp",{"_index":1607,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["grade",{"_index":2850,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["graph",{"_index":641,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#chromatic-number":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{"algo/analysis/graph-coloring/":{},"ds/graph/intro/":{},"ds/graph/intro/#graph":{}}}],["graph::dfs()",{"_index":1648,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{}},"title":{}}],["graph::dfsutil(int",{"_index":1642,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{}},"title":{}}],["graphic",{"_index":1310,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{}}],["graphics.rectangle.*;",{"_index":3264,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["graphics.rectangle;",{"_index":3263,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#importing-a-package-member":{}},"title":{}}],["grater",{"_index":2196,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{}},"title":{}}],["great",{"_index":482,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["greater",{"_index":578,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{}},"title":{}}],["greedi",{"_index":815,"text":{"algo/analysis/graph-coloring/":{}},"title":{"algo/analysis/graph-coloring/#greedy-aproach":{}}}],["green",{"_index":3297,"text":{"java/strings/":{}},"title":{}}],["group",{"_index":2866,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/packages/":{}},"title":{}}],["groupedinterfac",{"_index":3102,"text":{"java/interfaces/":{}},"title":{}}],["grow",{"_index":2165,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["growth",{"_index":925,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["gt",{"_index":1251,"text":{},"title":{"algo/search/intro/#problem-m-lr2-might-overflow":{},"java/basics/#expressions-result9-blocks-statements-":{}}}],["guarante",{"_index":120,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["guess",{"_index":613,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{}},"title":{}}],["gui",{"_index":3153,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["guid",{"_index":3168,"text":{"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["h",{"_index":2408,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["h(11);",{"_index":1817,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h(left",{"_index":2420,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{}},"title":{}}],["h(right",{"_index":2421,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{}},"title":{}}],["h.decreasekey(2,",{"_index":1827,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h.deletekey(1);",{"_index":1820,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h.extractmin()",{"_index":1825,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h.getmin()",{"_index":1826,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h.getmin();",{"_index":1828,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h.insertkey(15);",{"_index":1821,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h.insertkey(2);",{"_index":1819,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h.insertkey(3);",{"_index":1818,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h.insertkey(4);",{"_index":1823,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h.insertkey(45);",{"_index":1824,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["h.insertkey(5);",{"_index":1822,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["hair",{"_index":1859,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["half",{"_index":982,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["halv",{"_index":288,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["ham",{"_index":3299,"text":{"java/strings/":{}},"title":{}}],["hand",{"_index":1097,"text":{"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"php/basics/":{}},"title":{}}],["handl",{"_index":2603,"text":{"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["handler",{"_index":2997,"text":{"java/exceptions/":{}},"title":{}}],["handshak",{"_index":2608,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}}}],["hanoi",{"_index":2157,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["happen",{"_index":2524,"text":{"ds/tree/bst/":{},"ds/tree/bst/#minvalue":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["hard",{"_index":623,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{}},"title":{}}],["hardest",{"_index":618,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{}},"title":{}}],["hardwar",{"_index":3144,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["harr",{"_index":1774,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["harr[0]",{"_index":1803,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["harr[0];",{"_index":1785,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["harr[heap_s",{"_index":1804,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["harr[i]",{"_index":1794,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["harr[i])",{"_index":1796,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["harr[l]",{"_index":1812,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["harr[parent(i)]",{"_index":1795,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["harr[r]",{"_index":1813,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["harr[smallest])",{"_index":1814,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["hash",{"_index":444,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/search/intro/":{},"algo/search/intro/#searching":{},"ds/array/frequency/":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{"ds/array/frequency/#hashing":{}}}],["hashcod",{"_index":3051,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["hashmap<string,",{"_index":2928,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["hasnext",{"_index":2910,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["have",{"_index":113,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#without-it":{}},"title":{}}],["head",{"_index":1341,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#insertion":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"php/intro/":{}},"title":{}}],["head_ref",{"_index":1428,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{}},"title":{}}],["headref",{"_index":1374,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["heap",{"_index":1143,"text":{"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#binary-heap":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/priority-queue/":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/binary-tree/#complete-binary-tree":{}},"title":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/heap-sort/":{},"ds/heap/intro/":{},"ds/heap/intro/#binary-heap":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/priority-queue/#heap":{}}}],["heap_siz",{"_index":1775,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["heapifi",{"_index":1737,"text":{"ds/heap/intro/":{},"ds/heap/intro/#operations":{}},"title":{}}],["heapsort",{"_index":1360,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["height",{"_index":1076,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bt-height/":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{}},"title":{"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{}}}],["height(nod",{"_index":2578,"text":{"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{}},"title":{}}],["height(node*",{"_index":2576,"text":{"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{}},"title":{}}],["height(root);",{"_index":2591,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["hello",{"_index":3474,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["helloworld",{"_index":3003,"text":{},"title":{"java/helloworld/":{}}}],["helloworldapp",{"_index":3004,"text":{"java/helloworld/":{}},"title":{}}],["help",{"_index":3372,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["henc",{"_index":934,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#without-it":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["here",{"_index":577,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/oops/":{},"java/oops/#inheritance":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["hexadecim",{"_index":3179,"text":{"java/numbers/":{},"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["hi",{"_index":1207,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"php/intro/":{}},"title":{}}],["hidden",{"_index":1718,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["hide",{"_index":3019,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/oops/#why":{}},"title":{"java/inheritance/#overriding-and-hiding-methods":{}}}],["hierarch",{"_index":2426,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"ds/tree/intro/#tree":{},"ds/tree/intro/#why":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["hierarchi",{"_index":2872,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/packages/":{}},"title":{"java/packages/#apparent-hierarchies-of-packages":{}}}],["high",{"_index":453,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{}},"title":{}}],["higher",{"_index":1763,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["highest",{"_index":2079,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#heap":{},"ds/queue/priority-queue/#queue-with-properties":{}},"title":{}}],["histogram",{"_index":2159,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["histor",{"_index":3119,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["hold",{"_index":2888,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["home",{"_index":0,"text":{},"title":{"":{}}}],["horner\u2019",{"_index":1057,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["hour",{"_index":2793,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["hour=\"23\")",{"_index":2779,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["html",{"_index":3367,"text":{"php/basics/":{},"php/basics/#comments":{},"php/intro/":{}},"title":{"php/basics/#html-escaping":{}}}],["http",{"_index":1414,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["http://en.wikipedia.org/wiki/four_color_theorem",{"_index":797,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["http://locklessinc.com/articles/binary_search/",{"_index":1237,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["http://wiki.c2.com/?globalvariablesarebad",{"_index":1893,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{}},"title":{}}],["http://www.csd.uwo.ca/~moreno//cs424/ressources/master.pdf",{"_index":1094,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["https://4comprehension.com/keep",{"_index":3166,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://codete.com/blog/java",{"_index":3167,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://dev.to/awwsmm/20",{"_index":3164,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://www.geeksforgeeks.org/analysi",{"_index":529,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["https://www.geeksforgeeks.org/bipartit",{"_index":789,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["https://www.geeksforgeeks.org/handshak",{"_index":2416,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#full-binary-tree":{}},"title":{}}],["https://www.geeksforgeeks.org/tim",{"_index":586,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["https://www.infoworld.com/article/3606833/jdk",{"_index":3170,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://www.javatpoint.com/java",{"_index":3169,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://www.marcobehler.com/guides/a",{"_index":3172,"text":{"java/java9%26beyond/":{}},"title":{}}],["huge",{"_index":1361,"text":{"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["human",{"_index":3390,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["hypertext",{"_index":3495,"text":{"php/intro/":{}},"title":{}}],["hyphen",{"_index":3259,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["i'm",{"_index":3503,"text":{"php/intro/":{}},"title":{}}],["i)+1]",{"_index":1729,"text":{"ds/heap/intro/":{},"ds/heap/intro/#arrays":{}},"title":{}}],["i)+2]",{"_index":1731,"text":{"ds/heap/intro/":{},"ds/heap/intro/#arrays":{}},"title":{}}],["i*2;",{"_index":1171,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{}},"title":{}}],["i+1);",{"_index":309,"text":{"algo/maths/":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}},"title":{}}],["i+1;",{"_index":1285,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["i.",{"_index":901,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["i.e.",{"_index":650,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#full-binary-tree":{}},"title":{}}],["i.e.,",{"_index":847,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["i/2",{"_index":1165,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{}},"title":{}}],["i/2,",{"_index":1173,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{}},"title":{}}],["i/2?",{"_index":1166,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{}},"title":{}}],["i:=1",{"_index":1034,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["i<26;",{"_index":2317,"text":{"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["i<26;i++){",{"_index":2312,"text":{"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{}},"title":{}}],["i<=n;",{"_index":703,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["i<data_size;",{"_index":1900,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["i<n",{"_index":2220,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["i<r;",{"_index":540,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["i<s.size();i++)",{"_index":2316,"text":{"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["i=0;",{"_index":539,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["i=0;i<6;i++)",{"_index":1511,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["i=1;",{"_index":720,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["i>=1;",{"_index":2593,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{}},"title":{}}],["idea",{"_index":456,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#reduction":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["ident",{"_index":2968,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["idl",{"_index":3155,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["ieee",{"_index":3427,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["if(!(m",{"_index":2240,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["if(!root)",{"_index":2534,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["if(!visited[*i])",{"_index":1646,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{}},"title":{}}],["if((!*q)",{"_index":2537,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["if(*head_ref",{"_index":1871,"text":{"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#first":{}},"title":{}}],["if(a",{"_index":1394,"text":{"algo/sort/merge/":{},"algo/sort/merge/#local-reference":{}},"title":{}}],["if(b)",{"_index":320,"text":{"algo/maths/":{},"algo/maths/#method-2-using-recursion":{}},"title":{}}],["if(carri",{"_index":246,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["if(count",{"_index":206,"text":{"algo/maths/":{},"algo/maths/#lucky-number":{}},"title":{}}],["if(count[i]>0){",{"_index":2318,"text":{"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["if(count[i]>1)",{"_index":2313,"text":{"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{}},"title":{}}],["if(i",{"_index":278,"text":{"algo/maths/":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{}},"title":{}}],["if(i==j)",{"_index":2347,"text":{"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{}},"title":{}}],["if(isempty()",{"_index":2027,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["if(l1",{"_index":224,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["if(mor",{"_index":2694,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["if(n",{"_index":207,"text":{"algo/maths/":{},"algo/maths/#lucky-number":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}},"title":{}}],["if(res_nml",{"_index":242,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["if(root",{"_index":2538,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["if(root&&root",{"_index":2536,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["if(small(a,",{"_index":1148,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{}},"title":{}}],["if(st.size()",{"_index":2255,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["if(st.size()>0)",{"_index":2261,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["if(str[i]==str[j])",{"_index":2346,"text":{"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{}},"title":{}}],["if(temp",{"_index":1889,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["if(y)",{"_index":318,"text":{"algo/maths/":{},"algo/maths/#method-2-using-recursion":{}},"title":{}}],["ignor",{"_index":533,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["iiop",{"_index":3159,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["illustr",{"_index":984,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["imag",{"_index":1406,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{}},"title":{}}],["immedi",{"_index":2032,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["immut",{"_index":2129,"text":{"ds/set-map/set/":{},"ds/set-map/set/#set":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["impact",{"_index":1272,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["implement",{"_index":536,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/generic/":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/collections/":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/queue/dequeue/#implementation":{},"ds/queue/intro/#implementation":{},"ds/queue/priority-queue/#implementation":{},"ds/stack/intro/#implementation":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"java/collections/#custom-implementation":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}}}],["implicit",{"_index":3028,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["implicitli",{"_index":3024,"text":{"java/inheritance/":{},"java/interfaces/":{}},"title":{}}],["import",{"_index":486,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#reduction":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/numbers/#advanced-math":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#importing-a-package-member":{},"java/packages/#importing-an-entire-package":{},"java/packages/#static-import":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#importing-a-package-member":{},"java/packages/#importing-an-entire-package":{},"java/packages/#static-import":{}}}],["imposs",{"_index":678,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["impract",{"_index":694,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["improv",{"_index":267,"text":{"algo/maths/":{},"algo/maths/#square-root":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["inbuilt",{"_index":2326,"text":{"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"java/annotations/":{}},"title":{"java/annotations/#java-inbuilt":{}}}],["incid",{"_index":1673,"text":{"ds/graph/intro/":{},"ds/graph/intro/#representation":{}},"title":{}}],["includ",{"_index":839,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#name-ambiguities":{},"java/packages/#why":{}},"title":{}}],["inclus",{"_index":2844,"text":{"java/basics/":{},"java/basics/#operators":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["incorrect",{"_index":1105,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{}},"title":{}}],["increas",{"_index":457,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"java/collections/":{},"java/collections/#why":{}},"title":{}}],["increment",{"_index":314,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/maths/":{},"algo/maths/#method-1-using-nested-loops":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/oops/":{},"java/oops/#interface":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["independ",{"_index":2886,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["index",{"_index":1164,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/array/intro/":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}}}],["indic",{"_index":993,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["indirect",{"_index":3027,"text":{"java/inheritance/":{}},"title":{}}],["individu",{"_index":590,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"java/oops/":{},"java/oops/#class":{}},"title":{}}],["induct",{"_index":1103,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{}},"title":{}}],["ineffici",{"_index":2193,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["inequ",{"_index":1015,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["infinit",{"_index":1136,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{}},"title":{}}],["infix",{"_index":2148,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["info",{"_index":1672,"text":{"ds/graph/intro/":{},"ds/graph/intro/#applications":{}},"title":{}}],["inform",{"_index":2636,"text":{"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/annotations/":{},"java/oops/":{},"java/oops/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["infrequ",{"_index":3261,"text":{"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{}}],["inheret",{"_index":2771,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["inherit",{"_index":2770,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/oops/":{}},"title":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/oops/#inheritance":{}}}],["initi",{"_index":264,"text":{"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#square-root":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["inner",{"_index":1300,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["innermost",{"_index":565,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["inord",{"_index":1758,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#facts":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/k-smallest/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{}},"title":{"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/traversal/#inorder":{}}}],["inorder(current1);",{"_index":2490,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["inorder(current2);",{"_index":2487,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["inorder(node*",{"_index":2676,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{}},"title":{}}],["inorder(root1);",{"_index":2480,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["inorder(root2);",{"_index":2479,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["inorder(temp",{"_index":2677,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{}},"title":{}}],["input",{"_index":110,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"ds/string/intro/":{},"ds/string/intro/#input":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{}},"title":{"ds/string/intro/#input":{}}}],["insert",{"_index":449,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/graph/intro/":{},"ds/graph/intro/#cons":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/insertion/":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/xor-dll/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#heap":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/bst/":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{"algo/sort/intro/#insertion-sort":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#insertion":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/xor-dll/#insert":{},"ds/tree/bst/#insert":{},"ds/tree/bst/#insertion":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{}}}],["insert(const",{"_index":2130,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["insert(item,",{"_index":2080,"text":{"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#operations":{}},"title":{}}],["insert(keyvalue,",{"_index":2106,"text":{"ds/set-map/map/":{},"ds/set-map/map/#maps":{}},"title":{}}],["insert(keyvalue,multimapvalue)",{"_index":2111,"text":{"ds/set-map/map/":{},"ds/set-map/map/#multimap":{}},"title":{}}],["insert(nod",{"_index":1982,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/tree/bst/":{},"ds/tree/bst/#insertion":{}},"title":{}}],["insert(node*",{"_index":2647,"text":{"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}},"title":{}}],["insert(root",{"_index":2514,"text":{"ds/tree/bst/":{},"ds/tree/bst/#insert":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}},"title":{}}],["insert(struct",{"_index":2495,"text":{"ds/tree/bst/":{},"ds/tree/bst/#insertion":{}},"title":{}}],["insert_at_bottom(char",{"_index":2254,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["insert_at_bottom(x);",{"_index":2259,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["insertafter(node*",{"_index":1881,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{}},"title":{}}],["insertfront",{"_index":1988,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["insertfront(int",{"_index":2009,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["insertion/delet",{"_index":2634,"text":{"ds/tree/intro/":{},"ds/tree/intro/#why":{}},"title":{}}],["insertionsort(int",{"_index":1321,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["insertkey(int",{"_index":1787,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["insertkey\\n\";",{"_index":1793,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["insertnode(node*",{"_index":2582,"text":{"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{}},"title":{}}],["insertrear",{"_index":1990,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#operations":{}},"title":{}}],["insertrear(int",{"_index":2010,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["insid",{"_index":592,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["instal",{"_index":806,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["instanc",{"_index":773,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"java/annotations/":{},"java/basics/":{},"java/basics/#variables":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/oops/":{},"java/oops/#class":{}},"title":{}}],["instanceof",{"_index":2842,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["instanti",{"_index":3068,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{}},"title":{}}],["instead",{"_index":1277,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["instruct",{"_index":2996,"text":{"java/exceptions/":{}},"title":{}}],["int",{"_index":39,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#iterative":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{},"algo/bits/#recursive":{},"algo/bits/#ternery":{},"algo/bits/#xor":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#lucky-number":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/intro/#introduction":{},"ds/array/intro/#traversal":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#string-to-double":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#representaion":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{},"php/basics/":{},"php/basics/#types":{}},"title":{"algo/bits/#32-bit-ints":{}}}],["int)high))",{"_index":1236,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["int)low",{"_index":1235,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["int[10];",{"_index":2818,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["int[cap];",{"_index":1790,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["int[k];",{"_index":2218,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["int[n];",{"_index":2217,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["int_max",{"_index":1802,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{}},"title":{}}],["int_min",{"_index":1808,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{}},"title":{}}],["integ",{"_index":33,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/bits/":{},"algo/maths/":{},"algo/maths/#multiply-by-7":{},"ds/stack/k-stacks/":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/numbers/":{},"php/basics/":{},"php/basics/#string":{},"php/basics/#types":{}},"title":{"algo/bits/#detect-if-two-integers-have-opposite-signs":{},"algo/bits/#smallest-of-three-integers-without-comparison-operators":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"php/basics/#integers":{}}}],["integer.parseint(args[1]);",{"_index":2924,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["integer::sum)));",{"_index":2989,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["integr",{"_index":2377,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#string-to-double":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["interact",{"_index":3227,"text":{"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["interest",{"_index":1710,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["interfac",{"_index":2741,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/intro/":{},"java/intro/#platform":{},"java/oops/":{},"java/oops/#interface":{},"java/oops/#package":{},"java/packages/":{},"php/atttributes/":{},"php/intro/":{}},"title":{"java/collections/#interfaces":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/oops/#interface":{}}}],["interface1",{"_index":3103,"text":{"java/interfaces/":{}},"title":{}}],["interface2",{"_index":3104,"text":{"java/interfaces/":{}},"title":{}}],["interface3",{"_index":3105,"text":{"java/interfaces/":{}},"title":{}}],["intern",{"_index":1349,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"java/annotations/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["internet",{"_index":801,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["interoper",{"_index":2879,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{"java/collections/#interoperability":{}}}],["interpol",{"_index":1197,"text":{"algo/search/interpolation/":{}},"title":{"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#interpolation-vs-binary":{}}}],["interpolationsearch(arr,",{"_index":1217,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#reursive":{}},"title":{}}],["interpolationsearch(int",{"_index":1206,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{}},"title":{}}],["intersect",{"_index":1320,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["intro",{"_index":3490,"text":{},"title":{"php/intro/":{}}}],["introduct",{"_index":530,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/array/intro/":{}},"title":{"ds/array/intro/":{},"ds/array/intro/#introduction":{}}}],["intvar",{"_index":3190,"text":{"java/numbers/":{}},"title":{}}],["invalid",{"_index":2854,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["invert",{"_index":2839,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["invoc",{"_index":3040,"text":{"java/inheritance/":{}},"title":{"java/inheritance/#virtual-method-invocation":{}}}],["invok",{"_index":3023,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#super-keyword":{}},"title":{}}],["involv",{"_index":509,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/dac/intro/":{},"algo/dac/intro/#divide":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["io",{"_index":2043,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{"java/IO/":{}}}],["ioexcept",{"_index":2944,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["iostream",{"_index":1469,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{}},"title":{}}],["is_typ",{"_index":3392,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["isannot",{"_index":3061,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["isbst(node*",{"_index":2452,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{}},"title":{}}],["isbst(root",{"_index":2461,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{}},"title":{}}],["isbst(struct",{"_index":2445,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{}},"title":{}}],["isbstutil(nod",{"_index":2456,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{}},"title":{}}],["isbstutil(node*",{"_index":2454,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{}},"title":{}}],["isempti",{"_index":1993,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#stack":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["isempty(int",{"_index":2212,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["isempty(queue*",{"_index":2054,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["isempty(snod",{"_index":2473,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{}},"title":{}}],["isempty(stacknode*",{"_index":2183,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["isenum",{"_index":3063,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["isful",{"_index":1992,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#operations":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["isfull(queue*",{"_index":2053,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["isinterfac",{"_index":3062,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["islargerthan",{"_index":3111,"text":{"java/interfaces/":{}},"title":{}}],["islargerthan(relat",{"_index":3112,"text":{"java/interfaces/":{}},"title":{}}],["islucky(int",{"_index":202,"text":{"algo/maths/":{},"algo/maths/#lucky-number":{}},"title":{}}],["islucky(next_position);",{"_index":208,"text":{"algo/maths/":{},"algo/maths/#lucky-number":{}},"title":{}}],["ismultipleof3(abs(odd_count",{"_index":192,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["ismultipleof3(int",{"_index":189,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["isthereanedg",{"_index":1677,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/graph/intro/#pros":{}},"title":{}}],["it'",{"_index":2653,"text":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"java/intro/":{},"java/intro/#why":{},"java/strings/":{},"java/strings/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["it.hasnext();",{"_index":2914,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["it.remove();",{"_index":2916,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["item",{"_index":472,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{}},"title":{}}],["iter",{"_index":77,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/bits/":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/interpolation/":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/array/reverse/":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/linked-list/count/":{},"ds/linked-list/reverse/":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"ds/string/intro/":{},"ds/string/intro/#iterator":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#iterable":{},"php/basics/#types":{}},"title":{"algo/bits/#iterative":{},"algo/search/interpolation/#iterative":{},"algo/search/intro/#iterative":{},"ds/array/reverse/#iterative":{},"ds/array/vectors/#iterators":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/reverse/#iterative":{},"ds/string/intro/#iterator":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"java/collections/#aggregate-operations-vs-iterators":{},"php/basics/#iterable":{}}}],["iterativesearch(nod",{"_index":2602,"text":{"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{}},"title":{}}],["iterator<e>",{"_index":2909,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["ith",{"_index":1333,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-list":{}},"title":{}}],["itself",{"_index":263,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#square-root":{},"java/annotations/":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["it\u2019",{"_index":629,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{}},"title":{}}],["j",{"_index":315,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#method-1-using-nested-loops":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{}},"title":{}}],["j<=log(i);",{"_index":705,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["j<=p;",{"_index":722,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["j<c;",{"_index":542,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["j<n;",{"_index":2345,"text":{"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{}},"title":{}}],["j=0;",{"_index":541,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["j=1;",{"_index":721,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["jane",{"_index":2721,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["januari",{"_index":2853,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["jar",{"_index":3280,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["java",{"_index":7,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/bits/":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/java9%26beyond/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#naming":{},"java/packages/#static-import":{},"java/strings/":{}},"title":{"algo/bits/#java":{},"java/annotations/#java-inbuilt":{},"java/intro/":{},"java/intro/#what-is-java":{}}}],["java.awt",{"_index":3269,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["java.awt.xxxx",{"_index":3268,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["java.io.*;",{"_index":2919,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["java.lang",{"_index":3060,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["java.lang.annot",{"_index":2707,"text":{"java/annotations/":{}},"title":{}}],["java.lang.annotation.repeatable;",{"_index":2788,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["java.lang.math.*;",{"_index":3211,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["java.lang.str",{"_index":2807,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["java.text.decimalformat(...)",{"_index":3194,"text":{"java/numbers/":{}},"title":{}}],["java.util.*;",{"_index":2918,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["java.util.arrai",{"_index":2825,"text":{"java/basics/":{}},"title":{"java/basics/#javautilarrays":{}}}],["java.util.arrays.copyofrange(copyfrom,",{"_index":2824,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["java.util.arrays.stream(copyto).map(coffe",{"_index":2828,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["java.util.random",{"_index":3218,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["java9&beyond",{"_index":3163,"text":{},"title":{"java/java9%26beyond/":{}}}],["javabean",{"_index":3161,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["javac",{"_index":3146,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["javadoc",{"_index":2769,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/helloworld/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["javafx",{"_index":3151,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["javase/tutori",{"_index":3129,"text":{"java/intro/":{},"java/intro/#what-is-java":{}},"title":{}}],["javax",{"_index":3257,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["jdbc",{"_index":3156,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{"java/jdbc/":{}}}],["jndi",{"_index":3157,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["job",{"_index":1654,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["john",{"_index":2724,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["join",{"_index":2896,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["jone",{"_index":2821,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["jsp",{"_index":3173,"text":{},"title":{"java/jsp/":{}}}],["juggl",{"_index":3488,"text":{"php/basics/":{}},"title":{"php/basics/#type-juggling-and-declartion":{}}}],["jump",{"_index":1252,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}}}],["jumpsearch(int",{"_index":1260,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{}}],["jvm",{"_index":2766,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["k",{"_index":305,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#k-stacks":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#k-smallest":{}}}],["k*i",{"_index":2618,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["k1",{"_index":2215,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["k=1",{"_index":727,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["k=2",{"_index":732,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["k=3",{"_index":739,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["keep",{"_index":292,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["kei",{"_index":975,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/set-map/map/":{},"ds/set-map/map/#maps":{},"ds/set-map/map/#multimap":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#facts":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{}},"title":{"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}}}],["key(let\u2019",{"_index":1274,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["key_comp",{"_index":2112,"text":{"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["key_nod",{"_index":2546,"text":{"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{}},"title":{}}],["keyword",{"_index":2814,"text":{"java/basics/":{},"java/basics/#naming":{},"java/inheritance/":{},"java/packages/":{},"java/packages/#naming":{}},"title":{"java/inheritance/#super-keyword":{}}}],["knapsack",{"_index":1098,"text":{"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{}},"title":{}}],["knight",{"_index":2161,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["know",{"_index":122,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#worst-case":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#recursive":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"java/interfaces/":{}},"title":{}}],["known",{"_index":622,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"java/collections/":{},"java/collections/#interfaces":{},"java/oops/":{},"java/oops/#class":{}},"title":{}}],["kstack",{"_index":2208,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["kstacks(int",{"_index":2209,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["kstacks::kstacks(int",{"_index":2214,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["kstacks::pop(int",{"_index":2229,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["kstacks::push(int",{"_index":2223,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["kth",{"_index":1722,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["kthsmallest(node*",{"_index":2642,"text":{"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}},"title":{}}],["kthsmallest(root",{"_index":2643,"text":{"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}},"title":{}}],["k\u2019th",{"_index":1750,"text":{"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["k\u2265|log2n|",{"_index":987,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["l",{"_index":615,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#np":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#recursive":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-1":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{}},"title":{}}],["l(n)",{"_index":944,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{}},"title":{}}],["l)/3;",{"_index":1190,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["l.add(word);",{"_index":2942,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["l1",{"_index":216,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["l2",{"_index":218,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["l=new",{"_index":2940,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["l=null,",{"_index":2459,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#simplified-method-3":{}},"title":{}}],["label",{"_index":2573,"text":{"ds/tree/bt-enumeration/":{}},"title":{"ds/tree/bt-enumeration/#labeled-trees":{}}}],["lambda",{"_index":2965,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["languag",{"_index":3130,"text":{"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#naming":{},"java/strings/":{},"php/intro/":{}},"title":{"java/intro/#programming-language":{}}}],["larg",{"_index":711,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["larger",{"_index":463,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["largest",{"_index":1258,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{}},"title":{}}],["largest/smallest",{"_index":1767,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["last",{"_index":1163,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#iterators":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/string/intro/":{},"ds/string/intro/#input":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"php/basics/":{},"php/basics/#float":{}},"title":{"ds/linked-list/insertion/#last-on":{}}}],["lastmodifi",{"_index":2744,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["lastmodifiedbi",{"_index":2746,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["lastptrref",{"_index":1391,"text":{"algo/sort/merge/":{},"algo/sort/merge/#local-reference":{}},"title":{}}],["lazi",{"_index":1704,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["lca",{"_index":2651,"text":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["lca(root",{"_index":2656,"text":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["lcount",{"_index":2645,"text":{"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}},"title":{}}],["lead",{"_index":871,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["leaf",{"_index":990,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{}},"title":{}}],["leaf):ther",{"_index":2615,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["learn",{"_index":663,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"java/collections/":{},"java/collections/#why":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["leav",{"_index":1075,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"ds/tree/traversal/":{},"ds/tree/traversal/#how-to-pick-one":{}},"title":{}}],["left",{"_index":1222,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/heap/intro/":{},"ds/heap/intro/#arrays":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#binary-tree":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#representaion":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#traversal":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{}},"title":{}}],["left(i);",{"_index":1810,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["left(int",{"_index":1780,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["leftlast",{"_index":1836,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}},"title":{}}],["leftlist",{"_index":1834,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}},"title":{}}],["legaci",{"_index":2373,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#stoi-vs-atoi":{}},"title":{}}],["lemma",{"_index":2417,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}}}],["len",{"_index":2329,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"java/strings/":{}},"title":{}}],["length",{"_index":229,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{},"ds/string/intro/#manipulating":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#naming":{}},"title":{}}],["less",{"_index":491,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#without-it":{},"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["lesser",{"_index":2504,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion":{}},"title":{}}],["let",{"_index":1043,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["letter",{"_index":2811,"text":{"java/basics/":{},"java/basics/#naming":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["let\u2019",{"_index":169,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["level",{"_index":274,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/maths/":{},"algo/maths/#square-root":{},"ds/heap/intro/":{},"ds/heap/intro/#traversal":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#traversal":{},"ds/tree/traversal/#using-call-stack":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#why":{}},"title":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#level-order":{}}}],["lheight",{"_index":2577,"text":{"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{}},"title":{}}],["li",{"_index":2652,"text":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["librari",{"_index":665,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"ds/array/min-max/":{},"java/intro/":{},"java/intro/#platform":{},"java/oops/":{}},"title":{"ds/array/min-max/#library-functions":{},"java/oops/#library":{}}}],["library.package.class",{"_index":3253,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["life",{"_index":2145,"text":{"ds/stack/intro/":{},"ds/stack/intro/#stack":{}},"title":{}}],["lifespan",{"_index":1364,"text":{"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{}},"title":{}}],["lifo/filo",{"_index":2144,"text":{"ds/stack/intro/":{},"ds/stack/intro/#stack":{}},"title":{}}],["lim",{"_index":929,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["limit",{"_index":2635,"text":{"ds/tree/intro/":{},"ds/tree/intro/#why":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["line",{"_index":1009,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{},"java/helloworld/":{},"java/strings/":{},"php/basics/":{},"php/basics/#comments":{},"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["linear",{"_index":597,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{}},"title":{"algo/search/intro/#linear-search":{}}}],["link",{"_index":1337,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#how-to-optimise":{},"ds/linked-list/vs-array/#linked-list":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/priority-queue/":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"ds/tree/intro/":{},"ds/tree/intro/#why":{},"php/security/":{}},"title":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/linked-list/vs-array/#linked-list-vs-arrays":{},"ds/queue/dequeue/#doubly-linked-list":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/#linked-list":{},"ds/stack/intro/#linked-list":{}}}],["linkedlistnod",{"_index":1926,"text":{"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["list",{"_index":967,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-list":{},"ds/graph/intro/#cons_1":{},"ds/graph/intro/#representation":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#how-to-optimise":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/priority-queue/":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"ds/tree/intro/#why":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{"ds/graph/intro/#adjacency-list":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/linked-list/vs-array/#linked-list-vs-arrays":{},"ds/queue/dequeue/#doubly-linked-list":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/#linked-list":{},"ds/stack/intro/#linked-list":{}}}],["list<@readonli",{"_index":2734,"text":{"java/annotations/":{}},"title":{}}],["list<int>",{"_index":1623,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["list<int>::iter",{"_index":1627,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["list<string>",{"_index":2937,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["list<string>>",{"_index":2927,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["list<string>>();",{"_index":2929,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["liter",{"_index":2371,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"java/strings/":{}},"title":{}}],["littl",{"_index":594,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#some-more-properties":{},"php/basics/":{},"php/basics/#string":{}},"title":{"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}}}],["ll",{"_index":1843,"text":{"ds/linked-list/cll/":{},"ds/linked-list/dll/":{},"ds/linked-list/reverse/":{}},"title":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#reverse-ll":{}}}],["lo",{"_index":1201,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{}},"title":{}}],["local",{"_index":550,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/sort/merge/":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/basics/":{},"java/basics/#variables":{},"java/strings/":{},"java/strings/#why":{}},"title":{"algo/sort/merge/#local-reference":{}}}],["locat",{"_index":552,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{}},"title":{}}],["log",{"_index":675,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["log(log(n))",{"_index":1218,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{}},"title":{}}],["log(n).",{"_index":988,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["log2(n!)",{"_index":1358,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["log2(n+1)",{"_index":2414,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{}},"title":{}}],["log23",{"_index":1185,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["log2l",{"_index":2415,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{}},"title":{}}],["log2n",{"_index":1184,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{}},"title":{}}],["logarithm",{"_index":3106,"text":{"java/interfaces/":{}},"title":{}}],["logba",{"_index":1068,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{}},"title":{}}],["logbn",{"_index":1077,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["logcn",{"_index":573,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["logic",{"_index":2659,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["logn",{"_index":1084,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["long",{"_index":2803,"text":{"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{}},"title":{}}],["look",{"_index":971,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["lookup",{"_index":2435,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["loop",{"_index":57,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#simple":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{}}}],["loos",{"_index":920,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{}}],["loss",{"_index":1442,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["lot",{"_index":667,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["low",{"_index":870,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["lower",{"_index":438,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#naming":{}},"title":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-and-upper-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}}}],["lower_bound(const",{"_index":2134,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["lowest",{"_index":2649,"text":{"ds/tree/lowest-common-ancestor/":{}},"title":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}}}],["lucki",{"_index":201,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/maths/":{}},"title":{"algo/maths/#lucky-number":{}}}],["m",{"_index":356,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{"algo/search/intro/#problem-m-lr2-might-overflow":{}}}],["m.get(alpha);",{"_index":2938,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["m.put(alpha,",{"_index":2939,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["m.values())",{"_index":2949,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["m[0][0]",{"_index":396,"text":{"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["m[0][1]",{"_index":398,"text":{"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["m[1][0];",{"_index":397,"text":{"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["m[1][1];",{"_index":399,"text":{"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["m[2][2]",{"_index":387,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["m[2][2])",{"_index":372,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["machin",{"_index":606,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#p":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#programming-language":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["made",{"_index":1276,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["magic",{"_index":612,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{}},"title":{}}],["main",{"_index":144,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{"ds/linked-list/bin-tree-cdll/#main-function":{}}}],["main(string[]",{"_index":2921,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/strings/":{}},"title":{}}],["mainli",{"_index":1071,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["maintain",{"_index":823,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#how-to-optimise":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["major",{"_index":547,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"ds/array/multi-dimensional/":{}},"title":{"ds/array/multi-dimensional/#row-major-in-c":{}}}],["make",{"_index":116,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/basics/":{},"java/basics/#control-flow":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["male",{"_index":2980,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["malloc",{"_index":1953,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{}},"title":{}}],["malloc(data_size);",{"_index":1898,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["manag",{"_index":1955,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/packages/#managing-source-and-class-files":{}}}],["mani",{"_index":591,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/intro/#why":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#polymorphism":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{}}],["manipul",{"_index":1880,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/set-map/set/":{},"ds/string/intro/":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/collections/":{},"java/collections/#interfaces":{},"java/intro/":{},"java/intro/#platform":{},"java/numbers/":{}},"title":{"ds/set-map/set/#manipulation":{},"ds/string/intro/#manipulating":{}}}],["manner",{"_index":528,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["mantissa",{"_index":3439,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["map",{"_index":525,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"ds/set-map/map/":{},"ds/set-map/map/#maps":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{},"java/oops/":{},"java/oops/#objects":{}},"title":{"ds/set-map/map/":{},"ds/set-map/map/#maps":{}}}],["map<person.sex,",{"_index":2982,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["map<string,",{"_index":2926,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["mapper",{"_index":2988,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["mapvalu",{"_index":2107,"text":{"ds/set-map/map/":{},"ds/set-map/map/#maps":{}},"title":{}}],["mark",{"_index":1637,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["master",{"_index":1064,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["master'",{"_index":1062,"text":{"algo/analysis/master-theorum/":{}},"title":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{}}}],["match",{"_index":976,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{},"java/strings/":{}},"title":{}}],["math",{"_index":153,"text":{"algo/maths/":{},"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{"algo/maths/":{},"algo/maths/#maths":{},"java/numbers/#advanced-math":{}}}],["mathemat",{"_index":584,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"algo/analysis/recursive/#substitution-method":{}},"title":{}}],["matrix",{"_index":352,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"ds/graph/intro/":{},"ds/graph/intro/#cons":{},"ds/graph/intro/#representation":{}},"title":{"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"ds/graph/intro/#adjacency-matrix":{}}}],["matter",{"_index":3017,"text":{"java/inheritance/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["max",{"_index":897,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/array/min-max/":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#binary-heap":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{"ds/array/min-max/":{},"ds/array/min-max/#min-max":{}}}],["max(arr[0],",{"_index":1521,"text":{"ds/array/min-max/":{},"ds/array/min-max/#recursive":{}},"title":{}}],["max_point",{"_index":306,"text":{"algo/maths/":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}},"title":{}}],["max_siz",{"_index":1563,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{}},"title":{}}],["max_valu",{"_index":3177,"text":{"java/numbers/":{}},"title":{}}],["maximum",{"_index":924,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/tree/bst/":{},"ds/tree/bst/#minvalue":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["maxvalue(nod",{"_index":2449,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{}},"title":{}}],["maze",{"_index":1658,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["mean",{"_index":765,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["measur",{"_index":857,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{}},"title":{}}],["mechan",{"_index":3221,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["medium",{"_index":2232,"text":{"ds/stack/medium-special/":{}},"title":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}}}],["mem",{"_index":1874,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{}},"title":{}}],["member",{"_index":1595,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/inheritance/":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{"java/packages/#importing-a-package-member":{}}}],["member'",{"_index":3262,"text":{"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#name-ambiguities":{}},"title":{}}],["memori",{"_index":462,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/string/intro/":{},"ds/string/intro/#input":{}},"title":{"algo/sort/intro/#minimum-number-of-memory-writes":{}}}],["memset(count,",{"_index":2308,"text":{"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["mention",{"_index":2331,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["merg",{"_index":849,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/tree/bst-merge/":{}},"title":{"algo/sort/merge/":{},"algo/sort/merge/#merge-sort":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#merge-bst":{}}}],["merge(nod",{"_index":2474,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["mergesort",{"_index":1407,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["mergesort(&a);",{"_index":1378,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["mergesort(&b);",{"_index":1379,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["mergesort(node**",{"_index":1373,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["meta",{"_index":1911,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"java/annotations/":{}},"title":{"java/annotations/#meta-annotations":{}}}],["metadata",{"_index":2697,"text":{"java/annotations/":{}},"title":{}}],["method",{"_index":87,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/bits/":{},"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{},"ds/linked-list/reverse/":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/tree/bst-check/":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/k-smallest/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"java/annotations/":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/interfaces/#static-methods":{},"java/intro/":{},"java/intro/#why":{},"java/numbers/":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/oops/#inheritance":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#static-import":{},"java/strings/":{},"java/strings/#why":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#substitution-method":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#method-6-olog-n-time":{},"algo/maths/#method-7-using-formula":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"java/collections/#streamcollect-method":{},"java/inheritance/#abstract-methods-and-classes":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/interfaces/#static-methods":{}}}],["method:\"<<endl;",{"_index":1515,"text":{"ds/array/intro/":{},"ds/array/intro/#traversal":{}},"title":{}}],["methodnam",{"_index":3356,"text":{"php/atttributes/":{}},"title":{}}],["mid",{"_index":1152,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["mid+1,",{"_index":1153,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{}},"title":{}}],["mid1",{"_index":1189,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["mid1+1,",{"_index":1196,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["mid2",{"_index":1191,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["mid2+1,",{"_index":1195,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["middl",{"_index":981,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["midpoint",{"_index":1389,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["min",{"_index":1291,"text":{"algo/sort/intro/":{},"algo/sort/intro/#stable":{},"ds/array/min-max/":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#binary-heap":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst/":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{"ds/array/min-max/":{},"ds/array/min-max/#min-max":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/tree/bst/#min-value":{}}}],["min(arr[0],",{"_index":1518,"text":{"ds/array/min-max/":{},"ds/array/min-max/#recursive":{}},"title":{}}],["min(i,",{"_index":1174,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{}},"title":{}}],["min(int",{"_index":98,"text":{"algo/bits/":{},"algo/bits/#method-2-use-bit-operations":{}},"title":{}}],["min(step,",{"_index":1265,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{}}],["min(x,",{"_index":101,"text":{"algo/bits/":{},"algo/bits/#method-2-use-bit-operations":{}},"title":{}}],["min(y,",{"_index":102,"text":{"algo/bits/":{},"algo/bits/#method-2-use-bit-operations":{}},"title":{}}],["min.pop();",{"_index":2248,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["min.push(x);",{"_index":2247,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["min.push(y);",{"_index":2249,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["min<(n/m)",{"_index":1257,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{}}],["min_idx",{"_index":1284,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["min_valu",{"_index":3176,"text":{"java/numbers/":{}},"title":{}}],["mingroups",{"_index":2923,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["minheap",{"_index":1773,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minheap(int",{"_index":1776,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minheap::decreasekey(int",{"_index":1800,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minheap::deletekey(int",{"_index":1806,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minheap::extractmin()",{"_index":1801,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minheap::insertkey(int",{"_index":1791,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minheap::minheap(int",{"_index":1788,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minheap::minheapify(int",{"_index":1809,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minheapify(0);",{"_index":1805,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minheapify(int",{"_index":1777,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minheapify(smallest);",{"_index":1816,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["minimum",{"_index":644,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{}},"title":{"algo/sort/intro/#minimum-number-of-memory-writes":{}}}],["minu",{"_index":1709,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["minum",{"_index":1742,"text":{"ds/heap/intro/":{},"ds/heap/intro/#operations":{}},"title":{}}],["minut",{"_index":3235,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["minvalu",{"_index":2523,"text":{"ds/tree/bst/":{}},"title":{"ds/tree/bst/#minvalue":{}}}],["minvalue(nod",{"_index":2451,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{}},"title":{}}],["minvaluenode(root",{"_index":2503,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["minvaluenode(struct",{"_index":2497,"text":{"ds/tree/bst/":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{}},"title":{}}],["misplac",{"_index":1329,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["mix",{"_index":3069,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["mkdir($thi",{"_index":3343,"text":{"php/atttributes/":{}},"title":{}}],["mobil",{"_index":769,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["model",{"_index":965,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["moder",{"_index":2631,"text":{"ds/tree/intro/":{},"ds/tree/intro/#why":{}},"title":{}}],["modifi",{"_index":1576,"text":{"ds/array/vectors/":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#insertion":{},"java/basics/":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{"ds/array/vectors/#modifiers":{},"java/basics/#access-modifiers":{}}}],["modul",{"_index":1954,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["modular",{"_index":821,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["mon",{"_index":2792,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["monei",{"_index":495,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["monitortemperatur",{"_index":2736,"text":{"java/annotations/":{}},"title":{}}],["month",{"_index":496,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["monthli",{"_index":490,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["monthstr",{"_index":2852,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["more",{"_index":494,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{},"php/basics/":{}},"title":{"algo/analysis/intro/#some-more-properties":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}}}],["motiv",{"_index":955,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{}},"title":{}}],["mountain",{"_index":3231,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["mountainbik",{"_index":3030,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["move",{"_index":1240,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"java/java9%26beyond/":{}},"title":{}}],["movenode(lastptrref,",{"_index":1395,"text":{"algo/sort/merge/":{},"algo/sort/merge/#local-reference":{}},"title":{}}],["mp",{"_index":1456,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["mp[arr[i]]++;",{"_index":1457,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["mr",{"_index":2819,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["ms",{"_index":2237,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["mst",{"_index":1600,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["much",{"_index":1241,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["multi",{"_index":126,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/numbers/":{}},"title":{}}],["multidimension",{"_index":557,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"ds/array/multi-dimensional/":{}},"title":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#multidimensional-arrays":{}}}],["multilin",{"_index":3008,"text":{"java/helloworld/":{}},"title":{}}],["multimap",{"_index":2108,"text":{"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{"ds/set-map/map/#multimap":{}}}],["multipl",{"_index":154,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-by-7":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/strings/":{},"java/strings/#why":{}},"title":{"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#write-you-own-power-without-using-multiplication-and-division-operators":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}}}],["multipli",{"_index":193,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{}},"title":{"algo/maths/#multiply-by-7":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{}}}],["multiply(a,",{"_index":321,"text":{"algo/maths/":{},"algo/maths/#method-2-using-recursion":{}},"title":{}}],["multiply(f,",{"_index":389,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["multiply(int",{"_index":277,"text":{"algo/maths/":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{}},"title":{}}],["multiply(x,",{"_index":279,"text":{"algo/maths/":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{}},"title":{}}],["multiset",{"_index":2116,"text":{"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/set-map/set-types/#set-types":{}},"title":{"ds/set-map/multiset/":{},"ds/set-map/multiset/#multiset":{}}}],["multithread",{"_index":3138,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["mut",{"_index":2906,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["mutat",{"_index":2971,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["my_callback_funct",{"_index":3473,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["myanim",{"_index":3082,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["myanimal.testinstancemethod();",{"_index":3084,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["mybik",{"_index":3032,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["mycallbackmethod",{"_index":3475,"text":{"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["mycat",{"_index":3081,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["myclass",{"_index":2716,"text":{"java/annotations/":{},"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["mydeck.sort(",{"_index":3126,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["myformatt",{"_index":3196,"text":{"java/numbers/":{}},"title":{}}],["myformatter.format(value);",{"_index":3198,"text":{"java/numbers/":{}},"title":{}}],["myfunct",{"_index":1465,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["myfunction(int",{"_index":1461,"text":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{}},"title":{}}],["mymethod",{"_index":2719,"text":{"java/annotations/":{}},"title":{}}],["myobject",{"_index":2727,"text":{"java/annotations/":{}},"title":{}}],["myshapescollection.stream()",{"_index":2890,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["mystr",{"_index":2729,"text":{"java/annotations/":{}},"title":{}}],["mysupermethod",{"_index":2710,"text":{"java/annotations/":{}},"title":{}}],["n",{"_index":53,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#lucky-number":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#method-6-olog-n-time":{},"algo/maths/#method-7-using-formula":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-by-7":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#iterative":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#simple":{},"ds/queue/print-binary/#using-queues":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/maths/#base-n-addition":{},"algo/maths/#method-6-olog-n-time":{}}}],["n!<=log",{"_index":1000,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["n!<=nn",{"_index":999,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["n!\u22642k.",{"_index":995,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["n!\u22642t(n)",{"_index":997,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["n(c+d)",{"_index":2673,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["n(n+1)(2n+1)/6",{"_index":736,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n(n+1)/2",{"_index":729,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n/2",{"_index":731,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n/2:",{"_index":402,"text":{"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{}},"title":{}}],["n/6",{"_index":738,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n/k",{"_index":2206,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{}},"title":{}}],["n/logn",{"_index":1090,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["n0",{"_index":862,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{}},"title":{}}],["n1",{"_index":2216,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["n12",{"_index":735,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n13",{"_index":743,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n1k",{"_index":726,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n2",{"_index":964,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["n2(n+1)2/4",{"_index":744,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n2/2",{"_index":730,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n2/4",{"_index":747,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n3/2",{"_index":746,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n3/3",{"_index":737,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n4/4",{"_index":745,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["n<<3",{"_index":197,"text":{"algo/maths/":{},"algo/maths/#multiply-by-7":{}},"title":{}}],["naiv",{"_index":2273,"text":{"ds/stack/stock-span/":{}},"title":{"ds/stack/stock-span/#naive":{}}}],["name",{"_index":1594,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"java/annotations/":{},"java/basics/":{},"java/basics/#arrays":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{},"java/packages/#why":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"java/basics/#naming":{},"java/packages/#by-its-qualified-name":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{}}}],["namespac",{"_index":1410,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{},"java/oops/":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["nano",{"_index":3058,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["nativ",{"_index":3135,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["natur",{"_index":1756,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"java/interfaces/":{}},"title":{}}],["navig",{"_index":1608,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["nearbi",{"_index":551,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["neccassir",{"_index":625,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{}},"title":{}}],["necessari",{"_index":1088,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["necessarili",{"_index":2039,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["need",{"_index":761,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#chromatic-number":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#substitution-method":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/intro/":{},"ds/tree/intro/#why":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["neg",{"_index":12,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/bits/":{},"algo/bits/#signed-right-shift":{}},"title":{}}],["negat",{"_index":2836,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["nest",{"_index":311,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/maths/":{},"java/inheritance/":{},"java/packages/":{}},"title":{"algo/maths/#method-1-using-nested-loops":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}}}],["netowwrk",{"_index":1605,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["network",{"_index":1602,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#applications":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/intro/":{},"java/intro/#platform":{}},"title":{"java/networking/":{}}}],["neutral",{"_index":3139,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["never",{"_index":1266,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["new",{"_index":237,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/set-map/map/":{},"ds/set-map/map/#maps":{},"ds/set-map/map/#multimap":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#insert":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/basics/":{},"java/basics/#arrays":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/java9%26beyond/":{},"java/numbers/":{},"java/oops/":{},"java/oops/#inheritance":{},"java/packages/":{},"java/packages/#why":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#object":{}},"title":{}}],["new_data",{"_index":1429,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["new_dllnod",{"_index":2239,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["new_nod",{"_index":1430,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{}},"title":{}}],["new_val",{"_index":1784,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["newnode(1);",{"_index":2402,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{}}],["newnode(2);",{"_index":2403,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{}}],["newnode(3);",{"_index":2404,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{}}],["newnode(4);",{"_index":2405,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{}}],["newnode(data);",{"_index":2185,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["newnode(int",{"_index":2182,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{}}],["newnode(key);",{"_index":2496,"text":{"ds/tree/bst/":{},"ds/tree/bst/#insertion":{}},"title":{}}],["newvalu",{"_index":3237,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["next",{"_index":1376,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["next[i]",{"_index":2221,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["next[i];",{"_index":2226,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["next[n",{"_index":2222,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["next_posit",{"_index":205,"text":{"algo/maths/":{},"algo/maths/#lucky-number":{}},"title":{}}],["nextindex",{"_index":1959,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["nml1",{"_index":221,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["nml2",{"_index":222,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["nn",{"_index":1001,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["no",{"_index":1011,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["node",{"_index":813,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/graph/intro/":{},"ds/graph/intro/#applications":{},"ds/graph/intro/#properties":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#arrays":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#inserting":{},"ds/linked-list/vs-array/#linked-list":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{},"ds/linked-list/xor-dll/#xor-utility":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/binary-tree/#binary-tree":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/binary-tree/#representaion":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#facts":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{}},"title":{"algo/sort/merge/#dummy-nodes":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{}}}],["node'",{"_index":1972,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["node(int",{"_index":2646,"text":{"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}},"title":{}}],["node(x);",{"_index":2648,"text":{"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}},"title":{}}],["node*)malloc(sizeof(struct",{"_index":1851,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{}}],["node\u2019",{"_index":2505,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["nomenclatur",{"_index":2407,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{}},"title":{}}],["non",{"_index":526,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#multiset":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#inorder":{},"java/basics/":{},"java/basics/#variables":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["nonnul",{"_index":2730,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}},"title":{}}],["normal",{"_index":1330,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{},"java/exceptions/":{}},"title":{}}],["notat",{"_index":858,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#symmetric-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{}}}],["note",{"_index":2,"text":{"":{},"#abhinavs-notes":{},"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#multiply-by-7":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#facts":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/strings/":{},"java/strings/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{"#abhinavs-notes":{}}}],["noth",{"_index":1741,"text":{"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["notic",{"_index":3377,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["notifi",{"_index":3053,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["notifyal",{"_index":3054,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["notion",{"_index":511,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["noverflow",{"_index":1792,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["now",{"_index":179,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["np",{"_index":608,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{}},"title":{"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{}}}],["npx",{"_index":1875,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{}},"title":{}}],["nstack",{"_index":2224,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["nt(0)",{"_index":2671,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["nth",{"_index":979,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["null",{"_index":1375,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["num",{"_index":249,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["num1",{"_index":214,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["num2",{"_index":215,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["num_gear",{"_index":2816,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["number",{"_index":13,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#chromatic-number":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#signed-right-shift":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-by-7":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"ds/array/frequency/":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#disadvantages":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#string-to-double":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/numbers/":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#naming":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#float":{},"php/basics/#integers":{},"php/basics/#types":{}},"title":{"algo/analysis/graph-coloring/#chromatic-number":{},"algo/bits/#add-two-numbers-without-using-arithmetic-operators":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#lucky-number":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"ds/array/frequency/":{},"ds/array/frequency/#frequency-of-a-number":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#strings-to-numbers":{},"java/numbers/":{}}}],["numer",{"_index":1096,"text":{"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{}},"title":{}}],["n\u00b2",{"_index":902,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["n\u00b3",{"_index":905,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["n\u2019th",{"_index":2550,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["o",{"_index":877,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{},"algo/analysis/intro/#why-drop":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["o(1)",{"_index":350,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/maths/":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/search/intro/#linear-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"ds/graph/intro/":{},"ds/graph/intro/#pros":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#implementation":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/queue/priority-queue/#heap":{},"ds/stack/intro/":{},"ds/stack/intro/#stack":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["o(1),",{"_index":1757,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["o(1).",{"_index":337,"text":{"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-5-optimized-method-4":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["o(2n),",{"_index":2290,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["o(e*v)",{"_index":1617,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["o(f(n)).",{"_index":884,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#reflexive-properties":{}},"title":{}}],["o(g(n))",{"_index":874,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#general-properties":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#transitive-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{},"algo/analysis/intro/#why-drop":{}},"title":{}}],["o(h(n))",{"_index":888,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#transitive-properties":{}},"title":{}}],["o(h)",{"_index":2641,"text":{"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}}}],["o(h).",{"_index":2654,"text":{"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["o(h)...",{"_index":2517,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["o(i)",{"_index":1332,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["o(log",{"_index":1158,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["o(log(n))",{"_index":714,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["o(logi)",{"_index":1334,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["o(loglogn)",{"_index":575,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["o(logn)",{"_index":392,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#heap":{}},"title":{}}],["o(n",{"_index":1401,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["o(n)",{"_index":332,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/count/":{},"ds/linked-list/count/#counting":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#time-complexity":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["o(n).",{"_index":475,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["o(n):",{"_index":561,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["o(n*2)",{"_index":1326,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["o(n*n).",{"_index":1307,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["o(n/2)",{"_index":1221,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{}},"title":{}}],["o(n2)",{"_index":936,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["o(n2).",{"_index":477,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["o(n^2)",{"_index":878,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-drop":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["o(n^2),",{"_index":2281,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{}},"title":{}}],["o(n^2).",{"_index":2684,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["o(n^2);",{"_index":1041,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["o(nc):",{"_index":564,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{}},"title":{}}],["o(nlogn)",{"_index":1743,"text":{"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["o(nlogn).",{"_index":1106,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{}},"title":{}}],["o(n\u00b2)",{"_index":903,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["o(n\u00b3)",{"_index":906,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["o(v",{"_index":1640,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["o(v)",{"_index":1683,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["o(v).",{"_index":1641,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["o(v+e)",{"_index":1616,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["o(v^2)",{"_index":1679,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons":{},"ds/graph/intro/#pros_1":{}},"title":{}}],["o(vlogv",{"_index":1713,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["o(w)",{"_index":2687,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["o(|v|+|e|)",{"_index":1682,"text":{"ds/graph/intro/":{},"ds/graph/intro/#pros_1":{}},"title":{}}],["o(\u221an)",{"_index":1253,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{}}],["obbject",{"_index":3219,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["obj",{"_index":3029,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/inheritance/#object-as-superclass":{},"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["object",{"_index":1483,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/string/intro/":{},"ds/string/intro/#input":{},"ds/string/intro/#stdstring-vs-character-array":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/exceptions/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#casting-objects":{},"java/inheritance/#constructor-chaining":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#super-keyword":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/numbers/":{},"java/oops/":{},"java/oops/#class":{},"java/oops/#objects":{},"java/oops/#why":{},"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#types":{}},"title":{"java/inheritance/#casting-objects":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#objects":{},"php/basics/#object":{}}}],["object'",{"_index":3064,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["observ",{"_index":960,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["obtain",{"_index":2516,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["obvious",{"_index":130,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["occasion",{"_index":430,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["occupi",{"_index":1446,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{}},"title":{}}],["occur",{"_index":854,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["occurr",{"_index":2341,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["octal",{"_index":3178,"text":{"java/numbers/":{},"php/basics/":{},"php/basics/#integers":{}},"title":{}}],["odd",{"_index":166,"text":{"algo/maths/":{},"algo/maths/#method-6-olog-n-time":{},"algo/maths/#multiple-of-3":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/tree/handshaking-lemma/":{}},"title":{}}],["odd_count",{"_index":190,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{}},"title":{}}],["oh",{"_index":949,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{}},"title":{}}],["oh(o)",{"_index":948,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{}},"title":{}}],["old",{"_index":466,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["omega",{"_index":912,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{}},"title":{}}],["omit",{"_index":3110,"text":{"java/interfaces/":{},"php/basics/":{}},"title":{}}],["on",{"_index":121,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/queue/using-stack/":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#traversal":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/packages/":{},"java/packages/#static-import":{},"java/packages/#why":{}},"title":{"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/tree/traversal/#how-to-pick-one":{}}}],["onc",{"_index":951,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#why":{},"java/strings/":{}},"title":{}}],["onlin",{"_index":1328,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["onto",{"_index":783,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["op",{"_index":2004,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#implementation":{}},"title":{}}],["open",{"_index":2195,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"php/intro/":{}},"title":{}}],["oper",{"_index":76,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/graph/intro/":{},"ds/graph/intro/#representation":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/strings/":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#float":{}},"title":{"algo/bits/#add-two-numbers-without-using-arithmetic-operators":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{},"algo/bits/#smallest-of-three-integers-without-comparison-operators":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#write-you-own-power-without-using-multiplication-and-division-operators":{},"ds/heap/intro/#operations":{},"ds/queue/dequeue/#operations":{},"ds/queue/intro/#operations":{},"ds/queue/priority-queue/#operations":{},"ds/string/intro/#operations-on-strings":{},"java/basics/#operators":{},"java/collections/#aggregate-operations":{},"java/collections/#aggregate-operations-vs-iterators":{}}}],["operand",{"_index":2832,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["operatecar",{"_index":3088,"text":{"java/interfaces/":{}},"title":{}}],["opposit",{"_index":34,"text":{"algo/bits/":{}},"title":{"algo/bits/#detect-if-two-integers-have-opposite-signs":{}}}],["oppositesigns(int",{"_index":37,"text":{"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#ternery":{},"algo/bits/#xor":{}},"title":{}}],["oprimn",{"_index":422,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{}},"title":{}}],["optim",{"_index":391,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#method-5-optimized-method-4":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{}},"title":{"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/maths/#method-5-optimized-method-4":{}}}],["optimis",{"_index":348,"text":{"algo/maths/":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/linked-list/vs-array/":{},"ds/stack/min-special/":{}},"title":{"algo/maths/#method-3-space-optimised-2":{},"ds/linked-list/vs-array/#how-to-optimise":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}}}],["optimum",{"_index":1058,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["option",{"_index":2911,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["order",{"_index":548,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"ds/graph/intro/":{},"ds/graph/intro/#properties":{},"ds/heap/intro/":{},"ds/heap/intro/#traversal":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#traversal":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"php/basics/":{},"php/basics/#float":{}},"title":{"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#level-order":{}}}],["organ",{"_index":2428,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/inheritance/":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#package":{}},"title":{}}],["orient",{"_index":3137,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["origin",{"_index":1408,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"java/strings/":{}},"title":{}}],["other",{"_index":1405,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["otherrect",{"_index":3114,"text":{"java/interfaces/":{}},"title":{}}],["otherrect.getarea())",{"_index":3117,"text":{"java/interfaces/":{}},"title":{}}],["otherwis",{"_index":290,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"php/basics/":{},"php/basics/#html-escaping":{}},"title":{}}],["out",{"_index":643,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/array/intro/":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#without-it":{},"java/collections/":{},"java/collections/#interfaces":{},"php/basics/":{},"php/basics/#types":{}},"title":{"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}}}],["output",{"_index":115,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"java/numbers/":{},"php/basics/":{}},"title":{}}],["outsid",{"_index":1468,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"java/oops/":{},"java/oops/#interface":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["over",{"_index":1198,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/heap/intro/":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}}}],["overflow",{"_index":1233,"text":{"algo/search/intro/":{},"ds/queue/intro/":{},"ds/queue/intro/#operations":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{}},"title":{"algo/search/intro/#problem-m-lr2-might-overflow":{}}}],["overflow\\n",{"_index":2018,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["overflow\\n\";",{"_index":2225,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["overhead",{"_index":2695,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#how-to-pick-one":{}},"title":{}}],["overrid",{"_index":2709,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{"java/inheritance/#overriding-and-hiding-methods":{}}}],["overridden",{"_index":3074,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["own",{"_index":1575,"text":{"ds/array/vectors/":{},"ds/array/vectors/#element-access":{}},"title":{}}],["p",{"_index":602,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{"algo/analysis/classes/#p":{}}}],["p(predecessor).",{"_index":2531,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["p*x;",{"_index":1035,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["p.getgender()",{"_index":2959,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],["packag",{"_index":3018,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#library":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#by-its-qualified-name":{},"java/packages/#importing-an-entire-package":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{},"java/packages/#static-import":{},"java/packages/#why":{}},"title":{"java/oops/#package":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#importing-a-package-member":{},"java/packages/#importing-an-entire-package":{}}}],["packagesar",{"_index":3272,"text":{"java/packages/":{},"java/packages/#name-ambiguities":{}},"title":{}}],["pair",{"_index":1663,"text":{"ds/graph/intro/":{},"ds/graph/intro/#adjacency-list":{},"ds/graph/intro/#properties":{},"ds/set-map/map/":{},"ds/set-map/map/#maps":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["pair<int,int>",{"_index":2110,"text":{"ds/set-map/map/":{},"ds/set-map/map/#multimap":{}},"title":{}}],["palindrom",{"_index":3309,"text":{"java/strings/":{}},"title":{}}],["palindrome.charat(i);",{"_index":3317,"text":{"java/strings/":{}},"title":{}}],["palindrome.length();",{"_index":3312,"text":{"java/strings/":{}},"title":{}}],["paradigm",{"_index":1327,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["paragraph",{"_index":3381,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["parallel",{"_index":1318,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["parallelsort",{"_index":2827,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["param",{"_index":1462,"text":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{}},"title":{}}],["param[10])",{"_index":1464,"text":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{}},"title":{}}],["paramet",{"_index":1421,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["parent",{"_index":1727,"text":{"ds/heap/intro/":{},"ds/heap/intro/#arrays":{},"ds/heap/intro/#operations":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["parent(i);",{"_index":1799,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["parent(int",{"_index":1778,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["parenthesi",{"_index":2194,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["parser",{"_index":3383,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["part",{"_index":662,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"java/annotations/":{}},"title":{}}],["particular",{"_index":439,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["partit",{"_index":1099,"text":{"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["pass",{"_index":814,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{},"ds/linked-list/functions/":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"java/oops/":{},"java/oops/#why":{}},"title":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{}}}],["path",{"_index":669,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/strings/":{}},"title":{}}],["patholog",{"_index":2425,"text":{"ds/tree/binary-tree/":{}},"title":{"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{}}}],["pathsepar",{"_index":3284,"text":{"java/strings/":{}},"title":{}}],["pattern",{"_index":1113,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/numbers/":{}},"title":{}}],["peasant",{"_index":281,"text":{"algo/maths/":{}},"title":{"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{}}}],["peek",{"_index":2143,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#stack":{}},"title":{}}],["peek(root)",{"_index":2192,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["peek(stacknode*",{"_index":2188,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["peopl",{"_index":3086,"text":{"java/interfaces/":{}},"title":{}}],["per",{"_index":1042,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["perfect",{"_index":2419,"text":{"ds/tree/binary-tree/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{"ds/tree/binary-tree/#perfect":{},"ds/tree/binary-tree/#perfect-binary-tree":{}}}],["perform",{"_index":519,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#string-to-double":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"java/collections/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["permit",{"_index":636,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"java/strings/":{}},"title":{}}],["permut",{"_index":1342,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["person",{"_index":489,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/graph/intro/":{},"ds/graph/intro/#applications":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["person.sex.male)",{"_index":2960,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],["person::getage,",{"_index":2987,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["person::getgender,",{"_index":2985,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["petrol",{"_index":2001,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["phi",{"_index":524,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["php",{"_index":3333,"text":{"php/atttributes/":{},"php/basics/":{},"php/basics/#arrays":{},"php/basics/#boolean":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#float":{},"php/basics/#html-escaping":{},"php/basics/#integers":{},"php/basics/#iterable":{},"php/basics/#object":{},"php/basics/#string":{},"php/basics/#types":{},"php/intro/":{}},"title":{}}],["physicist\u2019s)",{"_index":523,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["pi",{"_index":3212,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["pick",{"_index":1416,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/traversal/":{}},"title":{"ds/tree/traversal/#how-to-pick-one":{}}}],["piec",{"_index":595,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{}},"title":{}}],["pig",{"_index":3458,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["piggi",{"_index":3463,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["pipe",{"_index":2045,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["pivot",{"_index":851,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{}},"title":{}}],["place",{"_index":1269,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"java/numbers/":{}},"title":{}}],["plate",{"_index":2146,"text":{"ds/stack/intro/":{},"ds/stack/intro/#stack":{}},"title":{}}],["platform",{"_index":3143,"text":{"java/intro/":{},"java/intro/#platform":{},"java/numbers/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/intro/#platform":{}}}],["plu",{"_index":2835,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["plug",{"_index":3149,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["pluggabl",{"_index":2774,"text":{"java/annotations/":{},"java/oops/":{},"java/oops/#why":{}},"title":{"java/annotations/#type-annotations-and-pluggable-type-systems":{}}}],["po",{"_index":1200,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["point",{"_index":299,"text":{"algo/maths/":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/cll/#insertion":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"ds/string/intro/":{},"ds/string/intro/#iterator":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#types":{}},"title":{"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}}}],["pointer",{"_index":1223,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/array/vs-pointers/#similarities":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/intro/#linked-list":{},"ds/linked-list/intro/#representation":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#representaion":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#array-vs-pointers":{}}}],["polygon",{"_index":1315,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["polymorph",{"_index":2875,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{}},"title":{"java/inheritance/#polymorphism":{}}}],["polynomi",{"_index":607,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#p":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{}},"title":{"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{}}}],["polynomial(a,",{"_index":1036,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["poorli",{"_index":1404,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["pop",{"_index":1580,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{"ds/stack/using-queue/#costly-pop":{}}}],["pop(&root)",{"_index":2191,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["pop(&s1);",{"_index":2491,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["pop(&s2);",{"_index":2492,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["pop(int",{"_index":2211,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["pop(mystack",{"_index":2241,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["pop(s);",{"_index":2268,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["pop(stacknode**",{"_index":2186,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["pop_back",{"_index":1579,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/string/intro/":{},"ds/string/intro/#input":{}},"title":{}}],["popular",{"_index":1311,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["portabl",{"_index":3140,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["posit",{"_index":18,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/bits/#signed-right-shift":{},"algo/maths/":{},"algo/maths/#multiply-by-7":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#modifiers":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["possibl",{"_index":682,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#complete-binary-tree":{},"java/annotations/":{},"java/annotations/#design-considerations":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["post",{"_index":507,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{}},"title":{}}],["postfix",{"_index":2149,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/tree/traversal/":{},"ds/tree/traversal/#postorder":{}},"title":{}}],["postord",{"_index":2507,"text":{"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{}},"title":{"ds/tree/traversal/#postorder":{}}}],["postorder(node*",{"_index":2680,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#postorder":{}},"title":{}}],["postorder(temp",{"_index":2681,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#postorder":{}},"title":{}}],["potenti",{"_index":504,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["potential(or",{"_index":522,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["pow",{"_index":3216,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["pow(a,",{"_index":322,"text":{"algo/maths/":{},"algo/maths/#method-2-using-recursion":{}},"title":{}}],["pow(i,",{"_index":579,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["pow(int",{"_index":312,"text":{"algo/maths/":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-using-recursion":{}},"title":{}}],["pow(x,",{"_index":1032,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["power",{"_index":295,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"java/annotations/":{},"java/annotations/#design-considerations":{},"java/intro/":{},"java/intro/#why":{}},"title":{"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#write-you-own-power-without-using-multiplication-and-division-operators":{}}}],["power(f,",{"_index":369,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["power(int",{"_index":386,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["power(m,",{"_index":359,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["practic",{"_index":845,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["pre",{"_index":2527,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["preced",{"_index":1561,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["precis",{"_index":3182,"text":{"java/numbers/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["predeccesor",{"_index":2515,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["predecessor",{"_index":1759,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}}}],["predict",{"_index":846,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["prefer",{"_index":556,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"php/basics/":{}},"title":{"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}}}],["prefix",{"_index":232,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/traversal/":{},"ds/tree/traversal/#preorder":{}},"title":{}}],["preorder",{"_index":2506,"text":{"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{}},"title":{"ds/tree/traversal/#preorder":{}}}],["preorder(node*",{"_index":2678,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#preorder":{}},"title":{}}],["preorder(temp",{"_index":2679,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#preorder":{}},"title":{}}],["prepar",{"_index":1652,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["preprocessor",{"_index":3496,"text":{"php/intro/":{}},"title":{}}],["present",{"_index":598,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{}},"title":{}}],["prev",{"_index":1262,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{}},"title":{}}],["prev_avg",{"_index":416,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{}},"title":{}}],["prev_nod",{"_index":1882,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{}},"title":{}}],["previou",{"_index":1167,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["previous",{"_index":3456,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["prevou",{"_index":393,"text":{"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{}},"title":{}}],["price",{"_index":2275,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["price[i])",{"_index":2286,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["price[j]);",{"_index":2279,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{}},"title":{}}],["price[st.top()]",{"_index":2285,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["prim",{"_index":1712,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["primari",{"_index":3220,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["primit",{"_index":1976,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{},"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["prim\u2019",{"_index":1748,"text":{"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{}},"title":{}}],["principl",{"_index":3037,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["print",{"_index":297,"text":{"algo/maths/":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/xor-dll/":{},"ds/queue/print-binary/":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/strings/":{},"php/basics/":{},"php/basics/#types":{}},"title":{"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#print-binary":{}}}],["printarray(arr,",{"_index":304,"text":{"algo/maths/":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}},"title":{}}],["printcompositions(int",{"_index":302,"text":{"algo/maths/":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}},"title":{}}],["printcompositions(n",{"_index":308,"text":{"algo/maths/":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{}},"title":{}}],["printf(\"%d",{"_index":1498,"text":{"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#traversal":{}},"title":{}}],["printf(\"\\n\");",{"_index":1690,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["printf(\"\\nth",{"_index":2368,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{}},"title":{}}],["printf(\"geeksforgeeks\");",{"_index":706,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["printgivenlevel",{"_index":2682,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["printgivenlevel(node*",{"_index":2600,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["printgivenlevel(root",{"_index":2601,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["printgivenlevel(root,",{"_index":2594,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["printgraph(adj,",{"_index":1694,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["printgraph(vector<int>",{"_index":1688,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["printlevelord",{"_index":2683,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["printlevelorder(nod",{"_index":2686,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["printlevelorder(node*",{"_index":2599,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["printlevelorderwithqueue(nod",{"_index":2585,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{}},"title":{}}],["printlist",{"_index":1984,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{}},"title":{}}],["printlist(a);",{"_index":1438,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["printlist(node*",{"_index":1424,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{}},"title":{}}],["printlist(struct",{"_index":1848,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["printnge(int",{"_index":2199,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["printstat",{"_index":3244,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["printstream",{"_index":3192,"text":{"java/numbers/":{}},"title":{}}],["prior",{"_index":2889,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["prioriti",{"_index":1744,"text":{"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/priority-queue/#operations":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#priority-queue":{}}}],["privat",{"_index":2864,"text":{"java/basics/":{},"java/basics/#access-modifiers":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{},"java/strings/":{}},"title":{}}],["pro",{"_index":1676,"text":{"ds/graph/intro/":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{"ds/graph/intro/#pros":{},"ds/graph/intro/#pros_1":{}}}],["probabl",{"_index":510,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["problem",{"_index":455,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/dac/intro/#conquer":{},"algo/dac/intro/#divide":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/linked-list/cll/":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#super-keyword":{}},"title":{"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/linked-list/cll/#problems":{},"ds/stack/intro/#problems":{}}}],["proce",{"_index":1370,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{}},"title":{}}],["process",{"_index":781,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/annotations/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{},"php/intro/":{}},"title":{}}],["produc",{"_index":962,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["product",{"_index":668,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["produt",{"_index":1397,"text":{"algo/sort/merge/":{}},"title":{"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}}}],["program",{"_index":258,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/annotations/":{},"java/basics/":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#why":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"java/strings/":{},"php/intro/":{}},"title":{"java/intro/#programming-language":{}}}],["program'",{"_index":2995,"text":{"java/exceptions/":{}},"title":{}}],["programm",{"_index":3002,"text":{"java/generics/":{},"java/generics/#why":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["progress",{"_index":1133,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["promis",{"_index":1716,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["proof",{"_index":155,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{"ds/tree/handshaking-lemma/#proof":{},"ds/tree/handshaking-lemma/#proof_1":{}}}],["propag",{"_index":3433,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["proper",{"_index":1331,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["properli",{"_index":1354,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["properti",{"_index":624,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/intro/":{},"algo/analysis/intro/#symmetric-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{},"ds/graph/intro/":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/queue/priority-queue/":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{"algo/analysis/intro/#general-properties":{},"algo/analysis/intro/#properties":{},"algo/analysis/intro/#reflexive-properties":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#symmetric-properties":{},"algo/analysis/intro/#transitive-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{},"ds/graph/intro/#properties":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/tree/binary-tree/#properties":{}}}],["protect",{"_index":3016,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{}},"title":{}}],["prototyp",{"_index":1412,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["proudli",{"_index":695,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["prove",{"_index":157,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{}}}],["provid",{"_index":881,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#why-drop":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/annotations/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["pseudo",{"_index":1095,"text":{"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{}},"title":{"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{}}}],["psp",{"_index":1601,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["pth",{"_index":1651,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["ptr",{"_index":1586,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["public",{"_index":276,"text":{"algo/maths/":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#why":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}}}],["pump",{"_index":2002,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["purpos",{"_index":3131,"text":{"java/intro/":{},"java/intro/#programming-language":{},"php/intro/":{}},"title":{}}],["push",{"_index":1273,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/using-queue/":{}},"title":{"ds/stack/using-queue/#costly-push":{}}}],["push(&a,",{"_index":1437,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["push(&root,",{"_index":2190,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["push(&s1,",{"_index":2483,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["push(&s2,",{"_index":2484,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["push(int",{"_index":2168,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["push(mystack",{"_index":2236,"text":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{}},"title":{}}],["push(node**",{"_index":1427,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#front-o1":{}},"title":{}}],["push(s,",{"_index":2267,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["push(snod",{"_index":2468,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{}},"title":{}}],["push(stacknode**",{"_index":2184,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["push(struct",{"_index":1895,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{}},"title":{}}],["push_back",{"_index":1578,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/string/intro/":{},"ds/string/intro/#input":{}},"title":{}}],["put",{"_index":572,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/strings/":{}},"title":{}}],["puzzl",{"_index":109,"text":{"algo/bits/":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{"algo/bits/#a-boolean-array-puzzle":{}}}],["q",{"_index":2070,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["q(successor)",{"_index":2530,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["q.front();",{"_index":2073,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["q.pop();",{"_index":2074,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["q.push(\"1\");",{"_index":2071,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["q.push(nod",{"_index":2589,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["q.push(root",{"_index":2597,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{}},"title":{}}],["q.push(root);",{"_index":2542,"text":{"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["q.push(s1.append(\"0\"));",{"_index":2076,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["q.push(s2.append(\"1\"));",{"_index":2077,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["q.push(temp",{"_index":2544,"text":{"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{}},"title":{}}],["q1",{"_index":2301,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["q1.pop();",{"_index":2299,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["q1.push(x);",{"_index":2305,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{}},"title":{}}],["q2",{"_index":2302,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["q2.push(q1.front());",{"_index":2298,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["q2.push(x);",{"_index":2296,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["qnode",{"_index":2063,"text":{"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{}},"title":{}}],["qnode(int",{"_index":2064,"text":{"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{}},"title":{}}],["qnode(x);",{"_index":2066,"text":{"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{}},"title":{}}],["qualifi",{"_index":3252,"text":{"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{}},"title":{"java/packages/#by-its-qualified-name":{}}}],["qualiti",{"_index":2878,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["queen",{"_index":2163,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["queue",{"_index":1624,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/dequeue/#dequeue":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/using-queue/":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/intro/":{},"ds/queue/intro/#queue":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#priority-queue":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#queue-using-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#stack-using-queue":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/traversal/#using-queues":{}}}],["queue.front();",{"_index":1629,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["queue.pop_front();",{"_index":1630,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["queue.push_back(*i);",{"_index":1635,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["queue.push_back(s);",{"_index":1626,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["queue<int>",{"_index":2300,"text":{"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{}},"title":{}}],["queue<nod",{"_index":2586,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/traversal/":{},"ds/tree/traversal/#using-queues":{}},"title":{}}],["queue<node*>",{"_index":2584,"text":{"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{}},"title":{}}],["queue<string>",{"_index":2069,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{}},"title":{}}],["queue<struct",{"_index":2541,"text":{"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{}},"title":{}}],["queue\\n\";",{"_index":2058,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["quick",{"_index":514,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#why-not-average":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/java9%26beyond/":{}},"title":{}}],["quicker",{"_index":2633,"text":{"ds/tree/intro/":{},"ds/tree/intro/#why":{}},"title":{}}],["quickli",{"_index":620,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["quicksort",{"_index":1403,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["quot",{"_index":3382,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["r",{"_index":1188,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#recursive":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#simplified-method-3":{}},"title":{}}],["r=null)",{"_index":2460,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#simplified-method-3":{}},"title":{}}],["r[10];",{"_index":1473,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["r[i]",{"_index":1478,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["radio",{"_index":770,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["radiu",{"_index":3091,"text":{"java/interfaces/":{}},"title":{}}],["rais",{"_index":3460,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["rand",{"_index":1479,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["random",{"_index":512,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/array/intro/#introduction":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["rang",{"_index":774,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["rare",{"_index":837,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{}},"title":{"algo/analysis/intro/#average-case-rarely":{}}}],["rarer",{"_index":3329,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["rat",{"_index":2162,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["rate",{"_index":2041,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["rathbhupendra",{"_index":1440,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["ratio",{"_index":1134,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["ration",{"_index":3435,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["rbegin",{"_index":1554,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/string/intro/":{},"ds/string/intro/#iterator":{}},"title":{}}],["re",{"_index":220,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"java/oops/":{},"java/oops/#why":{}},"title":{"java/re/":{}}}],["reach",{"_index":1353,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{}},"title":{}}],["read",{"_index":2366,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["readabl",{"_index":3391,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["readonli",{"_index":2733,"text":{"java/annotations/":{}},"title":{}}],["real",{"_index":527,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"ds/stack/intro/":{},"ds/stack/intro/#stack":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["realiti",{"_index":633,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{}},"title":{}}],["realli",{"_index":638,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{}},"title":{}}],["rear",{"_index":2007,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/intro/#operations":{}},"title":{}}],["rear(get",{"_index":2050,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["rear(queue*",{"_index":2062,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["rear+1);",{"_index":2012,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["rear+1;",{"_index":2019,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["reason",{"_index":2786,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/java9%26beyond/":{},"java/numbers/":{}},"title":{}}],["receiv",{"_index":2040,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["recommend",{"_index":3021,"text":{"java/inheritance/":{}},"title":{}}],["recompil",{"_index":3134,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["rectangl",{"_index":3266,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["rectangleplu",{"_index":3113,"text":{"java/interfaces/":{}},"title":{}}],["recur",{"_index":1417,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["recurion",{"_index":2100,"text":{"ds/queue/using-stack/":{}},"title":{"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}}}],["recurr",{"_index":1065,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#recursive":{},"algo/analysis/recursive/#substitution-method":{}},"title":{"algo/analysis/recursive/#recurrence-tree-method":{}}}],["recurs",{"_index":83,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#recursive":{},"algo/bits/":{},"algo/dac/intro/":{},"algo/dac/intro/#conquer":{},"algo/maths/":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-5-optimized-method-4":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/min-max/":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/linked-list/count/":{},"ds/linked-list/reverse/":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#minvalue":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#how-to-pick-one":{},"php/intro/":{}},"title":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"algo/bits/#recursive":{},"algo/maths/#method-2-using-recursion":{},"algo/search/intro/#recursive":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/min-max/#recursive":{},"ds/array/reverse/#recursive":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#tail-recursive-method":{}}}],["recurss",{"_index":324,"text":{"algo/maths/":{}},"title":{"algo/maths/#method-1-recurssion":{}}}],["red",{"_index":520,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{}},"title":{}}],["redeclar",{"_index":3124,"text":{"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["redefin",{"_index":3125,"text":{"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["redo",{"_index":2151,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["reduc",{"_index":576,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#reduction":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#why":{}},"title":{}}],["reduct",{"_index":648,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#reduction":{},"java/collections/":{}},"title":{"algo/analysis/classes/#reduction":{},"java/collections/#reduction":{}}}],["ref",{"_index":788,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["refer",{"_index":991,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{"algo/sort/merge/#local-reference":{}}}],["referenc",{"_index":553,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["refern",{"_index":1762,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["refernc",{"_index":1910,"text":{"ds/linked-list/intro/":{},"ds/linked-list/intro/#drawbacks":{}},"title":{}}],["refernec",{"_index":3047,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["reflect",{"_index":3351,"text":{"php/atttributes/":{}},"title":{}}],["reflectionobject($actionhandler);",{"_index":3352,"text":{"php/atttributes/":{}},"title":{}}],["reflex",{"_index":883,"text":{"algo/analysis/intro/":{}},"title":{"algo/analysis/intro/#reflexive-properties":{}}}],["region",{"_index":3255,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["regionmatchesdemo",{"_index":3295,"text":{"java/strings/":{}},"title":{}}],["regist",{"_index":780,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["reinterpret_cast<nod",{"_index":1978,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{}}],["reinterpret_cast<uintptr_t>(a)",{"_index":1980,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{}}],["reinterpret_cast<uintptr_t>(b));",{"_index":1981,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{}}],["rel",{"_index":3429,"text":{"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{}},"title":{}}],["relat",{"_index":928,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#recursive":{},"ds/tree/bst-merge/":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#why":{}},"title":{"ds/tree/bst-merge/#stack-related-stuff":{}}}],["relationship",{"_index":3270,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["reli",{"_index":354,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["remain",{"_index":296,"text":{"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{}},"title":{}}],["remaind",{"_index":2833,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["rememb",{"_index":1466,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["remot",{"_index":3154,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["remov",{"_index":911,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#operations":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/string/remove-duplicates/":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{}},"title":{"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{}}}],["removeduplicate(char",{"_index":2343,"text":{"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{}},"title":{}}],["removespaces(str",{"_index":2380,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["rend",{"_index":1555,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/string/intro/":{},"ds/string/intro/#iterator":{}},"title":{}}],["reorder",{"_index":1343,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["reourc",{"_index":3470,"text":{"php/basics/":{}},"title":{"php/basics/#reources":{}}}],["repeat",{"_index":88,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{}},"title":{"algo/bits/#method-1-repeated-subtraction":{},"java/annotations/#repeating-annotations":{}}}],["repeatedli",{"_index":1239,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["replac",{"_index":1577,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/inheritance/":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["repres",{"_index":764,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["represent",{"_index":364,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"ds/graph/intro/":{},"ds/linked-list/cll/":{},"ds/linked-list/intro/":{},"ds/linked-list/xor-dll/":{},"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/basics/":{},"php/basics/#float":{}},"title":{"ds/graph/intro/#representation":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/xor-dll/#representation":{}}}],["representaion",{"_index":1723,"text":{"ds/heap/intro/":{},"ds/tree/binary-tree/":{}},"title":{"ds/heap/intro/#representaion":{},"ds/tree/binary-tree/#representaion":{}}}],["request",{"_index":1573,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"php/intro/":{}},"title":{}}],["requir",{"_index":234,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["res[0]",{"_index":247,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["res[i+1]",{"_index":244,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["res_nml",{"_index":223,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["reserv",{"_index":1572,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"java/basics/":{},"java/basics/#naming":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["resiz",{"_index":1565,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{}},"title":{}}],["resize(n)",{"_index":1564,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{}},"title":{}}],["resourc",{"_index":2033,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["respect",{"_index":1141,"text":{"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["rest",{"_index":1913,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#without-it":{}},"title":{}}],["restor",{"_index":2101,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}},"title":{}}],["restrict",{"_index":3248,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["result",{"_index":283,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["retain",{"_index":2763,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retent",{"_index":2761,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retentionpolicy.class",{"_index":2764,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retentionpolicy.runtim",{"_index":2767,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retentionpolicy.sourc",{"_index":2762,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retriev",{"_index":2794,"text":{"java/annotations/":{},"java/collections/":{}},"title":{"java/annotations/#retrieving-annotations":{}}}],["retriv",{"_index":1937,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["retrun",{"_index":1471,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["return",{"_index":42,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#iterative":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{},"algo/bits/#recursive":{},"algo/bits/#ternery":{},"algo/bits/#xor":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#lucky-number":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/reverse/":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-utility":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#string-to-double":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/strings/":{},"php/basics/":{},"php/basics/#float":{}},"title":{"ds/array/functions/#return-array-from-functions":{}}}],["return(a);",{"_index":1400,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["return(b);",{"_index":1399,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["return(d)",{"_index":1156,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{}},"title":{}}],["return(isbstutil(node,",{"_index":2453,"text":{"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{}},"title":{}}],["return(lheight",{"_index":2580,"text":{"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{}},"title":{}}],["return(node);",{"_index":2401,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{}},"title":{}}],["return(result);",{"_index":1396,"text":{"algo/sort/merge/":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["return(rheight",{"_index":2581,"text":{"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{}},"title":{}}],["return(solution(a,",{"_index":1149,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{}},"title":{}}],["reursiv",{"_index":1215,"text":{"algo/search/interpolation/":{}},"title":{"algo/search/interpolation/#reursive":{}}}],["reus",{"_index":2883,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["reusabl",{"_index":2874,"text":{"java/collections/":{}},"title":{}}],["revers",{"_index":856,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"ds/array/reverse/":{},"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/linked-list/dll/":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/string/intro/":{},"ds/string/intro/#iterator":{},"ds/string/reverse/":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bt-level-order/":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/packages/":{},"java/packages/#naming":{},"java/strings/":{}},"title":{"ds/array/reverse/":{},"ds/array/reverse/#reverse-array":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#reverse-ll":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/tree/bt-level-order/#reverse":{}}}],["reverse(head",{"_index":1914,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{}},"title":{}}],["reverse(nod",{"_index":1888,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{}},"title":{}}],["reverse(node*",{"_index":1912,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{}},"title":{}}],["reverse(node**",{"_index":1915,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#tail-recursive-method":{}},"title":{}}],["reverselevelorder(node*",{"_index":2590,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{}},"title":{}}],["reverselevelorderwithstack(node*",{"_index":2595,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{}},"title":{}}],["reversell(node**",{"_index":1920,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{}},"title":{}}],["reversepalindrom",{"_index":3320,"text":{"java/strings/":{}},"title":{}}],["reversestr(string&",{"_index":2350,"text":{"ds/string/reverse/":{},"ds/string/reverse/#reverse":{}},"title":{}}],["reverseutil(*head,",{"_index":1916,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#tail-recursive-method":{}},"title":{}}],["reverseutil(next,",{"_index":1919,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#tail-recursive-method":{}},"title":{}}],["reverseutil(node*",{"_index":1917,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#tail-recursive-method":{}},"title":{}}],["review",{"_index":2747,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["revolut",{"_index":3234,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["rheight",{"_index":2579,"text":{"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{}},"title":{}}],["right",{"_index":10,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/bits/":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/heap/intro/":{},"ds/heap/intro/#arrays":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#binary-tree":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#representaion":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#minvalue":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#traversal":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{"algo/bits/#signed-right-shift":{},"algo/bits/#unsigned-right-shift":{}}}],["right(i);",{"_index":1811,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["right(int",{"_index":1782,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["rightlast",{"_index":1837,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}},"title":{}}],["rightlist",{"_index":1835,"text":{"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}},"title":{}}],["rint",{"_index":3213,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["rmi",{"_index":3158,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["robust",{"_index":3141,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["root",{"_index":260,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/maths/":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#arrays":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/binary-tree/#example":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#how-to-pick-one":{},"ds/tree/traversal/#traversal":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{"algo/maths/#square-root":{}}}],["root'",{"_index":2411,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["root(n)",{"_index":1256,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{}}],["root,int",{"_index":2533,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["root.right==null):",{"_index":2500,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion":{}},"title":{}}],["root1",{"_index":2475,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["root2",{"_index":2476,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["roster",{"_index":2957,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["roster.stream()",{"_index":2973,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["rotat",{"_index":1998,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{}},"title":{"ds/string/rotation/":{},"ds/string/rotation/#rotation":{}}}],["rough",{"_index":922,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["round",{"_index":3214,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["router",{"_index":2438,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{}},"title":{}}],["row",{"_index":363,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{"ds/array/multi-dimensional/#row-major-in-c":{}}}],["run",{"_index":56,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/intro/#worst-case":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"java/basics/":{},"java/basics/#control-flow":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{"algo/analysis/intro/#why-not-just-run-it-see-running-time":{}}}],["runtim",{"_index":1942,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["runtimeexception(\"fil",{"_index":3341,"text":{"php/atttributes/":{}},"title":{}}],["runtimeexception(\"target",{"_index":3346,"text":{"php/atttributes/":{}},"title":{}}],["russian",{"_index":280,"text":{"algo/maths/":{}},"title":{"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{}}}],["russianpeasant(unsign",{"_index":282,"text":{"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{}},"title":{}}],["rveresearray(arr,",{"_index":1551,"text":{"ds/array/reverse/":{},"ds/array/reverse/#recursive":{}},"title":{}}],["rveresearray(int",{"_index":1546,"text":{"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{}},"title":{}}],["s",{"_index":1619,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#problems":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/numbers/":{}},"title":{}}],["s*2",{"_index":2623,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{}},"title":{}}],["s.next();",{"_index":2934,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["s.pop()",{"_index":2180,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["s.pop();",{"_index":1925,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{}},"title":{}}],["s.push(10);",{"_index":2177,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["s.push(20);",{"_index":2178,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["s.push(30);",{"_index":2179,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["s.push(arr[i]);",{"_index":2205,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["s.push(root);",{"_index":2596,"text":{"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{}},"title":{}}],["s.push(temp);",{"_index":1922,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{}},"title":{}}],["s.push(x);",{"_index":2102,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}},"title":{}}],["s.tochararray();",{"_index":2954,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["s.top()",{"_index":2202,"text":{"ds/stack/intro/":{},"ds/stack/intro/#problems":{}},"title":{}}],["s.top();",{"_index":1924,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{}},"title":{}}],["s1",{"_index":2072,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"java/strings/":{}},"title":{}}],["s1.pop();",{"_index":2087,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s1.push(s2.top());",{"_index":2090,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s1.push(x);",{"_index":2088,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s1.top();",{"_index":2094,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s1<s2;",{"_index":2337,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["s1>s2.",{"_index":2338,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["s2",{"_index":2075,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{}},"title":{}}],["s2.empty())",{"_index":2097,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["s2.pop();",{"_index":2091,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s2.push(s1.top());",{"_index":2086,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{}},"title":{}}],["s2.top();",{"_index":2099,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["s[0]",{"_index":2276,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["s[i]",{"_index":2277,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["s[i]++;",{"_index":2280,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{}},"title":{}}],["safevararg",{"_index":2758,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["salari",{"_index":488,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["same",{"_index":106,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/bits/":{},"algo/bits/#method-3-use-division-operator":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-by-7":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/sort/merge/":{},"algo/sort/merge/#local-reference":{},"ds/array/intro/":{},"ds/array/intro/#accessing":{},"ds/array/intro/#declaration":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#traversal":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#queue-with-properties":{},"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/traversal/":{},"ds/tree/traversal/#time-complexity":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#name-ambiguities":{},"java/packages/#why":{}},"title":{}}],["satisfi",{"_index":685,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/intro/":{},"algo/analysis/intro/#symmetric-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{}},"title":{}}],["save",{"_index":500,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/graph/intro/":{},"ds/graph/intro/#pros_1":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["saw",{"_index":3310,"text":{"java/strings/":{}},"title":{}}],["scalar",{"_index":3385,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["scale",{"_index":828,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{}},"title":{}}],["scan",{"_index":1317,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["scanf",{"_index":2365,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{}},"title":{}}],["scanner",{"_index":2930,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["scanner(new",{"_index":2931,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["scenario",{"_index":986,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["schedul",{"_index":763,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["scheme",{"_index":473,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["scienc",{"_index":699,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["scientist",{"_index":700,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["script",{"_index":3498,"text":{"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["search",{"_index":452,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/array/frequency/":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/search/":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-search/":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/basics/":{},"java/basics/#control-flow":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#searching":{},"algo/search/jump/#jump-search":{},"ds/array/frequency/#sort-then-binary-search":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/tree/bst/":{},"ds/tree/bst/#binary-search-tree":{},"ds/tree/bst/#search":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{}}}],["search(int",{"_index":1219,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{}},"title":{}}],["search(linkedlistnode*",{"_index":1927,"text":{"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["search(root",{"_index":2511,"text":{"ds/tree/bst/":{},"ds/tree/bst/#search":{}},"title":{}}],["search(struct",{"_index":2510,"text":{"ds/tree/bst/":{},"ds/tree/bst/#search":{}},"title":{}}],["search_el",{"_index":1224,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{}},"title":{}}],["searchfor",{"_index":2860,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["searchm",{"_index":3296,"text":{"java/strings/":{}},"title":{}}],["searchme.length();",{"_index":3302,"text":{"java/strings/":{}},"title":{}}],["searchmelength",{"_index":3301,"text":{"java/strings/":{}},"title":{}}],["second",{"_index":284,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["section",{"_index":953,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/vs-array/#linked-list":{},"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["secur",{"_index":822,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{}},"title":{"java/security/":{},"php/security/":{}}}],["securityexcept",{"_index":2784,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["see",{"_index":170,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/basics/":{},"php/basics/#float":{}},"title":{"algo/analysis/intro/#why-not-just-run-it-see-running-time":{}}}],["seed",{"_index":1474,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["seen",{"_index":487,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["segment",{"_index":2658,"text":{},"title":{"ds/tree/segment-tree/":{}}}],["select",{"_index":516,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{}},"title":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}}}],["selectionsort(int",{"_index":1283,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["self",{"_index":1753,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["send",{"_index":1444,"text":{"ds/array/decay/":{},"ds/array/decay/#array-decay":{}},"title":{}}],["sensit",{"_index":2808,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["sent",{"_index":2042,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["sep",{"_index":3287,"text":{"java/strings/":{}},"title":{}}],["separ",{"_index":506,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{}},"title":{}}],["sequenc",{"_index":435,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/string/intro/":{},"ds/string/intro/#string":{},"java/basics/":{},"java/basics/#naming":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["seri",{"_index":1115,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["server",{"_index":799,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["set",{"_index":52,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#np":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/graph/intro/":{},"ds/graph/intro/#properties":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/set-map/set-types/#set-types":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{},"java/oops/":{},"java/oops/#library":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{},"ds/set-map/set/":{},"ds/set-map/set/#set":{}}}],["set'",{"_index":2118,"text":{"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{}},"title":{}}],["set::operator=",{"_index":2140,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["setup",{"_index":3336,"text":{"php/atttributes/":{}},"title":{}}],["sever",{"_index":1045,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["shall",{"_index":1434,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["shape",{"_index":1700,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["share",{"_index":2034,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#polymorphism":{},"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["shcedul",{"_index":1847,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{}},"title":{}}],["shift",{"_index":11,"text":{"algo/bits/":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"algo/bits/#signed-right-shift":{},"algo/bits/#unsigned-right-shift":{}}}],["shit",{"_index":596,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{}},"title":{}}],["short",{"_index":2806,"text":{"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],["shortest",{"_index":674,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["shorthand",{"_index":2841,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["show",{"_index":679,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"php/basics/":{},"php/basics/#html-escaping":{}},"title":{}}],["shown",{"_index":946,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{}},"title":{}}],["shrink",{"_index":588,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["shrink_to_fit",{"_index":1568,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{}},"title":{}}],["sibl",{"_index":2630,"text":{"ds/tree/intro/":{},"ds/tree/intro/#tree":{}},"title":{}}],["side",{"_index":1003,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{}}],["sign",{"_index":9,"text":{"algo/bits/":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"algo/bits/#detect-if-two-integers-have-opposite-signs":{},"algo/bits/#signed-right-shift":{}}}],["signalon",{"_index":3096,"text":{"java/interfaces/":{}},"title":{}}],["signalturn(direct",{"_index":3095,"text":{"java/interfaces/":{}},"title":{}}],["signatur",{"_index":3022,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{}},"title":{}}],["similar",{"_index":970,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vs-pointers/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{"ds/array/vs-pointers/#similarities":{}}}],["similarli",{"_index":2525,"text":{"ds/tree/bst/":{},"ds/tree/bst/#minvalue":{}},"title":{}}],["simpl",{"_index":54,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/array/frequency/":{},"ds/queue/print-binary/":{},"ds/stack/k-stacks/":{},"ds/tree/bst-check/":{},"java/basics/":{},"java/basics/#operators":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#float":{}},"title":{"ds/array/frequency/#simple":{},"ds/queue/print-binary/#simple":{},"ds/stack/k-stacks/#simple":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{}}}],["simpli",{"_index":471,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"java/collections/":{}},"title":{}}],["simplifi",{"_index":2458,"text":{"ds/tree/bst-check/":{}},"title":{"ds/tree/bst-check/#simplified-method-3":{}}}],["simul",{"_index":2925,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["simultan",{"_index":2964,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["sin",{"_index":3217,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["singl",{"_index":1701,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/string/intro/":{},"ds/string/intro/#string":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/collections/":{},"java/helloworld/":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["site",{"_index":1606,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["situat",{"_index":3070,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["size",{"_index":336,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-5-optimized-method-4":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vectors/#modifiers":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-matrix":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#why":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["size_t",{"_index":1896,"text":{"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{}},"title":{}}],["sizeof",{"_index":1589,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["sizeof(arr)",{"_index":1588,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["sizeof(count));",{"_index":2309,"text":{"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{}},"title":{}}],["sizeof(int))];",{"_index":2052,"text":{"ds/queue/intro/":{},"ds/queue/intro/#array":{}},"title":{}}],["sizeof(ptr);",{"_index":1591,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["sizof(int)",{"_index":1587,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{}},"title":{}}],["skew",{"_index":2518,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#minvalue":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{}},"title":{}}],["sllnode",{"_index":1957,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["slot",{"_index":768,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["slow",{"_index":432,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["slower",{"_index":835,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/tree/intro/":{},"ds/tree/intro/#why":{}},"title":{}}],["small",{"_index":784,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"java/packages/":{},"java/packages/#why":{},"php/basics/":{},"php/basics/#float":{},"php/basics/#string":{}},"title":{}}],["smaller",{"_index":233,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"java/intro/":{},"java/intro/#why":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["smallest",{"_index":84,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#chromatic-number":{},"algo/bits/":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/k-smallest/":{}},"title":{"algo/bits/#smallest-of-three-integers-without-comparison-operators":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#k-smallest":{}}}],["smallest(int",{"_index":90,"text":{"algo/bits/":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{}},"title":{}}],["smith",{"_index":2725,"text":{"java/annotations/":{},"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["sn",{"_index":2210,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["snode",{"_index":2466,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#stack-related-stuff":{}},"title":{}}],["social",{"_index":1604,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["softwar",{"_index":836,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"java/annotations/":{},"java/collections/":{},"java/collections/#why":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["solut",{"_index":55,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["solutiion",{"_index":1657,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["solv",{"_index":603,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#p":{},"algo/analysis/classes/#reduction":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/dac/intro/#conquer":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["solver",{"_index":2164,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["someth",{"_index":499,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["sometim",{"_index":2610,"text":{"ds/tree/handshaking-lemma/":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["soon",{"_index":517,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{}},"title":{}}],["sort",{"_index":515,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/set-map/set-types/#set-types":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#problems":{},"ds/stack/sort/":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"php/basics/":{},"php/basics/#comments":{}},"title":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#merge-sort":{},"ds/array/frequency/#sort-then-binary-search":{},"ds/heap/heap-sort/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{}}}],["sortedinsert",{"_index":2263,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sortedinsert(node**",{"_index":1865,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{}},"title":{}}],["sortedinsert(s,",{"_index":2269,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sortedinsert(struct",{"_index":2264,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sortedmap",{"_index":2885,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{}}],["sortedmerge(a",{"_index":1382,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["sortedmerge(a,",{"_index":1380,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["sortedmerge(node*",{"_index":1381,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["sortedset",{"_index":2884,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{}}],["sortstack",{"_index":2262,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sortstack(s);",{"_index":2272,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sortstack(struct",{"_index":2270,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["sourc",{"_index":1384,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#why":{},"java/strings/":{},"php/intro/":{}},"title":{"java/packages/#managing-source-and-class-files":{}}}],["space",{"_index":331,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/space/":{},"algo/analysis/space/#auxiliary-space":{},"algo/analysis/space/#space-complexity":{},"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/graph/intro/":{},"ds/graph/intro/#cons":{},"ds/graph/intro/#pros_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#simple":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/string/white-space/":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/k-smallest/":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#how-to-pick-one":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/packages/":{}},"title":{"algo/analysis/space/":{},"algo/analysis/space/#auxiliary-space":{},"algo/analysis/space/#space":{},"algo/analysis/space/#space-complexity":{},"algo/maths/#method-3-space-optimised-2":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/#space-complexity":{}}}],["spacefound",{"_index":2381,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["span",{"_index":1749,"text":{"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/stock-span/":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"java/strings/":{}},"title":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#stock-span":{}}}],["spars",{"_index":1680,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons":{}},"title":{}}],["spatial",{"_index":549,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["speci",{"_index":3039,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["special",{"_index":2233,"text":{"ds/stack/medium-special/":{},"ds/stack/min-special/":{},"php/basics/":{},"php/basics/#types":{}},"title":{"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{}}}],["specialstack'",{"_index":2250,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{}},"title":{}}],["specialstack::pop()",{"_index":2251,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["specialstack::push(int",{"_index":2245,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["specif",{"_index":118,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/basics/":{},"java/basics/#operators":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#naming":{},"php/intro/":{}},"title":{}}],["specifi",{"_index":1581,"text":{"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["speed",{"_index":2877,"text":{"java/collections/":{},"java/collections/#why":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["speedofcar",{"_index":3099,"text":{"java/interfaces/":{}},"title":{}}],["speedup(int",{"_index":3239,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["spend",{"_index":493,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["splai",{"_index":447,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["split",{"_index":1390,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["sqrt",{"_index":581,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["sqrt(n);",{"_index":1261,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{}},"title":{}}],["squar",{"_index":259,"text":{"algo/maths/":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{"algo/maths/#square-root":{}}}],["squareroot(float",{"_index":262,"text":{"algo/maths/":{},"algo/maths/#square-root":{}},"title":{}}],["srand",{"_index":1475,"text":{"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{}},"title":{}}],["sscanf",{"_index":2363,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{}},"title":{"ds/string/string-to-no/#sscanf":{}}}],["sscanf(str,",{"_index":2367,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{}},"title":{}}],["sstream",{"_index":2359,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{}},"title":{}}],["st",{"_index":2282,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{}},"title":{}}],["st.pop();",{"_index":2258,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["st.push(0);",{"_index":2283,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["st.push(a);",{"_index":2260,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["st.push(i);",{"_index":2289,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["st.push(x);",{"_index":2256,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["st.top());",{"_index":2288,"text":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["st.top();",{"_index":2257,"text":{"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{}},"title":{}}],["st=*s;",{"_index":2471,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{}},"title":{}}],["stabl",{"_index":1268,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{}},"title":{"algo/sort/intro/#stable":{}}}],["stableselectionsort(int",{"_index":1290,"text":{"algo/sort/intro/":{},"algo/sort/intro/#stable":{}},"title":{}}],["stack",{"_index":335,"text":{"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-5-optimized-method-4":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/linked-list/reverse/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/intro/#stack":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/k-stacks/#simple":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/using-queue/":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-merge/":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{},"java/exceptions/":{}},"title":{"ds/linked-list/reverse/#stack":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#queue-using-stack":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#stack":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#k-stacks":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#stack-using-queue":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/traversal/#using-call-stack":{}}}],["stack2",{"_index":2095,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["stack::isempty()",{"_index":2176,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["stack::peek()",{"_index":2174,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["stack::pop()",{"_index":2172,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["stack::pop();",{"_index":2252,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["stack::push(int",{"_index":2169,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["stack::push(x);",{"_index":2246,"text":{"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["stack<int>",{"_index":2084,"text":{"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#using-stack":{}},"title":{}}],["stack<node*>",{"_index":1921,"text":{"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{}},"title":{}}],["stack\\n\";",{"_index":2171,"text":{"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["stacknod",{"_index":2181,"text":{"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{}},"title":{}}],["stage",{"_index":2637,"text":{"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["standard",{"_index":1079,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["start",{"_index":1112,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"java/basics/":{},"java/basics/#naming":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#naming":{},"php/basics/":{}},"title":{}}],["startspe",{"_index":3092,"text":{"java/interfaces/":{}},"title":{}}],["state",{"_index":792,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/oops/#objects":{}},"title":{"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}}}],["statement",{"_index":566,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/classes/#time-complexity-classes":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/strings/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["statement(s)",{"_index":2855,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["static",{"_index":203,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#lucky-number":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#static-methods":{},"java/numbers/":{},"java/numbers/#advanced-math":{},"java/packages/":{},"java/packages/#static-import":{},"java/strings/":{},"php/basics/":{},"php/basics/#callable":{}},"title":{"java/interfaces/#static-methods":{},"java/packages/#static-import":{}}}],["std",{"_index":1411,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{}},"title":{}}],["std::string",{"_index":2323,"text":{"ds/string/intro/":{}},"title":{"ds/string/intro/#stdstring-vs-character-array":{}}}],["steal",{"_index":2003,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["step",{"_index":460,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["still",{"_index":1336,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["stirling\u2019",{"_index":713,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["stl",{"_index":2139,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"java/collections/":{}},"title":{}}],["stock",{"_index":2158,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/stock-span/":{}},"title":{"ds/stack/stock-span/":{},"ds/stack/stock-span/#stock-span":{}}}],["stoi",{"_index":2369,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#stoi-vs-atoi":{}},"title":{"ds/string/string-to-no/#stoi-vs-atoi":{}}}],["stop",{"_index":1299,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["storag",{"_index":1734,"text":{"ds/heap/intro/":{},"ds/heap/intro/#traversal":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{}},"title":{}}],["store",{"_index":546,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/string/intro/":{},"ds/string/intro/#input":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/collections/":{}},"title":{}}],["str",{"_index":2344,"text":{"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#sscanf":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/strings/":{}},"title":{}}],["str.end());",{"_index":2397,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["str.erase(str.begin()",{"_index":2396,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["str.length();",{"_index":2351,"text":{"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["str2",{"_index":2354,"text":{"ds/string/rotation/":{},"ds/string/rotation/#rotation":{}},"title":{}}],["str[i",{"_index":2391,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["str[i++]",{"_index":2393,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["str[i];",{"_index":2349,"text":{"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{}},"title":{}}],["str[index++]",{"_index":2348,"text":{"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{}},"title":{}}],["str[j++];",{"_index":2392,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["str[j]",{"_index":2382,"text":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}},"title":{}}],["str[n",{"_index":2353,"text":{"ds/string/reverse/":{},"ds/string/reverse/#reverse":{}},"title":{}}],["straight",{"_index":1008,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["strategi",{"_index":1367,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["strcat(s1,",{"_index":2334,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["strchr(s1,",{"_index":2339,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["strcmp(s1,",{"_index":2336,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["strcpy(s1,",{"_index":2333,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["stream",{"_index":414,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"ds/string/intro/":{},"ds/string/intro/#input":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{"algo/maths/#average-of-stream-of-numbers":{}}}],["stream.collect",{"_index":2970,"text":{"java/collections/":{}},"title":{"java/collections/#streamcollect-method":{}}}],["stretch",{"_index":3014,"text":{"java/inheritance/":{}},"title":{}}],["strict",{"_index":909,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["string",{"_index":255,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{},"ds/string/intro/":{},"ds/string/intro/#capacity":{},"ds/string/intro/#input":{},"ds/string/intro/#iterator":{},"ds/string/intro/#manipulating":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"ds/string/string-to-no/#using-stringstream-class":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/numbers/":{},"java/strings/":{},"java/strings/#why":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#types":{}},"title":{"ds/string/intro/":{},"ds/string/intro/#operations-on-strings":{},"ds/string/intro/#string":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#string-to-double":{},"ds/string/string-to-no/#strings-to-numbers":{},"java/strings/":{},"php/basics/#string":{}}}],["string(a);",{"_index":2956,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["string(chararray);",{"_index":3321,"text":{"java/strings/":{}},"title":{}}],["string::npos);",{"_index":2357,"text":{"ds/string/rotation/":{},"ds/string/rotation/#rotation":{}},"title":{}}],["stringbuff",{"_index":3325,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["stringbuild",{"_index":3323,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["stringdemo",{"_index":3308,"text":{"java/strings/":{}},"title":{}}],["stringstream",{"_index":2358,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{}},"title":{"ds/string/string-to-no/#using-stringstream-class":{}}}],["stringvar",{"_index":3191,"text":{"java/numbers/":{}},"title":{}}],["strlen(num1);",{"_index":217,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["strlen(num2);",{"_index":219,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{}},"title":{}}],["strlen(s1)",{"_index":2335,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["stronger",{"_index":2706,"text":{"java/annotations/":{},"java/generics/":{},"java/generics/#why":{}},"title":{}}],["strongli",{"_index":1655,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["strstr(s1,",{"_index":2342,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["struct",{"_index":1484,"text":{"ds/array/intro/":{},"ds/array/intro/#introduction":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#representaion":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{}},"title":{}}],["structur",{"_index":442,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/intro/":{},"ds/tree/intro/#why":{},"ds/tree/k-smallest/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{}}}],["student",{"_index":767,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["stuff",{"_index":2465,"text":{"ds/tree/bst-merge/":{}},"title":{"ds/tree/bst-merge/#stack-related-stuff":{}}}],["style",{"_index":2364,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#stoi-vs-atoi":{}},"title":{}}],["sub",{"_index":1145,"text":{"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/dac/intro/#conquer":{},"algo/dac/intro/#divide":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["subarrai",{"_index":1162,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{}},"title":{}}],["subclass",{"_index":3009,"text":{"java/inheritance/":{},"java/inheritance/#abstract-methods-and-classes":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["subject",{"_index":754,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["sublist",{"_index":1413,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["subproblem",{"_index":2963,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["subset",{"_index":610,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{}}],["substitut",{"_index":1102,"text":{"algo/analysis/recursive/":{}},"title":{"algo/analysis/recursive/#substitution-method":{}}}],["substr",{"_index":2330,"text":{"ds/string/intro/":{},"ds/string/intro/#manipulating":{}},"title":{}}],["subtract",{"_index":89,"text":{"algo/bits/":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"algo/bits/#method-1-repeated-subtraction":{}}}],["subtre",{"_index":1352,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["suc",{"_index":2528,"text":{"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["succ",{"_index":2522,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["success",{"_index":554,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{}},"title":{}}],["successor",{"_index":1760,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}}}],["succpar",{"_index":2521,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["such",{"_index":231,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#super-keyword":{},"java/numbers/":{}},"title":{}}],["sudoku",{"_index":776,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["suffici",{"_index":795,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["suffix",{"_index":2436,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["suggest",{"_index":1862,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["suit",{"_index":3500,"text":{"php/intro/":{}},"title":{}}],["sum",{"_index":58,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#multiple-of-3":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["sum(a,",{"_index":1012,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["sum(deg(v))",{"_index":2611,"text":{"ds/tree/handshaking-lemma/":{}},"title":{}}],["sum(t(i",{"_index":2567,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["sum(t(n",{"_index":2568,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["super",{"_index":2772,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{"java/inheritance/#super-keyword":{}}}],["super(paramet",{"_index":3043,"text":{"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{}}],["superclass",{"_index":3010,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#super-keyword":{}},"title":{"java/inheritance/#object-as-superclass":{}}}],["superclass'",{"_index":3230,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["supplement",{"_index":3020,"text":{"java/inheritance/":{}},"title":{}}],["supplier",{"_index":2975,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["support",{"_index":227,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"php/basics/":{},"php/basics/#types":{}},"title":{}}],["suppos",{"_index":687,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["suppress",{"_index":2699,"text":{"java/annotations/":{}},"title":{}}],["swap",{"_index":560,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/swap/":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}}}],["swap(&(curr",{"_index":1864,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["swap(&arr[j],",{"_index":1305,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{}},"title":{}}],["swap(&arr[min_idx],",{"_index":1288,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["swap(&harr[i],",{"_index":1797,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["swap(((*a)",{"_index":1934,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["swap(*a,",{"_index":1933,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["swap(int",{"_index":1279,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["swap(node*&",{"_index":1931,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["swap(str[i],",{"_index":2352,"text":{"ds/string/reverse/":{},"ds/string/reverse/#reverse":{}},"title":{}}],["swapnodes(node**",{"_index":1932,"text":{"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{}},"title":{}}],["swing",{"_index":3152,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["switch",{"_index":2851,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["symbol",{"_index":2147,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["symmetr",{"_index":891,"text":{"algo/analysis/intro/":{}},"title":{"algo/analysis/intro/#symmetric-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{}}}],["synchron",{"_index":3327,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["syntax",{"_index":2432,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"php/basics/":{},"php/basics/#arrays":{}},"title":{}}],["system",{"_index":1951,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/tree/intro/":{},"ds/tree/intro/#why":{},"java/annotations/":{},"java/numbers/":{},"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"php/basics/":{},"php/basics/#float":{},"php/security/":{}},"title":{"java/annotations/#type-annotations-and-pluggable-type-systems":{}}}],["system.arraycopy(copyfrom,",{"_index":2822,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["system.err.println(e);",{"_index":2945,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.exit(1);",{"_index":2946,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.format(\"th",{"_index":3187,"text":{"java/numbers/":{}},"title":{}}],["system.out.printf(...)",{"_index":3186,"text":{"java/numbers/":{}},"title":{}}],["system.out.println(",{"_index":1227,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{}},"title":{}}],["system.out.println(\"averag",{"_index":2978,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["system.out.println(\"cadence:\"",{"_index":3245,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["system.out.println(\"found",{"_index":2862,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["system.out.println(\"hello",{"_index":3005,"text":{"java/helloworld/":{}},"title":{}}],["system.out.println(\"no",{"_index":3307,"text":{"java/strings/":{}},"title":{}}],["system.out.println(\"not",{"_index":1230,"text":{"algo/search/intro/":{},"algo/search/intro/#linear-search":{}},"title":{}}],["system.out.println(\"th",{"_index":3078,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["system.out.println(e.getname()));",{"_index":2895,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.println(java.util.arrays.tostring(copyto))",{"_index":2831,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["system.out.println(l.size()",{"_index":2951,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.println(o);",{"_index":2908,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.println(reversepalindrome);",{"_index":3322,"text":{"java/strings/":{}},"title":{}}],["system.out.println(searchfor",{"_index":2863,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["system.out.println(searchme.substring(i,",{"_index":3306,"text":{"java/strings/":{}},"title":{}}],["system.out.println(valu",{"_index":3199,"text":{"java/numbers/":{}},"title":{}}],["t",{"_index":2467,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-1":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"java/annotations/":{}},"title":{}}],["t(0)",{"_index":2551,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["t(0)*t(2)",{"_index":2554,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(0)*t(3)",{"_index":2561,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(1)",{"_index":1175,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["t(1)*t(1)",{"_index":2555,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(1)*t(2)",{"_index":2562,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(2)",{"_index":2552,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(2)*t(0)",{"_index":2556,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(2)*t(1)",{"_index":2563,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(3)",{"_index":2553,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(3)*t(0)",{"_index":2564,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(4)",{"_index":2560,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(i",{"_index":2570,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(i))",{"_index":2569,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t(k)",{"_index":2662,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["t(n",{"_index":328,"text":{"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["t(n)",{"_index":327,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#recursive":{},"algo/analysis/recursive/#substitution-method":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["t(n),",{"_index":1128,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["t(n)>|log",{"_index":998,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["t(n/16)",{"_index":1124,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["t(n/2)",{"_index":1085,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["t(n/2),",{"_index":1121,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["t(n/3)",{"_index":1177,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["t(n/4)",{"_index":1116,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["t(n/8)",{"_index":1125,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["t(n\u2212i",{"_index":2571,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#unlabeled-trees":{}},"title":{}}],["t*3",{"_index":2627,"text":{"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-3":{}},"title":{}}],["tabl",{"_index":445,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/search/intro/":{},"algo/search/intro/#searching":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{}},"title":{}}],["tag",{"_index":3365,"text":{"php/basics/":{}},"title":{}}],["tail",{"_index":1368,"text":{"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"ds/linked-list/reverse/":{}},"title":{"ds/linked-list/reverse/#tail-recursive-method":{}}}],["take",{"_index":158,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/stack/intro/":{},"ds/stack/intro/#stack":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#using-call-stack":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["taken",{"_index":804,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{}},"title":{}}],["talk",{"_index":833,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{}},"title":{}}],["target",{"_index":782,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/string/intro/":{},"ds/string/intro/#manipulating":{},"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["targetdirectori",{"_index":3338,"text":{"php/atttributes/":{}},"title":{}}],["targetdirectoryexist",{"_index":3342,"text":{"php/atttributes/":{}},"title":{}}],["task",{"_index":716,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["techniqu",{"_index":954,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{}},"title":{}}],["technolog",{"_index":3148,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["tell",{"_index":1665,"text":{"ds/graph/intro/":{},"ds/graph/intro/#properties":{}},"title":{}}],["temp",{"_index":1282,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/string/rotation/":{},"ds/string/rotation/#rotation":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{}},"title":{}}],["tempchararrai",{"_index":3313,"text":{"java/strings/":{}},"title":{}}],["tempchararray[i]",{"_index":3316,"text":{"java/strings/":{}},"title":{}}],["tempchararray[len",{"_index":3319,"text":{"java/strings/":{}},"title":{}}],["temperatureexcept",{"_index":2738,"text":{"java/annotations/":{}},"title":{}}],["temporari",{"_index":1140,"text":{"algo/analysis/space/":{},"algo/analysis/space/#auxiliary-space":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{}},"title":{}}],["term",{"_index":752,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["termin",{"_index":2324,"text":{"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{},"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["ternari",{"_index":1176,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["ternarysearch(arr,",{"_index":1194,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["ternarysearch(int",{"_index":1187,"text":{"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{}},"title":{}}],["terneri",{"_index":46,"text":{"algo/bits/":{},"algo/search/exponential/":{}},"title":{"algo/bits/#ternery":{},"algo/search/exponential/#ternery-search":{}}}],["test",{"_index":1432,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["testclassmethod",{"_index":3077,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["testinstancemethod",{"_index":3079,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["testscor",{"_index":2848,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["text",{"_index":2437,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["tfibonacci",{"_index":1764,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["that'",{"_index":3449,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["themselv",{"_index":968,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["theorem",{"_index":796,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["theoret",{"_index":1560,"text":{"ds/array/vectors/":{},"ds/array/vectors/#iterators":{},"ds/set-map/set/":{},"ds/set-map/set/#functions":{}},"title":{}}],["theori",{"_index":943,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{}},"title":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-and-upper-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{}}}],["theorum",{"_index":1063,"text":{"algo/analysis/master-theorum/":{}},"title":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{}}}],["therefor",{"_index":476,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#without-it":{},"java/inheritance/":{}},"title":{}}],["theta",{"_index":865,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["theta(logn)",{"_index":1231,"text":{"algo/search/intro/":{},"algo/search/intro/#binary-search":{}},"title":{}}],["thing",{"_index":827,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["think",{"_index":691,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["those",{"_index":966,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["though",{"_index":634,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"ds/set-map/set/":{},"ds/set-map/set/#set":{}},"title":{}}],["thread",{"_index":3185,"text":{"java/numbers/":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["threat",{"_index":2325,"text":{"ds/string/intro/":{},"ds/string/intro/#stdstring-vs-character-array":{}},"title":{}}],["three",{"_index":85,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/bits/":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"ds/array/multi-dimensional/":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"algo/bits/#smallest-of-three-integers-without-comparison-operators":{},"ds/array/multi-dimensional/#three-dimensional-array":{}}}],["threshold",{"_index":2947,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["through",{"_index":826,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["throw",{"_index":2737,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/exceptions/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"php/atttributes/":{}},"title":{}}],["throwabl",{"_index":3048,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["thrown",{"_index":2735,"text":{"java/annotations/":{}},"title":{}}],["thu",{"_index":531,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/tree/traversal/":{},"ds/tree/traversal/#how-to-pick-one":{},"java/inheritance/":{}},"title":{}}],["tight",{"_index":480,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["till",{"_index":977,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{}},"title":{}}],["time",{"_index":325,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#p":{},"algo/analysis/classes/#reduction":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#recursive":{},"algo/maths/":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/intro/":{},"algo/search/intro/#binary-search":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#why":{}},"title":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/maths/#method-6-olog-n-time":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/#time-complexity":{}}}],["time.tim",{"_index":1060,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{}},"title":{}}],["timeout",{"_index":3057,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["titl",{"_index":3376,"text":{"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["tmp",{"_index":2469,"text":{"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{}},"title":{}}],["tobin",{"_index":2067,"text":{"ds/queue/print-binary/":{},"ds/queue/print-binary/#simple":{}},"title":{}}],["tod",{"_index":3311,"text":{"java/strings/":{}},"title":{}}],["todo",{"_index":817,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#greedy-aproach":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"ds/heap/heap-sort/":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#reverse":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#doubly-linked-list":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/segment-tree/":{},"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#type-juggling-and-declartion":{}},"title":{}}],["togeth",{"_index":807,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["tool",{"_index":2702,"text":{"java/annotations/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["toolkit",{"_index":3150,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["top",{"_index":1752,"text":{"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"java/basics/":{},"java/basics/#control-flow":{},"java/intro/":{},"java/intro/#platform":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["top(*s))",{"_index":2266,"text":{"ds/stack/sort/":{},"ds/stack/sort/#sort":{}},"title":{}}],["top[i]",{"_index":2219,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["top[k]",{"_index":2207,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["top[sn]",{"_index":2228,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["top[sn];",{"_index":2227,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["topmost",{"_index":3011,"text":{"java/inheritance/":{}},"title":{}}],["topolog",{"_index":1653,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["tortois",{"_index":1858,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#problems":{}},"title":{}}],["tostr",{"_index":3052,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["total",{"_index":51,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/bits/":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{}}}],["totalagebygend",{"_index":2983,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["totalagereduc",{"_index":2966,"text":{"java/collections/":{},"java/collections/#reduction":{}},"title":{}}],["tour",{"_index":2000,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["tower",{"_index":772,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["tp",{"_index":2372,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{}},"title":{}}],["trace",{"_index":1348,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["track",{"_index":2519,"text":{"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{}},"title":{}}],["trade",{"_index":450,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["transfer",{"_index":2037,"text":{"ds/queue/intro/":{},"ds/queue/intro/#application":{}},"title":{}}],["transform",{"_index":759,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{}},"title":{}}],["transformation(f)",{"_index":661,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["transit",{"_index":683,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/intro/":{}},"title":{"algo/analysis/intro/#transitive-properties":{}}}],["transoform",{"_index":658,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["transpos",{"_index":893,"text":{"algo/analysis/intro/":{}},"title":{"algo/analysis/intro/#transpose-symmetric-properties":{}}}],["travers",{"_index":1259,"text":{"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/array/intro/":{},"ds/array/intro/#advantages":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#advantages":{},"ds/linked-list/intro/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#arrays":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"ds/tree/k-smallest/":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#traversal":{},"java/collections/":{}},"title":{"ds/array/intro/#traversal":{},"ds/heap/intro/#traversal":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/intro/#traversal":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#traversal":{},"java/collections/#traversing-collections":{}}}],["tree",{"_index":448,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#binary-heap":{},"ds/heap/intro/#operations":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#applications":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#properties":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#facts":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#traversal":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{}},"title":{"algo/analysis/recursive/#recurrence-tree-method":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#binary-tree-to-circular-dll":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#a-degenerate-or-pathological-tree":{},"ds/tree/binary-tree/#balanced-binary-tree":{},"ds/tree/binary-tree/#binary-tree":{},"ds/tree/binary-tree/#complete-binary-tree":{},"ds/tree/binary-tree/#full-binary-tree":{},"ds/tree/binary-tree/#perfect-binary-tree":{},"ds/tree/bst/":{},"ds/tree/bst/#binary-search-tree":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#binary-tree-enumeration":{},"ds/tree/bt-enumeration/#labeled-trees":{},"ds/tree/bt-enumeration/#unlabeled-trees":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#k-ary-tree-where-every-node-has-either-0-or-k-children":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/segment-tree/":{}}}],["tree_",{"_index":1356,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["trick",{"_index":6,"text":{"algo/bits/":{}},"title":{"algo/bits/":{},"algo/bits/#bits-tricks":{}}}],["trie",{"_index":2433,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["trivial",{"_index":957,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}}}],["true",{"_index":1108,"text":{"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"ds/array/frequency/":{},"ds/array/frequency/#simple":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#html-escaping":{},"php/basics/#types":{}},"title":{}}],["trust",{"_index":3445,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["trvers",{"_index":1878,"text":{"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{}},"title":{}}],["try",{"_index":256,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"java/collections/":{},"java/collections/#traversing-collections":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["ture",{"_index":605,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/classes/#p":{}},"title":{}}],["turn",{"_index":809,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why":{}},"title":{}}],["turn(direct",{"_index":3090,"text":{"java/interfaces/":{}},"title":{}}],["twice",{"_index":465,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{}},"title":{}}],["two",{"_index":32,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/maths/":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/bin-tree-cdll/":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#in-binary-tree":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{"algo/bits/#add-two-numbers-without-using-arithmetic-operators":{},"algo/bits/#detect-if-two-integers-have-opposite-signs":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{}}}],["type",{"_index":974,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/intro/":{},"ds/graph/intro/#representation":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set-types/":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"java/annotations/":{},"java/annotations/#design-considerations":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/basics/#variables":{},"java/collections/":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#virtual-method-invocation":{},"java/numbers/":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{},"java/packages/#name-ambiguities":{},"java/packages/#why":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#types":{}},"title":{"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{},"java/annotations/#annotation-type":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"php/basics/#type-juggling-and-declartion":{},"php/basics/#types":{}}}],["typecast",{"_index":3411,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["typeerror",{"_index":3454,"text":{"php/basics/":{},"php/basics/#string":{}},"title":{}}],["typic",{"_index":464,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"java/collections/":{},"java/collections/#interfaces":{},"php/basics/":{},"php/basics/#float":{},"php/intro/":{}},"title":{}}],["u",{"_index":1668,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/graph/intro/#properties":{}},"title":{}}],["u(n)",{"_index":947,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{}},"title":{}}],["unari",{"_index":2834,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["unauthorizedaccessexcept",{"_index":2783,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["unbound",{"_index":1159,"text":{"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{}},"title":{}}],["unbox",{"_index":3331,"text":{"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{}},"title":{"java/strings/#autoboxing-and-unboxing":{}}}],["uncheck",{"_index":2718,"text":{"java/annotations/":{}},"title":{}}],["under",{"_index":1016,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["underflow",{"_index":2031,"text":{"ds/queue/intro/":{},"ds/queue/intro/#operations":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{}},"title":{}}],["underflow\\n\"",{"_index":2021,"text":{"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{}},"title":{}}],["underflow\\n\";",{"_index":2231,"text":{"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{}},"title":{}}],["underli",{"_index":2907,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["underscor",{"_index":3258,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["understand",{"_index":972,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["undirect",{"_index":646,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{}},"title":{}}],["undo",{"_index":2152,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{}},"title":{}}],["unicod",{"_index":2810,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["unifi",{"_index":2869,"text":{"java/collections/":{}},"title":{}}],["uniformali",{"_index":1199,"text":{"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{}},"title":{}}],["uniformli",{"_index":838,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#interpolation-vs-binary":{}},"title":{}}],["union",{"_index":1747,"text":{"ds/heap/intro/":{},"ds/heap/intro/#application":{}},"title":{}}],["uniqu",{"_index":2109,"text":{"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#multiset":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/set-map/set-types/#set-types":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/set-map/set/#set":{},"ds/tree/bst/":{},"ds/tree/bst/#facts":{},"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["unit",{"_index":2867,"text":{"java/collections/":{}},"title":{}}],["unlabel",{"_index":2549,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{}},"title":{"ds/tree/bt-enumeration/#unlabeled-trees":{}}}],["unless",{"_index":3250,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["unlik",{"_index":696,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["unlimit",{"_index":2809,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["unmark",{"_index":1638,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#dfs":{}},"title":{}}],["unmodifiablelist<t>",{"_index":2732,"text":{"java/annotations/":{}},"title":{}}],["unord",{"_index":1977,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/set-map/set-types/":{},"ds/set-map/set-types/#conclusion":{},"ds/tree/intro/":{},"ds/tree/intro/#why":{}},"title":{}}],["unordered_map<int,",{"_index":1455,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["unordered_multiset",{"_index":2126,"text":{"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{}},"title":{}}],["unordered_set",{"_index":2125,"text":{"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{}},"title":{}}],["unpredict",{"_index":1891,"text":{"ds/linked-list/functions/":{},"ds/linked-list/functions/#functional-passing":{}},"title":{}}],["unrel",{"_index":2880,"text":{"java/collections/":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["unrestrict",{"_index":3247,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["unsaf",{"_index":2759,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["unsign",{"_index":23,"text":{"algo/bits/":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"java/basics/":{},"java/basics/#operators":{}},"title":{"algo/bits/#unsigned-right-shift":{}}}],["unsort",{"_index":1433,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["until",{"_index":1146,"text":{"algo/dac/intro/":{},"algo/dac/intro/#conquer":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{}},"title":{}}],["unvisit",{"_index":1639,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{}},"title":{}}],["unwant",{"_index":3366,"text":{"php/basics/":{}},"title":{}}],["up",{"_index":693,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"java/java9%26beyond/":{},"php/basics/":{},"php/basics/#comments":{},"php/basics/#float":{}},"title":{}}],["updat",{"_index":798,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["upper",{"_index":478,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/intro/#worst-case":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"java/numbers/":{}},"title":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-and-upper-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#upper-bound":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{}}}],["upper_bound(const",{"_index":2135,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["us",{"_index":16,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#reduction":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#substitution-method":{},"algo/analysis/space/":{},"algo/analysis/space/#auxiliary-space":{},"algo/analysis/space/#space-complexity":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/bits/#signed-right-shift":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#multiply-by-7":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"algo/sort/intro/#selection-sort":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/array/vectors/":{},"ds/array/vectors/#element-access":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/array/vs-pointers/#similarities":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/graph/intro/#representation":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/queue/intro/":{},"ds/queue/intro/#application":{},"ds/queue/intro/#array":{},"ds/queue/print-binary/":{},"ds/queue/using-stack/":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"ds/stack/intro/#problems":{},"ds/stack/stock-span/":{},"ds/stack/using-queue/":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/k-smallest/":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{},"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#by-its-qualified-name":{},"java/packages/#importing-an-entire-package":{},"java/packages/#name-ambiguities":{},"java/strings/":{},"java/strings/#why":{},"php/basics/":{},"php/basics/#arrays":{},"php/basics/#callable":{},"php/basics/#comments":{},"php/basics/#float":{},"php/intro/":{}},"title":{"algo/bits/#add-two-numbers-without-using-arithmetic-operators":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-7-using-formula":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#write-you-own-power-without-using-multiplication-and-division-operators":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#queue-using-stack":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#stack-using-queue":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{}}}],["usag",{"_index":973,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"java/packages/":{}},"title":{"java/packages/#usage":{}}}],["usefl",{"_index":1845,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#circular-ll":{}},"title":{}}],["user",{"_index":819,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"ds/queue/using-stack/":{},"ds/string/intro/":{},"ds/string/intro/#input":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/intro/":{},"java/intro/#platform":{},"php/intro/":{}},"title":{"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{}}}],["usual",{"_index":3443,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["util",{"_index":1418,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/xor-dll/":{}},"title":{"ds/linked-list/xor-dll/#xor-utility":{}}}],["v",{"_index":1039,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-matrix":{},"ds/graph/intro/#cons_1":{},"ds/graph/intro/#properties":{}},"title":{}}],["v:=0;",{"_index":1037,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["v:=a*x;",{"_index":1019,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["v:=v*x;",{"_index":1021,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["v:=v+b;",{"_index":1020,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["v=0",{"_index":1049,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["v=0;",{"_index":1054,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["v=v*x",{"_index":1051,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["v=v+a0",{"_index":1053,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["v=v+a1",{"_index":1052,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["v=v+an",{"_index":1050,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["val",{"_index":252,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["valid",{"_index":2378,"text":{"ds/string/string-to-no/":{},"ds/string/string-to-no/#string-to-double":{}},"title":{}}],["vallu",{"_index":2127,"text":{"ds/set-map/set-types/":{},"ds/set-map/set-types/#set-types":{}},"title":{}}],["valu",{"_index":114,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-not-just-run-it-see-running-time":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/analysis/recursive/#substitution-method":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/maths/":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-vs-binary":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/decay/":{},"ds/array/decay/#array-decay":{},"ds/array/vectors/":{},"ds/array/vectors/#modifiers":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#operations":{},"ds/set-map/map/":{},"ds/set-map/map/#maps":{},"ds/set-map/map/#multimap":{},"ds/set-map/multiset/":{},"ds/set-map/multiset/#functions":{},"ds/set-map/multiset/#multiset":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#functions":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#string-to-double":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bst/#minvalue":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#case-2":{},"ds/tree/handshaking-lemma/#case-3":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/numbers/":{},"php/basics/":{},"php/basics/#boolean":{},"php/basics/#iterable":{},"php/basics/#types":{}},"title":{"ds/tree/bst/#min-value":{}}}],["value_comp",{"_index":2133,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["valuse",{"_index":712,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["var1",{"_index":3409,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["var2",{"_index":3410,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["var_dump",{"_index":3388,"text":{"php/basics/":{},"php/basics/#types":{}},"title":{}}],["var_dump((bool)",{"_index":3402,"text":{"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["vararg",{"_index":2865,"text":{"java/classes/":{}},"title":{}}],["vari",{"_index":3371,"text":{"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["variabl",{"_index":420,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#why":{},"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{},"java/oops/":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/strings/":{},"java/strings/#why":{}},"title":{"java/basics/":{},"java/basics/#variables":{}}}],["variable'",{"_index":3041,"text":{"java/inheritance/":{},"java/inheritance/#virtual-method-invocation":{}},"title":{}}],["variat",{"_index":777,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"ds/heap/intro/":{},"ds/heap/intro/#application":{}},"title":{}}],["vector",{"_index":483,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#modifiers":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{"ds/array/vectors/":{},"ds/array/vectors/#vectors-in-cpp":{}}}],["vector<bool>",{"_index":1448,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],["vector<int>",{"_index":1691,"text":{"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{}},"title":{}}],["verbos",{"_index":3363,"text":{"php/basics/":{}},"title":{}}],["veri",{"_index":431,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"java/strings/":{}},"title":{}}],["verifi",{"_index":619,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{}},"title":{}}],["version",{"_index":423,"text":{"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#dequeue":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/java9%26beyond/":{}},"title":{}}],["vertex",{"_index":640,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-list":{},"ds/graph/intro/#cons_1":{},"ds/graph/intro/#properties":{},"ds/graph/intro/#pros_1":{}},"title":{"algo/analysis/graph-coloring/#vertex-coloring":{}}}],["vertic",{"_index":756,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-list":{},"ds/graph/intro/#properties":{},"ds/tree/handshaking-lemma/":{}},"title":{}}],["via",{"_index":611,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#np":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["violat",{"_index":1740,"text":{"ds/heap/intro/":{},"ds/heap/intro/#operations":{}},"title":{}}],["virtual",{"_index":2765,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{}},"title":{"java/inheritance/#virtual-method-invocation":{}}}],["visit",{"_index":1620,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/dfs/#dfs":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#application":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/bt-swap-nodes/#binary-tree-swapping":{}},"title":{}}],["visited(n,",{"_index":1449,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],["visited[*i]",{"_index":1634,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["visited[i]",{"_index":1622,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["visited[j]",{"_index":1453,"text":{"ds/array/frequency/":{},"ds/array/frequency/#simple":{}},"title":{}}],["visited[s]",{"_index":1625,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["visited[v]",{"_index":1643,"text":{"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["visual",{"_index":2442,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{}},"title":{}}],["void",{"_index":133,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["vs",{"_index":626,"text":{"algo/analysis/classes/":{},"algo/search/interpolation/":{},"ds/array/vs-pointers/":{},"ds/linked-list/vs-array/":{},"ds/string/intro/":{},"ds/string/string-to-no/":{},"ds/tree/traversal/":{},"java/collections/":{},"java/inheritance/":{},"java/java9%26beyond/":{}},"title":{"algo/analysis/classes/#decision-vs-optimization-problems":{},"algo/search/interpolation/#interpolation-vs-binary":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#array-vs-pointers":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#linked-list-vs-arrays":{},"ds/string/intro/#stdstring-vs-character-array":{},"ds/string/string-to-no/#stoi-vs-atoi":{},"ds/tree/traversal/#bfs-vs-dfs":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/#abstract-classes-vs-interface":{}}}],["w",{"_index":379,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-matrix":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["wai",{"_index":188,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-prove-that-a-given-problem-is-np-complete":{},"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#vertex-coloring":{},"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/maths/":{},"algo/maths/#multiple-of-3":{},"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/array/intro/":{},"ds/array/intro/#traversal":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/tree/traversal/":{},"ds/tree/traversal/#traversal":{},"java/inheritance/":{},"java/inheritance/#constructor-chaining":{},"php/basics/":{},"php/basics/#comments":{}},"title":{}}],["wait",{"_index":3055,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["wait(long",{"_index":3056,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["want",{"_index":230,"text":{"algo/analysis/space/":{},"algo/analysis/space/#space-complexity":{},"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["warn",{"_index":2700,"text":{"java/annotations/":{},"php/basics/":{},"php/basics/#float":{}},"title":{}}],["wastag",{"_index":1940,"text":{"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{}},"title":{}}],["weakest",{"_index":3506,"text":{"php/security/":{}},"title":{}}],["weakli",{"_index":1100,"text":{"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial-and-np-completeness":{}},"title":{}}],["web",{"_index":2155,"text":{"ds/stack/intro/":{},"ds/stack/intro/#applications-of-stack":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"php/intro/":{}},"title":{}}],["week",{"_index":802,"text":{"algo/analysis/graph-coloring/":{},"algo/analysis/graph-coloring/#applications":{}},"title":{}}],["weight",{"_index":671,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-list":{}},"title":{}}],["weight/value/cost.",{"_index":1670,"text":{"ds/graph/intro/":{},"ds/graph/intro/#properties":{}},"title":{}}],["well",{"_index":3059,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["wheel",{"_index":3233,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["whenev",{"_index":458,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{}},"title":{}}],["wherea",{"_index":926,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["whether",{"_index":1567,"text":{"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["while(!queue.empty())",{"_index":1628,"text":{"ds/graph/bfs/":{},"ds/graph/bfs/#application":{}},"title":{}}],["while(1)",{"_index":1392,"text":{"algo/sort/merge/":{},"algo/sort/merge/#local-reference":{}},"title":{}}],["while(curr",{"_index":1866,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{}},"title":{}}],["while(p",{"_index":1857,"text":{"ds/linked-list/cll/":{},"ds/linked-list/cll/#insertion":{}},"title":{}}],["while(temp!=null){",{"_index":1928,"text":{"ds/linked-list/search/":{},"ds/linked-list/search/#search":{}},"title":{}}],["white",{"_index":2379,"text":{"ds/string/white-space/":{}},"title":{"ds/string/white-space/":{},"ds/string/white-space/#white-space":{}}}],["whitepap",{"_index":3142,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["whole",{"_index":1335,"text":{"algo/sort/intro/":{},"algo/sort/intro/#insertion-sort":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"java/inheritance/":{},"java/inheritance/#constructor-chaining":{}},"title":{}}],["whose",{"_index":443,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{}},"title":{}}],["wide",{"_index":3497,"text":{"php/intro/":{}},"title":{}}],["width",{"_index":2688,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{}},"title":{}}],["wiht",{"_index":1656,"text":{"ds/graph/dfs/":{},"ds/graph/dfs/#application":{}},"title":{}}],["wiki",{"_index":1719,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["window",{"_index":1245,"text":{"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{}},"title":{}}],["wise",{"_index":1717,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["within",{"_index":1038,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"java/basics/":{},"java/basics/#access-modifiers":{}},"title":{}}],["without",{"_index":74,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/maths/":{},"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{},"ds/stack/stock-span/":{},"ds/tree/handshaking-lemma/":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/strings/":{},"php/basics/":{},"php/basics/#float":{}},"title":{"algo/bits/#add-two-numbers-without-using-arithmetic-operators":{},"algo/bits/#smallest-of-three-integers-without-comparison-operators":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#write-you-own-power-without-using-multiplication-and-division-operators":{},"ds/stack/stock-span/#without-stack":{},"ds/tree/handshaking-lemma/#without-it":{}}}],["won't",{"_index":3246,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["won\u2019t",{"_index":1506,"text":{"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{}},"title":{}}],["word",{"_index":357,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"java/basics/":{},"java/basics/#naming":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["work",{"_index":198,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recurrence-tree-method":{},"algo/maths/":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiply-by-7":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/search/intro/":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{"algo/analysis/master-theorum/#how-does-this-work":{}}}],["workflow",{"_index":2440,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{},"ds/tree/intro/":{},"ds/tree/intro/#applications":{}},"title":{}}],["world",{"_index":3006,"text":{"java/helloworld/":{},"java/oops/":{},"java/oops/#interface":{},"java/oops/#objects":{},"php/basics/":{},"php/basics/#callable":{}},"title":{}}],["worri",{"_index":3036,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}},"title":{}}],["wors",{"_index":1061,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#upper-bound-theory":{}},"title":{}}],["worst",{"_index":436,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/classes/":{},"algo/analysis/classes/#how-to-combine-time-complexities-of-consecutive-loops":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#lower-bound-theory":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/pseudo-polynomial/#pseudo-polynomial":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#interpolation-vs-binary":{},"algo/search/intro/":{},"algo/search/intro/#linear-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"ds/graph/intro/":{},"ds/graph/intro/#pros_1":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/stack/intro/":{},"ds/stack/intro/#problems":{},"ds/stack/min-special/":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/tree/bst/":{},"ds/tree/bst/#minvalue":{},"ds/tree/traversal/":{},"ds/tree/traversal/#space-complexity":{},"ds/tree/traversal/#using-call-stack":{}},"title":{"algo/analysis/intro/#worst-case":{}}}],["wrap",{"_index":3175,"text":{"java/numbers/":{}},"title":{}}],["wrapper",{"_index":3174,"text":{"java/numbers/":{}},"title":{}}],["write",{"_index":310,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{},"algo/analysis/classes/#reduction":{},"algo/maths/":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"algo/sort/intro/#selection-sort":{},"java/inheritance/":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"php/basics/":{},"php/basics/#comments":{},"php/intro/":{},"php/intro/#what-it-can-do":{}},"title":{"algo/maths/#write-you-own-power-without-using-multiplication-and-division-operators":{},"algo/sort/intro/#minimum-number-of-memory-writes":{}}}],["written",{"_index":907,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/analysis/recursive/":{},"algo/analysis/recursive/#recursive":{},"algo/search/exponential/":{},"algo/search/exponential/#ternery-search":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["wrong",{"_index":2444,"text":{"ds/tree/bst-check/":{}},"title":{"ds/tree/bst-check/#method-1-simple-but-wrong":{}}}],["www.geeksforgeeks.org/?p=3622",{"_index":1415,"text":{"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}},"title":{}}],["x",{"_index":38,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#average-case-rarely":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#iterative":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{},"algo/bits/#recursive":{},"algo/bits/#ternery":{},"algo/bits/#xor":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#interpolation-search":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/graph/intro/":{},"ds/graph/intro/#adjacency-matrix":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/queue/intro/":{},"ds/queue/intro/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#sscanf":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["x(x+1)/2",{"_index":717,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["x*y",{"_index":317,"text":{"algo/maths/":{},"algo/maths/#method-2-using-recursion":{}},"title":{}}],["x.first",{"_index":1459,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["x.second",{"_index":1460,"text":{"ds/array/frequency/":{},"ds/array/frequency/#hashing":{}},"title":{}}],["x1",{"_index":651,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["x2",{"_index":655,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["x[2][3][4]",{"_index":1534,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["x[3][4]",{"_index":1528,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["x[i][j]",{"_index":1527,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["xml",{"_index":2703,"text":{"java/annotations/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["xml/html",{"_index":2429,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#applications":{}},"title":{}}],["xor",{"_index":35,"text":{"algo/bits/":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#disadvantages":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{},"ds/linked-list/xor-dll/#xor-utility":{}},"title":{"algo/bits/#xor":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#xor-dll":{},"ds/linked-list/xor-dll/#xor-utility":{}}}],["xor(new_node,",{"_index":1983,"text":{"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{}},"title":{}}],["xp",{"_index":1280,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["xxx",{"_index":1398,"text":{"algo/sort/merge/":{}},"title":{"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{}}}],["y",{"_index":40,"text":{"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#iterative":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{},"algo/bits/#recursive":{},"algo/bits/#ternery":{},"algo/bits/#xor":{},"algo/maths/":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#square-root":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{}},"title":{}}],["y1",{"_index":652,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["y2",{"_index":656,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["ye",{"_index":1309,"text":{"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{}},"title":{}}],["year",{"_index":701,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#first-problem-as-np-complete":{}},"title":{}}],["yp",{"_index":1281,"text":{"algo/sort/intro/":{},"algo/sort/intro/#selection-sort":{}},"title":{}}],["z",{"_index":91,"text":{"algo/bits/":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{},"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"ds/tree/intro/":{},"ds/tree/intro/#tree":{}},"title":{}}],["zero",{"_index":235,"text":{"algo/maths/":{},"algo/maths/#base-n-addition":{},"algo/sort/intro/":{},"algo/sort/intro/#minimum-number-of-memory-writes":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#string-to-double":{}},"title":{}}],["{",{"_index":41,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#why-drop":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#iterative":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{},"algo/bits/#recursive":{},"algo/bits/#ternery":{},"algo/bits/#xor":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#lucky-number":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/intro/#traversal":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#representation":{},"ds/linked-list/xor-dll/#xor-utility":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#representaion":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#iterable":{},"php/basics/#object":{},"php/basics/#types":{}},"title":{}}],["{0,1,2,3},",{"_index":1540,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{12,13,14,15},",{"_index":1543,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{16,17,18,19},",{"_index":1544,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{20,21,22,23}",{"_index":1545,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{4,5,6,7},",{"_index":1531,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{8,9,10,11}",{"_index":1541,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["{8,9,10,11}};",{"_index":1532,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["{f(n):",{"_index":860,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#why-drop":{}},"title":{}}],["{x1,y1}",{"_index":653,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["{x2,y2}",{"_index":657,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#reduction":{}},"title":{}}],["{{0,1,2,3},",{"_index":1530,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#row-major-in-c":{}},"title":{}}],["{{1,0},{0,1}}",{"_index":388,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["{{1,1},{1,0}}",{"_index":353,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{"algo/maths/#method-4-using-power-of-the-matrix-1110":{}}}],["{{1,1},{1,0}};",{"_index":368,"text":{"algo/maths/":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{}},"title":{}}],["{}",{"_index":1463,"text":{"ds/array/functions/":{},"ds/array/functions/#passing-arrays-to-functions":{},"ds/array/functions/#return-array-from-functions":{},"php/atttributes/":{}},"title":{}}],["{}.",{"_index":2801,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["|",{"_index":1004,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["|>=|",{"_index":1005,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["||",{"_index":394,"text":{"algo/maths/":{},"algo/maths/#method-5-optimized-method-4":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#recursive":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst/":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#search":{},"java/basics/":{},"java/basics/#operators":{},"php/basics/":{},"php/basics/#boolean":{}},"title":{}}],["}",{"_index":45,"text":{"algo/analysis/caching/":{},"algo/analysis/caching/#caching":{},"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/bits/":{},"algo/bits/#32-bit-ints":{},"algo/bits/#a-boolean-array-puzzle":{},"algo/bits/#count-total-set-bits-in-all-numbers-from-1-to-n":{},"algo/bits/#iterative":{},"algo/bits/#method-1-repeated-subtraction":{},"algo/bits/#method-2-use-bit-operations":{},"algo/bits/#method-3-use-division-operator":{},"algo/bits/#recursive":{},"algo/bits/#ternery":{},"algo/bits/#xor":{},"algo/dac/intro/":{},"algo/dac/intro/#combine":{},"algo/maths/":{},"algo/maths/#average-of-stream-of-numbers":{},"algo/maths/#base-n-addition":{},"algo/maths/#lucky-number":{},"algo/maths/#method-1-recurssion":{},"algo/maths/#method-1-using-nested-loops":{},"algo/maths/#method-2-dp":{},"algo/maths/#method-2-using-recursion":{},"algo/maths/#method-3-space-optimised-2":{},"algo/maths/#method-4-using-power-of-the-matrix-1110":{},"algo/maths/#method-5-optimized-method-4":{},"algo/maths/#multiple-of-3":{},"algo/maths/#multiply-two-integers-without-using-multiplication-division-and-bitwise-operators-and-no-loops":{},"algo/maths/#print-all-combinations-of-points-that-can-compose-a-given-number":{},"algo/maths/#russian-peasant-multiply-two-numbers-using-bitwise-operators":{},"algo/maths/#square-root":{},"algo/search/exponential/":{},"algo/search/exponential/#exponential-search":{},"algo/search/exponential/#ternery-search":{},"algo/search/interpolation/":{},"algo/search/interpolation/#iterative":{},"algo/search/interpolation/#reursive":{},"algo/search/intro/":{},"algo/search/intro/#iterative":{},"algo/search/intro/#linear-search":{},"algo/search/intro/#problem-m-lr2-might-overflow":{},"algo/search/intro/#recursive":{},"algo/search/jump/":{},"algo/search/jump/#jump-search":{},"algo/sort/intro/":{},"algo/sort/intro/#bubble-sort":{},"algo/sort/intro/#insertion-sort":{},"algo/sort/intro/#selection-sort":{},"algo/sort/intro/#stable":{},"algo/sort/merge/":{},"algo/sort/merge/#dummy-nodes":{},"algo/sort/merge/#local-reference":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/frequency/":{},"ds/array/frequency/#hashing":{},"ds/array/frequency/#simple":{},"ds/array/functions/":{},"ds/array/functions/#return-array-from-functions":{},"ds/array/intro/":{},"ds/array/intro/#declaration":{},"ds/array/intro/#traversal":{},"ds/array/min-max/":{},"ds/array/min-max/#library-functions":{},"ds/array/min-max/#recursive":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/reverse/":{},"ds/array/reverse/#iterative":{},"ds/array/reverse/#recursive":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#assignment":{},"ds/array/vs-pointers/#difference":{},"ds/graph/bfs/":{},"ds/graph/bfs/#application":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs-disconnected/#disconnected-dfs":{},"ds/graph/dfs/":{},"ds/graph/dfs/#application":{},"ds/graph/intro/":{},"ds/graph/intro/#cons_1":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#concatenate-two-cdlls":{},"ds/linked-list/bin-tree-cdll/#main-function":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#cll-sorted-insert":{},"ds/linked-list/cll/#insertion":{},"ds/linked-list/cll/#problems":{},"ds/linked-list/cll/#traversal":{},"ds/linked-list/count/":{},"ds/linked-list/count/#iterative":{},"ds/linked-list/count/#recursive":{},"ds/linked-list/deletion/":{},"ds/linked-list/deletion/#any":{},"ds/linked-list/deletion/#first":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#deletion":{},"ds/linked-list/dll/#insertion":{},"ds/linked-list/dll/#reverse":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/insertion/":{},"ds/linked-list/insertion/#after-node-o1":{},"ds/linked-list/insertion/#front-o1":{},"ds/linked-list/insertion/#last-on":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#traversal":{},"ds/linked-list/reverse/":{},"ds/linked-list/reverse/#iterative":{},"ds/linked-list/reverse/#recursive":{},"ds/linked-list/reverse/#stack":{},"ds/linked-list/reverse/#tail-recursive-method":{},"ds/linked-list/search/":{},"ds/linked-list/search/#search":{},"ds/linked-list/swap/":{},"ds/linked-list/swap/#swapping":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#insert":{},"ds/linked-list/xor-dll/#print":{},"ds/linked-list/xor-dll/#xor-utility":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/print-binary/":{},"ds/queue/print-binary/#using-queues":{},"ds/queue/priority-queue/":{},"ds/queue/priority-queue/#implementation":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/intro/#problems":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/stack/medium-special/":{},"ds/stack/medium-special/#medium-special":{},"ds/stack/min-special/":{},"ds/stack/min-special/#min-special":{},"ds/stack/min-special/#optimised-space-for-2-stacks":{},"ds/stack/reverse/":{},"ds/stack/reverse/#reverse":{},"ds/stack/sort/":{},"ds/stack/sort/#sort":{},"ds/stack/stock-span/":{},"ds/stack/stock-span/#naive":{},"ds/stack/stock-span/#using-stack":{},"ds/stack/stock-span/#without-stack":{},"ds/stack/using-queue/":{},"ds/stack/using-queue/#costly-pop":{},"ds/stack/using-queue/#costly-push":{},"ds/string/duplicate/":{},"ds/string/duplicate/#duplicate":{},"ds/string/frequency/":{},"ds/string/frequency/#frequency":{},"ds/string/remove-duplicates/":{},"ds/string/remove-duplicates/#remove-duplicates":{},"ds/string/reverse/":{},"ds/string/reverse/#reverse":{},"ds/string/string-to-no/":{},"ds/string/string-to-no/#using-stringstream-class":{},"ds/string/white-space/":{},"ds/string/white-space/#white-space":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"ds/tree/bst-check/":{},"ds/tree/bst-check/#method-1-simple-but-wrong":{},"ds/tree/bst-check/#method-2-correct-but-not-efficient":{},"ds/tree/bst-check/#method-3-correct-and-efficient":{},"ds/tree/bst-check/#method-4using-in-order-traversal":{},"ds/tree/bst-check/#simplified-method-3":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#merge":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/bst/":{},"ds/tree/bst/#deletion":{},"ds/tree/bst/#deletion_1":{},"ds/tree/bst/#inorder-predecessor-and-successor-for-a-given-key-in-bst":{},"ds/tree/bst/#insert":{},"ds/tree/bst/#insertion":{},"ds/tree/bst/#min-value":{},"ds/tree/bst/#minvalue":{},"ds/tree/bst/#search":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-deletion/#deletion":{},"ds/tree/bt-height/":{},"ds/tree/bt-height/#height":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-insertion/#insertion":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-level-order/#given-level":{},"ds/tree/bt-level-order/#queue":{},"ds/tree/bt-level-order/#reverse":{},"ds/tree/bt-search/":{},"ds/tree/bt-search/#search":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-1-using-inorder-traversal-on-time-and-oh-auxiliary-space":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/lowest-common-ancestor/#iterative-implementation":{},"ds/tree/lowest-common-ancestor/#lowest-common-ancestor":{},"ds/tree/traversal/":{},"ds/tree/traversal/#inorder":{},"ds/tree/traversal/#postorder":{},"ds/tree/traversal/#preorder":{},"ds/tree/traversal/#using-call-stack":{},"ds/tree/traversal/#using-queues":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/strings/":{},"php/atttributes/":{},"php/basics/":{},"php/basics/#callable":{},"php/basics/#iterable":{},"php/basics/#object":{},"php/basics/#types":{}},"title":{}}],["},",{"_index":1542,"text":{"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{}},"title":{}}],["};",{"_index":347,"text":{"algo/maths/":{},"algo/maths/#method-2-dp":{},"algo/sort/merge/":{},"algo/sort/merge/#recursive-space-is-more-prodution-xxx":{},"ds/array/intro/":{},"ds/array/intro/#in-c-no-index-out-of-bound-checking":{},"ds/array/multi-dimensional/":{},"ds/array/multi-dimensional/#three-dimensional-array":{},"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#difference":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/bin-tree-cdll/#cdll":{},"ds/linked-list/cll/":{},"ds/linked-list/cll/#representation":{},"ds/linked-list/dll/":{},"ds/linked-list/dll/#doubly-ll":{},"ds/linked-list/generic/":{},"ds/linked-list/generic/#generic-implementation-in-c":{},"ds/linked-list/intro/":{},"ds/linked-list/intro/#representation":{},"ds/linked-list/vs-array/":{},"ds/linked-list/vs-array/#array":{},"ds/linked-list/xor-dll/":{},"ds/linked-list/xor-dll/#representation":{},"ds/queue/dequeue/":{},"ds/queue/dequeue/#circular-array":{},"ds/queue/intro/":{},"ds/queue/intro/#array":{},"ds/queue/intro/#linked-list":{},"ds/queue/using-stack/":{},"ds/queue/using-stack/#costly-dequeue":{},"ds/queue/using-stack/#costly-enqueue":{},"ds/queue/using-stack/#using-one-user-stack-and-function-call-stack-recurion":{},"ds/stack/intro/":{},"ds/stack/intro/#array":{},"ds/stack/intro/#linked-list":{},"ds/stack/k-stacks/":{},"ds/stack/k-stacks/#extra-2-integer-arrays":{},"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#example":{},"ds/tree/binary-tree/#representaion":{},"ds/tree/bst-merge/":{},"ds/tree/bst-merge/#stack-related-stuff":{},"ds/tree/k-smallest/":{},"ds/tree/k-smallest/#method-2-augmented-tree-data-structure-oh-time-complexity-and-oh-auxiliary-space":{},"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["~",{"_index":709,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["\u00b6",{"_index":3,"text":{"":{},"algo/analysis/amortised/":{},"algo/analysis/caching/":{},"algo/analysis/classes/":{},"algo/analysis/examples/":{},"algo/analysis/graph-coloring/":{},"algo/analysis/intro/":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/master-theorum/":{},"algo/analysis/pseudo-polynomial/":{},"algo/analysis/recursive/":{},"algo/analysis/space/":{},"algo/bits/":{},"algo/dac/intro/":{},"algo/maths/":{},"algo/search/exponential/":{},"algo/search/interpolation/":{},"algo/search/intro/":{},"algo/search/jump/":{},"algo/sort/intro/":{},"algo/sort/merge/":{},"ds/array/decay/":{},"ds/array/frequency/":{},"ds/array/functions/":{},"ds/array/intro/":{},"ds/array/min-max/":{},"ds/array/multi-dimensional/":{},"ds/array/reverse/":{},"ds/array/vectors/":{},"ds/array/vs-pointers/":{},"ds/graph/bfs/":{},"ds/graph/dfs-disconnected/":{},"ds/graph/dfs/":{},"ds/graph/intro/":{},"ds/heap/fibonacci-heap/":{},"ds/heap/intro/":{},"ds/linked-list/bin-tree-cdll/":{},"ds/linked-list/cll/":{},"ds/linked-list/count/":{},"ds/linked-list/deletion/":{},"ds/linked-list/dll/":{},"ds/linked-list/functions/":{},"ds/linked-list/generic/":{},"ds/linked-list/insertion/":{},"ds/linked-list/intro/":{},"ds/linked-list/reverse/":{},"ds/linked-list/search/":{},"ds/linked-list/swap/":{},"ds/linked-list/vs-array/":{},"ds/linked-list/xor-dll/":{},"ds/queue/dequeue/":{},"ds/queue/intro/":{},"ds/queue/print-binary/":{},"ds/queue/priority-queue/":{},"ds/queue/using-stack/":{},"ds/set-map/map/":{},"ds/set-map/multiset/":{},"ds/set-map/set-types/":{},"ds/set-map/set/":{},"ds/stack/intro/":{},"ds/stack/k-stacks/":{},"ds/stack/medium-special/":{},"ds/stack/min-special/":{},"ds/stack/reverse/":{},"ds/stack/sort/":{},"ds/stack/stock-span/":{},"ds/stack/using-queue/":{},"ds/string/duplicate/":{},"ds/string/frequency/":{},"ds/string/intro/":{},"ds/string/remove-duplicates/":{},"ds/string/reverse/":{},"ds/string/rotation/":{},"ds/string/string-to-no/":{},"ds/string/white-space/":{},"ds/tree/binary-tree/":{},"ds/tree/bst-check/":{},"ds/tree/bst-merge/":{},"ds/tree/bst/":{},"ds/tree/bt-deletion/":{},"ds/tree/bt-enumeration/":{},"ds/tree/bt-height/":{},"ds/tree/bt-insertion/":{},"ds/tree/bt-level-order/":{},"ds/tree/bt-search/":{},"ds/tree/bt-swap-nodes/":{},"ds/tree/handshaking-lemma/":{},"ds/tree/intro/":{},"ds/tree/k-smallest/":{},"ds/tree/lowest-common-ancestor/":{},"ds/tree/traversal/":{},"java/annotations/":{},"java/basics/":{},"java/collections/":{},"java/generics/":{},"java/inheritance/":{},"java/interfaces/":{},"java/intro/":{},"java/numbers/":{},"java/oops/":{},"java/packages/":{},"java/strings/":{},"php/basics/":{},"php/intro/":{}},"title":{}}],["\u00bb",{"_index":3448,"text":{"php/basics/":{},"php/basics/#float":{}},"title":{}}],["\u00d7",{"_index":2575,"text":{"ds/tree/bt-enumeration/":{},"ds/tree/bt-enumeration/#labeled-trees":{}},"title":{}}],["\u03b5",{"_index":915,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{}}],["\u03b8",{"_index":708,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/intro/":{},"algo/analysis/intro/#symmetric-properties":{}},"title":{}}],["\u03b8(1)",{"_index":843,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#best-case-analysis-bogus":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{},"ds/heap/intro/":{},"ds/heap/intro/#why-is-binary-heap-preferred-over-bst-for-priority-queue":{}},"title":{}}],["\u03b8(1).",{"_index":1086,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["\u03b8(f(n))",{"_index":892,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#symmetric-properties":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{}},"title":{}}],["\u03b8(f(n)).",{"_index":885,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#reflexive-properties":{}},"title":{}}],["\u03b8(g(n))",{"_index":859,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#general-properties":{},"algo/analysis/intro/#notations":{},"algo/analysis/intro/#some-more-properties":{},"algo/analysis/intro/#symmetric-properties":{},"algo/analysis/intro/#transitive-properties":{}},"title":{}}],["\u03b8(h(n))",{"_index":889,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#transitive-properties":{}},"title":{}}],["\u03b8(log",{"_index":707,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["\u03b8(logn)",{"_index":1087,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["\u03b8(lognn)",{"_index":1006,"text":{"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{}},"title":{}}],["\u03b8(m+n)",{"_index":1699,"text":{"ds/heap/fibonacci-heap/":{},"ds/heap/fibonacci-heap/#fibonacci-heap":{}},"title":{}}],["\u03b8(n",{"_index":710,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{},"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["\u03b8(n)",{"_index":481,"text":{"algo/analysis/amortised/":{},"algo/analysis/amortised/#amortized-analysis":{},"algo/analysis/intro/":{},"algo/analysis/intro/#worst-case":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["\u03b8(n))",{"_index":2675,"text":{"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{}},"title":{}}],["\u03b8(n).",{"_index":1082,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["\u03b8(nc)",{"_index":1067,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{},"algo/analysis/master-theorum/#masters-theorum":{}},"title":{}}],["\u03b8(nclog",{"_index":1070,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{}},"title":{}}],["\u03b8(nclogk+1n)",{"_index":1093,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["\u03b8(nclogkn)",{"_index":1092,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["\u03b8(nclogkn).",{"_index":1091,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#how-does-this-work":{}},"title":{}}],["\u03b8(nk)",{"_index":749,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["\u03b8(nk+1",{"_index":750,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["\u03b8(nlogba)",{"_index":1069,"text":{"algo/analysis/master-theorum/":{},"algo/analysis/master-theorum/#masters-theorum":{}},"title":{}}],["\u03b8(nlogn)",{"_index":850,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#why-not-average":{},"algo/analysis/lower-upper-bound-theory/":{},"algo/analysis/lower-upper-bound-theory/#trivial-lower-bound":{},"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["\u03b8(\u221an).",{"_index":719,"text":{"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["\u03bf",{"_index":913,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{"algo/analysis/intro/#little-asymptotic-notation":{}}}],["\u03bf((f(n)).",{"_index":939,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["\u03bf(g(n))",{"_index":914,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{}}],["\u03bf(g(n)))",{"_index":916,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{}}],["\u03c9",{"_index":879,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#general-properties":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#reflexive-properties":{},"algo/analysis/intro/#transitive-properties":{},"algo/analysis/intro/#transpose-symmetric-properties":{},"algo/analysis/intro/#why-drop":{}},"title":{"algo/analysis/intro/#little-asymptotic-notation_1":{}}}],["\u03c9(1)",{"_index":908,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["\u03c9(1);",{"_index":942,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["\u03c9(g(n))",{"_index":894,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{},"algo/analysis/intro/#some-more-properties":{}},"title":{}}],["\u03c9(g(n)))",{"_index":937,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["\u03c9(nlog2n)",{"_index":1359,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["\u2013",{"_index":174,"text":{"algo/maths/":{},"algo/maths/#multiple-of-3":{},"ds/array/vectors/":{},"ds/array/vectors/#capacity":{},"ds/array/vectors/#element-access":{},"ds/array/vectors/#iterators":{},"ds/array/vectors/#modifiers":{},"ds/set-map/map/":{},"ds/set-map/map/#multimap":{},"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{},"ds/tree/handshaking-lemma/":{},"ds/tree/handshaking-lemma/#with-handshaking-lemma":{},"ds/tree/handshaking-lemma/#without-it":{},"ds/tree/traversal/":{},"ds/tree/traversal/#depth-first-traversals":{},"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["\u2014",{"_index":2698,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["\u2018=\u2019",{"_index":2138,"text":{"ds/set-map/set/":{},"ds/set-map/set/#manipulation":{}},"title":{}}],["\u201carr[i]\u201d",{"_index":1596,"text":{"ds/array/vs-pointers/":{},"ds/array/vs-pointers/#similarities":{}},"title":{}}],["\u2026",{"_index":570,"text":{"algo/analysis/classes/":{},"algo/analysis/classes/#time-complexity-classes":{},"algo/analysis/examples/":{},"algo/analysis/examples/#examples":{}},"title":{}}],["\u2026.",{"_index":127,"text":{"algo/bits/":{},"algo/bits/#a-boolean-array-puzzle":{}},"title":{}}],["\u2026..",{"_index":1346,"text":{"algo/sort/intro/":{},"algo/sort/intro/#lower-bound-for-comparison-based-sorting":{}},"title":{}}],["\u2208",{"_index":935,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["\u221e",{"_index":940,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}],["\u2248",{"_index":2422,"text":{"ds/tree/binary-tree/":{},"ds/tree/binary-tree/#balanced-binary-tree":{}},"title":{}}],["\u2264",{"_index":918,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{}},"title":{}}],["\u2265",{"_index":917,"text":{"algo/analysis/intro/":{},"algo/analysis/intro/#little-asymptotic-notation":{},"algo/analysis/intro/#little-asymptotic-notation_1":{}},"title":{}}]],"pipeline":["stemmer"],"version":"2.3.8"}}