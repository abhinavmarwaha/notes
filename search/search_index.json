{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":"python","separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Abhinav's Notes \u00b6 Collection of my notes.","title":"Home"},{"location":"#abhinavs-notes","text":"Collection of my notes.","title":"Abhinav's Notes"},{"location":"java/IO/","text":"","title":"IO"},{"location":"java/annotations/","text":"A form of metadata, provide data about a program that is not part of the program itself. Information for the compiler \u2014 Annotations can be used by the compiler to detect errors or suppress warnings. Compile-time and deployment-time processing \u2014 Software tools can process annotation information to generate code, XML files, and so forth. Runtime processing \u2014 Some annotations are available to be examined at runtime. stronger type checking extend java.lang.annotation to form your own annotations repeated are allowed Annotations can be applied to declarations: declarations of classes, fields, methods, and other program elements. @Entity @Override void mySuperMethod() { ... } @Author( name = \"Benjamin Franklin\", date = \"3/27/2003\" ) class MyClass { ... } @SuppressWarnings(value = \"unchecked\") void myMethod() { ... } @Author(name = \"Jane Doe\") @EBook class MyClass { ... } @Author(name = \"Jane Doe\") @Author(name = \"John Smith\") class MyClass { ... } Class instance creation expression: new @Interned MyObject(); Type cast: myString = (@NonNull String) str; implements clause: class UnmodifiableList<T> implements @Readonly List<@Readonly T> { ... } Thrown exception declaration: void monitorTemperature() throws @Critical TemperatureException { ... } Annotation Type \u00b6 Many annotations replace comments in code. @Documented @interface ClassPreamble { String author(); String date(); int currentRevision() default 1; String lastModified() default \"N/A\"; String lastModifiedBy() default \"N/A\"; // Note use of array String[] reviewers(); } @ClassPreamble ( author = \"John Doe\", date = \"3/17/2002\", currentRevision = 6, lastModified = \"4/12/2004\", lastModifiedBy = \"Jane Doe\", // Note array notation reviewers = {\"Alice\", \"Bob\", \"Cindy\"} ) public class Generation3List extends Generation2List { // class code goes here } java inbuilt \u00b6 @Deprecated @Override @SuppressWarnings({\"unchecked\", \"deprecation\"}) @SafeVarargs - avoid unsafe operations // TODO @FunctionalInterface Meta annotations \u00b6 @Retention: specifies how the marked annotation is stored: RetentionPolicy.SOURCE \u2013 The marked annotation is retained only in the source level and is ignored by the compiler. RetentionPolicy.CLASS \u2013 The marked annotation is retained by the compiler at compile time, but is ignored by the Java Virtual Machine (JVM). RetentionPolicy.RUNTIME \u2013 The marked annotation is retained by the JVM so it can be used by the runtime environment. @Documented - included in javadoc @Target - on which it is allowed @Inherited - sub class inherets super class's annotion. @Repeatable - more than once Type Annotations and Pluggable Type Systems \u00b6 expressions (new), casts, implements clauses, and throws clauses. @NonNull String str; Checker Framework Repeating Annotations \u00b6 @Schedule(dayOfMonth=\"last\") @Schedule(dayOfWeek=\"Fri\", hour=\"23\") public void doPeriodicCleanup() { ... } @Alert(role=\"Manager\") @Alert(role=\"Administrator\") public class UnauthorizedAccessException extends SecurityException { ... } For compatibility reasons, repeating annotations are stored in a container annotation that is automatically generated by the Java compiler. In order for the compiler to do this, two declarations are required in your code: Declare a Repeatable Annotation Type import java.lang.annotation.Repeatable; @Repeatable(Schedules.class) public @interface Schedule { String dayOfMonth() default \"first\"; String dayOfWeek() default \"Mon\"; int hour() default 12; } Declare the Containing Annotation Type public @interface Schedules { Schedule[] value(); } Retrieving Annotations \u00b6 AnnotatedElement.getAnnotation(Class<T>) AnnotatedElement.getAnnotationsByType(Class<T>) Design Considerations \u00b6 you must consider the cardinality of annotations of that type. to be as flexible and powerful as possible.","title":"Annotations"},{"location":"java/annotations/#annotation-type","text":"Many annotations replace comments in code. @Documented @interface ClassPreamble { String author(); String date(); int currentRevision() default 1; String lastModified() default \"N/A\"; String lastModifiedBy() default \"N/A\"; // Note use of array String[] reviewers(); } @ClassPreamble ( author = \"John Doe\", date = \"3/17/2002\", currentRevision = 6, lastModified = \"4/12/2004\", lastModifiedBy = \"Jane Doe\", // Note array notation reviewers = {\"Alice\", \"Bob\", \"Cindy\"} ) public class Generation3List extends Generation2List { // class code goes here }","title":"Annotation Type"},{"location":"java/annotations/#java-inbuilt","text":"@Deprecated @Override @SuppressWarnings({\"unchecked\", \"deprecation\"}) @SafeVarargs - avoid unsafe operations // TODO @FunctionalInterface","title":"java inbuilt"},{"location":"java/annotations/#meta-annotations","text":"@Retention: specifies how the marked annotation is stored: RetentionPolicy.SOURCE \u2013 The marked annotation is retained only in the source level and is ignored by the compiler. RetentionPolicy.CLASS \u2013 The marked annotation is retained by the compiler at compile time, but is ignored by the Java Virtual Machine (JVM). RetentionPolicy.RUNTIME \u2013 The marked annotation is retained by the JVM so it can be used by the runtime environment. @Documented - included in javadoc @Target - on which it is allowed @Inherited - sub class inherets super class's annotion. @Repeatable - more than once","title":"Meta annotations"},{"location":"java/annotations/#type-annotations-and-pluggable-type-systems","text":"expressions (new), casts, implements clauses, and throws clauses. @NonNull String str; Checker Framework","title":"Type Annotations and Pluggable Type Systems"},{"location":"java/annotations/#repeating-annotations","text":"@Schedule(dayOfMonth=\"last\") @Schedule(dayOfWeek=\"Fri\", hour=\"23\") public void doPeriodicCleanup() { ... } @Alert(role=\"Manager\") @Alert(role=\"Administrator\") public class UnauthorizedAccessException extends SecurityException { ... } For compatibility reasons, repeating annotations are stored in a container annotation that is automatically generated by the Java compiler. In order for the compiler to do this, two declarations are required in your code: Declare a Repeatable Annotation Type import java.lang.annotation.Repeatable; @Repeatable(Schedules.class) public @interface Schedule { String dayOfMonth() default \"first\"; String dayOfWeek() default \"Mon\"; int hour() default 12; } Declare the Containing Annotation Type public @interface Schedules { Schedule[] value(); }","title":"Repeating Annotations"},{"location":"java/annotations/#retrieving-annotations","text":"AnnotatedElement.getAnnotation(Class<T>) AnnotatedElement.getAnnotationsByType(Class<T>)","title":"Retrieving Annotations"},{"location":"java/annotations/#design-considerations","text":"you must consider the cardinality of annotations of that type. to be as flexible and powerful as possible.","title":"Design Considerations"},{"location":"java/basics/","text":"Variables \u00b6 Instance Variables (Non-Static Fields) Class Variables (Static Fields) Local Variables: bw {}. Parameters: always classified as \"variables\" not \"fields\" long creditCardNumber = 1234_5678_9012_3456L; primitive data types are: byte, short, int, long, float, double, boolean, and char. java.lang.String class Naming \u00b6 case sensitive unlimited-length sequence of Unicode letters and digits (avoid _ and $ in start) not keyword or reserved word gearRatio NUM_GEARS = 6 Arrays \u00b6 its length is fixed. int[] anArray = new int[10]; String[][] names = { {\"Mr. \", \"Mrs. \", \"Ms. \"}, {\"Smith\", \"Jones\"} }; System.arraycopy(copyFrom, 2, copyTo, 0, 7); java.util.Arrays.copyOfRange(copyFrom, 2, 9); java.util.Arrays \u00b6 binarySearch equals fill parallelSort java.util.Arrays.stream(copyTo).map(coffee -> coffee + \" \").forEach(System.out::print) System.out.println(java.util.Arrays.toString(copyTo)) Operators \u00b6 specific operations on one, two, or three operands, and then return a result. Simple Assignment Operator = Arithmetic Operators Additive operator (also used for String concatenation) Subtraction operator Multiplication operator / Division operator % Remainder operator Unary Operators Unary plus operator; indicates positive value (numbers are positive without this, however) Unary minus operator; negates an expression ++ Increment operator; increments a value by 1 -- Decrement operator; decrements a value by 1 ! Logical complement operator; inverts the value of a boolean Equality and Relational Operators == Equal to != Not equal to Greater than = Greater than or equal to < Less than <= Less than or equal to Conditional Operators && Conditional-AND || Conditional-OR ?: Ternary (shorthand for if-then-else statement) Type Comparison Operator instanceof Compares an object to a specified type Bitwise and Bit Shift Operators ~ Unary bitwise complement << Signed left shift Signed right shift Unsigned right shift & Bitwise AND ^ Bitwise exclusive OR | Bitwise inclusive OR Expressions (result=9), blocks({}), statements ;->; \u00b6 Control flow \u00b6 program runs in top-down decision-making statements if-then-else if (testscore >= 90) { grade = 'A'; } else if (testscore >= 60) { grade = 'D'; } else { grade = 'F'; } switch switch (month) { case 1: monthString = \"January\"; break; default: monthString = \"Invalid month\"; break; } the looping statements (for, while, do-while) while (expression) { statement(s) } do { statement(s) } while (expression); for (initialization; termination; increment) { statement(s) } branching statements (break, continue, return) search: for (i = 0; i < arrayOfInts.length; i++) { for (j = 0; j < arrayOfInts[i].length; j++) { if (arrayOfInts[i][j] == searchfor) { foundIt = true; break search; } } } if (foundIt) { System.out.println(\"Found \" + searchfor + \" at \" + i + \", \" + j); } else { System.out.println(searchfor + \" not in the array\"); } access modifiers \u00b6 public field is accessible from all classes. private field is accessible only within its own class.","title":"Variables"},{"location":"java/basics/#variables","text":"Instance Variables (Non-Static Fields) Class Variables (Static Fields) Local Variables: bw {}. Parameters: always classified as \"variables\" not \"fields\" long creditCardNumber = 1234_5678_9012_3456L; primitive data types are: byte, short, int, long, float, double, boolean, and char. java.lang.String class","title":"Variables"},{"location":"java/basics/#naming","text":"case sensitive unlimited-length sequence of Unicode letters and digits (avoid _ and $ in start) not keyword or reserved word gearRatio NUM_GEARS = 6","title":"Naming"},{"location":"java/basics/#arrays","text":"its length is fixed. int[] anArray = new int[10]; String[][] names = { {\"Mr. \", \"Mrs. \", \"Ms. \"}, {\"Smith\", \"Jones\"} }; System.arraycopy(copyFrom, 2, copyTo, 0, 7); java.util.Arrays.copyOfRange(copyFrom, 2, 9);","title":"Arrays"},{"location":"java/basics/#javautilarrays","text":"binarySearch equals fill parallelSort java.util.Arrays.stream(copyTo).map(coffee -> coffee + \" \").forEach(System.out::print) System.out.println(java.util.Arrays.toString(copyTo))","title":"java.util.Arrays"},{"location":"java/basics/#operators","text":"specific operations on one, two, or three operands, and then return a result. Simple Assignment Operator = Arithmetic Operators Additive operator (also used for String concatenation) Subtraction operator Multiplication operator / Division operator % Remainder operator Unary Operators Unary plus operator; indicates positive value (numbers are positive without this, however) Unary minus operator; negates an expression ++ Increment operator; increments a value by 1 -- Decrement operator; decrements a value by 1 ! Logical complement operator; inverts the value of a boolean Equality and Relational Operators == Equal to != Not equal to Greater than = Greater than or equal to < Less than <= Less than or equal to Conditional Operators && Conditional-AND || Conditional-OR ?: Ternary (shorthand for if-then-else statement) Type Comparison Operator instanceof Compares an object to a specified type Bitwise and Bit Shift Operators ~ Unary bitwise complement << Signed left shift Signed right shift Unsigned right shift & Bitwise AND ^ Bitwise exclusive OR | Bitwise inclusive OR","title":"Operators"},{"location":"java/basics/#expressions-result9-blocks-statements-","text":"","title":"Expressions (result=9), blocks({}), statements ;-&gt;;"},{"location":"java/basics/#control-flow","text":"program runs in top-down decision-making statements if-then-else if (testscore >= 90) { grade = 'A'; } else if (testscore >= 60) { grade = 'D'; } else { grade = 'F'; } switch switch (month) { case 1: monthString = \"January\"; break; default: monthString = \"Invalid month\"; break; } the looping statements (for, while, do-while) while (expression) { statement(s) } do { statement(s) } while (expression); for (initialization; termination; increment) { statement(s) } branching statements (break, continue, return) search: for (i = 0; i < arrayOfInts.length; i++) { for (j = 0; j < arrayOfInts[i].length; j++) { if (arrayOfInts[i][j] == searchfor) { foundIt = true; break search; } } } if (foundIt) { System.out.println(\"Found \" + searchfor + \" at \" + i + \", \" + j); } else { System.out.println(searchfor + \" not in the array\"); }","title":"Control flow"},{"location":"java/basics/#access-modifiers","text":"public field is accessible from all classes. private field is accessible only within its own class.","title":"access modifiers"},{"location":"java/classes/","text":"varargs","title":"Classes"},{"location":"java/collections/","text":"A collection \u2014 sometimes called a container \u2014 is simply an object that groups multiple elements into a single unit. Collections are used to store, retrieve, manipulate, and communicate aggregate data. collections framework is a unified architecture for representing and manipulating collections. eg c++ STL Interfaces: These are abstract data types that represent collections. form a hierarchy. Implementations: These are the concrete implementations of the collection interfaces. reusable DS. Algorithms: These are the methods that perform useful computations, polymorphic, reusable functionality. Why? \u00b6 Reduces programming effort Increases program speed and quality Allows interoperability among unrelated APIs Reduces effort to learn and to use new APIs Reduces effort to design new APIs Fosters software reuse interoperability among unrelated APIs Collections: * Set * SortedSet * List * Queue * Dequeue Map * SortedMap Interfaces \u00b6 These interfaces allow collections to be manipulated independently of the details of their representation. public interface Collection<E> Collection \u2014 the root of the collection hierarchy. A collection represents a group of objects known as its elements. Set \u2014 a collection that cannot contain duplicate elements. List \u2014 an ordered collection (sometimes called a sequence). Lists can contain duplicate elements. eg Vector Queue \u2014 a collection used to hold multiple elements prior to processing. Queues typically, but do not necessarily, order elements in a FIFO (first-in, first-out) manner. priority queues. ordering properties. Deque \u2014 a collection used to hold multiple elements prior to processing. both ends-> insertion, deletion, removed. Map \u2014 an object that maps keys to values. SortedSet \u2014 a Set that maintains its elements in ascending order. SortedMap \u2014 a Map that maintains its mappings in ascending key order. Traversing Collections \u00b6 1) using aggregate operations 2) with the for-each construct 3) by using Iterators. myShapesCollection.stream() .filter(e -> e.getColor() == Color.RED) .forEach(e -> System.out.println(e.getName())); String joined = elements.stream() .map(Object::toString) .collect(Collectors.joining(\", \")); int total = employees.stream() .collect(Collectors.summingInt(Employee::getSalary))); The key difference between the new aggregate operations and the existing bulk operations (containsAll, addAll, etc.) is that the old versions are all mutative, meaning that they all modify the underlying collection. for (Object o : collection) System.out.println(o); public interface Iterator<E> { boolean hasNext(); E next(); void remove(); //optional } polymorphic: static void filter(Collection<?> c) { for (Iterator<?> it = c.iterator(); it.hasNext(); ) if (!cond(it.next())) it.remove(); } c.removeAll(Collections.singleton(e)); import java.util.*; import java.io.*; public class Anagrams { public static void main(String[] args) { int minGroupSize = Integer.parseInt(args[1]); // Read words from file and put into a simulated multimap Map<String, List<String>> m = new HashMap<String, List<String>>(); try { Scanner s = new Scanner(new File(args[0])); while (s.hasNext()) { String word = s.next(); String alpha = alphabetize(word); List<String> l = m.get(alpha); if (l == null) m.put(alpha, l=new ArrayList<String>()); l.add(word); } } catch (IOException e) { System.err.println(e); System.exit(1); } // Print all permutation groups above size threshold for (List<String> l : m.values()) if (l.size() >= minGroupSize) System.out.println(l.size() + \": \" + l); } private static String alphabetize(String s) { char[] a = s.toCharArray(); Arrays.sort(a); return new String(a); } } Aggregate Operations \u00b6 double average = roster .stream() .filter(p -> p.getGender() == Person.Sex.MALE) .mapToInt(Person::getAge) .average() .getAsDouble(); Aggregate Operations vs Iterators \u00b6 They use internal iteration: It can more easily take advantage of parallel computing, which involves dividing a problem into subproblems, solving those problems simultaneously, and then combining the results of the solutions to the subproblems. Parallelism They process elements from a stream. They support behavior as parameters: lambda expressions Reduction \u00b6 Integer totalAgeReduce = roster .stream() .map(Person::getAge) .reduce( 0, // identity (a, b) -> a + b // accumulator ); Stream.collect Method \u00b6 Unlike the reduce method, which always creates a new value when it processes an element, the collect method modifies, or mutates, an existing value. Averager averageCollect = roster.stream() .filter(p -> p.getGender() == Person.Sex.MALE) .map(Person::getAge) .collect(Averager::new, // supplier Averager::accept, // accumulator Averager::combine // combiner ); System.out.println(\"Average age of male members: \" + averageCollect.average()); Map<Person.Sex, Integer> totalAgeByGender = roster .stream() .collect( Collectors.groupingBy( Person::getGender, Collectors.reducing( 0, // identity Person::getAge, // mapper Integer::sum))); // operation Algorithms \u00b6 Custom implementation \u00b6 Interoperability \u00b6","title":"Collections"},{"location":"java/collections/#why","text":"Reduces programming effort Increases program speed and quality Allows interoperability among unrelated APIs Reduces effort to learn and to use new APIs Reduces effort to design new APIs Fosters software reuse interoperability among unrelated APIs Collections: * Set * SortedSet * List * Queue * Dequeue Map * SortedMap","title":"Why?"},{"location":"java/collections/#interfaces","text":"These interfaces allow collections to be manipulated independently of the details of their representation. public interface Collection<E> Collection \u2014 the root of the collection hierarchy. A collection represents a group of objects known as its elements. Set \u2014 a collection that cannot contain duplicate elements. List \u2014 an ordered collection (sometimes called a sequence). Lists can contain duplicate elements. eg Vector Queue \u2014 a collection used to hold multiple elements prior to processing. Queues typically, but do not necessarily, order elements in a FIFO (first-in, first-out) manner. priority queues. ordering properties. Deque \u2014 a collection used to hold multiple elements prior to processing. both ends-> insertion, deletion, removed. Map \u2014 an object that maps keys to values. SortedSet \u2014 a Set that maintains its elements in ascending order. SortedMap \u2014 a Map that maintains its mappings in ascending key order.","title":"Interfaces"},{"location":"java/collections/#traversing-collections","text":"1) using aggregate operations 2) with the for-each construct 3) by using Iterators. myShapesCollection.stream() .filter(e -> e.getColor() == Color.RED) .forEach(e -> System.out.println(e.getName())); String joined = elements.stream() .map(Object::toString) .collect(Collectors.joining(\", \")); int total = employees.stream() .collect(Collectors.summingInt(Employee::getSalary))); The key difference between the new aggregate operations and the existing bulk operations (containsAll, addAll, etc.) is that the old versions are all mutative, meaning that they all modify the underlying collection. for (Object o : collection) System.out.println(o); public interface Iterator<E> { boolean hasNext(); E next(); void remove(); //optional } polymorphic: static void filter(Collection<?> c) { for (Iterator<?> it = c.iterator(); it.hasNext(); ) if (!cond(it.next())) it.remove(); } c.removeAll(Collections.singleton(e)); import java.util.*; import java.io.*; public class Anagrams { public static void main(String[] args) { int minGroupSize = Integer.parseInt(args[1]); // Read words from file and put into a simulated multimap Map<String, List<String>> m = new HashMap<String, List<String>>(); try { Scanner s = new Scanner(new File(args[0])); while (s.hasNext()) { String word = s.next(); String alpha = alphabetize(word); List<String> l = m.get(alpha); if (l == null) m.put(alpha, l=new ArrayList<String>()); l.add(word); } } catch (IOException e) { System.err.println(e); System.exit(1); } // Print all permutation groups above size threshold for (List<String> l : m.values()) if (l.size() >= minGroupSize) System.out.println(l.size() + \": \" + l); } private static String alphabetize(String s) { char[] a = s.toCharArray(); Arrays.sort(a); return new String(a); } }","title":"Traversing Collections"},{"location":"java/collections/#aggregate-operations","text":"double average = roster .stream() .filter(p -> p.getGender() == Person.Sex.MALE) .mapToInt(Person::getAge) .average() .getAsDouble();","title":"Aggregate Operations"},{"location":"java/collections/#aggregate-operations-vs-iterators","text":"They use internal iteration: It can more easily take advantage of parallel computing, which involves dividing a problem into subproblems, solving those problems simultaneously, and then combining the results of the solutions to the subproblems. Parallelism They process elements from a stream. They support behavior as parameters: lambda expressions","title":"Aggregate Operations vs Iterators"},{"location":"java/collections/#reduction","text":"Integer totalAgeReduce = roster .stream() .map(Person::getAge) .reduce( 0, // identity (a, b) -> a + b // accumulator );","title":"Reduction"},{"location":"java/collections/#streamcollect-method","text":"Unlike the reduce method, which always creates a new value when it processes an element, the collect method modifies, or mutates, an existing value. Averager averageCollect = roster.stream() .filter(p -> p.getGender() == Person.Sex.MALE) .map(Person::getAge) .collect(Averager::new, // supplier Averager::accept, // accumulator Averager::combine // combiner ); System.out.println(\"Average age of male members: \" + averageCollect.average()); Map<Person.Sex, Integer> totalAgeByGender = roster .stream() .collect( Collectors.groupingBy( Person::getGender, Collectors.reducing( 0, // identity Person::getAge, // mapper Integer::sum))); // operation","title":"Stream.collect Method"},{"location":"java/collections/#algorithms","text":"","title":"Algorithms"},{"location":"java/collections/#custom-implementation","text":"","title":"Custom implementation"},{"location":"java/collections/#interoperability","text":"","title":"Interoperability"},{"location":"java/concurrency/","text":"","title":"Concurrency"},{"location":"java/debugging/","text":"","title":"Debugging"},{"location":"java/deployment/","text":"","title":"Deployment"},{"location":"java/exceptions/","text":"exceptional event disrupts the normal flow of the program's instructions. exception object throwing an exception call stack exception handler catch the exception","title":"Exceptions"},{"location":"java/generics/","text":"bugs are difficult to find. with generics you can detect some runtime bugs at compile time. generics enable types to be parameters when defining classes, interfaces and methods. Why? \u00b6 Stronger type checks at compile time. Elimination of casts Enabling programmers to implement generic algorithms.","title":"Generics"},{"location":"java/generics/#why","text":"Stronger type checks at compile time. Elimination of casts Enabling programmers to implement generic algorithms.","title":"Why?"},{"location":"java/helloworld/","text":"class HelloWorldApp { public static void main(String[] args) { System.out.println(\"Hello World!\"); // Display the string. } } multiline - / / javadoc - /* / single line - //","title":"Helloworld"},{"location":"java/inheritance/","text":"subclass (also a derived class, extended class, or child class). superclass (also a base class or a parent class). the topmost class, Object. Such a class is said to be descended from all the classes in the inheritance chain stretching back to Object. Constructors are not members, so they are not inherited by subclasses A subclass inherits all of the public and protected members of its parent, no matter what package the subclass is in. If the subclass is in the same package as its parent, it also inherits the package-private members of the parent. You can use the inherited members as is, replace them, hide them, or supplement them with new members: You can declare a field in the subclass with the same name as the one in the superclass, thus hiding it (not recommended). You can write a new instance method in the subclass that has the same signature as the one in the superclass, thus overriding it. You can write a new static method in the subclass that has the same signature as the one in the superclass, thus hiding it. You can write a subclass constructor that invokes the constructor of the superclass, either implicitly or by using the keyword super. A nested class has access to all the private members of its enclosing class\u2014both fields and methods. Therefore, a public or protected nested class inherited by a subclass has indirect access to all of the private members of the superclass. Casting Objects \u00b6 // implicit casting Object obj = new MountainBike(); // explicit casting MountainBike myBike = (MountainBike)obj; instanceof Multiple Inheritance of State, Implementation, and Type \u00b6 multiple inheritance of state problem: name conflicts and ambiguity. Because interfaces do not contain fields, you do not have to worry about problems that result from multiple inheritance of state. As with multiple inheritance of implementation, a class can inherit different implementations of a method defined (as default or static) in the interfaces that it extends. In this case, the compiler or the user must decide which one to use. Polymorphism \u00b6 principle in biology in which an organism or species can have many different forms or stages. Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class. virtual method invocation \u00b6 It does not call the method that is defined by the variable's type super keyword \u00b6 Note: If a constructor does not explicitly invoke a superclass constructor, the Java compiler automatically inserts a call to the no-argument constructor of the superclass. If the super class does not have a no-argument constructor, you will get a compile-time error. Object does have such a constructor, so if Object is the only superclass, there is no problem. super(parameter list) -> constructor of super class. constructor chaining \u00b6 a whole chain of constructors called, all the way back to the constructor of Object. Object as superclass \u00b6 protected Object clone() throws CloneNotSupportedException Creates and returns a copy of this object. public boolean equals(Object obj) Indicates whether some other object is \"equal to\" this one. check only refernece / symbol not values protected void finalize() throws Throwable Called by the garbage collector on an object when garbage collection determines that there are no more references to the object public final Class getClass() Returns the runtime class of an object. public int hashCode() Returns a hash code value for the object. public String toString() Returns a string representation of the object. public final void notify() public final void notifyAll() public final void wait() public final void wait(long timeout) public final void wait(long timeout, int nanos) If you override equals(), you must override hashCode() as well. The Class class, in the java.lang package, has a large number of methods (more than 50). For example, you can test to see if the class is an annotation (isAnnotation()), an interface (isInterface()), or an enumeration (isEnum()). You can see what the object's fields are (getFields()) or what its methods are (getMethods()), and so on. You can declare some or all of a class's methods final Methods called from constructors should generally be declared finaal. A class that is declared final cannot be subclassed. Abstract Methods and Classes \u00b6 Abstract classes cannot be instantiated, but they can be subclassed. Abstract classes vs interface \u00b6 Abstract classes are similar to interfaces. You cannot instantiate them, and they may contain a mix of methods declared with or without an implementation. However, with abstract classes, you can declare fields that are not static and final, and define public, protected, and private concrete methods. With interfaces, all fields are automatically public, static, and final, and all methods that you declare or define (as default methods) are public. In addition, you can extend only one class, whether or not it is abstract, whereas you can implement any number of interfaces. Which should you use, abstract classes or interfaces? Consider using abstract classes if any of these statements apply to your situation: You want to share code among several closely related classes. You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private). You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong. Consider using interfaces if any of these statements apply to your situation: You expect that unrelated classes would implement your interface. For example, the interfaces Comparable and Cloneable are implemented by many unrelated classes. You want to specify the behavior of a particular data type, but not concerned about who implements its behavior. You want to take advantage of multiple inheritance of type. overriding and hiding methods \u00b6 same signature (name, plus the number and the type of its parameters) and return type @Override If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass. The version of the overridden instance method that gets invoked is the one in the subclass. The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass. public class Animal { public static void testClassMethod() { System.out.println(\"The static method in Animal\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Animal\"); } } public class Cat extends Animal { public static void testClassMethod() { System.out.println(\"The static method in Cat\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Cat\"); } public static void main(String[] args) { Cat myCat = new Cat(); Animal myAnimal = myCat; Animal.testClassMethod(); myAnimal.testInstanceMethod(); } } The static method in Animal The instance method in Cat","title":"Inheritance"},{"location":"java/inheritance/#casting-objects","text":"// implicit casting Object obj = new MountainBike(); // explicit casting MountainBike myBike = (MountainBike)obj; instanceof","title":"Casting Objects"},{"location":"java/inheritance/#multiple-inheritance-of-state-implementation-and-type","text":"multiple inheritance of state problem: name conflicts and ambiguity. Because interfaces do not contain fields, you do not have to worry about problems that result from multiple inheritance of state. As with multiple inheritance of implementation, a class can inherit different implementations of a method defined (as default or static) in the interfaces that it extends. In this case, the compiler or the user must decide which one to use.","title":"Multiple Inheritance of State, Implementation, and Type"},{"location":"java/inheritance/#polymorphism","text":"principle in biology in which an organism or species can have many different forms or stages. Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class.","title":"Polymorphism"},{"location":"java/inheritance/#virtual-method-invocation","text":"It does not call the method that is defined by the variable's type","title":"virtual method invocation"},{"location":"java/inheritance/#super-keyword","text":"Note: If a constructor does not explicitly invoke a superclass constructor, the Java compiler automatically inserts a call to the no-argument constructor of the superclass. If the super class does not have a no-argument constructor, you will get a compile-time error. Object does have such a constructor, so if Object is the only superclass, there is no problem. super(parameter list) -> constructor of super class.","title":"super keyword"},{"location":"java/inheritance/#constructor-chaining","text":"a whole chain of constructors called, all the way back to the constructor of Object.","title":"constructor chaining"},{"location":"java/inheritance/#object-as-superclass","text":"protected Object clone() throws CloneNotSupportedException Creates and returns a copy of this object. public boolean equals(Object obj) Indicates whether some other object is \"equal to\" this one. check only refernece / symbol not values protected void finalize() throws Throwable Called by the garbage collector on an object when garbage collection determines that there are no more references to the object public final Class getClass() Returns the runtime class of an object. public int hashCode() Returns a hash code value for the object. public String toString() Returns a string representation of the object. public final void notify() public final void notifyAll() public final void wait() public final void wait(long timeout) public final void wait(long timeout, int nanos) If you override equals(), you must override hashCode() as well. The Class class, in the java.lang package, has a large number of methods (more than 50). For example, you can test to see if the class is an annotation (isAnnotation()), an interface (isInterface()), or an enumeration (isEnum()). You can see what the object's fields are (getFields()) or what its methods are (getMethods()), and so on. You can declare some or all of a class's methods final Methods called from constructors should generally be declared finaal. A class that is declared final cannot be subclassed.","title":"Object as superclass"},{"location":"java/inheritance/#abstract-methods-and-classes","text":"Abstract classes cannot be instantiated, but they can be subclassed.","title":"Abstract Methods and Classes"},{"location":"java/inheritance/#abstract-classes-vs-interface","text":"Abstract classes are similar to interfaces. You cannot instantiate them, and they may contain a mix of methods declared with or without an implementation. However, with abstract classes, you can declare fields that are not static and final, and define public, protected, and private concrete methods. With interfaces, all fields are automatically public, static, and final, and all methods that you declare or define (as default methods) are public. In addition, you can extend only one class, whether or not it is abstract, whereas you can implement any number of interfaces. Which should you use, abstract classes or interfaces? Consider using abstract classes if any of these statements apply to your situation: You want to share code among several closely related classes. You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private). You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong. Consider using interfaces if any of these statements apply to your situation: You expect that unrelated classes would implement your interface. For example, the interfaces Comparable and Cloneable are implemented by many unrelated classes. You want to specify the behavior of a particular data type, but not concerned about who implements its behavior. You want to take advantage of multiple inheritance of type.","title":"Abstract classes vs interface"},{"location":"java/inheritance/#overriding-and-hiding-methods","text":"same signature (name, plus the number and the type of its parameters) and return type @Override If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass. The version of the overridden instance method that gets invoked is the one in the subclass. The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass. public class Animal { public static void testClassMethod() { System.out.println(\"The static method in Animal\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Animal\"); } } public class Cat extends Animal { public static void testClassMethod() { System.out.println(\"The static method in Cat\"); } public void testInstanceMethod() { System.out.println(\"The instance method in Cat\"); } public static void main(String[] args) { Cat myCat = new Cat(); Animal myAnimal = myCat; Animal.testClassMethod(); myAnimal.testInstanceMethod(); } } The static method in Animal The instance method in Cat","title":"overriding and hiding methods"},{"location":"java/interfaces/","text":"A contract that other people adhere to and people know the API but not the implementation public interface OperateCar { // constant declarations, if any // method signatures // An enum with values RIGHT, LEFT int turn(Direction direction, double radius, double startSpeed, double endSpeed); int changeLanes(Direction direction, double startSpeed, double endSpeed); int signalTurn(Direction direction, boolean signalOn); int getRadarFront(double distanceToCar, double speedOfCar); int getRadarRear(double distanceToCar, double speedOfCar); ...... // more method signatures } public interface GroupedInterface extends Interface1, Interface2, Interface3 { // constant declarations // base of natural logarithms double E = 2.718282; // method signatures void doSomething (int i, double x); int doSomethingElse(String s); } abstract methods, default methods, and static methods -> default public , can omit. All constant values defined in an interface are implicitly public, static, and final. public interface Relatable { // this (object calling isLargerThan) // and other must be instances of // the same class returns 1, 0, -1 // if this is greater than, // equal to, or less than other public int isLargerThan(Relatable other); } public class RectanglePlus implements Relatable { public int isLargerThan(Relatable other) { RectanglePlus otherRect = (RectanglePlus)other; if (this.getArea() < otherRect.getArea()) return -1; else if (this.getArea() > otherRect.getArea()) return 1; else return 0; } } Evolving Interfaces \u00b6 making changes in historic interfaces make devs angry. either extend it, or define static and default methods. default boolean didItWork(int i, double x, String s) { // Method body } Extending Interfaces That Contain Default Methods \u00b6 Not mention the default method at all, which lets your extended interface inherit the default method. Redeclare the default method, which makes it abstract. Redefine the default method, which overrides it. Static Methods \u00b6 A static method is a method that is associated with the class in which it is defined rather than with any object. Every instance of the class shares its static methods myDeck.sort( Comparator.comparing(Card::getRank) .reversed() .thenComparing(Comparator.comparing(Card::getSuit)));","title":"Interfaces"},{"location":"java/interfaces/#evolving-interfaces","text":"making changes in historic interfaces make devs angry. either extend it, or define static and default methods. default boolean didItWork(int i, double x, String s) { // Method body }","title":"Evolving Interfaces"},{"location":"java/interfaces/#extending-interfaces-that-contain-default-methods","text":"Not mention the default method at all, which lets your extended interface inherit the default method. Redeclare the default method, which makes it abstract. Redefine the default method, which overrides it.","title":"Extending Interfaces That Contain Default Methods"},{"location":"java/interfaces/#static-methods","text":"A static method is a method that is associated with the class in which it is defined rather than with any object. Every instance of the class shares its static methods myDeck.sort( Comparator.comparing(Card::getRank) .reversed() .thenComparing(Comparator.comparing(Card::getSuit)));","title":"Static Methods"},{"location":"java/intro/","text":"what is java? \u00b6 javase/tutorial programming language \u00b6 general-purpose high-level .java -> compiler -> .class (byte code) -> JVM -> machine code perform additional steps at runtime to give your application a performance boost. finding performance bottlenecks and recompiling (to native code) frequently used sections of code. Simple Object oriented Distributed Multithreaded Dynamic Architecture neutral Portable High performance Robust Secure learn more at whitepaper Platform \u00b6 A platform is the hardware or software environment in which a program runs. Java platform a software-only platform that runs on top of other hardware-based platforms. JVM Java API Development Tools - javac, java, javadoc etc API - basic objects, networking, security, XML generation, database access etc Deployment Technologies - Java Web Start and Java Plug-In for deploying your applications to end users. User Interface Toolkits - JavaFX, Swing, and Java 2D (GUI) Integration Libraries - database access and manipulation of remote objects. (IDL, JDBC, JNDI, RMI, RMI-IIOP) docs platform-independent environment Why? \u00b6 Get started quickly : powerful object-oriented language, it's easy to learn. less code : 4 times smaller than the same program written in C++. (based on methods, classes count etc) better code : good coding practices, automatic garbage collection, object orientation, JavaBeans\u2122 component architecture, API Develop more quickly : 2x c++ portable Write once, run anywhere Distribute software easily : With Java Web Start software.","title":"what is java?"},{"location":"java/intro/#what-is-java","text":"javase/tutorial","title":"what is java?"},{"location":"java/intro/#programming-language","text":"general-purpose high-level .java -> compiler -> .class (byte code) -> JVM -> machine code perform additional steps at runtime to give your application a performance boost. finding performance bottlenecks and recompiling (to native code) frequently used sections of code. Simple Object oriented Distributed Multithreaded Dynamic Architecture neutral Portable High performance Robust Secure learn more at whitepaper","title":"programming language"},{"location":"java/intro/#platform","text":"A platform is the hardware or software environment in which a program runs. Java platform a software-only platform that runs on top of other hardware-based platforms. JVM Java API Development Tools - javac, java, javadoc etc API - basic objects, networking, security, XML generation, database access etc Deployment Technologies - Java Web Start and Java Plug-In for deploying your applications to end users. User Interface Toolkits - JavaFX, Swing, and Java 2D (GUI) Integration Libraries - database access and manipulation of remote objects. (IDL, JDBC, JNDI, RMI, RMI-IIOP) docs platform-independent environment","title":"Platform"},{"location":"java/intro/#why","text":"Get started quickly : powerful object-oriented language, it's easy to learn. less code : 4 times smaller than the same program written in C++. (based on methods, classes count etc) better code : good coding practices, automatic garbage collection, object orientation, JavaBeans\u2122 component architecture, API Develop more quickly : 2x c++ portable Write once, run anywhere Distribute software easily : With Java Web Start software.","title":"Why?"},{"location":"java/java9%26beyond/","text":"TODO https://dev.to/awwsmm/20-reasons-to-move-on-from-java-8-1dio https://4comprehension.com/keeping-up-with-java-9-10-11-and-beyond/ https://codete.com/blog/java-8-java-11-quick-guide https://www.javatpoint.com/java-8-vs-java-11 https://www.infoworld.com/article/3606833/jdk-17-the-new-features-in-java-17.html https://www.marcobehler.com/guides/a-guide-to-java-versions-and-features","title":"Java9&beyond"},{"location":"java/jdbc/","text":"","title":"Jdbc"},{"location":"java/jsp/","text":"","title":"Jsp"},{"location":"java/networking/","text":"","title":"Networking"},{"location":"java/numbers/","text":"reasons to use objects in place of primitives, and the Java platform provides wrapper classes for each of the primitive data types. These classes \"wrap\" the primitive in an object. Often, the wrapping is done by the compiler As an argument of a method that expects an object (often used when manipulating collections of numbers). To use constants defined by the class, such as MIN_VALUE and MAX_VALUE, that provide the upper and lower bounds of the data type. To use class methods for converting values to and from other primitive types, for converting to and from strings, and for converting between number systems (decimal, octal, hexadecimal, binary). BigDecimal and BigInteger are used for high-precision calculations. AtomicInteger and AtomicLong are used for multi-threaded applications. Byte Short Integer Long Float Double System.out.printf(...) System.out.format(\"The value of \" + \"the float variable is \" + \"%f%n, while the value of the \" + \"integer variable is %d, \" + \"and the string is %s\", floatVar, intVar, stringVar); public PrintStream format(Locale l, String format, Object... args) the java.text.DecimalFormat(...) DecimalFormat myFormatter = new DecimalFormat(pattern); String output = myFormatter.format(value); System.out.println(value + \" \" + pattern + \" \" + output); number pattern output 123456.789 ###,###.### 123,456.789 123456.789 ###.## 123456.79 123.78 000000.000 000123.780 12345.67 $###,###.### $12,345.67 Advanced math \u00b6 import static java.lang.Math.*; E PI abs ceil floor rint round min max exp log pow sqrt sin random() java.util.Random","title":"Numbers"},{"location":"java/numbers/#advanced-math","text":"import static java.lang.Math.*; E PI abs ceil floor rint round min max exp log pow sqrt sin random() java.util.Random","title":"Advanced math"},{"location":"java/oops/","text":"Objects \u00b6 real world mapping of obbjects state / fields / variables behaviour / methods / functions - primary mechanism for object-to-object communication Why? \u00b6 Modularity : an object can be easily passed around inside the system. Information- hiding Code re-use Pluggability and debugging ease : If a bolt breaks, you replace it, not the entire machine. data encapsulation \u00b6 Hiding internal state and requiring all interaction to be performed through an object's methods. Class \u00b6 bicycle is an instance of the class of objects known as bicycles A class is the blueprint from which individual objects are created. (instances) Inheritance \u00b6 organizing and structuring your software subclass has superclass's fields and methods. class MountainBike extends Bicycle { // new fields and methods defining // a mountain bike would go here } Interface \u00b6 form a contract between the class and the outside world. interface Bicycle { // wheel revolutions per minute void changeCadence(int newValue); void changeGear(int newValue); void speedUp(int increment); void applyBrakes(int decrement); } class ACMEBicycle implements Bicycle { int cadence = 0; int speed = 0; int gear = 1; void changeCadence(int newValue) { cadence = newValue; } void changeGear(int newValue) { gear = newValue; } void speedUp(int increment) { speed = speed + increment; } void applyBrakes(int decrement) { speed = speed - decrement; } void printStates() { System.out.println(\"cadence:\" + cadence + \" speed:\" + speed + \" gear:\" + gear); } } Package \u00b6 namespace that organizes a set of related classes and interfaces. Library \u00b6 a set of packages","title":"Objects"},{"location":"java/oops/#objects","text":"real world mapping of obbjects state / fields / variables behaviour / methods / functions - primary mechanism for object-to-object communication","title":"Objects"},{"location":"java/oops/#why","text":"Modularity : an object can be easily passed around inside the system. Information- hiding Code re-use Pluggability and debugging ease : If a bolt breaks, you replace it, not the entire machine.","title":"Why?"},{"location":"java/oops/#data-encapsulation","text":"Hiding internal state and requiring all interaction to be performed through an object's methods.","title":"data encapsulation"},{"location":"java/oops/#class","text":"bicycle is an instance of the class of objects known as bicycles A class is the blueprint from which individual objects are created. (instances)","title":"Class"},{"location":"java/oops/#inheritance","text":"organizing and structuring your software subclass has superclass's fields and methods. class MountainBike extends Bicycle { // new fields and methods defining // a mountain bike would go here }","title":"Inheritance"},{"location":"java/oops/#interface","text":"form a contract between the class and the outside world. interface Bicycle { // wheel revolutions per minute void changeCadence(int newValue); void changeGear(int newValue); void speedUp(int increment); void applyBrakes(int decrement); } class ACMEBicycle implements Bicycle { int cadence = 0; int speed = 0; int gear = 1; void changeCadence(int newValue) { cadence = newValue; } void changeGear(int newValue) { gear = newValue; } void speedUp(int increment) { speed = speed + increment; } void applyBrakes(int decrement) { speed = speed - decrement; } void printStates() { System.out.println(\"cadence:\" + cadence + \" speed:\" + speed + \" gear:\" + gear); } }","title":"Interface"},{"location":"java/oops/#package","text":"namespace that organizes a set of related classes and interfaces.","title":"Package"},{"location":"java/oops/#library","text":"a set of packages","title":"Library"},{"location":"java/packages/","text":"A package is a grouping of related types (classes, interfaces, enumerations (classes), and annotation types (interfaces)) providing access protection and name space management. Why? \u00b6 types are related. easy to find types that can provide particular functions. The names won't conflict with the type names in other packages because the package creates a new namespace. unrestricted access to one another yet still restrict access for types outside the package. At top: package <name>; only one public type in one source file. You can include non-public types in the same file as a public type (this is strongly discouraged, unless the non-public types are small and closely related to the public type). All the top-level, non-public types will be package private. Naming \u00b6 The fully qualified name -> library.package.class lower case reversed Internet domain name region specific -> com.example.region.mypackage Packages in the Java language itself begin with java. or javax. add an underscore for reserved keywords and hyphens adn starting with numbers Usage \u00b6 by Its Qualified Name \u00b6 all right for infrequent use You can use a package member's simple name if the code you are writing is in the same package as that member or if that member has been imported. Importing a Package Member \u00b6 import graphics.Rectangle; Importing an Entire Package \u00b6 if you use many types from a package, you should import the entire package. It cannot be used to match a subset of the classes in a package. import graphics.*; import the public nested classes of an enclosing class. \u00b6 import graphics.Rectangle; import graphics.Rectangle.*; Be aware that the second import statement will not import Rectangle. static import \u00b6 when you need frequent access to static final fields (constants) and static methods from one or two classes. import static java.lang.Math.*; Java compiler automatically imports: 1) the java.lang package 2) the package for the current file Apparent Hierarchies of Packages \u00b6 java.awt.xxxx packages are not included in the java.awt package. java.awt is used for a number of related packages to make the relationship evident, but not to show inclusion. Name Ambiguities \u00b6 if a type in 2 packages have same name and both packagesare included -> use member's fully qualified name. Managing Source and Class Files \u00b6 hierarchical file systems to manage source and class files, although The Java Language Specification does not require this. <path_one>\\sources\\com\\example\\graphics\\Rectangle.java <path_two>\\classes\\com\\example\\graphics\\Rectangle.class The full path to the classes directory, \\classes, is called the class path, and is set with the CLASSPATH system variable. Both the compiler and the JVM construct the path to your .class files by adding the package name to the class path. For example, if <path_two>\\classes is your class path, and the package name is com.example.graphics, then the compiler and JVM look for .class files in <path_two>\\classes\\com\\example\\graphics. By default, the compiler and the JVM search the current directory and the JAR file containing the Java platform classes so that these directories are automatically in your class path.","title":"Packages"},{"location":"java/packages/#why","text":"types are related. easy to find types that can provide particular functions. The names won't conflict with the type names in other packages because the package creates a new namespace. unrestricted access to one another yet still restrict access for types outside the package. At top: package <name>; only one public type in one source file. You can include non-public types in the same file as a public type (this is strongly discouraged, unless the non-public types are small and closely related to the public type). All the top-level, non-public types will be package private.","title":"Why?"},{"location":"java/packages/#naming","text":"The fully qualified name -> library.package.class lower case reversed Internet domain name region specific -> com.example.region.mypackage Packages in the Java language itself begin with java. or javax. add an underscore for reserved keywords and hyphens adn starting with numbers","title":"Naming"},{"location":"java/packages/#usage","text":"","title":"Usage"},{"location":"java/packages/#by-its-qualified-name","text":"all right for infrequent use You can use a package member's simple name if the code you are writing is in the same package as that member or if that member has been imported.","title":"by Its Qualified Name"},{"location":"java/packages/#importing-a-package-member","text":"import graphics.Rectangle;","title":"Importing a Package Member"},{"location":"java/packages/#importing-an-entire-package","text":"if you use many types from a package, you should import the entire package. It cannot be used to match a subset of the classes in a package. import graphics.*;","title":"Importing an Entire Package"},{"location":"java/packages/#import-the-public-nested-classes-of-an-enclosing-class","text":"import graphics.Rectangle; import graphics.Rectangle.*; Be aware that the second import statement will not import Rectangle.","title":"import the public nested classes of an enclosing class."},{"location":"java/packages/#static-import","text":"when you need frequent access to static final fields (constants) and static methods from one or two classes. import static java.lang.Math.*; Java compiler automatically imports: 1) the java.lang package 2) the package for the current file","title":"static import"},{"location":"java/packages/#apparent-hierarchies-of-packages","text":"java.awt.xxxx packages are not included in the java.awt package. java.awt is used for a number of related packages to make the relationship evident, but not to show inclusion.","title":"Apparent Hierarchies of Packages"},{"location":"java/packages/#name-ambiguities","text":"if a type in 2 packages have same name and both packagesare included -> use member's fully qualified name.","title":"Name Ambiguities"},{"location":"java/packages/#managing-source-and-class-files","text":"hierarchical file systems to manage source and class files, although The Java Language Specification does not require this. <path_one>\\sources\\com\\example\\graphics\\Rectangle.java <path_two>\\classes\\com\\example\\graphics\\Rectangle.class The full path to the classes directory, \\classes, is called the class path, and is set with the CLASSPATH system variable. Both the compiler and the JVM construct the path to your .class files by adding the package name to the class path. For example, if <path_two>\\classes is your class path, and the package name is com.example.graphics, then the compiler and JVM look for .class files in <path_two>\\classes\\com\\example\\graphics. By default, the compiler and the JVM search the current directory and the JAR file containing the Java platform classes so that these directories are automatically in your class path.","title":"Managing Source and Class Files"},{"location":"java/re/","text":"","title":"Re"},{"location":"java/security/","text":"","title":"Security"},{"location":"java/strings/","text":"Character class is immutable String class is immutable The Java programming language does not permit literal strings to span lines in source files Breaking strings between lines using the + concatenation operator is, once again, very common in print statements. int i; String s1 = \"\" + i; public class Filename { private String fullPath; private char pathSeparator, extensionSeparator; public Filename(String str, char sep, char ext) { fullPath = str; pathSeparator = sep; extensionSeparator = ext; } public String extension() { int dot = fullPath.lastIndexOf(extensionSeparator); return fullPath.substring(dot + 1); } // gets filename without extension public String filename() { int dot = fullPath.lastIndexOf(extensionSeparator); int sep = fullPath.lastIndexOf(pathSeparator); return fullPath.substring(sep + 1, dot); } public String path() { int sep = fullPath.lastIndexOf(pathSeparator); return fullPath.substring(0, sep); } } public class RegionMatchesDemo { public static void main(String[] args) { String searchMe = \"Green Eggs and Ham\"; String findMe = \"Eggs\"; int searchMeLength = searchMe.length(); int findMeLength = findMe.length(); boolean foundIt = false; for (int i = 0; i <= (searchMeLength - findMeLength); i++) { if (searchMe.regionMatches(i, findMe, 0, findMeLength)) { foundIt = true; System.out.println(searchMe.substring(i, i + findMeLength)); break; } } if (!foundIt) System.out.println(\"No match found.\"); } } public class StringDemo { public static void main(String[] args) { String palindrome = \"Dot saw I was Tod\"; int len = palindrome.length(); char[] tempCharArray = new char[len]; char[] charArray = new char[len]; // put original string in an // array of chars for (int i = 0; i < len; i++) { tempCharArray[i] = palindrome.charAt(i); } // reverse array of chars for (int j = 0; j < len; j++) { charArray[j] = tempCharArray[len - 1 - j]; } String reversePalindrome = new String(charArray); System.out.println(reversePalindrome); } } Why? \u00b6 String is immutable while stringbuilder ain't Note also that there is StringBuffer in addition to StringBuilder. The difference is that the former has synchronized methods. If you use it as a local variable, use StringBuilder. If it happens that it's possible for it to be accessed by multiple threads, use StringBuffer (that's rarer) autoboxing and unboxing \u00b6 autoboxing -> primitive to object unboxing -> object to primitive","title":"Strings"},{"location":"java/strings/#why","text":"String is immutable while stringbuilder ain't Note also that there is StringBuffer in addition to StringBuilder. The difference is that the former has synchronized methods. If you use it as a local variable, use StringBuilder. If it happens that it's possible for it to be accessed by multiple threads, use StringBuffer (that's rarer)","title":"Why?"},{"location":"java/strings/#autoboxing-and-unboxing","text":"autoboxing -> primitive to object unboxing -> object to primitive","title":"autoboxing and unboxing"}],"index":{"fieldVectors":[["title/",[0,4.944]],["text/",[1,5.782,2,4.212,3,3.201,4,2.963]],["title/#abhinavs-notes",[1,3.356,2,2.113]],["text/#abhinavs-notes",[2,3.759,4,3.059]],["title/java/IO/",[5,4.944]],["text/java/IO/",[]],["title/java/annotations/",[6,2.219]],["text/java/annotations/",[2,1.246,3,2.361,6,3.159,7,1.454,8,1.29,9,0.946,10,0.712,11,1.588,12,1.29,13,1.025,14,1.794,15,2.32,16,2.392,17,0.939,18,1.13,19,1.025,20,1.29,21,1.29,22,1.743,23,0.946,24,2.062,25,0.747,26,1.025,27,1.191,28,1.686,29,1.025,30,0.712,31,1.29,32,1.835,33,1.29,34,1.29,35,1.025,36,1.825,37,0.883,38,1.404,39,1.29,40,3.013,41,1.546,42,1.025,43,2.91,44,1.093,45,0.602,46,0.336,47,0.883,48,1.29,49,1.307,50,1.753,51,1.29,52,2.496,53,4.753,54,2.584,55,2.639,56,0.539,57,2.186,58,1.29,59,1.29,60,2.639,61,1.29,62,1.656,63,3.012,64,1.29,65,1.29,66,1.29,67,3.012,68,2.639,69,3.167,70,1.29,71,1.978,72,1.025,73,0.712,74,1.29,75,1.307,76,0.88,77,0.883,78,1.29,79,1.376,80,1.29,81,1.978,82,2.115,83,1.794,84,1.404,85,2.639,86,1.29,87,1.29,88,1.29,89,1.29,90,1.29,91,1.025,92,1.29,93,1.546,94,1.29,95,1.29,96,0.786,97,0.883,98,1.13,99,1.794,100,0.911,101,1.978,102,1.014,103,1.978,104,2.029,105,0.602,106,1.978,107,1.978,108,1.978,109,1.509,110,1.454,111,1.978,112,1.13,113,1.13,114,0.946,115,1.13,116,1.13,117,1.13,118,1.13,119,1.13,120,1.549,121,1.13,122,1.13,123,1.13,124,0.946,125,1.135,126,1.13,127,1.978,128,1.13,129,1.13,130,0.946,131,1.13,132,0.652,133,1.025,134,1.13,135,1.13,136,1.13,137,0.831,138,3.167,139,1.656,140,1.13,141,2.639,142,2.639,143,0.786,144,0.831,145,1.978,146,1.13,147,0.946,148,0.831,149,1.376,150,1.13,151,0.946,152,0.831,153,0.883,154,1.13,155,0.652,156,1.13,157,1.13,158,0.883,159,0.946,160,0.68,161,0.883,162,0.946,163,0.786,164,1.13,165,1.025,166,1.13,167,1.13,168,1.13,169,1.13,170,1.13,171,1.13,172,1.13,173,1.13,174,1.13,175,0.946,176,1.141,177,0.68,178,0.946,179,0.831,180,0.747,181,0.539,182,1.13,183,1.13,184,2.639,185,1.13,186,0.946,187,1.13,188,1.13,189,1.13,190,1.13,191,0.652,192,1.025,193,1.13,194,1.13,195,0.946,196,1.13,197,0.946,198,1.13,199,1.13,200,0.946,201,0.946]],["title/java/annotations/#annotation-type",[6,1.72,36,1.353]],["text/java/annotations/#annotation-type",[2,2.983,6,1.731,17,1.202,28,2.521,38,1.797,44,1.046,52,2.18,54,2.258,55,4.737,57,2.611,60,4.737,62,2.826,68,3.377,69,4.737,71,3.377,82,2.779,96,2.348,97,2.638,98,3.377,99,3.062,100,1.166,101,4.737,102,1.731,103,4.737,104,2.804,105,1.797,106,4.737,107,4.737,108,4.737,109,2.608,110,3.482,111,4.737,112,3.377,113,3.377,114,2.826,115,3.377,116,3.377,117,3.377,118,3.377,119,3.377,120,1.453,121,3.377,122,3.377,123,3.377,124,2.826]],["title/java/annotations/#java-inbuilt",[125,1.444,126,3.356]],["text/java/annotations/#java-inbuilt",[49,3.594,109,2.593,127,6.454,128,5.44,129,5.44,130,4.553,131,5.44,132,3.138,133,4.933,134,5.44]],["title/java/annotations/#meta-annotations",[6,1.72,135,3.356]],["text/java/annotations/#meta-annotations",[6,3.369,15,3.024,17,1.389,22,2.578,32,2.713,40,3.266,41,3.049,44,0.862,99,3.538,125,1.679,136,3.902,137,2.868,138,6.304,139,3.266,140,3.902,141,5.901,142,5.901,143,2.713,144,2.868,145,5.231,146,3.902,147,3.266,148,2.868,149,3.637,150,3.902,151,3.266,152,2.868,153,3.049,154,3.902,155,2.25,156,3.902,157,3.902,158,3.049,159,3.266,160,2.349,161,3.049]],["title/java/annotations/#type-annotations-and-pluggable-type-systems",[6,1.027,36,1.29,162,1.677,163,1.393]],["text/java/annotations/#type-annotations-and-pluggable-type-systems",[75,3.559,76,2.397,79,3.746,81,5.387,82,2.397,83,4.884,84,2.867,85,6.416,93,4.209,164,5.387,165,4.884]],["title/java/annotations/#repeating-annotations",[6,1.72,40,2.809]],["text/java/annotations/#repeating-annotations",[6,3.056,15,2.449,27,2.058,28,1.82,36,1.927,38,1.82,40,3.999,43,4.048,44,0.755,50,1.893,52,2.745,53,4.778,54,2.842,82,2.126,100,1.649,102,1.752,104,2.823,120,2.566,125,1.471,139,2.861,166,3.419,167,3.419,168,3.419,169,3.419,170,3.419,171,3.419,172,3.419,173,3.419,174,3.419,175,2.861,176,2.756,177,2.058,178,2.861,179,2.513,180,2.258,181,1.629,182,3.419,183,3.419,184,5.508,185,3.419,186,2.861,187,3.419,188,3.419,189,3.419,190,3.419,191,1.972]],["title/java/annotations/#retrieving-annotations",[6,1.72,192,3.043]],["text/java/annotations/#retrieving-annotations",[193,5.97,194,5.97]],["title/java/annotations/#design-considerations",[195,2.809,196,3.356]],["text/java/annotations/#design-considerations",[6,2.902,36,2.283,197,4.74,198,5.663,199,5.663,200,4.74,201,4.74]],["title/java/basics/",[202,2.497]],["text/java/basics/",[3,2.605,10,0.77,11,0.736,17,0.435,36,1.131,44,0.738,45,2.013,52,2.567,54,2.594,56,1.01,57,2.298,72,1.109,73,0.77,75,2.209,76,0.544,82,0.943,102,1.086,104,0.627,105,1.492,110,1.557,114,1.023,120,0.526,130,1.023,132,3.55,137,0.899,179,0.899,191,1.929,202,2.181,203,0.899,204,0.912,205,1.023,206,1.223,207,1.223,208,0.85,209,1.023,210,1.223,211,1.921,212,1.223,213,1.223,214,0.955,215,0.955,216,1.109,217,1.109,218,0.85,219,1.276,220,0.955,221,1.223,222,1.473,223,1.223,224,1.223,225,1.921,226,1.023,227,1.223,228,1.223,229,1.223,230,1.223,231,1.223,232,0.85,233,0.899,234,1.023,235,1.023,236,1.223,237,1.223,238,1.223,239,1.223,240,1.223,241,2.119,242,2.542,243,1.223,244,1.223,245,1.223,246,1.223,247,1.223,248,1.473,249,1.223,250,1.688,251,1.223,252,1.223,253,1.109,254,1.223,255,1.223,256,3.045,257,1.223,258,1.223,259,1.223,260,0.544,261,1.223,262,2.565,263,2.609,264,1.223,265,1.223,266,0.955,267,0.736,268,1.223,269,1.223,270,1.276,271,0.899,272,0.899,273,1.223,274,1.223,275,0.808,276,1.109,277,1.223,278,0.736,279,0.85,280,1.223,281,1.223,282,1.223,283,3.344,284,1.023,285,1.023,286,2.119,287,0.705,288,0.955,289,1.223,290,1.223,291,1.223,292,2.191,293,1.773,294,1.223,295,1.223,296,2.119,297,1.223,298,0.736,299,1.473,300,1.223,301,1.921,302,2.191,303,1.656,304,1.109,305,2.804,306,1.223,307,1.223,308,1.223,309,1.223,310,1.223,311,2.382,312,1.223,313,1.023,314,1.023,315,0.386,316,3.782,317,1.223,318,3.344,319,1.223,320,1.223,321,2.119,322,1.109,323,1.656,324,1.223,325,1.223,326,1.223,327,1.223,328,1.223,329,1.023,330,1.223,331,1.223,332,1.223,333,1.396,334,1.223,335,1.109,336,0.955,337,0.899,338,1.223,339,1.223,340,0.85,341,2.119,342,1.773,343,1.223,344,2.804,345,1.223,346,1.109,347,1.223,348,2.119,349,2.119,350,2.119,351,1.223,352,2.613,353,1.223,354,1.223,355,2.804,356,1.223,357,1.223,358,1.223,359,1.223,360,1.773,361,1.223,362,3.032,363,1.223,364,1.223,365,2.119,366,1.921,367,1.109,368,1.223,369,1.223,370,1.552,371,0.85,372,0.77,373,1.223]],["title/java/basics/#variables",[202,2.497]],["text/java/basics/#variables",[10,2.771,36,1.774,44,1.25,45,3.331,57,1.774,73,2.771,102,2.255,202,3.81,203,3.234,204,2.435,205,3.682,206,4.4,207,4.4,208,3.059,209,3.682,210,4.4,211,5.132,212,4.4,213,4.4,214,3.438,215,3.438,216,3.989,217,3.989,218,3.059,219,2.648,220,3.438,221,4.4]],["title/java/basics/#naming",[56,2.064]],["text/java/basics/#naming",[57,2.033,114,4.221,130,4.221,222,3.506,223,5.043,224,5.043,225,4.572,226,4.221,227,5.043,228,5.043,229,5.043,230,5.043,231,5.043,232,3.506,233,3.706,234,4.221,235,4.221,236,5.043,237,5.043]],["title/java/basics/#arrays",[110,3.183]],["text/java/basics/#arrays",[52,2.145,56,2.221,57,2.367,72,4.225,76,2.073,82,2.073,102,2.388,225,4.225,238,4.66,239,4.66,240,4.66,241,5.871,242,5.323,243,4.66,244,4.66,245,4.66,246,4.66,247,4.66,248,4.082,249,4.66,250,2.805,251,4.66,252,4.66,253,4.225]],["title/java/basics/#javautilarrays",[254,4.33]],["text/java/basics/#javautilarrays",[255,5.44,256,3.998,257,5.44,258,5.44,259,5.44,260,2.42,261,5.44,262,3.138,263,3.426,264,5.44,265,5.44]],["title/java/basics/#operators",[132,2.497]],["text/java/basics/#operators",[17,0.92,36,1.573,57,1.573,75,1.708,82,1.15,105,2.076,132,4.103,137,1.901,179,1.901,191,3.016,219,1.557,256,4.125,266,2.02,267,1.557,268,2.586,269,2.586,270,1.557,271,1.901,272,1.901,273,2.586,274,2.586,275,1.708,276,2.345,277,2.586,278,1.557,279,1.798,280,2.586,281,2.586,282,2.586,283,5.229,284,2.164,285,2.164,286,3.9,287,1.491,288,2.02,289,2.586,290,2.586,291,2.586,292,3.047,293,3.265,294,2.586,295,2.586,296,3.9,297,2.586,298,1.557,299,1.798,300,2.586,301,3.536,302,2.02,303,3.047,304,2.345,305,4.696,306,2.586,307,2.586,308,2.586,309,2.586,310,2.586,311,1.628,312,2.586,313,2.164,314,2.164,315,0.816,316,5.612,317,2.586,318,5.229,319,2.586,320,2.586,321,3.9,322,2.345,323,3.047,324,2.586,325,2.586,326,2.586,327,2.586,328,2.586,329,2.164]],["title/java/basics/#expressions-result9-blocks-statements-",[75,1.167,311,1.112,330,1.766,331,1.766,332,1.766,374,2.016]],["text/java/basics/#expressions-result9-blocks-statements-",[]],["title/java/basics/#control-flow",[334,3.356,335,3.043]],["text/java/basics/#control-flow",[11,1.633,52,3.147,54,3.258,57,2.578,75,2.671,104,1.39,105,1.444,110,1.994,222,1.886,242,2.46,250,2.434,262,3.464,263,3.607,270,1.633,292,2.12,299,1.886,302,3.159,311,3.044,336,2.12,337,1.994,338,2.713,339,2.713,340,1.886,341,4.043,342,3.384,343,2.713,344,4.833,345,2.713,346,2.46,347,2.713,348,4.043,349,4.043,350,4.043,351,2.713,352,4.185,353,2.713,354,2.713,355,4.833,356,2.713,357,2.713,358,2.713,359,2.713,360,3.384,361,2.713,362,4.856,363,2.713,364,2.713,365,4.043,366,3.666,367,2.46,368,2.713,369,2.713]],["title/java/basics/#access-modifiers",[370,1.858,371,2.333]],["text/java/basics/#access-modifiers",[44,1.442,45,3.476,120,2.388,370,3.615,372,3.495,373,5.55]],["title/java/classes/",[44,0.956]],["text/java/classes/",[375,6.89]],["title/java/collections/",[4,2.219]],["text/java/collections/",[3,2.451,4,2.912,7,0.654,10,1.008,11,0.963,16,4.014,17,1.419,24,2.081,25,0.588,30,0.56,36,0.359,41,1.25,44,0.196,46,0.792,47,3.459,50,1.207,52,1.835,54,1.9,57,2.043,62,0.745,75,0.588,76,1.656,77,0.695,82,1.185,84,1.16,100,1.181,102,0.82,105,0.474,109,2.11,120,1.146,132,1.973,139,0.745,160,0.536,165,0.807,176,1.257,178,2.57,181,0.763,186,1.339,191,1.257,192,0.807,195,0.745,204,0.938,208,0.619,209,0.745,218,0.619,219,0.536,220,0.695,226,0.745,235,1.339,248,0.619,250,0.963,260,1.522,262,1.536,263,1.008,270,0.536,271,0.654,278,1.312,299,1.851,315,0.84,342,0.745,371,1.112,372,0.56,376,1.6,377,0.923,378,1.016,379,1.825,380,0.89,381,1.016,382,1.703,383,0.807,384,2.57,385,1.016,386,0.745,387,2.18,388,1.6,389,1.339,390,1.016,391,0.588,392,1.339,393,0.807,394,1.827,395,1.016,396,1.339,397,0.695,398,1.6,399,1.339,400,0.619,401,2.57,402,2.18,403,0.89,404,0.745,405,0.89,406,1.977,407,1.339,408,1.957,409,0.695,410,0.89,411,0.89,412,3.42,413,1.44,414,1.451,415,1.703,416,2.414,417,0.89,418,2.399,419,1.451,420,0.745,421,0.89,422,0.745,423,0.89,424,0.89,425,0.745,426,1.6,427,0.89,428,1.6,429,1.6,430,0.89,431,0.89,432,0.89,433,0.89,434,0.89,435,0.89,436,0.89,437,0.89,438,0.695,439,0.745,440,0.745,441,0.89,442,1.451,443,1.977,444,1.6,445,1.6,446,0.89,447,0.807,448,0.745,449,0.89,450,2.229,451,0.89,452,0.89,453,0.89,454,0.89,455,0.89,456,0.89,457,0.89,458,0.89,459,0.89,460,0.89,461,0.89,462,0.89,463,0.89,464,0.89,465,0.619,466,0.654,467,1.451,468,0.89,469,0.89,470,0.89,471,0.695,472,0.89,473,0.695,474,0.89,475,0.89,476,0.89,477,0.89,478,1.176,479,0.89,480,0.89,481,0.89,482,1.25,483,0.89,484,0.89,485,0.89,486,0.89,487,0.89,488,0.89,489,0.89,490,0.89,491,0.89,492,0.89,493,0.89,494,0.654,495,0.619,496,1.6,497,0.89,498,0.89,499,0.807,500,0.89,501,0.89,502,0.89,503,0.89,504,0.89,505,0.89,506,0.89,507,0.89,508,0.89,509,1.25,510,0.89,511,0.89,512,0.89,513,0.89,514,0.89,515,0.89,516,0.89,517,2.414,518,0.89,519,0.89,520,0.89,521,0.89,522,0.89,523,0.89,524,0.807,525,0.89,526,0.89,527,0.89,528,0.807,529,0.89,530,0.89,531,0.89,532,0.89,533,0.89,534,0.89,535,0.89,536,0.89,537,0.89,538,0.89,539,0.89,540,0.89,541,0.89,542,1.977,543,1.825,544,2.081,545,1.451,546,1.451,547,1.451,548,0.89,549,0.89,550,0.695,551,0.654,552,0.745,553,0.745,554,1.6,555,0.89,556,0.89,557,1.25,558,1.6,559,0.89,560,0.89,561,0.89,562,1.451,563,0.89,564,0.89,565,0.695,566,0.89,567,0.89,568,1.339,569,0.89,570,1.451,571,1.451,572,1.6,573,1.451,574,1.451,575,0.89,576,0.89,577,0.588,578,0.89,579,0.89,580,0.89,581,0.89,582,0.89,583,0.89,584,0.89,585,0.89,586,0.89,587,0.89,588,0.654,589,0.89,590,0.89,591,0.89,592,0.89,593,0.89,594,0.89,595,0.89,596,0.89,597,0.89,598,0.89]],["title/java/collections/#why",[]],["text/java/collections/#why",[4,2.135,11,3.289,17,1.483,25,2.753,41,3.256,76,2.431,195,3.488,401,5.102,402,6.096,403,4.167,404,3.488,405,4.167,406,4.954,407,4.573,408,4.756,409,3.256,410,4.167,411,4.167,412,6.894,413,2.753,414,3.778,415,3.256,416,3.778,417,4.167,418,3.256,419,3.778]],["title/java/collections/#interfaces",[100,1.495]],["text/java/collections/#interfaces",[4,3.345,16,5.918,17,1.517,24,3.33,41,2.276,47,4.974,100,1.471,120,1.254,176,2.458,178,4.938,186,3.567,191,1.68,226,2.439,260,1.296,278,2.565,315,1.344,376,2.914,377,1.68,379,2.439,382,2.276,387,2.914,388,2.914,392,2.439,413,2.815,414,2.642,415,3.33,416,4.569,418,4.332,419,2.642,420,2.439,421,2.914,422,2.439,423,2.914,424,2.914,425,2.439,426,4.262,427,2.914,428,4.262,429,4.262,430,2.914,431,2.914,432,2.914,433,2.914,434,2.914,435,2.914,436,2.914,437,2.914,438,2.276,439,2.439,440,2.439,441,2.914,442,2.642,443,3.864,444,4.262,445,4.262]],["title/java/collections/#traversing-collections",[4,1.72,446,3.356]],["text/java/collections/#traversing-collections",[4,1.626,17,1.129,30,1.248,44,0.438,50,2.195,52,2.655,54,2.749,57,2.46,62,1.659,76,2.016,82,2.016,100,0.684,102,1.626,105,1.055,109,1.512,120,1.706,132,2.287,181,1.512,204,1.706,219,1.193,220,1.549,235,2.655,248,1.378,260,1.411,262,1.829,263,1.248,270,1.193,299,2.206,315,0.625,342,1.659,371,1.378,372,1.248,379,1.659,384,2.655,389,1.659,399,1.659,442,1.797,443,1.797,447,1.797,448,1.659,449,1.982,450,2.655,451,1.982,452,1.982,453,1.982,454,1.982,455,1.982,456,1.982,457,1.982,458,1.982,459,1.982,460,1.982,461,1.982,462,1.982,463,1.982,464,1.982,465,1.378,466,1.457,467,1.797,468,1.982,469,1.982,470,1.982,471,1.549,472,1.982,473,1.549,474,1.982,475,1.982,476,1.982,477,1.982,478,2.331,479,1.982,480,1.982,481,1.982,482,2.478,483,1.982,484,1.982,485,1.982,486,1.982,487,1.982,488,1.982,489,1.982,490,1.982,491,1.982,492,1.982,493,1.982,494,1.457,495,1.378,496,3.172,497,1.982,498,1.982,499,1.797,500,1.982,501,1.982,502,1.982,503,1.982,504,1.982,505,1.982,506,1.982,507,1.982,508,1.982,509,2.478,510,1.982,511,1.982,512,1.982,513,1.982,514,1.982,515,1.982,516,1.982,517,4.109,518,1.982,519,1.982,520,1.982,521,1.982,522,1.982,523,1.982,524,1.797,525,1.982,526,1.982,527,1.982,528,1.797,529,1.982,530,1.982,531,1.982,532,1.982,533,1.982,534,1.982,535,1.982,536,1.982,537,1.982,538,1.982,539,1.982,540,1.982,541,1.982]],["title/java/collections/#aggregate-operations",[132,1.935,384,2.809]],["text/java/collections/#aggregate-operations",[57,2.151,218,3.709,260,2.373,299,3.709,542,5.784,543,4.465,544,4.168,545,4.837,546,4.837,547,4.837,548,5.335,549,5.335]],["title/java/collections/#aggregate-operations-vs-iterators",[132,1.335,384,1.937,450,1.937,550,1.808]],["text/java/collections/#aggregate-operations-vs-iterators",[17,1.631,24,3.58,47,3.58,75,3.027,77,3.58,160,2.758,208,3.186,271,3.368,398,4.582,450,3.835,544,3.58,551,3.368,552,3.835,553,3.835,554,5.809,555,4.582,556,4.582,557,4.539,558,5.809,559,4.582,560,4.582,561,4.582,562,4.155,563,4.582,564,4.582,565,3.58,566,4.582]],["title/java/collections/#reduction",[567,4.33]],["text/java/collections/#reduction",[57,2.071,109,2.972,250,3.092,260,2.285,262,2.962,401,4.299,543,4.299,544,4.013,568,4.299,569,5.136,570,4.657,571,4.657,572,6.235,573,4.657,574,4.657]],["title/java/collections/#streamcollect-method",[46,0.998,575,3.356]],["text/java/collections/#streamcollect-method",[4,2.559,24,2.847,46,1.485,47,2.847,57,2.014,76,1.621,109,3.161,132,2.102,191,2.88,209,3.05,250,2.194,260,1.621,262,2.102,263,2.295,299,2.534,371,2.534,401,3.05,467,3.304,542,3.304,543,3.05,544,2.847,545,3.304,546,3.304,547,3.304,562,3.304,568,3.05,570,3.304,571,3.304,573,3.304,574,3.304,576,3.644,577,2.407,578,3.644,579,3.644,580,3.644,581,3.644,582,3.644,583,3.644,584,3.644,585,3.644,586,3.644,587,3.644,588,2.679,589,3.644,590,3.644,591,3.644,592,3.644,593,3.644,594,3.644,595,3.644,596,3.644,597,3.644]],["title/java/collections/#algorithms",[396,3.624]],["text/java/collections/#algorithms",[]],["title/java/collections/#custom-implementation",[84,1.786,598,3.356]],["text/java/collections/#custom-implementation",[]],["title/java/collections/#interoperability",[406,3.926]],["text/java/collections/#interoperability",[]],["title/java/concurrency/",[599,4.944]],["text/java/concurrency/",[]],["title/java/debugging/",[600,3.926]],["text/java/debugging/",[]],["title/java/deployment/",[23,3.624]],["text/java/deployment/",[]],["title/java/exceptions/",[91,3.926]],["text/java/exceptions/",[91,6.486,93,4.013,315,1.62,335,4.657,377,2.962,524,4.657,601,5.864,602,5.864,603,5.864,604,5.864,605,5.864,606,5.864,607,5.864]],["title/java/generics/",[27,2.607]],["text/java/generics/",[3,2.537,15,2.977,18,4.582,22,3.837,27,3.839,32,3.186,35,4.155,36,2.342,37,3.58,44,1.012,46,1.362,79,3.186,84,2.439,100,1.582,208,3.186,396,3.835,608,6.632,609,5.231,610,3.58,611,4.862,612,2.439,613,4.582,614,4.582]],["title/java/generics/#why",[]],["text/java/generics/#why",[15,2.761,22,3.559,27,3.243,35,4.884,36,2.172,37,4.209,79,3.746,84,2.867,396,4.509,611,4.509,613,5.387,614,5.387]],["title/java/helloworld/",[615,4.944]],["text/java/helloworld/",[44,1.056,50,2.647,52,2.746,54,2.843,82,2.127,109,2.843,120,2.057,153,3.735,204,2.057,279,4.522,380,4.781,494,3.514,495,3.324,616,5.458,617,5.458,618,4.001,619,5.458,620,5.458,621,5.458,622,4.781]],["title/java/inheritance/",[155,2.497]],["text/java/inheritance/",[2,0.471,3,2.241,4,0.384,6,0.384,7,0.55,10,0.471,15,0.968,17,1.086,19,0.679,22,0.494,27,0.451,28,0.728,32,0.52,36,1.23,37,0.585,38,1.446,42,1.24,43,2.651,44,1.383,45,1.919,46,1.772,49,1.795,50,2.345,52,1.54,54,1.595,56,0.9,57,0.941,73,1.711,76,1.209,79,1.314,82,0.609,84,1.919,93,1.069,96,1.314,97,0.585,100,1.462,102,0.701,104,0.701,109,0.652,120,2.376,125,0.322,137,0.55,147,0.627,155,2.542,158,1.823,159,0.627,160,0.824,176,0.789,177,0.824,180,0.494,191,0.789,197,1.145,203,1.005,204,2.025,208,0.52,219,0.451,222,0.52,233,1.005,256,1.005,260,0.333,267,2.171,270,1.636,271,0.55,275,0.494,278,1.636,279,0.52,284,0.627,285,0.627,287,1.09,288,0.585,298,0.451,311,0.861,313,0.627,314,0.627,315,1.599,370,1.292,371,0.951,372,1.711,377,1.567,391,2.536,393,0.679,399,0.627,400,0.52,407,1.145,415,0.585,422,0.627,440,0.627,465,0.951,473,1.069,494,0.55,495,0.52,550,0.585,552,0.627,553,0.627,557,1.476,565,1.476,577,0.494,588,2.459,611,0.627,612,1.781,623,3.525,624,0.855,625,0.855,626,3.819,627,0.585,628,2.717,629,0.855,630,1.581,631,0.855,632,1.713,633,0.855,634,1.368,635,3.566,636,2.554,637,0.855,638,1.038,639,2.014,640,1.997,641,0.855,642,2.157,643,0.855,644,1.476,645,2.116,646,2.464,647,0.749,648,1.24,649,0.679,650,0.855,651,0.855,652,0.855,653,0.749,654,1.24,655,1.145,656,0.749,657,0.749,658,0.749,659,1.623,660,0.627,661,0.627,662,0.749,663,0.627,664,0.749,665,0.749,666,0.749,667,0.585,668,0.749,669,0.749,670,0.749,671,1.069,672,0.749,673,0.749,674,0.749,675,1.24,676,0.749,677,0.749,678,0.749,679,0.749,680,0.749,681,0.749,682,0.749,683,1.581,684,0.749,685,0.749,686,3.239,687,0.749,688,1.145,689,0.749,690,0.749,691,0.749,692,0.749,693,1.368,694,0.749,695,0.749,696,0.749,697,0.749,698,0.749,699,1.368,700,1.368,701,0.749,702,0.749,703,0.627,704,0.749,705,0.749,706,1.069,707,0.749,708,1.368,709,0.749,710,0.749,711,0.679,712,0.749,713,0.627,714,0.749,715,0.749,716,0.749,717,1.24,718,0.749,719,0.749,720,0.749,721,1.368,722,2.334,723,0.749,724,0.627,725,1.24,726,0.679,727,0.749,728,0.749,729,0.627,730,0.749,731,0.749,732,1.24,733,0.749,734,0.749,735,3.052,736,1.368,737,2.334,738,1.368,739,3.052,740,1.368,741,0.749,742,0.749,743,0.749]],["title/java/inheritance/#casting-objects",[79,2.333,315,1.059]],["text/java/inheritance/#casting-objects",[57,2.528,76,2.307,79,4.36,109,2.989,313,4.339,315,1.636,653,5.185,654,4.701,655,5.248,656,5.185,657,5.185,658,5.185]],["title/java/inheritance/#multiple-inheritance-of-state-implementation-and-type",[36,0.808,84,1.066,155,1.156,278,1.206,659,1.393]],["text/java/inheritance/#multiple-inheritance-of-state-implementation-and-type",[15,2.255,17,1.566,38,2.342,44,0.971,45,2.342,46,1.308,56,2.097,84,3.013,100,1.954,104,2.255,155,3.81,176,2.537,204,1.893,222,3.059,267,2.648,271,3.234,278,3.767,465,3.059,557,4.422,612,2.342,659,3.935,660,3.682,661,3.682,662,4.4,663,3.682,664,4.4]],["title/java/inheritance/#polymorphism",[399,3.624]],["text/java/inheritance/#polymorphism",[7,3.74,44,1.369,96,3.538,400,3.538,465,3.538,565,3.976,612,2.709,623,3.538,628,5.089,639,3.064,665,5.089,666,5.089,667,3.976,668,5.089,669,5.089,670,5.089,671,3.976]],["title/java/inheritance/#virtual-method-invocation",[46,0.814,147,2.293,672,2.739]],["text/java/inheritance/#virtual-method-invocation",[36,2.331,46,1.719,377,3.335,612,3.078,673,5.782]],["title/java/inheritance/#super-keyword",[158,2.622,233,2.467]],["text/java/inheritance/#super-keyword",[2,2.815,15,2.93,19,4.054,22,2.953,44,1.263,125,1.924,158,4.468,177,2.691,260,1.989,315,1.804,377,2.579,415,3.493,440,3.742,557,3.493,626,5.277,630,3.742,635,5.489,646,4.054,674,4.471,675,5.185,676,4.471]],["title/java/inheritance/#constructor-chaining",[632,3.043,635,2.622]],["text/java/inheritance/#constructor-chaining",[315,1.768,377,3.233,632,5.083,634,5.606,635,5.133,677,5.606,678,5.606]],["title/java/inheritance/#object-as-superclass",[315,1.059,626,2.809]],["text/java/inheritance/#object-as-superclass",[4,1.289,6,1.289,27,1.514,28,1.339,32,1.749,37,1.965,43,3.394,44,1.289,45,1.339,46,1.533,49,2.523,50,3.231,82,1.699,93,2.984,100,0.868,102,1.957,120,2.754,159,2.105,160,2.299,191,2.203,219,1.514,256,2.807,267,1.514,270,3.104,279,1.749,285,2.105,287,1.451,315,1.972,377,2.203,422,2.105,577,1.662,623,1.749,635,1.965,636,3.197,638,1.119,654,2.281,679,2.515,680,2.515,681,2.515,682,2.515,683,2.105,684,2.515,685,2.515,686,4.704,687,2.515,688,3.197,689,2.515,690,2.515,691,2.515,692,2.515,693,3.819,694,2.515,695,2.515,696,2.515,697,2.515,698,2.515,699,3.819,700,3.819,701,2.515,702,2.515,703,2.105,704,2.515,705,2.515,706,1.965,707,2.515,708,3.819,709,2.515,710,2.515,711,2.281,712,2.515,713,2.105,714,2.515,715,2.515,716,2.515]],["title/java/inheritance/#abstract-methods-and-classes",[44,0.605,46,0.814,391,1.81]],["text/java/inheritance/#abstract-methods-and-classes",[44,1.29,391,3.86,623,4.063,717,5.298]],["title/java/inheritance/#abstract-classes-vs-interface",[44,0.511,100,0.799,391,1.529,550,1.808]],["text/java/inheritance/#abstract-classes-vs-interface",[10,1.591,17,1.648,28,1.345,36,1.545,38,2.04,42,3.475,43,3.799,44,1.443,45,2.751,46,1.738,84,2.957,96,2.665,100,2.097,104,1.295,120,2.224,137,1.857,155,1.457,176,1.457,177,1.521,180,1.669,197,3.208,203,2.817,204,1.992,267,1.521,275,1.669,278,1.521,287,1.457,288,1.974,298,1.521,311,2.414,314,2.115,315,0.797,370,2.122,371,2.665,372,2.414,391,3.863,393,2.291,407,3.208,552,2.115,553,2.115,565,2.995,611,2.115,612,2.465,630,2.115,636,3.208,659,1.757,671,1.974,683,2.115,686,3.403,706,1.974,717,2.291,718,2.527,719,2.527,720,2.527,721,3.833,722,5.168,723,2.527,724,2.115,725,3.475,726,2.291,727,2.527,728,2.527,729,2.115,730,2.527]],["title/java/inheritance/#overriding-and-hiding-methods",[46,0.814,49,1.81,640,2.013]],["text/java/inheritance/#overriding-and-hiding-methods",[36,1.607,38,1.416,44,0.88,46,1.998,49,1.758,50,3.145,52,2.846,54,2.947,56,1.268,57,1.607,73,3.341,76,1.184,120,2.66,204,2.797,208,1.85,267,2.399,270,1.602,284,2.227,287,1.535,473,3.113,494,1.956,495,1.85,612,1.416,623,3.688,626,3.998,639,2.399,640,1.956,645,3.613,646,4.331,683,2.227,731,2.661,732,3.613,733,2.661,734,2.661,735,5.963,736,3.985,737,5.305,738,3.985,739,5.963,740,3.985,741,2.661,742,2.661,743,2.661]],["title/java/interfaces/",[100,1.495]],["text/java/interfaces/",[3,1.982,38,2.208,43,2.064,44,0.916,46,1.941,49,1.127,50,0.945,52,2.271,54,2.351,57,1.133,73,1.769,82,0.759,84,1.495,100,1.881,102,2.892,104,2.892,105,2.208,109,2.952,120,2.344,155,0.984,160,1.027,176,0.984,191,1.62,204,2.123,218,4.041,219,1.691,250,1.691,256,1.254,260,1.25,270,2.497,298,1.691,301,1.547,302,1.333,303,1.333,315,0.886,322,1.547,323,1.333,340,2.489,377,0.984,391,1.856,408,1.254,482,1.333,509,2.195,612,1.905,627,1.333,639,1.027,645,3.245,647,1.707,671,1.333,686,1.254,744,1.547,745,3.207,746,1.948,747,1.948,748,1.948,749,2.996,750,1.948,751,1.948,752,4.087,753,1.948,754,3.207,755,3.207,756,1.948,757,1.948,758,1.948,759,1.948,760,3.207,761,3.207,762,1.948,763,1.948,764,1.948,765,1.948,766,1.948,767,1.948,768,1.948,769,1.948,770,1.948,771,1.948,772,2.809,773,1.948,774,1.948,775,1.948,776,1.948,777,3.207,778,3.207,779,1.948,780,1.948,781,3.207,782,3.207,783,1.707,784,1.707,785,1.707,786,1.707,787,1.707,788,1.707,789,1.707,790,1.707,791,1.707,792,1.707,793,1.707,794,1.707,795,1.707,796,1.707,797,1.333,798,1.707]],["title/java/interfaces/#evolving-interfaces",[100,1.158,783,3.356]],["text/java/interfaces/#evolving-interfaces",[38,2.567,46,1.783,52,2.22,54,2.298,82,2.145,100,1.665,104,3.074,109,2.298,204,2.075,218,3.353,219,2.903,340,4.17,509,3.768,612,2.567,772,4.822,784,4.822,785,4.822,786,4.822,787,4.822,788,4.822,789,4.822]],["title/java/interfaces/#extending-interfaces-that-contain-default-methods",[38,1.066,46,0.596,100,0.692,104,1.027,176,1.156]],["text/java/interfaces/#extending-interfaces-that-contain-default-methods",[38,2.709,46,2.069,49,3.362,100,1.757,104,3.567,155,2.935,340,3.538,391,3.362,790,5.089,791,5.089,792,5.089,793,5.089]],["title/java/interfaces/#static-methods",[46,0.998,204,1.444]],["text/java/interfaces/#static-methods",[44,1.385,46,2.004,73,3.265,204,2.698,315,1.636,612,2.76,671,4.051,794,5.185,795,5.185,796,5.185,797,4.051,798,5.185]],["title/java/intro/",[125,1.863]],["text/java/intro/",[3,2.509,4,1.016,11,2.387,15,1.016,17,0.705,22,1.31,23,1.659,25,2.994,26,1.797,27,1.909,28,2.955,29,1.797,32,1.378,44,0.7,46,0.589,100,0.684,125,2.559,144,1.457,148,1.457,149,2.206,151,2.655,153,1.549,160,1.909,161,1.549,177,1.193,200,1.659,215,1.549,232,2.757,260,2.016,272,1.457,275,1.31,303,1.549,315,1.564,336,3.098,337,1.457,370,1.756,382,1.549,386,2.655,389,2.655,397,3.541,408,2.914,409,2.478,420,1.659,439,1.659,471,3.098,478,3.643,551,1.457,610,1.549,627,2.478,639,1.193,644,1.549,663,2.655,688,1.659,799,1.982,800,2.206,801,1.982,802,2.876,803,1.982,804,1.982,805,2.655,806,1.982,807,1.982,808,1.982,809,1.982,810,1.659,811,1.982,812,3.595,813,2.876,814,1.982,815,1.982,816,1.982,817,2.876,818,1.982,819,2.655,820,1.982,821,3.886,822,3.172,823,2.876,824,1.982,825,1.982,826,1.797,827,3.172,828,1.982,829,2.876,830,1.982,831,1.982,832,1.982,833,1.982,834,1.982,835,1.982,836,1.982,837,1.982,838,1.659,839,1.982,840,1.982,841,1.797,842,1.982,843,3.172,844,1.982,845,1.982,846,3.172,847,1.659,848,1.659,849,1.982,850,1.982,851,1.982,852,1.982,853,1.982,854,1.982,855,1.982,856,1.982,857,1.982,858,1.982,859,1.982]],["title/java/intro/#what-is-java",[125,1.863]],["text/java/intro/#what-is-java",[799,6.035]],["title/java/intro/#programming-language",[11,2.02,800,2.333]],["text/java/intro/#programming-language",[15,2.014,17,1.399,27,2.366,28,3.365,32,2.732,44,0.868,125,1.691,144,2.888,148,2.888,149,2.732,160,2.366,215,3.07,260,2.813,272,2.888,275,2.596,315,1.24,386,3.289,397,4.94,409,3.07,610,3.07,801,3.93,802,4.765,803,3.93,804,3.93,805,3.289,806,3.93,807,3.93,808,3.93,809,3.93,810,3.289,811,3.93,812,3.563,813,3.563,814,3.93,815,3.93,816,3.93,817,3.563,818,3.93,819,3.289,820,3.93]],["title/java/intro/#platform",[821,3.183]],["text/java/intro/#platform",[11,2.071,23,2.879,25,3.17,26,3.119,27,2.071,29,3.119,100,1.188,125,2.803,149,2.392,151,4.017,153,2.688,232,2.392,315,1.514,336,3.749,337,2.528,370,2.657,382,2.688,408,3.527,420,2.879,439,2.879,471,3.749,627,2.688,663,4.017,805,2.879,819,2.879,821,4.623,822,4.799,823,3.119,824,3.44,825,3.44,826,3.119,827,4.799,828,3.44,829,3.119,830,3.44,831,3.44,832,3.44,833,3.44,834,3.44,835,3.44,836,3.44,837,3.44,838,2.879,839,3.44,840,3.44,841,3.119,842,3.44,843,4.799,844,3.44,845,3.44]],["title/java/intro/#why",[]],["text/java/intro/#why",[4,1.893,11,2.223,22,2.44,25,3.329,28,3.054,44,0.815,46,1.098,125,1.589,160,2.223,161,2.886,177,2.223,200,3.091,232,3.504,303,2.886,315,1.59,336,2.886,386,3.091,389,4.218,408,2.714,409,2.886,471,2.886,478,4.742,551,2.714,627,2.886,639,2.223,644,2.886,688,3.091,800,2.568,812,4.57,813,3.349,817,3.349,823,3.349,829,3.349,846,5.04,847,3.091,848,3.091,849,3.693,850,3.693,851,3.693,852,3.693,853,3.693,854,3.693,855,3.693,856,3.693,857,3.693,858,3.693,859,3.693]],["title/java/java9%26beyond/",[860,4.944]],["text/java/java9%26beyond/",[76,1.942,125,3.004,133,3.958,175,3.653,253,3.958,473,3.41,550,3.41,861,4.983,862,4.983,863,7.117,864,4.983,865,4.983,866,4.983,867,4.983,868,7.117,869,4.983,870,4.983,871,4.983,872,6.429,873,4.983,874,4.983,875,4.983,876,6.429,877,4.983,878,4.983]],["title/java/jdbc/",[841,3.926]],["text/java/jdbc/",[]],["title/java/jsp/",[879,4.944]],["text/java/jsp/",[]],["title/java/networking/",[826,3.926]],["text/java/networking/",[]],["title/java/numbers/",[287,2.497]],["text/java/numbers/",[3,1.192,4,1.103,9,2.834,10,2.132,15,1.103,17,1.95,36,1.688,44,1.048,46,1.007,57,1.365,76,0.958,82,2.111,120,0.926,125,0.926,163,1.497,175,1.802,181,1.026,191,2.414,202,1.953,204,0.926,211,1.952,214,3.708,215,1.682,216,1.952,217,3.07,218,1.497,262,3.425,263,3.74,287,2.414,315,1.497,346,1.952,382,1.682,447,1.952,466,1.582,482,1.682,495,1.497,509,1.682,517,1.952,568,2.834,612,1.146,630,1.802,675,1.952,725,1.952,749,1.802,802,1.952,805,1.802,821,1.582,880,2.457,881,2.457,882,3.866,883,2.457,884,2.457,885,2.457,886,2.457,887,1.952,888,2.457,889,4.779,890,2.457,891,2.457,892,2.457,893,2.457,894,2.457,895,2.457,896,2.457,897,2.457,898,2.457,899,2.457,900,2.457,901,1.952,902,2.457,903,2.457,904,2.457,905,2.457,906,2.457,907,2.457,908,2.457,909,2.457,910,2.457,911,2.457,912,2.457,913,2.457,914,2.457,915,4.779,916,2.457,917,2.457,918,3.866,919,3.866,920,2.457,921,2.457,922,2.457,923,2.457,924,2.457,925,2.457,926,2.457,927,2.457,928,2.457,929,2.457,930,2.152,931,2.152,932,1.802,933,2.152,934,2.152,935,2.152,936,2.152,937,2.152,938,2.152,939,2.152,940,2.152,941,2.152,942,2.152,943,2.152,944,2.152,945,2.152,946,2.152,947,2.152]],["title/java/numbers/#advanced-math",[930,3.356,931,3.356]],["text/java/numbers/#advanced-math",[181,2.403,204,2.17,482,3.94,932,4.221,933,5.043,934,5.043,935,5.043,936,5.043,937,5.043,938,5.043,939,5.043,940,5.043,941,5.043,942,5.043,943,5.043,944,5.043,945,5.043,946,5.043,947,5.043]],["title/java/oops/",[315,1.366]],["text/java/oops/",[3,3.12,7,1.369,10,1.173,14,1.688,17,0.663,25,1.23,28,0.991,38,0.991,44,1.195,45,2.023,46,1.299,50,3.224,52,2.594,54,2.686,57,2.182,73,1.899,76,0.828,77,1.455,84,0.991,97,1.455,100,1.312,102,1.948,105,0.991,109,1.812,124,1.558,148,1.369,155,1.074,162,1.558,163,1.295,180,1.23,202,1.074,250,1.816,262,2.964,263,1.899,279,3.039,292,2.97,293,3.182,298,1.121,315,1.621,352,1.455,383,1.688,397,1.455,400,1.295,404,4.53,413,1.992,418,1.455,425,1.558,466,1.369,478,2.217,551,1.369,577,1.23,600,1.688,612,0.991,618,2.524,623,1.295,638,1.342,640,2.217,655,1.558,659,2.097,667,2.357,713,1.558,744,1.688,838,1.558,948,1.862,949,1.862,950,1.862,951,1.862,952,1.862,953,1.862,954,1.862,955,1.862,956,1.862,957,1.688,958,1.862,959,1.862,960,1.455,961,1.862,962,1.862,963,1.862,964,4.019,965,1.862,966,1.862,967,1.862,968,1.862,969,1.862,970,1.862,971,1.862,972,1.558,973,1.862,974,1.862,975,1.862,976,1.862,977,3.016,978,5.14,979,3.016,980,3.016,981,3.016,982,1.862,983,3.801,984,4.37,985,1.862,986,1.862,987,1.558]],["title/java/oops/#objects",[315,1.366]],["text/java/oops/#objects",[45,2.684,46,1.499,202,2.908,279,4.824,315,1.945,383,4.572,400,3.506,418,3.94,618,4.221,659,3.506,948,5.043,949,5.043,950,5.043,951,5.043,952,5.043]],["title/java/oops/#why",[]],["text/java/oops/#why",[14,4.45,17,1.747,28,2.612,97,3.835,148,3.607,162,4.108,163,3.413,315,1.548,352,3.835,478,4.457,551,3.607,600,4.45,640,3.607,953,4.908,954,4.908,955,4.908,956,4.908,957,4.45,958,4.908,959,4.908,960,3.835]],["title/java/oops/#data-encapsulation",[10,2.113,961,3.356]],["text/java/oops/#data-encapsulation",[46,1.65,77,4.336,180,3.666,397,4.336,640,4.079,659,3.859,713,4.645,962,5.55,963,5.55]],["title/java/oops/#class",[44,0.956]],["text/java/oops/#class",[44,1.417,73,4.041,315,2.024,425,4.509,577,3.559,964,5.37,965,5.387,966,5.387]],["title/java/oops/#inheritance",[155,2.497]],["text/java/oops/#inheritance",[25,3.214,38,2.589,44,1.074,45,3.21,46,1.793,52,2.239,54,2.319,76,2.164,109,2.874,124,4.072,612,2.589,623,3.383,655,4.072,667,3.801,964,4.072,967,4.865,968,4.865,969,4.865,970,4.865,971,4.865]],["title/java/oops/#interface",[100,1.495]],["text/java/oops/#interface",[7,2.164,44,0.948,50,3.696,52,2.94,54,3.044,57,2.575,84,1.567,100,1.017,102,2.598,105,1.567,109,1.403,250,2.585,262,3.568,263,2.705,292,3.961,293,4.243,404,5.346,466,2.164,618,2.465,744,2.67,964,3.595,972,2.465,973,2.945,974,2.945,975,2.945,976,2.945,977,4.295,978,6.186,979,4.295,980,4.295,981,4.295,982,2.945,983,5.07,984,5.573,985,2.945,986,2.945]],["title/java/oops/#package",[638,1.926]],["text/java/oops/#package",[44,1.263,100,1.975,298,3.445,413,3.78,667,4.471,987,4.789]],["title/java/oops/#library",[838,3.624]],["text/java/oops/#library",[413,3.943,638,2.656]],["title/java/packages/",[638,1.926]],["text/java/packages/",[3,3.063,6,0.705,9,1.962,13,1.247,15,1.854,17,1.573,28,0.732,30,3.265,36,2.386,44,1.368,45,0.732,46,0.409,56,2.82,76,0.612,96,0.956,100,0.809,104,0.705,105,0.732,120,2.03,125,1.747,143,2.13,144,1.011,149,2.13,152,2.251,163,1.63,176,0.793,177,1.411,179,1.011,180,0.908,181,2.82,202,0.793,203,2.251,204,1.557,222,0.956,232,0.956,233,1.011,234,1.151,248,1.63,260,1.363,266,1.831,267,2.178,272,1.011,287,1.352,298,2.178,311,0.866,323,1.074,329,1.151,337,1.723,340,0.956,360,1.151,370,2.003,372,0.866,377,0.793,379,1.151,392,1.151,400,0.956,413,0.908,438,1.831,448,1.151,577,0.908,588,2.251,610,1.074,636,1.151,638,2.923,639,1.844,644,1.074,648,1.247,649,1.247,660,1.151,661,1.151,686,1.011,703,1.151,706,1.074,711,1.247,724,1.151,729,1.151,749,1.151,797,1.074,800,1.63,810,1.151,821,1.011,848,1.151,887,1.247,932,1.151,960,1.831,972,1.151,987,1.151,988,1.57,989,2.777,990,1.375,991,1.375,992,1.375,993,1.375,994,1.375,995,1.375,996,1.375,997,1.375,998,1.375,999,2.125,1000,2.564,1001,1.375,1002,1.375,1003,1.375,1004,1.375,1005,1.375,1006,1.375,1007,1.375,1008,1.375,1009,1.375,1010,1.375,1011,1.375,1012,1.375,1013,1.375,1014,2.125,1015,2.125,1016,1.247,1017,1.375,1018,1.375,1019,1.375,1020,1.375,1021,1.375,1022,1.375,1023,1.375,1024,2.125,1025,1.375,1026,1.375,1027,2.344,1028,1.375,1029,1.375,1030,1.375,1031,1.375,1032,1.375,1033,1.375,1034,1.375,1035,1.375,1036,1.375,1037,4.007,1038,3.063,1039,1.375,1040,1.375,1041,1.375,1042,1.375,1043,1.375,1044,1.375,1045,1.375]],["title/java/packages/#why",[]],["text/java/packages/#why",[9,3.011,30,3.117,36,2.854,56,2.697,76,1.6,120,2.842,143,2.501,144,2.644,152,2.644,203,4.159,267,3.406,298,2.979,337,3.638,370,2.74,372,2.265,400,2.501,577,2.376,610,2.81,638,2.843,639,2.165,660,3.011,724,3.011,729,3.011,848,3.011,972,3.011,987,3.011,990,3.597,991,3.597,992,3.597,993,3.597,994,3.597,995,3.597,996,3.597,997,3.597,998,3.597]],["title/java/packages/#naming",[56,2.064]],["text/java/packages/#naming",[13,4.155,56,2.769,125,2.499,222,3.186,232,3.186,233,3.368,234,3.835,260,2.584,266,3.58,287,2.643,638,2.039,797,3.58,800,3.186,887,4.155,999,4.155,1000,3.835,1001,4.582,1002,4.582,1003,4.582,1004,4.582,1005,4.582,1006,4.582,1007,4.582,1008,4.582,1009,4.582,1010,4.582,1011,4.582]],["title/java/packages/#usage",[1012,4.33]],["text/java/packages/#usage",[]],["title/java/packages/#by-its-qualified-name",[56,1.599,1000,2.809]],["text/java/packages/#by-its-qualified-name",[17,2.244,28,2.786,56,2.495,181,2.495,272,3.847,323,4.089,588,4.635,638,2.806,639,3.151,644,4.089,1013,5.234,1014,4.745]],["title/java/packages/#importing-a-package-member",[181,1.306,588,2.013,638,1.219]],["text/java/packages/#importing-a-package-member",[181,2.845,1015,5.413]],["title/java/packages/#importing-an-entire-package",[181,1.306,638,1.219,960,2.14]],["text/java/packages/#importing-an-entire-package",[17,2.257,36,2.131,44,1.167,96,3.674,181,3.023,638,3.024,960,4.128,1016,4.791,1017,5.284,1018,5.284]],["title/java/packages/#import-the-public-nested-classes-of-an-enclosing-class",[44,0.638,120,0.76,181,0.842,648,1.601,649,1.601]],["text/java/packages/#import-the-public-nested-classes-of-an-enclosing-class",[181,3.403,311,3.46,1015,4.982,1019,5.494,1020,5.494,1021,5.494,1022,5.494]],["title/java/packages/#static-import",[181,1.599,204,1.444]],["text/java/packages/#static-import",[15,2.429,30,2.985,44,1.047,45,2.523,46,1.409,105,2.523,125,2.039,177,2.853,179,3.484,181,2.828,204,2.787,248,3.295,267,2.853,370,2.624,638,2.64,686,3.484,703,3.967,749,3.967,810,3.967,932,3.967,1023,4.74,1024,4.297]],["title/java/packages/#apparent-hierarchies-of-packages",[392,2.293,638,1.219,1025,2.739]],["text/java/packages/#apparent-hierarchies-of-packages",[17,1.863,152,3.847,287,3.019,298,3.151,329,4.381,340,3.639,638,3.011,1026,5.234,1027,6.307,1028,5.234,1029,5.234,1030,5.234]],["title/java/packages/#name-ambiguities",[56,1.599,661,2.809]],["text/java/packages/#name-ambiguities",[17,1.88,36,2.131,56,3.023,152,3.884,248,3.674,260,2.351,438,4.128,638,2.351,639,3.181,999,4.791,1000,4.423,1014,4.791,1031,5.284]],["title/java/packages/#managing-source-and-class-files",[30,1.457,44,0.511,143,1.609,989,2.098]],["text/java/packages/#managing-source-and-class-files",[15,2.861,30,3.988,44,1.555,56,2.317,104,1.796,125,2.092,143,2.437,149,3.881,163,3.381,176,2.022,177,2.11,180,2.316,202,2.022,266,2.739,360,2.934,377,2.022,413,2.316,438,2.739,448,2.934,638,2.163,706,2.739,800,2.437,821,2.577,989,3.178,1024,3.178,1032,3.506,1033,3.506,1034,3.506,1035,3.506,1036,3.506,1037,5.941,1038,5.582,1039,3.506,1040,3.506,1041,3.506,1042,3.506,1043,3.506,1044,3.506,1045,3.506]],["title/java/re/",[957,3.926]],["text/java/re/",[]],["title/java/security/",[819,3.624]],["text/java/security/",[]],["title/java/strings/",[82,1.926]],["text/java/strings/",[2,0.923,3,1.37,11,0.883,17,1.343,30,0.923,44,0.931,46,0.436,50,1.37,52,2.726,54,2.823,57,2.702,76,1.429,82,2.684,83,2.244,102,2.902,105,1.709,109,1.798,110,1.819,120,2.291,125,0.631,132,0.846,143,1.02,161,1.146,201,1.227,202,0.846,204,1.065,205,1.227,214,1.934,219,0.883,220,3.802,250,2.271,260,1.101,262,2.431,270,1.933,275,0.969,276,1.33,278,0.883,288,1.146,302,1.934,304,1.33,311,0.923,315,0.781,352,1.934,362,3.421,366,2.912,367,1.33,370,0.812,372,1.559,465,1.02,466,1.078,494,1.819,495,1.721,499,1.33,528,1.33,622,2.475,726,1.33,732,1.33,797,1.146,800,1.02,847,1.227,901,1.33,1016,1.33,1037,1.33,1046,1.674,1047,3.212,1048,1.674,1049,1.674,1050,1.674,1051,1.674,1052,1.674,1053,1.674,1054,1.674,1055,3.667,1056,2.826,1057,2.826,1058,2.826,1059,1.674,1060,4.812,1061,2.826,1062,2.826,1063,4.308,1064,2.826,1065,1.674,1066,2.826,1067,1.674,1068,1.674,1069,1.674,1070,1.674,1071,1.674,1072,2.826,1073,1.674,1074,2.826,1075,2.826,1076,1.674,1077,4.308,1078,1.674,1079,1.674,1080,1.674,1081,1.674,1082,1.674,1083,1.674,1084,1.674,1085,1.674,1086,1.674,1087,1.674,1088,3.667,1089,1.674,1090,1.674,1091,2.826,1092,1.674,1093,1.674,1094,1.674,1095,1.674,1096,1.674,1097,1.674,1098,1.674,1099,1.674,1100,1.674,1101,3.212,1102,1.466,1103,2.475,1104,1.466,1105,1.466,1106,1.466,1107,1.466,1108,1.466,1109,2.244,1110,2.244]],["title/java/strings/#why",[]],["text/java/strings/#why",[2,2.959,17,2.296,46,1.397,82,2.091,201,3.933,202,2.71,205,3.933,275,3.104,278,2.829,370,2.602,465,3.267,847,3.933,901,4.261,1047,4.699,1101,6.452,1102,4.699,1103,5.902,1104,4.699,1105,4.699,1106,4.699,1107,4.699,1108,4.699]],["title/java/strings/#autoboxing-and-unboxing",[1109,3.043,1110,3.043]],["text/java/strings/#autoboxing-and-unboxing",[214,5.133,260,2.922,315,2.072,1109,5.083,1110,5.083]]],"fields":["title","text"],"invertedIndex":[["!",{"_index":294,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["!=",{"_index":300,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["\"",{"_index":263,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#javautilarrays":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["\"\"",{"_index":1054,"text":{"java/strings/":{}},"title":{}}],["\"%f%n,",{"_index":904,"text":{"java/numbers/":{}},"title":{}}],["\"));",{"_index":461,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["\").foreach(system.out::print)",{"_index":264,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["\",",{"_index":242,"text":{"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{}},"title":{}}],["\"3/17/2002\",",{"_index":113,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["\"3/27/2003\"",{"_index":61,"text":{"java/annotations/":{}},"title":{}}],["\"4/12/2004\",",{"_index":115,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["\":",{"_index":537,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["\"n/a\";",{"_index":107,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["\"},",{"_index":244,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["###,###.###",{"_index":920,"text":{"java/numbers/":{}},"title":{}}],["###.##",{"_index":922,"text":{"java/numbers/":{}},"title":{}}],["$",{"_index":231,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["$###,###.###",{"_index":928,"text":{"java/numbers/":{}},"title":{}}],["$12,345.67",{"_index":929,"text":{"java/numbers/":{}},"title":{}}],["%",{"_index":281,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["&",{"_index":325,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["&&",{"_index":306,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["(",{"_index":112,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["(!cond(it.next()))",{"_index":488,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(arrayofints[i][j]",{"_index":364,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["(l.size()",{"_index":535,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(list<string>",{"_index":533,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(mountainbike)obj;",{"_index":658,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["(rectangleplus)other;",{"_index":780,"text":{"java/interfaces/":{}},"title":{}}],["(result=9),",{"_index":330,"text":{"java/basics/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["(s.hasnext())",{"_index":512,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["(searchme.regionmatches(i,",{"_index":1080,"text":{"java/strings/":{}},"title":{}}],["(that'",{"_index":1107,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["(this.getarea()",{"_index":781,"text":{"java/interfaces/":{}},"title":{}}],[")",{"_index":62,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[");",{"_index":574,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["*",{"_index":412,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["+",{"_index":262,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#javautilarrays":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["++",{"_index":291,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],[",",{"_index":774,"text":{"java/interfaces/":{}},"title":{}}],["...",{"_index":53,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["......",{"_index":763,"text":{"java/interfaces/":{}},"title":{}}],[".collect(averager::new,",{"_index":581,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],[".collect(collectors.joining(\",",{"_index":460,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".collect(collectors.summingint(employee::getsalary)));",{"_index":464,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".filter(",{"_index":452,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".filter(p",{"_index":545,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],[".foreach(",{"_index":455,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".map(object::tostring)",{"_index":459,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],[".map(person::getage)",{"_index":570,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],[".maptoint(person::getage)",{"_index":548,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{}},"title":{}}],[".thencomparing(comparator.comparing(card::getsuit)));",{"_index":798,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["/",{"_index":279,"text":{"java/basics/":{},"java/basics/#operators":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["/*",{"_index":621,"text":{"java/helloworld/":{}},"title":{}}],["//",{"_index":109,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#java-inbuilt":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["0",{"_index":250,"text":{"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["000000.000",{"_index":925,"text":{"java/numbers/":{}},"title":{}}],["000123.780",{"_index":926,"text":{"java/numbers/":{}},"title":{}}],["1",{"_index":105,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/packages/":{},"java/packages/#static-import":{},"java/strings/":{}},"title":{}}],["10",{"_index":867,"text":{"java/java9%26beyond/":{}},"title":{}}],["11",{"_index":868,"text":{"java/java9%26beyond/":{}},"title":{}}],["12",{"_index":190,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["123,456.789",{"_index":921,"text":{"java/numbers/":{}},"title":{}}],["123.78",{"_index":924,"text":{"java/numbers/":{}},"title":{}}],["12345.67",{"_index":927,"text":{"java/numbers/":{}},"title":{}}],["123456.789",{"_index":919,"text":{"java/numbers/":{}},"title":{}}],["123456.79",{"_index":923,"text":{"java/numbers/":{}},"title":{}}],["1234_5678_9012_3456l",{"_index":213,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["17",{"_index":875,"text":{"java/java9%26beyond/":{}},"title":{}}],["17.html",{"_index":877,"text":{"java/java9%26beyond/":{}},"title":{}}],["1dio",{"_index":864,"text":{"java/java9%26beyond/":{}},"title":{}}],["2",{"_index":248,"text":{"java/basics/":{},"java/basics/#arrays":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#static-import":{}},"title":{}}],["2.718282;",{"_index":770,"text":{"java/interfaces/":{}},"title":{}}],["2d",{"_index":835,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["2x",{"_index":858,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["3",{"_index":449,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["4",{"_index":849,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["50",{"_index":705,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["6",{"_index":114,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["60",{"_index":345,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["7",{"_index":251,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["8",{"_index":863,"text":{"java/java9%26beyond/":{}},"title":{}}],["9",{"_index":253,"text":{"java/basics/":{},"java/basics/#arrays":{},"java/java9%26beyond/":{}},"title":{}}],["90",{"_index":343,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],[":",{"_index":478,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/intro/":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],[";",{"_index":332,"text":{"java/basics/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["<",{"_index":302,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/interfaces/":{},"java/strings/":{}},"title":{}}],["<<",{"_index":320,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["<=",{"_index":304,"text":{"java/basics/":{},"java/basics/#operators":{},"java/strings/":{}},"title":{}}],["<path_one>\\sources\\com\\example\\graphics\\rectangle.java",{"_index":1034,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<path_two>\\class",{"_index":1041,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<path_two>\\classes\\com\\example\\graphics.",{"_index":1044,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["<path_two>\\classes\\com\\example\\graphics\\rectangle.class",{"_index":1035,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["=",{"_index":57,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{},"java/basics/#naming":{},"java/basics/#operators":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["==",{"_index":299,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{}},"title":{}}],[">",{"_index":260,"text":{"java/basics/":{},"java/basics/#javautilarrays":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#interfaces":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{},"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{}},"title":{}}],[">;",{"_index":333,"text":{"java/basics/":{}},"title":{}}],[">=",{"_index":342,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["?:",{"_index":308,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["@alert(role=\"administrator\")",{"_index":171,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@alert(role=\"manager\")",{"_index":170,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@author(nam",{"_index":67,"text":{"java/annotations/":{}},"title":{}}],["@repeatable(schedules.class)",{"_index":183,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@schedule(dayofmonth=\"last\")",{"_index":166,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@schedule(dayofweek=\"fri\",",{"_index":167,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["@suppresswarnings(valu",{"_index":64,"text":{"java/annotations/":{}},"title":{}}],["@suppresswarnings({\"unchecked\",",{"_index":128,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["^",{"_index":326,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["_",{"_index":230,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["ab",{"_index":934,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["abhinav'",{"_index":1,"text":{"":{}},"title":{"#abhinavs-notes":{}}}],["abov",{"_index":530,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["abstract",{"_index":391,"text":{"java/collections/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{}}}],["access",{"_index":370,"text":{"java/basics/":{},"java/basics/#access-modifiers":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/intro/":{},"java/intro/#platform":{},"java/packages/":{},"java/packages/#static-import":{},"java/packages/#why":{},"java/strings/":{},"java/strings/#why":{}},"title":{"java/basics/#access-modifiers":{}}}],["accumul",{"_index":573,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["acmebicycl",{"_index":982,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["ad",{"_index":1040,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["add",{"_index":1008,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["addal",{"_index":470,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["addit",{"_index":275,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/intro/":{},"java/intro/#programming-language":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["adher",{"_index":746,"text":{"java/interfaces/":{}},"title":{}}],["adn",{"_index":1011,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["advanc",{"_index":930,"text":{"java/numbers/":{}},"title":{"java/numbers/#advanced-math":{}}}],["advantag",{"_index":553,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["ag",{"_index":586,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["again",{"_index":1051,"text":{"java/strings/":{}},"title":{}}],["aggreg",{"_index":384,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{"java/collections/#aggregate-operations":{},"java/collections/#aggregate-operations-vs-iterators":{}}}],["ain't",{"_index":1102,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["algorithm",{"_index":396,"text":{"java/collections/":{},"java/generics/":{},"java/generics/#why":{}},"title":{"java/collections/#algorithms":{}}}],["alic",{"_index":117,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["allow",{"_index":41,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{}}],["alpha",{"_index":514,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["alphabetize(str",{"_index":538,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["alphabetize(word);",{"_index":515,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["although",{"_index":1033,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["alwai",{"_index":209,"text":{"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["ambigu",{"_index":661,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/packages/":{}},"title":{"java/packages/#name-ambiguities":{}}}],["anagram",{"_index":493,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["anarrai",{"_index":239,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["angri",{"_index":787,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["anim",{"_index":735,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["animal.testclassmethod();",{"_index":742,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["annot",{"_index":6,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#design-considerations":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{}},"title":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/annotations/#retrieving-annotations":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}}}],["annotatedelement.getannotation(class<t>)",{"_index":193,"text":{"java/annotations/":{},"java/annotations/#retrieving-annotations":{}},"title":{}}],["annotatedelement.getannotationsbytype(class<t>)",{"_index":194,"text":{"java/annotations/":{},"java/annotations/#retrieving-annotations":{}},"title":{}}],["anoth",{"_index":992,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["anywher",{"_index":859,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["api",{"_index":408,"text":{"java/collections/":{},"java/collections/#why":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["appar",{"_index":1025,"text":{"java/packages/":{}},"title":{"java/packages/#apparent-hierarchies-of-packages":{}}}],["appli",{"_index":42,"text":{"java/annotations/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["applic",{"_index":805,"text":{"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/numbers/":{}},"title":{}}],["applybrakes(int",{"_index":981,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["architectur",{"_index":386,"text":{"java/collections/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["arg",{"_index":495,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/numbers/":{},"java/strings/":{}},"title":{}}],["argument",{"_index":675,"text":{"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/numbers/":{}},"title":{}}],["arithmet",{"_index":274,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["around",{"_index":955,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["arrai",{"_index":110,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{}},"title":{"java/basics/#arrays":{}}}],["arraylist<string>());",{"_index":522,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["arrayofints.length;",{"_index":361,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["arrayofints[i].length;",{"_index":363,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["arrays.sort(a);",{"_index":540,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["ascend",{"_index":445,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["assign",{"_index":273,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["associ",{"_index":794,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["atomicinteg",{"_index":898,"text":{"java/numbers/":{}},"title":{}}],["atomiclong",{"_index":899,"text":{"java/numbers/":{}},"title":{}}],["author",{"_index":55,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["autobox",{"_index":1109,"text":{"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{}},"title":{"java/strings/#autoboxing-and-unboxing":{}}}],["automat",{"_index":177,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{}},"title":{}}],["avail",{"_index":33,"text":{"java/annotations/":{}},"title":{}}],["averag",{"_index":542,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averagecollect",{"_index":579,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averagecollect.average());",{"_index":589,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averager::accept,",{"_index":583,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["averager::combin",{"_index":584,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["avoid",{"_index":130,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["awar",{"_index":1020,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["b",{"_index":572,"text":{"java/collections/":{},"java/collections/#reduction":{}},"title":{}}],["back",{"_index":634,"text":{"java/inheritance/":{},"java/inheritance/#constructor-chaining":{}},"title":{}}],["base",{"_index":627,"text":{"java/inheritance/":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["basic",{"_index":825,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["begin",{"_index":1006,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["behavior",{"_index":565,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#polymorphism":{}},"title":{}}],["behaviour",{"_index":950,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["belong",{"_index":727,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["benjamin",{"_index":58,"text":{"java/annotations/":{}},"title":{}}],["better",{"_index":853,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["between",{"_index":466,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["beyond",{"_index":869,"text":{"java/java9%26beyond/":{}},"title":{}}],["bicycl",{"_index":964,"text":{"java/oops/":{},"java/oops/#class":{},"java/oops/#inheritance":{},"java/oops/#interface":{}},"title":{}}],["bigdecim",{"_index":894,"text":{"java/numbers/":{}},"title":{}}],["biginteg",{"_index":895,"text":{"java/numbers/":{}},"title":{}}],["bike",{"_index":970,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["binari",{"_index":893,"text":{"java/numbers/":{}},"title":{}}],["binarysearch",{"_index":255,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["biologi",{"_index":666,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["bit",{"_index":317,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["bitwis",{"_index":316,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["block",{"_index":331,"text":{"java/basics/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["blueprint",{"_index":965,"text":{"java/oops/":{},"java/oops/#class":{}},"title":{}}],["bob",{"_index":118,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["bodi",{"_index":789,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["bolt",{"_index":959,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["boolean",{"_index":219,"text":{"java/basics/":{},"java/basics/#operators":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/strings/":{}},"title":{}}],["boost",{"_index":806,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["both",{"_index":438,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#name-ambiguities":{}},"title":{}}],["bottleneck",{"_index":807,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["bound",{"_index":888,"text":{"java/numbers/":{}},"title":{}}],["branch",{"_index":358,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["break",{"_index":352,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/oops/":{},"java/oops/#why":{},"java/strings/":{}},"title":{}}],["bug",{"_index":608,"text":{"java/generics/":{}},"title":{}}],["bulk",{"_index":468,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["bw",{"_index":206,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["byte",{"_index":215,"text":{"java/basics/":{},"java/basics/#variables":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{}},"title":{}}],["c",{"_index":389,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["c.iterator();",{"_index":486,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["c.removeall(collections.singleton(e));",{"_index":490,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["cadenc",{"_index":983,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["calcul",{"_index":897,"text":{"java/numbers/":{}},"title":{}}],["call",{"_index":377,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/exceptions/":{},"java/inheritance/":{},"java/inheritance/#constructor-chaining":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#super-keyword":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["cardin",{"_index":198,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{}},"title":{}}],["case",{"_index":222,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#naming":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["cast",{"_index":79,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{"java/inheritance/#casting-objects":{}}}],["cat",{"_index":739,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["catch",{"_index":524,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/exceptions/":{}},"title":{}}],["ceil",{"_index":935,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["chain",{"_index":632,"text":{"java/inheritance/":{},"java/inheritance/#constructor-chaining":{}},"title":{"java/inheritance/#constructor-chaining":{}}}],["chang",{"_index":784,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["changecadence(int",{"_index":977,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["changegear(int",{"_index":979,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["changelanes(direct",{"_index":756,"text":{"java/interfaces/":{}},"title":{}}],["char",{"_index":220,"text":{"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/strings/":{}},"title":{}}],["char[len];",{"_index":1091,"text":{"java/strings/":{}},"title":{}}],["charact",{"_index":1046,"text":{"java/strings/":{}},"title":{}}],["chararrai",{"_index":1092,"text":{"java/strings/":{}},"title":{}}],["chararray[j]",{"_index":1096,"text":{"java/strings/":{}},"title":{}}],["check",{"_index":37,"text":{"java/annotations/":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["checker",{"_index":164,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}},"title":{}}],["child",{"_index":625,"text":{"java/inheritance/":{}},"title":{}}],["cindi",{"_index":119,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["class",{"_index":44,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/generics/":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/inheritance/#super-keyword":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/numbers/":{},"java/oops/":{},"java/oops/#class":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{},"java/strings/":{}},"title":{"java/classes/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{},"java/oops/#class":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#managing-source-and-class-files":{}}}],["class'",{"_index":159,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["classifi",{"_index":210,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["classpath",{"_index":1039,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["classpreambl",{"_index":101,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["class\u2014both",{"_index":650,"text":{"java/inheritance/":{}},"title":{}}],["claus",{"_index":85,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}},"title":{}}],["clone",{"_index":679,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["cloneabl",{"_index":728,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["clonenotsupportedexcept",{"_index":680,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["close",{"_index":724,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["code",{"_index":28,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{}}],["coffe",{"_index":261,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["collect",{"_index":4,"text":{"":{},"#abhinavs-notes":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#why":{},"java/numbers/":{}},"title":{"java/collections/":{},"java/collections/#traversing-collections":{}}}],["collection<e>",{"_index":423,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["collector",{"_index":689,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["collectors.groupingby(",{"_index":592,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["collectors.reducing(",{"_index":594,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["color.red)",{"_index":454,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["com.example.graphics,",{"_index":1042,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["com.example.region.mypackag",{"_index":1005,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["combin",{"_index":562,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#streamcollect-method":{}},"title":{}}],["comment",{"_index":98,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["common",{"_index":726,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/strings/":{}},"title":{}}],["commun",{"_index":383,"text":{"java/collections/":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["compar",{"_index":314,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["comparator.comparing(card::getrank)",{"_index":796,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["comparison",{"_index":312,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["compat",{"_index":174,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["compil",{"_index":15,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{}},"title":{}}],["complement",{"_index":296,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["compon",{"_index":857,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["comput",{"_index":398,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["concaten",{"_index":276,"text":{"java/basics/":{},"java/basics/#operators":{},"java/strings/":{}},"title":{}}],["concern",{"_index":730,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["concret",{"_index":393,"text":{"java/collections/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["concurr",{"_index":599,"text":{},"title":{"java/concurrency/":{}}}],["condit",{"_index":305,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["conflict",{"_index":660,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["consid",{"_index":197,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["consider",{"_index":196,"text":{"java/annotations/":{}},"title":{"java/annotations/#design-considerations":{}}}],["constant",{"_index":749,"text":{"java/interfaces/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["construct",{"_index":448,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["constructor",{"_index":635,"text":{"java/inheritance/":{},"java/inheritance/#constructor-chaining":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#super-keyword":{}},"title":{"java/inheritance/#constructor-chaining":{}}}],["contain",{"_index":176,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/interfaces/#extending-interfaces-that-contain-default-methods":{}}}],["containsal",{"_index":469,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["continu",{"_index":359,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["contract",{"_index":744,"text":{"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["control",{"_index":334,"text":{"java/basics/":{}},"title":{"java/basics/#control-flow":{}}}],["convert",{"_index":889,"text":{"java/numbers/":{}},"title":{}}],["copi",{"_index":681,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["copyto",{"_index":249,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["count",{"_index":852,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["creat",{"_index":577,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#class":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["creation",{"_index":74,"text":{"java/annotations/":{}},"title":{}}],["creditcardnumb",{"_index":212,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["critic",{"_index":94,"text":{"java/annotations/":{}},"title":{}}],["current",{"_index":1024,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{}},"title":{}}],["currentrevis",{"_index":103,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["custom",{"_index":598,"text":{"java/collections/":{}},"title":{"java/collections/#custom-implementation":{}}}],["d",{"_index":346,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/numbers/":{}},"title":{}}],["data",{"_index":10,"text":{"java/annotations/":{},"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/numbers/":{},"java/oops/":{}},"title":{"java/oops/#data-encapsulation":{}}}],["databas",{"_index":827,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["date",{"_index":60,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["dayofmonth",{"_index":185,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["dayofweek",{"_index":187,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["debug",{"_index":600,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{"java/debugging/":{}}}],["decid",{"_index":664,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}},"title":{}}],["decim",{"_index":890,"text":{"java/numbers/":{}},"title":{}}],["decimalformat",{"_index":912,"text":{"java/numbers/":{}},"title":{}}],["decimalformat(pattern);",{"_index":914,"text":{"java/numbers/":{}},"title":{}}],["decis",{"_index":339,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["declar",{"_index":43,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{}},"title":{}}],["decrement",{"_index":293,"text":{"java/basics/":{},"java/basics/#operators":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["default",{"_index":104,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#control-flow":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/interfaces/#extending-interfaces-that-contain-default-methods":{}}}],["defin",{"_index":612,"text":{"java/generics/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#static-methods":{},"java/numbers/":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["delet",{"_index":441,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["depend",{"_index":734,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["deploi",{"_index":831,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["deploy",{"_index":23,"text":{"java/annotations/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{"java/deployment/":{}}}],["deprec",{"_index":127,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["dequ",{"_index":437,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["dequeu",{"_index":417,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["deriv",{"_index":624,"text":{"java/inheritance/":{}},"title":{}}],["descend",{"_index":631,"text":{"java/inheritance/":{}},"title":{}}],["design",{"_index":195,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#why":{}},"title":{"java/annotations/#design-considerations":{}}}],["detail",{"_index":421,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["detect",{"_index":18,"text":{"java/annotations/":{},"java/generics/":{}},"title":{}}],["determin",{"_index":690,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["dev",{"_index":786,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["develop",{"_index":823,"text":{"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["diditwork(int",{"_index":788,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["differ",{"_index":465,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#polymorphism":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["difficult",{"_index":609,"text":{"java/generics/":{}},"title":{}}],["digit",{"_index":229,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["direct",{"_index":752,"text":{"java/interfaces/":{}},"title":{}}],["directori",{"_index":1038,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["discourag",{"_index":996,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["displai",{"_index":619,"text":{"java/helloworld/":{}},"title":{}}],["disrupt",{"_index":602,"text":{"java/exceptions/":{}},"title":{}}],["distancetocar",{"_index":760,"text":{"java/interfaces/":{}},"title":{}}],["distribut",{"_index":813,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["divid",{"_index":556,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["divis",{"_index":280,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["doc",{"_index":845,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["document",{"_index":99,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{}},"title":{}}],["doe",{"_index":69,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["domain",{"_index":1003,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["done",{"_index":883,"text":{"java/numbers/":{}},"title":{}}],["doperiodiccleanup",{"_index":169,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["dosometh",{"_index":771,"text":{"java/interfaces/":{}},"title":{}}],["dosomethingelse(str",{"_index":773,"text":{"java/interfaces/":{}},"title":{}}],["dot",{"_index":1063,"text":{"java/strings/":{}},"title":{}}],["doubl",{"_index":218,"text":{"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#aggregate-operations":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/numbers/":{}},"title":{}}],["down",{"_index":338,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["ds",{"_index":395,"text":{"java/collections/":{}},"title":{}}],["duplic",{"_index":426,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["dynam",{"_index":815,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["e",{"_index":482,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/interfaces/":{},"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["e.getcolor()",{"_index":453,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["each",{"_index":447,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{}},"title":{}}],["eas",{"_index":958,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["easi",{"_index":848,"text":{"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["easili",{"_index":551,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/intro/":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["ebook",{"_index":70,"text":{"java/annotations/":{}},"title":{}}],["effort",{"_index":402,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["eg",{"_index":388,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["egg",{"_index":1072,"text":{"java/strings/":{}},"title":{}}],["element",{"_index":47,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{}},"title":{}}],["elements.stream()",{"_index":458,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["elimin",{"_index":613,"text":{"java/generics/":{},"java/generics/#why":{}},"title":{}}],["employees.stream()",{"_index":463,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["enabl",{"_index":611,"text":{"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["encapsul",{"_index":961,"text":{"java/oops/":{}},"title":{"java/oops/#data-encapsulation":{}}}],["enclos",{"_index":649,"text":{"java/inheritance/":{},"java/packages/":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}}}],["end",{"_index":439,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["endspe",{"_index":755,"text":{"java/interfaces/":{}},"title":{}}],["entir",{"_index":960,"text":{"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{"java/packages/#importing-an-entire-package":{}}}],["entiti",{"_index":48,"text":{"java/annotations/":{}},"title":{}}],["enum",{"_index":750,"text":{"java/interfaces/":{}},"title":{}}],["enumer",{"_index":711,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{}},"title":{}}],["environ",{"_index":151,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["equal",{"_index":256,"text":{"java/basics/":{},"java/basics/#javautilarrays":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{}},"title":{}}],["equals(object",{"_index":682,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["error",{"_index":19,"text":{"java/annotations/":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{}}],["etc",{"_index":471,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["event",{"_index":601,"text":{"java/exceptions/":{}},"title":{}}],["evid",{"_index":1029,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["evolv",{"_index":783,"text":{"java/interfaces/":{}},"title":{"java/interfaces/#evolving-interfaces":{}}}],["examin",{"_index":34,"text":{"java/annotations/":{}},"title":{}}],["exampl",{"_index":706,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["except",{"_index":91,"text":{"java/annotations/":{},"java/exceptions/":{}},"title":{"java/exceptions/":{}}}],["exclus",{"_index":327,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["exist",{"_index":467,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{}},"title":{}}],["exp",{"_index":941,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["expect",{"_index":725,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/numbers/":{}},"title":{}}],["explicit",{"_index":656,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["explicitli",{"_index":674,"text":{"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{}}],["express",{"_index":75,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["ext",{"_index":1061,"text":{"java/strings/":{}},"title":{}}],["extend",{"_index":38,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{"java/interfaces/#extending-interfaces-that-contain-default-methods":{}}}],["extens",{"_index":1062,"text":{"java/strings/":{}},"title":{}}],["extensionsepar",{"_index":1058,"text":{"java/strings/":{}},"title":{}}],["f",{"_index":347,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["fals",{"_index":1079,"text":{"java/strings/":{}},"title":{}}],["featur",{"_index":876,"text":{"java/java9%26beyond/":{}},"title":{}}],["field",{"_index":45,"text":{"java/annotations/":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/basics/#variables":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["fifo",{"_index":432,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["file",{"_index":30,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#static-import":{},"java/packages/#why":{},"java/strings/":{}},"title":{"java/packages/#managing-source-and-class-files":{}}}],["file(args[0]));",{"_index":511,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["filenam",{"_index":1055,"text":{"java/strings/":{}},"title":{}}],["filename(str",{"_index":1059,"text":{"java/strings/":{}},"title":{}}],["fill",{"_index":257,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["filter(collection<?>",{"_index":485,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["finaal",{"_index":716,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["final",{"_index":686,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["find",{"_index":610,"text":{"java/generics/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["findm",{"_index":1074,"text":{"java/strings/":{}},"title":{}}],["findme.length();",{"_index":1078,"text":{"java/strings/":{}},"title":{}}],["findmelength",{"_index":1077,"text":{"java/strings/":{}},"title":{}}],["first",{"_index":186,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["fix",{"_index":238,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["flexibl",{"_index":199,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{}},"title":{}}],["float",{"_index":217,"text":{"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{}},"title":{}}],["floatvar",{"_index":905,"text":{"java/numbers/":{}},"title":{}}],["floor",{"_index":936,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["flow",{"_index":335,"text":{"java/basics/":{},"java/exceptions/":{}},"title":{"java/basics/#control-flow":{}}}],["form",{"_index":7,"text":{"java/annotations/":{},"java/collections/":{},"java/inheritance/":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["format",{"_index":910,"text":{"java/numbers/":{}},"title":{}}],["format(local",{"_index":909,"text":{"java/numbers/":{}},"title":{}}],["former",{"_index":1104,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["forth",{"_index":31,"text":{"java/annotations/":{}},"title":{}}],["foster",{"_index":410,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["found",{"_index":1083,"text":{"java/strings/":{}},"title":{}}],["foundit",{"_index":366,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{}},"title":{}}],["framework",{"_index":165,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/collections/":{}},"title":{}}],["franklin",{"_index":59,"text":{"java/annotations/":{}},"title":{}}],["frequent",{"_index":810,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["full",{"_index":1036,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["fulli",{"_index":999,"text":{"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{}},"title":{}}],["fullpath",{"_index":1056,"text":{"java/strings/":{}},"title":{}}],["fullpath.lastindexof(extensionseparator);",{"_index":1064,"text":{"java/strings/":{}},"title":{}}],["fullpath.lastindexof(pathseparator);",{"_index":1066,"text":{"java/strings/":{}},"title":{}}],["fullpath.substring(0,",{"_index":1068,"text":{"java/strings/":{}},"title":{}}],["fullpath.substring(dot",{"_index":1065,"text":{"java/strings/":{}},"title":{}}],["fullpath.substring(sep",{"_index":1067,"text":{"java/strings/":{}},"title":{}}],["function",{"_index":400,"text":{"java/collections/":{},"java/inheritance/":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["functionalinterfac",{"_index":134,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["garbag",{"_index":688,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["gear",{"_index":984,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["gearratio",{"_index":236,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["gener",{"_index":27,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{}},"title":{"java/generics/":{}}}],["generation2list",{"_index":122,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["generation3list",{"_index":121,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["get",{"_index":732,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/strings/":{}},"title":{}}],["getasdoubl",{"_index":549,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{}},"title":{}}],["getclass",{"_index":692,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["getfield",{"_index":714,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["getmethod",{"_index":715,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["getradarfront(doubl",{"_index":759,"text":{"java/interfaces/":{}},"title":{}}],["getradarrear(doubl",{"_index":762,"text":{"java/interfaces/":{}},"title":{}}],["give",{"_index":804,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["go",{"_index":971,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["goe",{"_index":123,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["good",{"_index":854,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["grade",{"_index":344,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["graphic",{"_index":1018,"text":{"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{}}],["graphics.rectangle.*;",{"_index":1019,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["graphics.rectangle;",{"_index":1015,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#importing-a-package-member":{}},"title":{}}],["greater",{"_index":301,"text":{"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{}},"title":{}}],["green",{"_index":1071,"text":{"java/strings/":{}},"title":{}}],["group",{"_index":379,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/packages/":{}},"title":{}}],["groupedinterfac",{"_index":764,"text":{"java/interfaces/":{}},"title":{}}],["gt",{"_index":374,"text":{},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["gui",{"_index":836,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["guid",{"_index":872,"text":{"java/java9%26beyond/":{}},"title":{}}],["ham",{"_index":1073,"text":{"java/strings/":{}},"title":{}}],["handler",{"_index":607,"text":{"java/exceptions/":{}},"title":{}}],["happen",{"_index":1106,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["hardwar",{"_index":822,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["hash",{"_index":694,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["hashcod",{"_index":693,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["hashmap<string,",{"_index":505,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["hasnext",{"_index":481,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["helloworld",{"_index":615,"text":{},"title":{"java/helloworld/":{}}}],["helloworldapp",{"_index":616,"text":{"java/helloworld/":{}},"title":{}}],["here",{"_index":124,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["hexadecim",{"_index":892,"text":{"java/numbers/":{}},"title":{}}],["hidden",{"_index":733,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["hide",{"_index":640,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/oops/#why":{}},"title":{"java/inheritance/#overriding-and-hiding-methods":{}}}],["hierarch",{"_index":1032,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["hierarchi",{"_index":392,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/packages/":{}},"title":{"java/packages/#apparent-hierarchies-of-packages":{}}}],["high",{"_index":802,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{}},"title":{}}],["histor",{"_index":785,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["hold",{"_index":428,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["home",{"_index":0,"text":{},"title":{"":{}}}],["hour",{"_index":189,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["hour=\"23\")",{"_index":168,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["https://4comprehension.com/keep",{"_index":865,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://codete.com/blog/java",{"_index":870,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://dev.to/awwsmm/20",{"_index":861,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://www.infoworld.com/article/3606833/jdk",{"_index":874,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://www.javatpoint.com/java",{"_index":873,"text":{"java/java9%26beyond/":{}},"title":{}}],["https://www.marcobehler.com/guides/a",{"_index":878,"text":{"java/java9%26beyond/":{}},"title":{}}],["hyphen",{"_index":1010,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["ident",{"_index":571,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["idl",{"_index":840,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["ignor",{"_index":145,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["iiop",{"_index":844,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["immut",{"_index":1047,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["implement",{"_index":84,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/collections/":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{}},"title":{"java/collections/#custom-implementation":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}}}],["implicit",{"_index":653,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["implicitli",{"_index":647,"text":{"java/inheritance/":{},"java/interfaces/":{}},"title":{}}],["import",{"_index":181,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{},"java/numbers/#advanced-math":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#importing-a-package-member":{},"java/packages/#importing-an-entire-package":{},"java/packages/#static-import":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/packages/#importing-a-package-member":{},"java/packages/#importing-an-entire-package":{},"java/packages/#static-import":{}}}],["inbuilt",{"_index":126,"text":{"java/annotations/":{}},"title":{"java/annotations/#java-inbuilt":{}}}],["includ",{"_index":152,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#name-ambiguities":{},"java/packages/#why":{}},"title":{}}],["inclus",{"_index":329,"text":{"java/basics/":{},"java/basics/#operators":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["increas",{"_index":403,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["increment",{"_index":292,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["independ",{"_index":420,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["indic",{"_index":285,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["indirect",{"_index":652,"text":{"java/inheritance/":{}},"title":{}}],["individu",{"_index":966,"text":{"java/oops/":{},"java/oops/#class":{}},"title":{}}],["inform",{"_index":14,"text":{"java/annotations/":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["infrequ",{"_index":1013,"text":{"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{}}],["inheret",{"_index":157,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["inherit",{"_index":155,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/oops/":{}},"title":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/oops/#inheritance":{}}}],["initi",{"_index":356,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["insert",{"_index":440,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{}}],["insid",{"_index":956,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["instanc",{"_index":73,"text":{"java/annotations/":{},"java/basics/":{},"java/basics/#variables":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/oops/":{},"java/oops/#class":{}},"title":{}}],["instanceof",{"_index":313,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["instanti",{"_index":717,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#abstract-methods-and-classes":{}},"title":{}}],["instruct",{"_index":605,"text":{"java/exceptions/":{}},"title":{}}],["int",{"_index":102,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["int[10];",{"_index":240,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["integ",{"_index":568,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/numbers/":{}},"title":{}}],["integer.parseint(args[1]);",{"_index":497,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["integer::sum)));",{"_index":597,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["integr",{"_index":837,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["interact",{"_index":962,"text":{"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["interfac",{"_index":100,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/intro/":{},"java/intro/#platform":{},"java/oops/":{},"java/oops/#interface":{},"java/oops/#package":{},"java/packages/":{}},"title":{"java/collections/#interfaces":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/oops/#interface":{}}}],["interface1",{"_index":765,"text":{"java/interfaces/":{}},"title":{}}],["interface2",{"_index":766,"text":{"java/interfaces/":{}},"title":{}}],["interface3",{"_index":767,"text":{"java/interfaces/":{}},"title":{}}],["intern",{"_index":77,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["internet",{"_index":1002,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["interoper",{"_index":406,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{"java/collections/#interoperability":{}}}],["intvar",{"_index":906,"text":{"java/numbers/":{}},"title":{}}],["invalid",{"_index":353,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["invert",{"_index":297,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["invoc",{"_index":672,"text":{"java/inheritance/":{}},"title":{"java/inheritance/#virtual-method-invocation":{}}}],["invok",{"_index":646,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#super-keyword":{}},"title":{}}],["involv",{"_index":555,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["io",{"_index":5,"text":{},"title":{"java/IO/":{}}}],["ioexcept",{"_index":525,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["isannot",{"_index":709,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["isenum",{"_index":712,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["isinterfac",{"_index":710,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["islargerthan",{"_index":776,"text":{"java/interfaces/":{}},"title":{}}],["islargerthan(relat",{"_index":777,"text":{"java/interfaces/":{}},"title":{}}],["it'",{"_index":847,"text":{"java/intro/":{},"java/intro/#why":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["it.hasnext();",{"_index":487,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["it.remove();",{"_index":489,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["iter",{"_index":450,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#traversing-collections":{}},"title":{"java/collections/#aggregate-operations-vs-iterators":{}}}],["iterator<e>",{"_index":480,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["itself",{"_index":13,"text":{"java/annotations/":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["j",{"_index":362,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{}},"title":{}}],["jane",{"_index":68,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["januari",{"_index":351,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["jar",{"_index":1045,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["java",{"_index":125,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/java9%26beyond/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#naming":{},"java/packages/#static-import":{},"java/strings/":{}},"title":{"java/annotations/#java-inbuilt":{},"java/intro/":{},"java/intro/#what-is-java":{}}}],["java.awt",{"_index":1027,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["java.awt.xxxx",{"_index":1026,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["java.io.*;",{"_index":492,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["java.lang",{"_index":703,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["java.lang.annot",{"_index":39,"text":{"java/annotations/":{}},"title":{}}],["java.lang.annotation.repeatable;",{"_index":182,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["java.lang.math.*;",{"_index":932,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["java.lang.str",{"_index":221,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["java.text.decimalformat(...)",{"_index":911,"text":{"java/numbers/":{}},"title":{}}],["java.util.*;",{"_index":491,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["java.util.arrai",{"_index":254,"text":{"java/basics/":{}},"title":{"java/basics/#javautilarrays":{}}}],["java.util.arrays.copyofrange(copyfrom,",{"_index":252,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["java.util.arrays.stream(copyto).map(coffe",{"_index":259,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["java.util.random",{"_index":947,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["java9&beyond",{"_index":860,"text":{},"title":{"java/java9%26beyond/":{}}}],["javabean",{"_index":856,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["javac",{"_index":824,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["javadoc",{"_index":153,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/helloworld/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["javafx",{"_index":833,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["javase/tutori",{"_index":799,"text":{"java/intro/":{},"java/intro/#what-is-java":{}},"title":{}}],["javax",{"_index":1007,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["jdbc",{"_index":841,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{"java/jdbc/":{}}}],["jndi",{"_index":842,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["john",{"_index":71,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["join",{"_index":457,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["jone",{"_index":245,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["jsp",{"_index":879,"text":{},"title":{"java/jsp/":{}}}],["jvm",{"_index":149,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["kei",{"_index":443,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{}},"title":{}}],["keyword",{"_index":233,"text":{"java/basics/":{},"java/basics/#naming":{},"java/inheritance/":{},"java/packages/":{},"java/packages/#naming":{}},"title":{"java/inheritance/#super-keyword":{}}}],["know",{"_index":747,"text":{"java/interfaces/":{}},"title":{}}],["known",{"_index":425,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/oops/":{},"java/oops/#class":{}},"title":{}}],["l",{"_index":517,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/numbers/":{}},"title":{}}],["l.add(word);",{"_index":523,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["l=new",{"_index":521,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["lambda",{"_index":566,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["languag",{"_index":800,"text":{"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#naming":{},"java/strings/":{}},"title":{"java/intro/#programming-language":{}}}],["larg",{"_index":704,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["lastmodifi",{"_index":106,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["lastmodifiedbi",{"_index":108,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["learn",{"_index":409,"text":{"java/collections/":{},"java/collections/#why":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["left",{"_index":322,"text":{"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{}},"title":{}}],["len",{"_index":1088,"text":{"java/strings/":{}},"title":{}}],["length",{"_index":225,"text":{"java/basics/":{},"java/basics/#arrays":{},"java/basics/#naming":{}},"title":{}}],["less",{"_index":303,"text":{"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["let",{"_index":791,"text":{"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["letter",{"_index":228,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["level",{"_index":144,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["librari",{"_index":838,"text":{"java/intro/":{},"java/intro/#platform":{},"java/oops/":{}},"title":{"java/oops/#library":{}}}],["library.package.class",{"_index":1001,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["line",{"_index":622,"text":{"java/helloworld/":{},"java/strings/":{}},"title":{}}],["list",{"_index":415,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{}}],["list<@readonli",{"_index":88,"text":{"java/annotations/":{}},"title":{}}],["list<string>",{"_index":516,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["list<string>>",{"_index":503,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["list<string>>();",{"_index":506,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["liter",{"_index":1049,"text":{"java/strings/":{}},"title":{}}],["local",{"_index":205,"text":{"java/basics/":{},"java/basics/#variables":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["log",{"_index":942,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["logarithm",{"_index":769,"text":{"java/interfaces/":{}},"title":{}}],["logic",{"_index":295,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["long",{"_index":211,"text":{"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{}},"title":{}}],["look",{"_index":1043,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["loop",{"_index":354,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["lower",{"_index":887,"text":{"java/numbers/":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["m",{"_index":504,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["m.get(alpha);",{"_index":518,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["m.put(alpha,",{"_index":520,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["m.values())",{"_index":534,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["machin",{"_index":148,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#programming-language":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["main(string[]",{"_index":494,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/strings/":{}},"title":{}}],["maintain",{"_index":444,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["make",{"_index":340,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["male",{"_index":587,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["manag",{"_index":989,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/packages/#managing-source-and-class-files":{}}}],["mani",{"_index":96,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#polymorphism":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{}}],["manipul",{"_index":382,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/intro/":{},"java/intro/#platform":{},"java/numbers/":{}},"title":{}}],["manner",{"_index":434,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["map",{"_index":418,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{},"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["map<person.sex,",{"_index":590,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["map<string,",{"_index":502,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["mapper",{"_index":596,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["mark",{"_index":138,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["match",{"_index":1016,"text":{"java/packages/":{},"java/packages/#importing-an-entire-package":{},"java/strings/":{}},"title":{}}],["math",{"_index":931,"text":{"java/numbers/":{}},"title":{"java/numbers/#advanced-math":{}}}],["matter",{"_index":637,"text":{"java/inheritance/":{}},"title":{}}],["max",{"_index":940,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["max_valu",{"_index":885,"text":{"java/numbers/":{}},"title":{}}],["mean",{"_index":475,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["mechan",{"_index":952,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["member",{"_index":588,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{},"java/inheritance/":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{"java/packages/#importing-a-package-member":{}}}],["member'",{"_index":1014,"text":{"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#name-ambiguities":{}},"title":{}}],["mention",{"_index":790,"text":{"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["meta",{"_index":135,"text":{"java/annotations/":{}},"title":{"java/annotations/#meta-annotations":{}}}],["metadata",{"_index":8,"text":{"java/annotations/":{}},"title":{}}],["method",{"_index":46,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/interfaces/#static-methods":{},"java/intro/":{},"java/intro/#why":{},"java/numbers/":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/oops/#inheritance":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#static-import":{},"java/strings/":{},"java/strings/#why":{}},"title":{"java/collections/#streamcollect-method":{},"java/inheritance/#abstract-methods-and-classes":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#virtual-method-invocation":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{},"java/interfaces/#static-methods":{}}}],["min",{"_index":939,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["min_valu",{"_index":884,"text":{"java/numbers/":{}},"title":{}}],["mingroups",{"_index":496,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["minu",{"_index":289,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["minut",{"_index":976,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["mix",{"_index":719,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["modifi",{"_index":371,"text":{"java/basics/":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{"java/basics/#access-modifiers":{}}}],["modular",{"_index":953,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["mon",{"_index":188,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["monitortemperatur",{"_index":92,"text":{"java/annotations/":{}},"title":{}}],["month",{"_index":349,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["monthstr",{"_index":350,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["more",{"_index":160,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["mountain",{"_index":969,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["mountainbik",{"_index":655,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["move",{"_index":862,"text":{"java/java9%26beyond/":{}},"title":{}}],["mr",{"_index":241,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["ms",{"_index":243,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["multi",{"_index":900,"text":{"java/numbers/":{}},"title":{}}],["multilin",{"_index":620,"text":{"java/helloworld/":{}},"title":{}}],["multimap",{"_index":501,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["multipl",{"_index":278,"text":{"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/strings/":{},"java/strings/#why":{}},"title":{"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}}}],["multithread",{"_index":814,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["mut",{"_index":474,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["mutat",{"_index":578,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["myanim",{"_index":741,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["myanimal.testinstancemethod();",{"_index":743,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["mybik",{"_index":657,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{}},"title":{}}],["mycat",{"_index":740,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["myclass",{"_index":63,"text":{"java/annotations/":{}},"title":{}}],["mydeck.sort(",{"_index":795,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["myformatt",{"_index":913,"text":{"java/numbers/":{}},"title":{}}],["myformatter.format(value);",{"_index":916,"text":{"java/numbers/":{}},"title":{}}],["mymethod",{"_index":66,"text":{"java/annotations/":{}},"title":{}}],["myobject",{"_index":78,"text":{"java/annotations/":{}},"title":{}}],["myshapescollection.stream()",{"_index":451,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["mystr",{"_index":80,"text":{"java/annotations/":{}},"title":{}}],["mysupermethod",{"_index":51,"text":{"java/annotations/":{}},"title":{}}],["name",{"_index":56,"text":{"java/annotations/":{},"java/basics/":{},"java/basics/#arrays":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{},"java/packages/#why":{}},"title":{"java/basics/#naming":{},"java/packages/#by-its-qualified-name":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{}}}],["namespac",{"_index":987,"text":{"java/oops/":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["nano",{"_index":701,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["nativ",{"_index":809,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["natur",{"_index":768,"text":{"java/interfaces/":{}},"title":{}}],["necessarili",{"_index":431,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["need",{"_index":1023,"text":{"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["negat",{"_index":290,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["nest",{"_index":648,"text":{"java/inheritance/":{},"java/packages/":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}}}],["network",{"_index":826,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{"java/networking/":{}}}],["neutral",{"_index":816,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["new",{"_index":76,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/basics/":{},"java/basics/#arrays":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/java9%26beyond/":{},"java/numbers/":{},"java/oops/":{},"java/oops/#inheritance":{},"java/packages/":{},"java/packages/#why":{},"java/strings/":{}},"title":{}}],["newvalu",{"_index":978,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["next",{"_index":483,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["non",{"_index":203,"text":{"java/basics/":{},"java/basics/#variables":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["nonnul",{"_index":81,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{}},"title":{}}],["normal",{"_index":603,"text":{"java/exceptions/":{}},"title":{}}],["notat",{"_index":116,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["note",{"_index":2,"text":{"":{},"#abhinavs-notes":{},"java/annotations/":{},"java/annotations/#annotation-type":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/strings/":{},"java/strings/#why":{}},"title":{"#abhinavs-notes":{}}}],["notifi",{"_index":696,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["notifyal",{"_index":697,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["null",{"_index":519,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["num_gear",{"_index":237,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["number",{"_index":287,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/numbers/":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#naming":{}},"title":{"java/numbers/":{}}}],["o",{"_index":477,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["obbject",{"_index":949,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["obj",{"_index":654,"text":{"java/inheritance/":{},"java/inheritance/#casting-objects":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["object",{"_index":315,"text":{"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/exceptions/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#casting-objects":{},"java/inheritance/#constructor-chaining":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#super-keyword":{},"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{},"java/intro/#why":{},"java/numbers/":{},"java/oops/":{},"java/oops/#class":{},"java/oops/#objects":{},"java/oops/#why":{},"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{}},"title":{"java/inheritance/#casting-objects":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#objects":{}}}],["object'",{"_index":713,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["octal",{"_index":891,"text":{"java/numbers/":{}},"title":{}}],["old",{"_index":472,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["omit",{"_index":775,"text":{"java/interfaces/":{}},"title":{}}],["on",{"_index":267,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/packages/":{},"java/packages/#static-import":{},"java/packages/#why":{}},"title":{}}],["onc",{"_index":161,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/intro/":{},"java/intro/#why":{},"java/strings/":{}},"title":{}}],["oper",{"_index":132,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#streamcollect-method":{},"java/collections/#traversing-collections":{},"java/strings/":{}},"title":{"java/basics/#operators":{},"java/collections/#aggregate-operations":{},"java/collections/#aggregate-operations-vs-iterators":{}}}],["operand",{"_index":269,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["operatecar",{"_index":748,"text":{"java/interfaces/":{}},"title":{}}],["option",{"_index":484,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["order",{"_index":178,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["organ",{"_index":667,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#package":{}},"title":{}}],["orient",{"_index":812,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["origin",{"_index":1093,"text":{"java/strings/":{}},"title":{}}],["otherrect",{"_index":779,"text":{"java/interfaces/":{}},"title":{}}],["otherrect.getarea())",{"_index":782,"text":{"java/interfaces/":{}},"title":{}}],["out",{"_index":433,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["output",{"_index":915,"text":{"java/numbers/":{}},"title":{}}],["outsid",{"_index":972,"text":{"java/oops/":{},"java/oops/#interface":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["overrid",{"_index":49,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{"java/inheritance/#overriding-and-hiding-methods":{}}}],["overridden",{"_index":731,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["p.getgender()",{"_index":546,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],["packag",{"_index":638,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/oops/":{},"java/oops/#library":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#by-its-qualified-name":{},"java/packages/#importing-an-entire-package":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{},"java/packages/#static-import":{},"java/packages/#why":{}},"title":{"java/oops/#package":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#importing-a-package-member":{},"java/packages/#importing-an-entire-package":{}}}],["packagesar",{"_index":1031,"text":{"java/packages/":{},"java/packages/#name-ambiguities":{}},"title":{}}],["palindrom",{"_index":1085,"text":{"java/strings/":{}},"title":{}}],["palindrome.charat(i);",{"_index":1095,"text":{"java/strings/":{}},"title":{}}],["palindrome.length();",{"_index":1089,"text":{"java/strings/":{}},"title":{}}],["parallel",{"_index":554,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["parallelsort",{"_index":258,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["paramet",{"_index":208,"text":{"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["parent",{"_index":628,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["part",{"_index":12,"text":{"java/annotations/":{}},"title":{}}],["particular",{"_index":729,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["pass",{"_index":954,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{}}],["path",{"_index":1037,"text":{"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/strings/":{}},"title":{}}],["pathsepar",{"_index":1057,"text":{"java/strings/":{}},"title":{}}],["pattern",{"_index":918,"text":{"java/numbers/":{}},"title":{}}],["peopl",{"_index":745,"text":{"java/interfaces/":{}},"title":{}}],["per",{"_index":975,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["perform",{"_index":397,"text":{"java/collections/":{},"java/intro/":{},"java/intro/#programming-language":{},"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["permit",{"_index":1048,"text":{"java/strings/":{}},"title":{}}],["permut",{"_index":529,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["person.sex.male)",{"_index":547,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#streamcollect-method":{}},"title":{}}],["person::getage,",{"_index":595,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["person::getgender,",{"_index":593,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["pi",{"_index":933,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["place",{"_index":880,"text":{"java/numbers/":{}},"title":{}}],["platform",{"_index":821,"text":{"java/intro/":{},"java/intro/#platform":{},"java/numbers/":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/intro/#platform":{}}}],["plu",{"_index":284,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["plug",{"_index":830,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["pluggabl",{"_index":162,"text":{"java/annotations/":{},"java/oops/":{},"java/oops/#why":{}},"title":{"java/annotations/#type-annotations-and-pluggable-type-systems":{}}}],["polymorph",{"_index":399,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{}},"title":{"java/inheritance/#polymorphism":{}}}],["portabl",{"_index":817,"text":{"java/intro/":{},"java/intro/#programming-language":{},"java/intro/#why":{}},"title":{}}],["posit",{"_index":286,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["possibl",{"_index":201,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["pow",{"_index":943,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["power",{"_index":200,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["practic",{"_index":855,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["precis",{"_index":896,"text":{"java/numbers/":{}},"title":{}}],["primari",{"_index":951,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["primit",{"_index":214,"text":{"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{},"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{}},"title":{}}],["principl",{"_index":665,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["print",{"_index":528,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/strings/":{}},"title":{}}],["printstat",{"_index":985,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["printstream",{"_index":908,"text":{"java/numbers/":{}},"title":{}}],["prior",{"_index":429,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["prioriti",{"_index":435,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["privat",{"_index":372,"text":{"java/basics/":{},"java/basics/#access-modifiers":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#why":{},"java/strings/":{}},"title":{}}],["problem",{"_index":557,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#super-keyword":{}},"title":{}}],["process",{"_index":24,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{}},"title":{}}],["program",{"_index":11,"text":{"java/annotations/":{},"java/basics/":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#why":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"java/strings/":{}},"title":{"java/intro/#programming-language":{}}}],["program'",{"_index":604,"text":{"java/exceptions/":{}},"title":{}}],["programm",{"_index":614,"text":{"java/generics/":{},"java/generics/#why":{}},"title":{}}],["properti",{"_index":436,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["protect",{"_index":636,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/packages/":{}},"title":{}}],["provid",{"_index":9,"text":{"java/annotations/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["public",{"_index":120,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#access-modifiers":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/numbers/":{},"java/packages/":{},"java/packages/#why":{},"java/strings/":{}},"title":{"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}}}],["purpos",{"_index":801,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["put",{"_index":499,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/strings/":{}},"title":{}}],["qualifi",{"_index":1000,"text":{"java/packages/":{},"java/packages/#name-ambiguities":{},"java/packages/#naming":{}},"title":{"java/packages/#by-its-qualified-name":{}}}],["qualiti",{"_index":405,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["queue",{"_index":416,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{}}],["quick",{"_index":871,"text":{"java/java9%26beyond/":{}},"title":{}}],["quickli",{"_index":846,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["radiu",{"_index":753,"text":{"java/interfaces/":{}},"title":{}}],["random",{"_index":946,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["rarer",{"_index":1108,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["re",{"_index":957,"text":{"java/oops/":{},"java/oops/#why":{}},"title":{"java/re/":{}}}],["read",{"_index":498,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["readonli",{"_index":87,"text":{"java/annotations/":{}},"title":{}}],["real",{"_index":948,"text":{"java/oops/":{},"java/oops/#objects":{}},"title":{}}],["reason",{"_index":175,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/java9%26beyond/":{},"java/numbers/":{}},"title":{}}],["recommend",{"_index":643,"text":{"java/inheritance/":{}},"title":{}}],["recompil",{"_index":808,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["rectangl",{"_index":1022,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["rectangleplu",{"_index":778,"text":{"java/interfaces/":{}},"title":{}}],["redeclar",{"_index":792,"text":{"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["redefin",{"_index":793,"text":{"java/interfaces/":{},"java/interfaces/#extending-interfaces-that-contain-default-methods":{}},"title":{}}],["reduc",{"_index":401,"text":{"java/collections/":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{},"java/collections/#why":{}},"title":{}}],["reduct",{"_index":567,"text":{"java/collections/":{}},"title":{"java/collections/#reduction":{}}}],["refer",{"_index":691,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["refernec",{"_index":684,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["region",{"_index":1004,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["regionmatchesdemo",{"_index":1069,"text":{"java/strings/":{}},"title":{}}],["relat",{"_index":298,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#why":{}},"title":{}}],["relationship",{"_index":1028,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["remaind",{"_index":282,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["remot",{"_index":839,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["remov",{"_index":442,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{}},"title":{}}],["repeat",{"_index":40,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{}},"title":{"java/annotations/#repeating-annotations":{}}}],["replac",{"_index":97,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/inheritance/":{},"java/oops/":{},"java/oops/#why":{}},"title":{}}],["repres",{"_index":387,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["represent",{"_index":422,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["requir",{"_index":180,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["reserv",{"_index":234,"text":{"java/basics/":{},"java/basics/#naming":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["restrict",{"_index":994,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["result",{"_index":271,"text":{"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}},"title":{}}],["retain",{"_index":142,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retent",{"_index":136,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retentionpolicy.class",{"_index":146,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retentionpolicy.runtim",{"_index":150,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retentionpolicy.sourc",{"_index":140,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["retriev",{"_index":192,"text":{"java/annotations/":{},"java/collections/":{}},"title":{"java/annotations/#retrieving-annotations":{}}}],["return",{"_index":270,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/strings/":{}},"title":{}}],["reus",{"_index":411,"text":{"java/collections/":{},"java/collections/#why":{}},"title":{}}],["reusabl",{"_index":394,"text":{"java/collections/":{}},"title":{}}],["revers",{"_index":797,"text":{"java/interfaces/":{},"java/interfaces/#static-methods":{},"java/packages/":{},"java/packages/#naming":{},"java/strings/":{}},"title":{}}],["reversepalindrom",{"_index":1098,"text":{"java/strings/":{}},"title":{}}],["review",{"_index":111,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{}},"title":{}}],["revolut",{"_index":974,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["right",{"_index":323,"text":{"java/basics/":{},"java/basics/#operators":{},"java/interfaces/":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{}}],["rint",{"_index":937,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["rmi",{"_index":843,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["robust",{"_index":818,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["root",{"_index":424,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["roster",{"_index":543,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["roster.stream()",{"_index":580,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["round",{"_index":938,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["run",{"_index":336,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["runtim",{"_index":32,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/generics/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["s",{"_index":509,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/numbers/":{}},"title":{}}],["s.next();",{"_index":513,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["s.tochararray();",{"_index":539,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["s1",{"_index":1053,"text":{"java/strings/":{}},"title":{}}],["safevararg",{"_index":129,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["same",{"_index":639,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/interfaces/":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{},"java/packages/#name-ambiguities":{},"java/packages/#why":{}},"title":{}}],["saw",{"_index":1086,"text":{"java/strings/":{}},"title":{}}],["scanner",{"_index":508,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["scanner(new",{"_index":510,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["schedul",{"_index":184,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["search",{"_index":360,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["searchfor",{"_index":365,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["searchm",{"_index":1070,"text":{"java/strings/":{}},"title":{}}],["searchme.length();",{"_index":1076,"text":{"java/strings/":{}},"title":{}}],["searchmelength",{"_index":1075,"text":{"java/strings/":{}},"title":{}}],["second",{"_index":1021,"text":{"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{}},"title":{}}],["section",{"_index":811,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["secur",{"_index":819,"text":{"java/intro/":{},"java/intro/#platform":{},"java/intro/#programming-language":{}},"title":{"java/security/":{}}}],["securityexcept",{"_index":173,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["see",{"_index":708,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["sensit",{"_index":223,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["sep",{"_index":1060,"text":{"java/strings/":{}},"title":{}}],["sequenc",{"_index":226,"text":{"java/basics/":{},"java/basics/#naming":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["set",{"_index":413,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{},"java/oops/":{},"java/oops/#library":{},"java/oops/#package":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{}}],["sever",{"_index":723,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["share",{"_index":671,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#polymorphism":{},"java/interfaces/":{},"java/interfaces/#static-methods":{}},"title":{}}],["shift",{"_index":318,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["short",{"_index":216,"text":{"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{}},"title":{}}],["shorthand",{"_index":310,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["show",{"_index":1030,"text":{"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{}},"title":{}}],["sign",{"_index":321,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["signalon",{"_index":758,"text":{"java/interfaces/":{}},"title":{}}],["signalturn(direct",{"_index":757,"text":{"java/interfaces/":{}},"title":{}}],["signatur",{"_index":645,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{}},"title":{}}],["similar",{"_index":718,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["simpl",{"_index":272,"text":{"java/basics/":{},"java/basics/#operators":{},"java/intro/":{},"java/intro/#programming-language":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{}}],["simpli",{"_index":378,"text":{"java/collections/":{}},"title":{}}],["simul",{"_index":500,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["simultan",{"_index":561,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["sin",{"_index":945,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["singl",{"_index":380,"text":{"java/collections/":{},"java/helloworld/":{}},"title":{}}],["situat",{"_index":721,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["size",{"_index":531,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["small",{"_index":998,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["smaller",{"_index":850,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["smith",{"_index":72,"text":{"java/annotations/":{},"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["softwar",{"_index":25,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#why":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["solut",{"_index":563,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["solv",{"_index":559,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["sometim",{"_index":376,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["sortedmap",{"_index":419,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{}}],["sortedset",{"_index":414,"text":{"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#why":{}},"title":{}}],["sourc",{"_index":143,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#why":{},"java/strings/":{}},"title":{"java/packages/#managing-source-and-class-files":{}}}],["space",{"_index":988,"text":{"java/packages/":{}},"title":{}}],["span",{"_index":1050,"text":{"java/strings/":{}},"title":{}}],["speci",{"_index":668,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["specif",{"_index":266,"text":{"java/basics/":{},"java/basics/#operators":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/packages/#naming":{}},"title":{}}],["specifi",{"_index":137,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["speed",{"_index":404,"text":{"java/collections/":{},"java/collections/#why":{},"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["speedofcar",{"_index":761,"text":{"java/interfaces/":{}},"title":{}}],["speedup(int",{"_index":980,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["sqrt",{"_index":944,"text":{"java/numbers/":{},"java/numbers/#advanced-math":{}},"title":{}}],["stack",{"_index":606,"text":{"java/exceptions/":{}},"title":{}}],["stage",{"_index":669,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["start",{"_index":232,"text":{"java/basics/":{},"java/basics/#naming":{},"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["startspe",{"_index":754,"text":{"java/interfaces/":{}},"title":{}}],["state",{"_index":659,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/oops/":{},"java/oops/#data-encapsulation":{},"java/oops/#objects":{}},"title":{"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}}}],["statement",{"_index":311,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/packages/":{},"java/packages/#import-the-public-nested-classes-of-an-enclosing-class":{},"java/strings/":{}},"title":{"java/basics/#expressions-result9-blocks-statements-":{}}}],["statement(s)",{"_index":355,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["static",{"_index":204,"text":{"java/basics/":{},"java/basics/#variables":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/interfaces/#static-methods":{},"java/numbers/":{},"java/numbers/#advanced-math":{},"java/packages/":{},"java/packages/#static-import":{},"java/strings/":{}},"title":{"java/interfaces/#static-methods":{},"java/packages/#static-import":{}}}],["step",{"_index":803,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["still",{"_index":993,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["stl",{"_index":390,"text":{"java/collections/":{}},"title":{}}],["store",{"_index":139,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/annotations/#repeating-annotations":{},"java/collections/":{}},"title":{}}],["str",{"_index":83,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/strings/":{}},"title":{}}],["stream",{"_index":544,"text":{"java/collections/":{},"java/collections/#aggregate-operations":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#reduction":{},"java/collections/#streamcollect-method":{}},"title":{}}],["stream.collect",{"_index":575,"text":{"java/collections/":{}},"title":{"java/collections/#streamcollect-method":{}}}],["stretch",{"_index":633,"text":{"java/inheritance/":{}},"title":{}}],["string",{"_index":82,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/numbers/":{},"java/strings/":{},"java/strings/#why":{}},"title":{"java/strings/":{}}}],["string(a);",{"_index":541,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["string(chararray);",{"_index":1099,"text":{"java/strings/":{}},"title":{}}],["stringbuff",{"_index":1103,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["stringbuild",{"_index":1101,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["stringdemo",{"_index":1084,"text":{"java/strings/":{}},"title":{}}],["stringvar",{"_index":907,"text":{"java/numbers/":{}},"title":{}}],["stronger",{"_index":35,"text":{"java/annotations/":{},"java/generics/":{},"java/generics/#why":{}},"title":{}}],["strongli",{"_index":995,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["structur",{"_index":967,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["sub",{"_index":156,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["subclass",{"_index":623,"text":{"java/inheritance/":{},"java/inheritance/#abstract-methods-and-classes":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#polymorphism":{},"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["subproblem",{"_index":558,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["subset",{"_index":1017,"text":{"java/packages/":{},"java/packages/#importing-an-entire-package":{}},"title":{}}],["subtract",{"_index":277,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["such",{"_index":630,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#super-keyword":{},"java/numbers/":{}},"title":{}}],["super",{"_index":158,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{"java/inheritance/#super-keyword":{}}}],["super(paramet",{"_index":676,"text":{"java/inheritance/":{},"java/inheritance/#super-keyword":{}},"title":{}}],["superclass",{"_index":626,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#super-keyword":{}},"title":{"java/inheritance/#object-as-superclass":{}}}],["superclass'",{"_index":968,"text":{"java/oops/":{},"java/oops/#inheritance":{}},"title":{}}],["supplement",{"_index":641,"text":{"java/inheritance/":{}},"title":{}}],["supplier",{"_index":582,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["support",{"_index":564,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["suppress",{"_index":20,"text":{"java/annotations/":{}},"title":{}}],["swing",{"_index":834,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["switch",{"_index":348,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["symbol",{"_index":685,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["synchron",{"_index":1105,"text":{"java/strings/":{},"java/strings/#why":{}},"title":{}}],["system",{"_index":163,"text":{"java/annotations/":{},"java/numbers/":{},"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{}},"title":{"java/annotations/#type-annotations-and-pluggable-type-systems":{}}}],["system.arraycopy(copyfrom,",{"_index":247,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["system.err.println(e);",{"_index":526,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.exit(1);",{"_index":527,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.format(\"th",{"_index":903,"text":{"java/numbers/":{}},"title":{}}],["system.out.printf(...)",{"_index":902,"text":{"java/numbers/":{}},"title":{}}],["system.out.println(\"averag",{"_index":585,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["system.out.println(\"cadence:\"",{"_index":986,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["system.out.println(\"found",{"_index":368,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["system.out.println(\"hello",{"_index":617,"text":{"java/helloworld/":{}},"title":{}}],["system.out.println(\"no",{"_index":1082,"text":{"java/strings/":{}},"title":{}}],["system.out.println(\"th",{"_index":737,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["system.out.println(e.getname()));",{"_index":456,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.println(java.util.arrays.tostring(copyto))",{"_index":265,"text":{"java/basics/":{},"java/basics/#javautilarrays":{}},"title":{}}],["system.out.println(l.size()",{"_index":536,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.println(o);",{"_index":479,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["system.out.println(reversepalindrome);",{"_index":1100,"text":{"java/strings/":{}},"title":{}}],["system.out.println(searchfor",{"_index":369,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["system.out.println(searchme.substring(i,",{"_index":1081,"text":{"java/strings/":{}},"title":{}}],["system.out.println(valu",{"_index":917,"text":{"java/numbers/":{}},"title":{}}],["t",{"_index":89,"text":{"java/annotations/":{}},"title":{}}],["take",{"_index":552,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["target",{"_index":154,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["technolog",{"_index":828,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["tempchararrai",{"_index":1090,"text":{"java/strings/":{}},"title":{}}],["tempchararray[i]",{"_index":1094,"text":{"java/strings/":{}},"title":{}}],["tempchararray[len",{"_index":1097,"text":{"java/strings/":{}},"title":{}}],["temperatureexcept",{"_index":95,"text":{"java/annotations/":{}},"title":{}}],["termin",{"_index":357,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["ternari",{"_index":309,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["test",{"_index":707,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["testclassmethod",{"_index":736,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["testinstancemethod",{"_index":738,"text":{"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["testscor",{"_index":341,"text":{"java/basics/":{},"java/basics/#control-flow":{}},"title":{}}],["therefor",{"_index":651,"text":{"java/inheritance/":{}},"title":{}}],["those",{"_index":560,"text":{"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{}},"title":{}}],["thread",{"_index":901,"text":{"java/numbers/":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["three",{"_index":268,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["threshold",{"_index":532,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["through",{"_index":963,"text":{"java/oops/":{},"java/oops/#data-encapsulation":{}},"title":{}}],["throw",{"_index":93,"text":{"java/annotations/":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/exceptions/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["throwabl",{"_index":687,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["thrown",{"_index":90,"text":{"java/annotations/":{}},"title":{}}],["thu",{"_index":642,"text":{"java/inheritance/":{}},"title":{}}],["time",{"_index":22,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#super-keyword":{},"java/intro/":{},"java/intro/#why":{}},"title":{}}],["timeout",{"_index":700,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["tod",{"_index":1087,"text":{"java/strings/":{}},"title":{}}],["todo",{"_index":133,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{},"java/java9%26beyond/":{}},"title":{}}],["tool",{"_index":26,"text":{"java/annotations/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["toolkit",{"_index":832,"text":{"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["top",{"_index":337,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/intro/":{},"java/intro/#platform":{},"java/packages/":{},"java/packages/#why":{}},"title":{}}],["topmost",{"_index":629,"text":{"java/inheritance/":{}},"title":{}}],["tostr",{"_index":695,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["total",{"_index":462,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["totalagebygend",{"_index":591,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["totalagereduc",{"_index":569,"text":{"java/collections/":{},"java/collections/#reduction":{}},"title":{}}],["travers",{"_index":446,"text":{"java/collections/":{}},"title":{"java/collections/#traversing-collections":{}}}],["true",{"_index":367,"text":{"java/basics/":{},"java/basics/#control-flow":{},"java/strings/":{}},"title":{}}],["try",{"_index":507,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["turn(direct",{"_index":751,"text":{"java/interfaces/":{}},"title":{}}],["two",{"_index":179,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/packages/":{},"java/packages/#static-import":{}},"title":{}}],["type",{"_index":36,"text":{"java/annotations/":{},"java/annotations/#design-considerations":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/basics/#variables":{},"java/collections/":{},"java/generics/":{},"java/generics/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/inheritance/#virtual-method-invocation":{},"java/numbers/":{},"java/packages/":{},"java/packages/#importing-an-entire-package":{},"java/packages/#name-ambiguities":{},"java/packages/#why":{}},"title":{"java/annotations/#annotation-type":{},"java/annotations/#type-annotations-and-pluggable-type-systems":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}}}],["typic",{"_index":430,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["unari",{"_index":283,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["unauthorizedaccessexcept",{"_index":172,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{}},"title":{}}],["unbox",{"_index":1110,"text":{"java/strings/":{},"java/strings/#autoboxing-and-unboxing":{}},"title":{"java/strings/#autoboxing-and-unboxing":{}}}],["uncheck",{"_index":65,"text":{"java/annotations/":{}},"title":{}}],["underli",{"_index":476,"text":{"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["underscor",{"_index":1009,"text":{"java/packages/":{},"java/packages/#naming":{}},"title":{}}],["unicod",{"_index":227,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["unifi",{"_index":385,"text":{"java/collections/":{}},"title":{}}],["uniqu",{"_index":670,"text":{"java/inheritance/":{},"java/inheritance/#polymorphism":{}},"title":{}}],["unit",{"_index":381,"text":{"java/collections/":{}},"title":{}}],["unless",{"_index":997,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["unlik",{"_index":576,"text":{"java/collections/":{},"java/collections/#streamcollect-method":{}},"title":{}}],["unlimit",{"_index":224,"text":{"java/basics/":{},"java/basics/#naming":{}},"title":{}}],["unmodifiablelist<t>",{"_index":86,"text":{"java/annotations/":{}},"title":{}}],["unrel",{"_index":407,"text":{"java/collections/":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["unrestrict",{"_index":991,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["unsaf",{"_index":131,"text":{"java/annotations/":{},"java/annotations/#java-inbuilt":{}},"title":{}}],["unsign",{"_index":324,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["up",{"_index":866,"text":{"java/java9%26beyond/":{}},"title":{}}],["upper",{"_index":886,"text":{"java/numbers/":{}},"title":{}}],["us",{"_index":17,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#meta-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#aggregate-operations-vs-iterators":{},"java/collections/#interfaces":{},"java/collections/#traversing-collections":{},"java/collections/#why":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/intro/":{},"java/intro/#programming-language":{},"java/numbers/":{},"java/oops/":{},"java/oops/#why":{},"java/packages/":{},"java/packages/#apparent-hierarchies-of-packages":{},"java/packages/#by-its-qualified-name":{},"java/packages/#importing-an-entire-package":{},"java/packages/#name-ambiguities":{},"java/strings/":{},"java/strings/#why":{}},"title":{}}],["usag",{"_index":1012,"text":{"java/packages/":{}},"title":{"java/packages/#usage":{}}}],["user",{"_index":663,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["valu",{"_index":191,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#operators":{},"java/collections/":{},"java/collections/#interfaces":{},"java/collections/#streamcollect-method":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/interfaces/":{},"java/numbers/":{}},"title":{}}],["vararg",{"_index":375,"text":{"java/classes/":{}},"title":{}}],["variabl",{"_index":202,"text":{"java/basics/":{},"java/basics/#variables":{},"java/numbers/":{},"java/oops/":{},"java/oops/#objects":{},"java/packages/":{},"java/packages/#managing-source-and-class-files":{},"java/strings/":{},"java/strings/#why":{}},"title":{"java/basics/":{},"java/basics/#variables":{}}}],["variable'",{"_index":673,"text":{"java/inheritance/":{},"java/inheritance/#virtual-method-invocation":{}},"title":{}}],["vector",{"_index":427,"text":{"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}],["veri",{"_index":1052,"text":{"java/strings/":{}},"title":{}}],["version",{"_index":473,"text":{"java/collections/":{},"java/collections/#traversing-collections":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/java9%26beyond/":{}},"title":{}}],["virtual",{"_index":147,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{},"java/inheritance/":{}},"title":{"java/inheritance/#virtual-method-invocation":{}}}],["void",{"_index":50,"text":{"java/annotations/":{},"java/annotations/#repeating-annotations":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/oops/":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["vs",{"_index":550,"text":{"java/collections/":{},"java/inheritance/":{},"java/java9%26beyond/":{}},"title":{"java/collections/#aggregate-operations-vs-iterators":{},"java/inheritance/#abstract-classes-vs-interface":{}}}],["wai",{"_index":678,"text":{"java/inheritance/":{},"java/inheritance/#constructor-chaining":{}},"title":{}}],["wait",{"_index":698,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["wait(long",{"_index":699,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["want",{"_index":722,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["warn",{"_index":21,"text":{"java/annotations/":{}},"title":{}}],["web",{"_index":829,"text":{"java/intro/":{},"java/intro/#platform":{},"java/intro/#why":{}},"title":{}}],["well",{"_index":702,"text":{"java/inheritance/":{},"java/inheritance/#object-as-superclass":{}},"title":{}}],["wheel",{"_index":973,"text":{"java/oops/":{},"java/oops/#interface":{}},"title":{}}],["wherea",{"_index":720,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{}},"title":{}}],["whether",{"_index":683,"text":{"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/inheritance/#object-as-superclass":{},"java/inheritance/#overriding-and-hiding-methods":{}},"title":{}}],["whitepap",{"_index":820,"text":{"java/intro/":{},"java/intro/#programming-language":{}},"title":{}}],["whole",{"_index":677,"text":{"java/inheritance/":{},"java/inheritance/#constructor-chaining":{}},"title":{}}],["within",{"_index":373,"text":{"java/basics/":{},"java/basics/#access-modifiers":{}},"title":{}}],["without",{"_index":288,"text":{"java/basics/":{},"java/basics/#operators":{},"java/inheritance/":{},"java/inheritance/#abstract-classes-vs-interface":{},"java/strings/":{}},"title":{}}],["won't",{"_index":990,"text":{"java/packages/":{},"java/packages/#why":{}},"title":{}}],["word",{"_index":235,"text":{"java/basics/":{},"java/basics/#naming":{},"java/collections/":{},"java/collections/#traversing-collections":{}},"title":{}}],["world",{"_index":618,"text":{"java/helloworld/":{},"java/oops/":{},"java/oops/#interface":{},"java/oops/#objects":{}},"title":{}}],["worri",{"_index":662,"text":{"java/inheritance/":{},"java/inheritance/#multiple-inheritance-of-state-implementation-and-type":{}},"title":{}}],["wrap",{"_index":882,"text":{"java/numbers/":{}},"title":{}}],["wrapper",{"_index":881,"text":{"java/numbers/":{}},"title":{}}],["write",{"_index":644,"text":{"java/inheritance/":{},"java/intro/":{},"java/intro/#why":{},"java/packages/":{},"java/packages/#by-its-qualified-name":{}},"title":{}}],["written",{"_index":851,"text":{"java/intro/":{},"java/intro/#why":{}},"title":{}}],["x",{"_index":772,"text":{"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{}},"title":{}}],["xml",{"_index":29,"text":{"java/annotations/":{},"java/intro/":{},"java/intro/#platform":{}},"title":{}}],["{",{"_index":52,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#arrays":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["{}.",{"_index":207,"text":{"java/basics/":{},"java/basics/#variables":{}},"title":{}}],["|",{"_index":328,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["||",{"_index":307,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["}",{"_index":54,"text":{"java/annotations/":{},"java/annotations/#annotation-type":{},"java/annotations/#repeating-annotations":{},"java/basics/":{},"java/basics/#control-flow":{},"java/collections/":{},"java/collections/#traversing-collections":{},"java/helloworld/":{},"java/inheritance/":{},"java/inheritance/#overriding-and-hiding-methods":{},"java/interfaces/":{},"java/interfaces/#evolving-interfaces":{},"java/oops/":{},"java/oops/#inheritance":{},"java/oops/#interface":{},"java/strings/":{}},"title":{}}],["};",{"_index":246,"text":{"java/basics/":{},"java/basics/#arrays":{}},"title":{}}],["~",{"_index":319,"text":{"java/basics/":{},"java/basics/#operators":{}},"title":{}}],["\u00b6",{"_index":3,"text":{"":{},"java/annotations/":{},"java/basics/":{},"java/collections/":{},"java/generics/":{},"java/inheritance/":{},"java/interfaces/":{},"java/intro/":{},"java/numbers/":{},"java/oops/":{},"java/packages/":{},"java/strings/":{}},"title":{}}],["\u2013",{"_index":141,"text":{"java/annotations/":{},"java/annotations/#meta-annotations":{}},"title":{}}],["\u2014",{"_index":16,"text":{"java/annotations/":{},"java/collections/":{},"java/collections/#interfaces":{}},"title":{}}]],"pipeline":["stemmer"],"version":"2.3.8"}}